language: sh
name: HumanEval_86_anti_shuffle
results:
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        local char=\"${string:$i:1}\"\
    \n        local next_char=\"${string:$(($i+1)):1}\"\n        if [[ $char == \"\
    \ \" ]]; then\n            (( j++ ))\n        fi\n        if [[ $char == \" \"\
    \ ]]; then\n            (( i++ ))\n        fi\n        if [[ $char == \" \" ]];\
    \ then\n            (( j-- ))\n        fi\n        if [[ $char == \" \" ]]; then\n\
    \            (( i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n  \
    \          (( j++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n    \
    \        (( i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n      \
    \      (( j-- ))\n        fi\n        if [[ $char == \" \" ]]; then\n        \
    \    (( i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n          \
    \  (( j-- ))\n        fi\n        if [[ $char == \" \" ]]; then\n            ((\
    \ i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n            (( j++\
    \ ))\n        fi\n        if [[ $char == \" \" ]]; then\n            (( i++ ))\n\
    \        fi\n        if [[ $char == \" \" ]]; then\n            (( j-- ))\n  \
    \      fi\n        if [[ $char == \" \" ]]; then\n            (( i++ ))\n    \
    \    fi\n        if [[ $char == \" \" ]]; then\n            (( j-- ))\n      \
    \  fi\n        if [[ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n\
    \        if [[ $char == \" \" ]]; then\n            (( j-- ))\n        fi\n  \
    \      if [[ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n    \
    \    if [[ $char == \" \" ]]; then\n            (( j-- ))\n        fi\n      \
    \  if [[ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n        if\
    \ [[ $char == \" \" ]]; then\n            (( j-- ))\n        fi\n        if [[\
    \ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n        if [[ $char\
    \ == \" \" ]]; then\n            (( j-- ))\n        fi\n        if [[ $char ==\
    \ \" \" ]]; then\n            (( i++ ))\n        fi\n        if [[ $char == \"\
    \ \" ]]; then\n            (( j-- ))\n        fi\n        if [[ $char == \" \"\
    \ \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0mvevj01.sh: line 92: syntax error in conditional expression

    /tmp/tmp0mvevj01.sh: line 93: syntax error near `}''

    /tmp/tmp0mvevj01.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local words=$string\n\
    \    local space=\"\"\n    local count=0\n    while [[ $words != \"\" ]]; do\n\
    \        local word=${words//[[:space:]]/}\n        local word_ascii=$(echo $word\
    \ | tr -d '[:space:]')\n        if [[ $word_ascii > 96 ]]; then\n            local\
    \ new_word=$(echo $word | tr -d '[:space:]')\n            local new_word_ascii=$(echo\
    \ $new_word | tr -d '[:space:]')\n            local new_word_ascii=$(echo $new_word\
    \ | tr -d '[:space:]')\n            local new_word_ascii=$(echo $new_word | tr\
    \ -d '[:space:]')\n            local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n\
    \            local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n    \
    \        local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n        \
    \    local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n            local\
    \ new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n            local new_word_ascii=$(echo\
    \ $new_word | tr -d '[:space:]')\n            local new_word_ascii=$(echo $new_word\
    \ | tr -d '[:space:]')\n            local new_word_ascii=$(echo $new_word | tr\
    \ -d '[:space:]')\n            local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n\
    \            local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n    \
    \        local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n        \
    \    local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n            local\
    \ new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n            local new_word_ascii=$(echo\
    \ $new_word | tr -d '[:space:]')\n            local new_word_ascii=$(echo $new_word\
    \ | tr -d '[:space:]')\n            local new_word_ascii=$(echo $new_word | tr\
    \ -d '[:space:]')\n            local new_word_ascii=$(echo $new_word | tr -d '[:space:]')\n\
    \            local new_word_ascii=$(echo $new_word | tr -d \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprv0kgyl7.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmprv0kgyl7.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$(($i+1)):1}\n        if [ $char -lt $next_char\
    \ ]; then\n            new_string=$new_string$char\n            i=$(($i+1))\n\
    \        else\n            new_string=$new_string$next_char\n            j=$(($j+1))\n\
    \        fi\n    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660033041
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_array=(\
    \ $string )\n  local word_count=0\n  local word_index=0\n  local word_length=0\n\
    \  local word_character\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        if [ $char_value -lt 97 ] || [ $char_value -gt 122 ]; then\n        \
    \    char_value=$(( $char_value + 32 ))\n        fi\n        local new_char=$char_value\n\
    \        if [ $i -eq 0 ]; then\n            new_char=$char\n        fi\n     \
    \   if [ $i -eq 1 ]; then\n            new_char=$char\n        fi\n        if\
    \ [ $i -eq 2 ]; then\n            new_char=$char\n        fi\n        if [ $i\
    \ -eq 3 ]; then\n            new_char=$char\n        fi\n        if [ $i -eq 4\
    \ ]; then\n            new_char=$char\n        fi\n        if [ $i -eq 5 ]; then\n\
    \            new_char=$char\n        fi\n        if [ $i -eq 6 ]; then\n     \
    \       new_char=$char\n        fi\n        if [ $i -eq 7 ]; then\n          \
    \  new_char=$char\n        fi\n        if [ $i -eq 8 ]; then\n            new_char=$char\n\
    \        fi\n        if [ $i -eq 9 ]; then\n            new_char=$char\n     \
    \   fi\n        if [ $i -eq 10 ]; then\n            new_char=$char\n        fi\n\
    \        if [ $i -eq 11 ]; then\n            new_char=$char\n        fi\n    \
    \    if [ $i -eq 12 ]; then\n            new_char=$char\n        fi\n        if\
    \ [ $i -eq 13 ]; then\n            new_char=$char\n        fi\n        if [ $i\
    \ -eq 14 ]; then\n            new_char=$char\n        fi\n        if [ $i -eq\
    \ 15 ]; then\n            new_char=$char\n        fi\n        if [ $i -eq 16 ];\
    \ then\n            new_char=$char\n        fi\n        if [ $i -eq 17 ]; then\n\
    \            new_char=$char\n        fi\n        if [ $i -eq 18 ]; then\n    \
    \        new_char=$char\n        fi\n        if [ $i -eq 19 ]; then\n        \
    \    new_char=$char\n        fi\n        if [ $i -eq 20 ]; then\n            new_char=$char\n\
    \        fi\n        if [ $i -eq 21 ]; then\n            new_char=$char\n    \
    \    fi\n        if [ $i -eq 22 ]; then\n            new_char=$char\n        fi\n\
    \        if [ $i -eq 23 ]; then\n            new_char=$char\n        fi\n    \
    \    if [ $i \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp85sftog8.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmp85sftog8.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word\n\
    \  local i\n  local j\n  local length\n  local new_length\n  local char\n  local\
    \ char_ascii\n  local char_ascii2\n  local char_ascii3\n  local char_ascii4\n\
    \  local char_ascii5\n  local char_ascii6\n  local char_ascii7\n  local char_ascii8\n\
    \  local char_ascii9\n  local char_ascii10\n  local char_ascii11\n  local char_ascii12\n\
    \  local char_ascii13\n  local char_ascii14\n  local char_ascii15\n  local char_ascii16\n\
    \  local char_ascii17\n  local char_ascii18\n  local char_ascii19\n  local char_ascii20\n\
    \  local char_ascii21\n  local char_ascii22\n  local char_ascii23\n  local char_ascii24\n\
    \  local char_ascii25\n  local char_ascii26\n  local char_ascii27\n  local char_ascii28\n\
    \  local char_ascii29\n  local char_ascii30\n  local char_ascii31\n  local char_ascii32\n\
    \  local char_ascii33\n  local char_ascii34\n  local char_ascii35\n  local char_ascii36\n\
    \  local char_ascii37\n  local char_ascii38\n  local char_ascii39\n  local char_ascii40\n\
    \  local char_ascii41\n  local char_ascii42\n  local char_ascii43\n  local char_ascii44\n\
    \  local char_ascii45\n  local char_ascii46\n  local char_ascii47\n  local char_ascii48\n\
    \  local char_ascii49\n  local char_ascii50\n  local char_ascii51\n  local char_ascii52\n\
    \  local char_ascii53\n  local char_ascii54\n  local char_ascii55\n  local char_ascii56\n\
    \  local char_ascii57\n  local char_ascii58\n  local char_ascii59\n  local char_ascii60\n\
    \  local char_ascii61\n  local char_ascii62\n  local char_ascii63\n  local char_ascii64\n\
    \  local char_ascii65\n  local char_ascii66\n  local char_ascii67\n  local char_ascii68\n\
    \  local char_ascii69\n  local char_ascii70\n  local char_ascii71\n  local char_ascii72\n\
    \  local char_ascii73\n  local char_ascii74\n  local char_ascii75\n  local char_ascii76\n\
    \  local char_ascii77\n  local char_ascii78\n  local char_ascii79\n  local \n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local length\n  local word\n  local new_word\n  local char\n  local\
    \ char_ascii\n  local char_ascii2\n  local char_ascii3\n  local char_ascii4\n\
    \  local char_ascii5\n  local char_ascii6\n  local char_ascii7\n  local char_ascii8\n\
    \  local char_ascii9\n  local char_ascii10\n  local char_ascii11\n  local char_ascii12\n\
    \  local char_ascii13\n  local char_ascii14\n  local char_ascii15\n  local char_ascii16\n\
    \  local char_ascii17\n  local char_ascii18\n  local char_ascii19\n  local char_ascii20\n\
    \  local char_ascii21\n  local char_ascii22\n  local char_ascii23\n  local char_ascii24\n\
    \  local char_ascii25\n  local char_ascii26\n  local char_ascii27\n  local char_ascii28\n\
    \  local char_ascii29\n  local char_ascii30\n  local char_ascii31\n  local char_ascii32\n\
    \  local char_ascii33\n  local char_ascii34\n  local char_ascii35\n  local char_ascii36\n\
    \  local char_ascii37\n  local char_ascii38\n  local char_ascii39\n  local char_ascii40\n\
    \  local char_ascii41\n  local char_ascii42\n  local char_ascii43\n  local char_ascii44\n\
    \  local char_ascii45\n  local char_ascii46\n  local char_ascii47\n  local char_ascii48\n\
    \  local char_ascii49\n  local char_ascii50\n  local char_ascii51\n  local char_ascii52\n\
    \  local char_ascii53\n  local char_ascii54\n  local char_ascii55\n  local char_ascii56\n\
    \  local char_ascii57\n  local char_ascii58\n  local char_ascii59\n  local char_ascii60\n\
    \  local char_ascii61\n  local char_ascii62\n  local char_ascii63\n  local char_ascii64\n\
    \  local char_ascii65\n  local char_ascii66\n  local char_ascii67\n  local char_ascii68\n\
    \  local char_ascii69\n  local char_ascii70\n  local char_ascii71\n  local char_ascii72\n\
    \  local char_ascii73\n  local char_ascii74\n  local char_ascii75\n  local char_ascii76\n\
    \  local char_ascii77\n  local char_ascii78\n  local char_ascii79\n  local \n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_space=\"\"\n  local new_blank=\"\"\n  local new_tab=\"\"\n  local\
    \ new_newline=\"\"\n  local new_carriage=\"\"\n  local new_linefeed=\"\"\n  local\
    \ new_paragraph=\"\"\n  local new_line=\"\"\n  local new_word=\"\"\n  local new_blank=\"\
    \"\n  local new_tab=\"\"\n  local new_newline=\"\"\n  local new_carriage=\"\"\n\
    \  local new_linefeed=\"\"\n  local new_paragraph=\"\"\n  local new_line=\"\"\n\
    \  local new_word=\"\"\n  local new_blank=\"\"\n  local new_tab=\"\"\n  local\
    \ new_newline=\"\"\n  local new_carriage=\"\"\n  local new_linefeed=\"\"\n  local\
    \ new_paragraph=\"\"\n  local new_line=\"\"\n  local new_word=\"\"\n  local new_blank=\"\
    \"\n  local new_tab=\"\"\n  local new_newline=\"\"\n  local new_carriage=\"\"\n\
    \  local new_linefeed=\"\"\n  local new_paragraph=\"\"\n  local new_line=\"\"\n\
    \  local new_word=\"\"\n  local new_blank=\"\"\n  local new_tab=\"\"\n  local\
    \ new_newline=\"\"\n  local new_carriage=\"\"\n  local new_linefeed=\"\"\n  local\
    \ new_paragraph=\"\"\n  local new_line=\"\"\n  local new_word=\"\"\n  local new_blank=\"\
    \"\n  local new_tab=\"\"\n  local new_newline=\"\"\n  local new_carriage=\"\"\n\
    \  local new_linefeed=\"\"\n  local new_paragraph=\"\"\n  local new_line=\"\"\n\
    \  local new_word=\"\"\n  local new_blank=\"\"\n  local new_tab=\"\"\n  local\
    \ new_newline=\"\"\n  local new_carriage=\"\"\n  local new_linefeed=\"\"\n  local\
    \ new_paragraph=\"\"\n  local new_line=\"\"\n  local new_word=\"\"\n  local new_blank=\"\
    \"\n  local new_tab=\"\"\n  local new_newline=\"\"\n  local new_carriage=\"\"\n\
    \  local new_linefeed=\"\"\n  local new_paragraph=\"\"\n  local new_line=\"\"\n\
    \  local new_word=\"\"\n  local new_blank=\"\"\n  local new_tab=\"\"\n  local\
    \ new_newline=\"\"\n  local new_carriage=\"\"\n  local new_linefeed=\"\"\n  local\
    \ new_paragraph=\"\"\n  local new_line=\"\"\n  local new_word=\"\"\n  local new_blank=\"\
    \"\n  local new_tab=\"\"\n  local new_newline=\"\"\n  local new_carriage=\"\"\n\
    \  local new_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local\
    \ B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local\
    \ H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local\
    \ N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local\
    \ T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local\
    \ Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local\
    \ D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local\
    \ J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local\
    \ P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local\
    \ V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n \
    \ local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_value=0\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_space=\"\"\n  local new_letter=\"\"\n  local new_letter2=\"\"\n\
    \  local new_letter3=\"\"\n  local new_letter4=\"\"\n  local new_letter5=\"\"\n\
    \  local new_letter6=\"\"\n  local new_letter7=\"\"\n  local new_letter8=\"\"\n\
    \  local new_letter9=\"\"\n  local new_letter10=\"\"\n  local new_letter11=\"\"\
    \n  local new_letter12=\"\"\n  local new_letter13=\"\"\n  local new_letter14=\"\
    \"\n  local new_letter15=\"\"\n  local new_letter16=\"\"\n  local new_letter17=\"\
    \"\n  local new_letter18=\"\"\n  local new_letter19=\"\"\n  local new_letter20=\"\
    \"\n  local new_letter21=\"\"\n  local new_letter22=\"\"\n  local new_letter23=\"\
    \"\n  local new_letter24=\"\"\n  local new_letter25=\"\"\n  local new_letter26=\"\
    \"\n  local new_letter27=\"\"\n  local new_letter28=\"\"\n  local new_letter29=\"\
    \"\n  local new_letter30=\"\"\n  local new_letter31=\"\"\n  local new_letter32=\"\
    \"\n  local new_letter33=\"\"\n  local new_letter34=\"\"\n  local new_letter35=\"\
    \"\n  local new_letter36=\"\"\n  local new_letter37=\"\"\n  local new_letter38=\"\
    \"\n  local new_letter39=\"\"\n  local new_letter40=\"\"\n  local new_letter41=\"\
    \"\n  local new_letter42=\"\"\n  local new_letter43=\"\"\n  local new_letter44=\"\
    \"\n  local new_letter45=\"\"\n  local new_letter46=\"\"\n  local new_letter47=\"\
    \"\n  local new_letter48=\"\"\n  local new_letter49=\"\"\n  local new_letter50=\"\
    \"\n  local new_letter51=\"\"\n  local new_letter52=\"\"\n  local new_letter53=\"\
    \"\n  local new_letter54=\"\"\n  local new_letter55=\"\"\n  local new_letter56=\"\
    \"\n  local new_letter57=\"\"\n  local new_letter58=\"\"\n  local new_letter59=\"\
    \"\n  local new_letter60=\"\"\n  local new_letter61=\"\"\n  local new_letter62=\"\
    \"\n  local new_letter63=\"\"\n  local new_letter64=\"\"\n  local new_letter65=\"\
    \"\n  local new_letter66=\"\"\n  local new_letter67=\"\"\n  local new_letter68=\"\
    \"\n  local new_letter69=\"\"\n  local new_letter70=\"\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_start=0\n  local word_end=0\n\
    \  local word_character\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_start\n  local word_character_end\n\
    \  local word_character_length\n  local word_character_count\n  local word_character_start\n\
    \  local word_character_end\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_start\n  local word_character_end\n\
    \  local word_character_length\n  local word_character_count\n  local word_character_start\n\
    \  local word_character_end\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_start\n  local word_character_end\n\
    \  local word_character_length\n  local word_character_count\n  local word_character_start\n\
    \  local word_character_end\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_start\n  local word_character_end\n\
    \  local word_character_length\n  local word_character_count\n  local word_character_start\n\
    \  local word_character_end\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_start\n  local word_character_end\n\
    \  local word_character_length\n  local word_character_count\n  local word_character_start\n\
    \  local word_character_end\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_start\n  local word_character_end\n\
    \  local word_character_length\n  local word_character_count\n  local word_character_start\n\
    \  local word_character_end\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_length\n\
    \  local word_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local length=\"${#string}\"\n  local count=0\n  local char\n  while [\
    \ \"$i\" -lt \"$length\" ]; do\n    char=\"${string:$i:1}\"\n    if [ \"$char\"\
    \ == \" \" ]; then\n      count=$((count+1))\n      new_string=\"$new_string \"\
    \n    elif [ \"$char\" == \".\" ]; then\n      count=$((count+1))\n      new_string=\"\
    $new_string \"\n    elif [ \"$char\" == \"!\" ]; then\n      count=$((count+1))\n\
    \      new_string=\"$new_string \"\n    elif [ \"$char\" == \"?\" ]; then\n  \
    \    count=$((count+1))\n      new_string=\"$new_string \"\n    elif [ \"$char\"\
    \ == \"-\" ]; then\n      count=$((count+1))\n      new_string=\"$new_string \"\
    \n    elif [ \"$char\" == \"_\" ]; then\n      count=$((count+1))\n      new_string=\"\
    $new_string \"\n    elif [ \"$char\" == \"/\" ]; then\n      count=$((count+1))\n\
    \      new_string=\"$new_string \"\n    elif [ \"$char\" == \"\\\\\" ]; then\n\
    \      count=$((count+1))\n      new_string=\"$new_string \"\n    elif [ \"$char\"\
    \ == \"^\" ]; then\n      count=$((count+1))\n      new_string=\"$new_string \"\
    \n    elif [ \"$char\" == \"$\" ]; then\n      count=$((count+1))\n      new_string=\"\
    $new_string \"\n    elif [ \"$char\" == \"&\" ]; then\n      count=$((count+1))\n\
    \      new_string=\"$new_string \"\n    elif [ \"$char\" == \"*\" ]; then\n  \
    \    count=$((count+1))\n      new_string=\"$new_string \"\n    elif [ \"$char\"\
    \ == \"(\" ]; then\n      count=$((count+1))\n      new_string=\"$new_string \"\
    \n    elif [ \"$char\" == \")\" ]; then\n      count=$((count+1))\n      new_string=\"\
    $new_string \"\n    elif [ \"$char\" == \"+\" ]; then\n      count=$((count+1))\n\
    \      new_string=\"$new_string \"\n    elif [ \"$char\" == \"=\" ]; then\n  \
    \    count=$((count+1))\n      new_string=\"$new_string \"\n    elif [ \"$char\"\
    \ == \"|\" ]; then\n      count=$((count+1))\n      new_string=\"$new_string \"\
    \n    elif [ \"$char\" == \"~\" ]; then\n      count=$((count+1))\n      new_string=\"\
    $new_string \"\n    elif [ \"$char\" == \"<\" ]; then\n      count=$((count+1))\n\
    \      new_string=\"$new_string \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5fw2wrr2.sh: line 90: unexpected EOF while looking for matching
    `"''

    /tmp/tmp5fw2wrr2.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local count=0\n  local count2=0\n  local count3=0\n  local count4=0\n  local\
    \ count5=0\n  local count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n\
    \  local count10=0\n  local count11=0\n  local count12=0\n  local count13=0\n\
    \  local count14=0\n  local count15=0\n  local count16=0\n  local count17=0\n\
    \  local count18=0\n  local count19=0\n  local count20=0\n  local count21=0\n\
    \  local count22=0\n  local count23=0\n  local count24=0\n  local count25=0\n\
    \  local count26=0\n  local count27=0\n  local count28=0\n  local count29=0\n\
    \  local count30=0\n  local count31=0\n  local count32=0\n  local count33=0\n\
    \  local count34=0\n  local count35=0\n  local count36=0\n  local count37=0\n\
    \  local count38=0\n  local count39=0\n  local count40=0\n  local count41=0\n\
    \  local count42=0\n  local count43=0\n  local count44=0\n  local count45=0\n\
    \  local count46=0\n  local count47=0\n  local count48=0\n  local count49=0\n\
    \  local count50=0\n  local count51=0\n  local count52=0\n  local count53=0\n\
    \  local count54=0\n  local count55=0\n  local count56=0\n  local count57=0\n\
    \  local count58=0\n  local count59=0\n  local count60=0\n  local count61=0\n\
    \  local count62=0\n  local count63=0\n  local count64=0\n  local count65=0\n\
    \  local count66=0\n  local count67=0\n  local count68=0\n  local count69=0\n\
    \  local count70=0\n  local count71=0\n  local count72=0\n  local count73=0\n\
    \  local count74=0\n  local count75=0\n  local count76=0\n  local count77=0\n\
    \  local count78=0\n  local count79=0\n  local count80=0\n  local count81=0\n\
    \  local count82=0\n  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local new_count=0\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$string\n\
    \  local space=\"\"\n  local count=0\n  local count2=0\n  local count3=0\n  local\
    \ count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local count8=0\n\
    \  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n \
    \ local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n \
    \ local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n \
    \ local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n \
    \ local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n \
    \ local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n \
    \ local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n \
    \ local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n \
    \ local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n \
    \ local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n \
    \ local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n \
    \ local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n \
    \ local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n \
    \ local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n \
    \ local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n \
    \ local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n \
    \ local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n \
    \ local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n \
    \ local count81=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local len\n  local word\n  local char\n  local count\n\
    \  local char_count\n  local char_index\n  local char_index2\n  local char_index3\n\
    \  local char_index4\n  local char_index5\n  local char_index6\n  local char_index7\n\
    \  local char_index8\n  local char_index9\n  local char_index10\n  local char_index11\n\
    \  local char_index12\n  local char_index13\n  local char_index14\n  local char_index15\n\
    \  local char_index16\n  local char_index17\n  local char_index18\n  local char_index19\n\
    \  local char_index20\n  local char_index21\n  local char_index22\n  local char_index23\n\
    \  local char_index24\n  local char_index25\n  local char_index26\n  local char_index27\n\
    \  local char_index28\n  local char_index29\n  local char_index30\n  local char_index31\n\
    \  local char_index32\n  local char_index33\n  local char_index34\n  local char_index35\n\
    \  local char_index36\n  local char_index37\n  local char_index38\n  local char_index39\n\
    \  local char_index40\n  local char_index41\n  local char_index42\n  local char_index43\n\
    \  local char_index44\n  local char_index45\n  local char_index46\n  local char_index47\n\
    \  local char_index48\n  local char_index49\n  local char_index50\n  local char_index51\n\
    \  local char_index52\n  local char_index53\n  local char_index54\n  local char_index55\n\
    \  local char_index56\n  local char_index57\n  local char_index58\n  local char_index59\n\
    \  local char_index60\n  local char_index61\n  local char_index62\n  local char_index63\n\
    \  local char_index64\n  local char_index65\n  local char_index66\n  local char_index67\n\
    \  local char_index68\n  local char_index69\n  local char_index70\n  local char_index71\n\
    \  local char_index72\n  local char_index73\n  local char_index74\n  local char_index75\n\
    \  local char_index76\n  local char_index77\n  local char_index78\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local count=0\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        if [ $char_value -gt $j ]; then\n            char_value=$((char_value\
    \ + 1))\n        fi\n        local new_char=${char:0:1}\n        local new_char=${new_char:$char_value}\n\
    \        new_string=$new_string$new_char\n        i=$((i + 1))\n        j=$char_value\n\
    \    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnvkjm35u.sh: line 18: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output\n    output=$(echo\
    \ $string | sed -e 's/ /\\n/g' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local sorted_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count2=0\n  local word_char_length_index2=0\n  local\
    \ word_char_length_count3=0\n  local word_char_length_index3=0\n  local word_char_length_count4=0\n\
    \  local word_char_length_index4=0\n  local word_char_length_count5=0\n  local\
    \ word_char_length_index5=0\n  local word_char_length_count6=0\n  local word_char_length_index6=0\n\
    \  local word_char_length_count7=0\n  local word_char_length_index7=0\n  local\
    \ word_char_length_count8=0\n  local word_char_length_index8=0\n  local word_char_length_count9=0\n\
    \  local word_char_length_index9=0\n  local word_char_length_count10=0\n  local\
    \ word_char_length_index10=0\n  local word_char_length_count11=0\n  local word_char_length_index11=0\n\
    \  local word_char_length_count12=0\n  local word_char_length_index12=0\n  local\
    \ word_char_length_count13=0\n  local word_char_length_index13=0\n  local word_char_length_count14=0\n\
    \  local word_char_length_index14=0\n  local word_char_length_count15=0\n  local\
    \ word_char_length_index15=0\n  local word_char_length_count16=0\n  local word_char_length_index16=0\n\
    \  local word_char_length_count17=0\n  local word_char_length_index17=0\n  local\
    \ word_char_length_count18=0\n  local word_char_length_index18=0\n  local word_char_length_count19=0\n\
    \  local word_char_length_index19=0\n  local word_char_length_count20=0\n  local\
    \ word_char_length_index20=0\n  local word_char_length_count21=0\n  local word_char_length_index21=0\n\
    \  local word_char_length_count22=0\n  local word_char_length_index22=0\n  local\
    \ word_char_length_count23=0\n  local word_char_length_index23=0\n  local word_char_length_count24=0\n\
    \  local word_char_length_index24=0\n  local word_char_length_count25=0\n  local\
    \ word_char_length_index25=0\n  local word_char_length_count26=0\n  local word_char_length_index26=0\n\
    \  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local count2=0\n    local count3=0\n    local count4=0\n    local\
    \ count5=0\n    local count6=0\n    local count7=0\n    local count8=0\n    local\
    \ count9=0\n    local count10=0\n    local count11=0\n    local count12=0\n  \
    \  local count13=0\n    local count14=0\n    local count15=0\n    local count16=0\n\
    \    local count17=0\n    local count18=0\n    local count19=0\n    local count20=0\n\
    \    local count21=0\n    local count22=0\n    local count23=0\n    local count24=0\n\
    \    local count25=0\n    local count26=0\n    local count27=0\n    local count28=0\n\
    \    local count29=0\n    local count30=0\n    local count31=0\n    local count32=0\n\
    \    local count33=0\n    local count34=0\n    local count35=0\n    local count36=0\n\
    \    local count37=0\n    local count38=0\n    local count39=0\n    local count40=0\n\
    \    local count41=0\n    local count42=0\n    local count43=0\n    local count44=0\n\
    \    local count45=0\n    local count46=0\n    local count47=0\n    local count48=0\n\
    \    local count49=0\n    local count50=0\n    local count51=0\n    local count52=0\n\
    \    local count53=0\n    local count54=0\n    local count55=0\n    local count56=0\n\
    \    local count57=0\n    local count58=0\n    local count59=0\n    local count60=0\n\
    \    local count61=0\n    local count62=0\n    local count63=0\n    local count64=0\n\
    \    local count65=0\n    local count66=0\n    local count67=0\n    local count68=0\n\
    \    local count69=0\n    local count70=0\n    local count71=0\n    local count72=0\n\
    \    local count73=0\n    local count74=0\n    local count75=0\n    local count76=0\n\
    \    local count77=0\n    local count78=0\n    local count79=0\n    local count80=0\n\
    \    local count81=0\n    local count82=0\n    local count83=0\n    local count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local\
    \ B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local\
    \ H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local\
    \ N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local\
    \ T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local\
    \ Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local\
    \ D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local\
    \ J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local\
    \ P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local\
    \ V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  while [ $i -lt ${#string} ]; do\n    local char=${string:$i:1}\n    local char_value=${char:0:1}\n\
    \    local char_value=${char_value:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \    local char_value=${char_value:0:1}\n    local char_value=${char_value:0:1}\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9zuyhy1e.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmp9zuyhy1e.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_length=0\n  local word_length_count2=0\n\
    \  local word_length_index2=0\n  local word_length_length2=0\n  local word_length_count3=0\n\
    \  local word_length_index3=0\n  local word_length_length3=0\n  local word_length_count4=0\n\
    \  local word_length_index4=0\n  local word_length_length4=0\n  local word_length_count5=0\n\
    \  local word_length_index5=0\n  local word_length_length5=0\n  local word_length_count6=0\n\
    \  local word_length_index6=0\n  local word_length_length6=0\n  local word_length_count7=0\n\
    \  local word_length_index7=0\n  local word_length_length7=0\n  local word_length_count8=0\n\
    \  local word_length_index8=0\n  local word_length_length8=0\n  local word_length_count9=0\n\
    \  local word_length_index9=0\n  local word_length_length9=0\n  local word_length_count10=0\n\
    \  local word_length_index10=0\n  local word_length_length10=0\n  local word_length_count11=0\n\
    \  local word_length_index11=0\n  local word_length_length11=0\n  local word_length_count12=0\n\
    \  local word_length_index12=0\n  local word_length_length12=0\n  local word_length_count13=0\n\
    \  local word_length_index13=0\n  local word_length_length13=0\n  local word_length_count14=0\n\
    \  local word_length_index14=0\n  local word_length_length14=0\n  local word_length_count15=0\n\
    \  local word_length_index15=0\n  local word_length_length15=0\n  local word_length_count16=0\n\
    \  local word_length_index16=0\n  local word_length_length16=0\n  local word_length_count17=0\n\
    \  local word_length_index17=0\n  local word_length_length17=0\n  local word_length_count18=0\n\
    \  local word_length_index18=0\n  local word_length_length18=0\n  local word_length_count19=0\n\
    \  local word_length_index19=0\n  local word_length_length19=0\n  local word_length_count20=0\n\
    \  local word_length_index20=0\n  local word_length_length20\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_index=0\n  local\
    \ word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n  local word_length_index=0\n\
    \  local word_length_count=0\n  local word_length_index=0\n  local word_length_count=0\n\
    \  local word_length_index=0\n  local word_length_count=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_count2=0\n  local word_length2=0\n\
    \  local word_count3=0\n  local word_length3=0\n  local word_count4=0\n  local\
    \ word_length4=0\n  local word_count5=0\n  local word_length5=0\n  local word_count6=0\n\
    \  local word_length6=0\n  local word_count7=0\n  local word_length7=0\n  local\
    \ word_count8=0\n  local word_length8=0\n  local word_count9=0\n  local word_length9=0\n\
    \  local word_count10=0\n  local word_length10=0\n  local word_count11=0\n  local\
    \ word_length11=0\n  local word_count12=0\n  local word_length12=0\n  local word_count13=0\n\
    \  local word_length13=0\n  local word_count14=0\n  local word_length14=0\n  local\
    \ word_count15=0\n  local word_length15=0\n  local word_count16=0\n  local word_length16=0\n\
    \  local word_count17=0\n  local word_length17=0\n  local word_count18=0\n  local\
    \ word_length18=0\n  local word_count19=0\n  local word_length19=0\n  local word_count20=0\n\
    \  local word_length20=0\n  local word_count21=0\n  local word_length21=0\n  local\
    \ word_count22=0\n  local word_length22=0\n  local word_count23=0\n  local word_length23=0\n\
    \  local word_count24=0\n  local word_length24=0\n  local word_count25=0\n  local\
    \ word_length25=0\n  local word_count26=0\n  local word_length26=0\n  local word_count27=0\n\
    \  local word_length27=0\n  local word_count28=0\n  local word_length28=0\n  local\
    \ word_count29=0\n  local word_length29=0\n  local word_count30=0\n  local word_length30=0\n\
    \  local word_count31=0\n  local word_length31=0\n  local word_count32=0\n  local\
    \ word_length32=0\n  local word_count33=0\n  local word_length33=0\n  local word_count34=0\n\
    \  local word_length34=0\n  local word_count35=0\n  local word_length35=0\n  local\
    \ word_count36\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ words=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n   \
    \ local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local\
    \ r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n\
    \    local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n \
    \   local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n  \
    \  local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n   \
    \ local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local\
    \ R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n\
    \    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n \
    \   local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n  \
    \  local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n   \
    \ local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local\
    \ r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n\
    \    local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n \
    \   local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n  \
    \  local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n   \
    \ local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local\
    \ R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n\
    \    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n \
    \   local c=0\n    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_space=\"\"\n  local new_char=\"\"\n  local new_char2=\"\"\n  local\
    \ new_char3=\"\"\n  local new_char4=\"\"\n  local new_char5=\"\"\n  local new_char6=\"\
    \"\n  local new_char7=\"\"\n  local new_char8=\"\"\n  local new_char9=\"\"\n \
    \ local new_char10=\"\"\n  local new_char11=\"\"\n  local new_char12=\"\"\n  local\
    \ new_char13=\"\"\n  local new_char14=\"\"\n  local new_char15=\"\"\n  local new_char16=\"\
    \"\n  local new_char17=\"\"\n  local new_char18=\"\"\n  local new_char19=\"\"\n\
    \  local new_char20=\"\"\n  local new_char21=\"\"\n  local new_char22=\"\"\n \
    \ local new_char23=\"\"\n  local new_char24=\"\"\n  local new_char25=\"\"\n  local\
    \ new_char26=\"\"\n  local new_char27=\"\"\n  local new_char28=\"\"\n  local new_char29=\"\
    \"\n  local new_char30=\"\"\n  local new_char31=\"\"\n  local new_char32=\"\"\n\
    \  local new_char33=\"\"\n  local new_char34=\"\"\n  local new_char35=\"\"\n \
    \ local new_char36=\"\"\n  local new_char37=\"\"\n  local new_char38=\"\"\n  local\
    \ new_char39=\"\"\n  local new_char40=\"\"\n  local new_char41=\"\"\n  local new_char42=\"\
    \"\n  local new_char43=\"\"\n  local new_char44=\"\"\n  local new_char45=\"\"\n\
    \  local new_char46=\"\"\n  local new_char47=\"\"\n  local new_char48=\"\"\n \
    \ local new_char49=\"\"\n  local new_char50=\"\"\n  local new_char51=\"\"\n  local\
    \ new_char52=\"\"\n  local new_char53=\"\"\n  local new_char54=\"\"\n  local new_char55=\"\
    \"\n  local new_char56=\"\"\n  local new_char57=\"\"\n  local new_char58=\"\"\n\
    \  local new_char59=\"\"\n  local new_char60=\"\"\n  local new_char61=\"\"\n \
    \ local new_char62=\"\"\n  local new_char63=\"\"\n  local new_char64=\"\"\n  local\
    \ new_char65=\"\"\n  local new_char66=\"\"\n  local new_char67=\"\"\n  local new_char68=\"\
    \"\n  local new_char69=\"\"\n  local new_char70=\"\"\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        if [ $char =~ [[:alpha:]]  ]; then\n            local char=${char:0:1}\n\
    \            local char=${char:1}\n            local char=${char:0:1}\n      \
    \      local char=${char:1}\n            local char=${char:0:1}\n            local\
    \ char=${char:1}\n            local char=${char:0:1}\n            local char=${char:1}\n\
    \            local char=${char:0:1}\n            local char=${char:1}\n      \
    \      local char=${char:0:1}\n            local char=${char:1}\n            local\
    \ char=${char:0:1}\n            local char=${char:1}\n            local char=${char:0:1}\n\
    \            local char=${char:1}\n            local char=${char:0:1}\n      \
    \      local char=${char:1}\n            local char=${char:0:1}\n            local\
    \ char=${char:1}\n            local char=${char:0:1}\n            local char=${char:1}\n\
    \            local char=${char:0:1}\n            local char=${char:1}\n      \
    \      local char=${char:0:1}\n            local char=${char:1}\n            local\
    \ char=${char:0:1}\n            local char=${char:1}\n            local char=${char:0:1}\n\
    \            local char=${char:1}\n            local char=${char:0:1}\n      \
    \      local char=${char:1}\n            local char=${char:0:1}\n            local\
    \ char=${char:1}\n            local char=${char:0:1}\n            local char=${char:1}\n\
    \            local char=${char:0:1}\n            local char=${char:1}\n      \
    \      local char=${char:0:1}\n            local char=${char:1}\n            local\
    \ char=${char:0:1}\n            local char=${char:1}\n            local char=${char:0:1}\n\
    \            local char=${char:1}\n            local char=${char:0:1}\n      \
    \      local char=${char:1}\n            local char=${char:0:1}\n            local\
    \ char=${char:1}\n            local char=${char:0:1}\n            local char=${char:1}\n\
    \            local char=${char:0:1}\n            local char=${char:1}\n      \
    \      local char=${char:0:1}\n            local char=${char:1}\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpztt6qqyk.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmpztt6qqyk.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [[ $i -lt ${#string} ]]; do\n        local char=\"${string:$i:1}\"\
    \n        if [[ $char =~ ^[[:alpha:]]$ ]]; then\n            local char=\"${char^^}\"\
    \n        fi\n        if [[ $char =~ ^[[:blank:]]$ ]]; then\n            local\
    \ char=\"${char^^}\"\n        fi\n        if [[ $char =~ ^[[:digit:]]$ ]]; then\n\
    \            local char=\"${char^^}\"\n        fi\n        if [[ $char =~ ^[[:punct:]]$\
    \ ]]; then\n            local char=\"${char^^}\"\n        fi\n        if [[ $char\
    \ =~ ^[[:space:]]$ ]]; then\n            local char=\"${char^^}\"\n        fi\n\
    \        local new_char=\"${char}\"\n        if [[ $new_string != \"\" ]]; then\n\
    \            new_string+=\" \"\n        fi\n        new_string+=\"$new_char\"\n\
    \        ((i++))\n    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        local char=\"${string:$i:1}\"\
    \n        local new_char=\"${char:0:1}\"\n        if [ $char != \" \" ]; then\n\
    \            local char=\"${char:1}\"\n            local new_char=\"${new_char:0:1}\"\
    \n        fi\n        if [ $char != \" \" ]; then\n            local char=\"${char:1}\"\
    \n            local new_char=\"${new_char:0:1}\"\n        fi\n        if [ $char\
    \ != \" \" ]; then\n            local char=\"${char:1}\"\n            local new_char=\"\
    ${new_char:0:1}\"\n        fi\n        if [ $char != \" \" ]; then\n         \
    \   local char=\"${char:1}\"\n            local new_char=\"${new_char:0:1}\"\n\
    \        fi\n        if [ $char != \" \" ]; then\n            local char=\"${char:1}\"\
    \n            local new_char=\"${new_char:0:1}\"\n        fi\n        if [ $char\
    \ != \" \" ]; then\n            local char=\"${char:1}\"\n            local new_char=\"\
    ${new_char:0:1}\"\n        fi\n        if [ $char != \" \" ]; then\n         \
    \   local char=\"${char:1}\"\n            local new_char=\"${new_char:0:1}\"\n\
    \        fi\n        if [ $char != \" \" ]; then\n            local char=\"${char:1}\"\
    \n            local new_char=\"${new_char:0:1}\"\n        fi\n        if [ $char\
    \ != \" \" ]; then\n            local char=\"${char:1}\"\n            local new_char=\"\
    ${new_char:0:1}\"\n        fi\n        if [ $char != \" \" ]; then\n         \
    \   local char=\"${char:1}\"\n            local new_char=\"${new_char:0:1}\"\n\
    \        fi\n        if [ $char != \" \" ]; then\n            local char=\"${char:1}\"\
    \n            local new_char=\"${new_char:0:1}\"\n        fi\n        if [ $char\
    \ != \" \" ]; then\n            local char=\"${char:1}\"\n            local new_char=\"\
    ${new_char:0:1}\"\n        fi\n        if [ $char != \" \" ]; then\n         \
    \   local char=\"${char:1}\"\n            local new_char=\"${new_char:0:1}\"\n\
    \        fi\n        if [ $char != \" \" ]; then\n            local char=\"${char:1}\"\
    \n            local new_char=\"${new_char:0:1}\"\n        fi\n        if [ $char\
    \ != \" \" ]; then\n            local char=\"${char:1}\"\n            local new_char=\"\
    ${new_char:0:1}\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3c0j062b.sh: line 90: unexpected EOF while looking for matching
    `"''

    /tmp/tmp3c0j062b.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_word_length=0\n  local new_word_length2=0\n  local new_word_length3=0\n\
    \  local new_word_length4=0\n  local new_word_length5=0\n  local new_word_length6=0\n\
    \  local new_word_length7=0\n  local new_word_length8=0\n  local new_word_length9=0\n\
    \  local new_word_length10=0\n  local new_word_length11=0\n  local new_word_length12=0\n\
    \  local new_word_length13=0\n  local new_word_length14=0\n  local new_word_length15=0\n\
    \  local new_word_length16=0\n  local new_word_length17=0\n  local new_word_length18=0\n\
    \  local new_word_length19=0\n  local new_word_length20=0\n  local new_word_length21=0\n\
    \  local new_word_length22=0\n  local new_word_length23=0\n  local new_word_length24=0\n\
    \  local new_word_length25=0\n  local new_word_length26=0\n  local new_word_length27=0\n\
    \  local new_word_length28=0\n  local new_word_length29=0\n  local new_word_length30=0\n\
    \  local new_word_length31=0\n  local new_word_length32=0\n  local new_word_length33=0\n\
    \  local new_word_length34=0\n  local new_word_length35=0\n  local new_word_length36=0\n\
    \  local new_word_length37=0\n  local new_word_length38=0\n  local new_word_length39=0\n\
    \  local new_word_length40=0\n  local new_word_length41=0\n  local new_word_length42=0\n\
    \  local new_word_length43=0\n  local new_word_length44=0\n  local new_word_length45=0\n\
    \  local new_word_length46=0\n  local new_word_length47=0\n  local new_word_length48=0\n\
    \  local new_word_length49=0\n  local new_word_length50=0\n  local new_word_length51=0\n\
    \  local new_word_length52=0\n  local new_word_length53=0\n  local new_word_length54=0\n\
    \  local new_word_length55=0\n  local new_word_length56=0\n  local new_word_length57=0\n\
    \  local new_word_length58=0\n  local new_word_length59=0\n  local new_word_length60=0\n\
    \  local new_word_length61=0\n  local new_word_length62=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  while [ $i -lt ${#string} ]; do\n    local char=${string:$i:1}\n    local char_value=${char:0:1}\n\
    \    local char_value_ascii=${char_value:0:1}\n    local char_value_ascii_value=${char_value_ascii:0:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value:0:1}\n    local\
    \ char_value_ascii_value_upper=${char_value_ascii_value:1:1}\n    local char_value_ascii_value_upper=${char_value_ascii_value_upper:0:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:0:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:1:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:1:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:0:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:0:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:1:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:1:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:0:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:0:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:1:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:1:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:0:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:0:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:1:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:1:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:0:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:0:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:1:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:1:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:0:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii_value_lower:0:1}\n\
    \    local char_value_ascii_value_upper=${char_value_ascii_value_upper:1:1}\n\
    \    local char_value_ascii_value_lower=${char_value_ascii\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjbd3cya6.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local count=0\n  local last_char=\"\"\n  local last_char_count=0\n  local\
    \ last_char_index=0\n  local last_char_length=0\n  local last_char_length_count=0\n\
    \  local last_char_length_index=0\n  local last_char_length_length=0\n  local\
    \ last_char_length_length_count=0\n  local last_char_length_length_index=0\n \
    \ local last_char_length_length_length=0\n  local last_char_length_length_length_count=0\n\
    \  local last_char_length_length_length_index=0\n  local last_char_length_length_length_length=0\n\
    \  local last_char_length_length_length_length_count=0\n  local last_char_length_length_length_length_index=0\n\
    \  local last_char_length_length_length_length_length=0\n  local last_char_length_length_length_length_length_count=0\n\
    \  local last_char_length_length_length_length_length_index=0\n  local last_char_length_length_length_length_length_length=0\n\
    \  local last_char_length_length_length_length_length_length_count=0\n  local\
    \ last_char_length_length_length_length_length_length_index=0\n  local last_char_length_length_length_length_length_length_length=0\n\
    \  local last_char_length_length_length_length_length_length_count=0\n  local\
    \ last_char_length_length_length_length_length_length_length_index=0\n  local\
    \ last_char_length_length_length_length_length_length_length=0\n  local last_char_length_length_length_length_length_length_length_count=0\n\
    \  local last_char_length_length_length_length_length_length_length_index=0\n\
    \  local last_char_length_length_length_length_length_length_length_length=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_count=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_index=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_length=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_count=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_index=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_length=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_count=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_index=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_length=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_length_index=0\n\
    \  local last_char_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local last_char_length_length_length_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        if [ $char_value -lt 97 ] || [ $char_value -gt 122 ]; then\n        \
    \    char_value=$(( $char_value + 32 ))\n        fi\n        local new_char=${char_value:0:1}\n\
    \        local new_char=${new_char:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char=${new_char:0:1}\n\
    \        local new_char=${new_char:0:1}\n        local new_char\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe6q2q7ot.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpe6q2q7ot.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    while [[ $i -lt ${#string} ]]; do\n        local j=0\n        while\
    \ [[ $j -lt ${#string} ]]; do\n            local k=0\n            while [[ $k\
    \ -lt ${#string} ]]; do\n                if [[ $((${string:$i:1}) -ge ${string:$j:1})\
    \ ]]; then\n                    local new_char=${string:$j:1}\n              \
    \      local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9]/}\n                    local new_char=${new_char//[!A-Za-z0-9]/}\n\
    \                    local new_char=${new_char//[!A-Za-z0-9]/}\n             \
    \       local new_char=${new_char//[!A-Za-z0-9\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv4p7bhvd.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local i\n\
    \    local j\n    local word\n    local count\n    local length\n    local char\n\
    \    local char2\n    local char3\n    local char4\n    local char5\n    local\
    \ char6\n    local char7\n    local char8\n    local char9\n    local char10\n\
    \    local char11\n    local char12\n    local char13\n    local char14\n    local\
    \ char15\n    local char16\n    local char17\n    local char18\n    local char19\n\
    \    local char20\n    local char21\n    local char22\n    local char23\n    local\
    \ char24\n    local char25\n    local char26\n    local char27\n    local char28\n\
    \    local char29\n    local char30\n    local char31\n    local char32\n    local\
    \ char33\n    local char34\n    local char35\n    local char36\n    local char37\n\
    \    local char38\n    local char39\n    local char40\n    local char41\n    local\
    \ char42\n    local char43\n    local char44\n    local char45\n    local char46\n\
    \    local char47\n    local char48\n    local char49\n    local char50\n    local\
    \ char51\n    local char52\n    local char53\n    local char54\n    local char55\n\
    \    local char56\n    local char57\n    local char58\n    local char59\n    local\
    \ char60\n    local char61\n    local char62\n    local char63\n    local char64\n\
    \    local char65\n    local char66\n    local char67\n    local char68\n    local\
    \ char69\n    local char70\n    local char71\n    local char72\n    local char73\n\
    \    local char74\n    local char75\n    local char76\n    local char77\n    local\
    \ char78\n    local char79\n    local char80\n    local char81\n    local char82\n\
    \    local char83\n    local char84\n    local char85\n    local char86\n    local\
    \ char87\n    local char88\n    local char89\n    local char90\n    local char91\n\
    \    local char92\n    local char93\n    local char94\n    local char95\n    local\
    \ char96\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_character\n  local\
    \ word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_length_count=0\n\
    \  local word_length_max=0\n  local word_length_min=0\n  local word_length_avg=0\n\
    \  local word_length_sum=0\n  local word_length_min_index=0\n  local word_length_max_index=0\n\
    \  local word_length_avg_index=0\n  local word_length_sum_index=0\n  local word_length_min_count=0\n\
    \  local word_length_max_count=0\n  local word_length_avg_count=0\n  local word_length_sum_count=0\n\
    \  local word_length_min_length=0\n  local word_length_max_length=0\n  local word_length_avg_length=0\n\
    \  local word_length_sum_length=0\n  local word_length_min_length_index=0\n  local\
    \ word_length_max_length_index=0\n  local word_length_avg_length_index=0\n  local\
    \ word_length_sum_length_index=0\n  local word_length_min_length_count=0\n  local\
    \ word_length_max_length_count=0\n  local word_length_avg_length_count=0\n  local\
    \ word_length_sum_length_count=0\n  local word_length_min_length_length=0\n  local\
    \ word_length_max_length_length=0\n  local word_length_avg_length_length=0\n \
    \ local word_length_sum_length_length=0\n  local word_length_min_length_length_index=0\n\
    \  local word_length_max_length_length_index=0\n  local word_length_avg_length_length_index=0\n\
    \  local word_length_sum_length_length_index=0\n  local word_length_min_length_length_count=0\n\
    \  local word_length_max_length_length_count=0\n  local word_length_avg_length_length_count=0\n\
    \  local word_length_sum_length_length_count=0\n  local word_length_min_length_length_length=0\n\
    \  local word_length_max_length_length_length=0\n  local word_length_avg_length_length_length=0\n\
    \  local word_length_sum_length_length_length=0\n  local word_length_min_length_length_length_index=0\n\
    \  local word_length_max_length_length_length_index=0\n  local word_length_avg_length_length_length_index=0\n\
    \  local word_length_sum_length_length_length_index=0\n  local word_length_min_length_length_length_count=0\n\
    \  local word_length_max_length_length_length_count=0\n  local word_length_avg_length_length_length_count=0\n\
    \  local word_length_sum_length_length_length_count=0\n  local word_length_min_length_length_length_length=0\n\
    \  local word_length_max_length_length_length_length=0\n  local word_length_avg_length_length_length_length=0\n\
    \  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_index=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local count=0\n  local count2=0\n  local count3=0\n\
    \  local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local\
    \ count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n\
    \  local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n\
    \  local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n\
    \  local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n\
    \  local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n\
    \  local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n\
    \  local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n\
    \  local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n\
    \  local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n\
    \  local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n\
    \  local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n\
    \  local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n\
    \  local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n\
    \  local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n\
    \  local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n\
    \  local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n\
    \  local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n\
    \  local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n\
    \  local count81=0\n  local count82=0\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output\n  output=$(echo \"$string\"\
    \ | sed 's/ /\\n/g' | sort -u)\n  echo \"$output\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_length_count=0\n\
    \  local word_length_max=0\n  local word_length_min=0\n  local word_length_min_index=0\n\
    \  local word_length_max_index=0\n  local word_length_min_count=0\n  local word_length_max_count=0\n\
    \  local word_length_min_max=0\n  local word_length_min_max_index=0\n  local word_length_min_max_count=0\n\
    \  local word_length_min_max_max=0\n  local word_length_min_max_max_index=0\n\
    \  local word_length_min_max_max_count=0\n  local word_length_min_max_max_max=0\n\
    \  local word_length_min_max_max_min=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_min_index=0\n  local word_length_min_max_max_min_index=0\n\
    \  local word_length_min_max_max_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$(($i+1)):1}\n        if [ $char -eq $next_char\
    \ ]; then\n            ((i++))\n        else\n            ((j++))\n        fi\n\
    \        new_string+=\"${char}\"\n    done\n    new_string+=\"${new_string%% *}\"\
    \n    new_string+=\"${new_string##* }\"\n    echo \"$new_string\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660033041
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local space=\"\
    \ \"\n  local new_space=\" \"\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local last_char=\"\"\n  local last_char_count=0\n  local last_char_index=0\n\
    \  local last_char_index2=0\n  local last_char_index3=0\n  local last_char_index4=0\n\
    \  local last_char_index5=0\n  local last_char_index6=0\n  local last_char_index7=0\n\
    \  local last_char_index8=0\n  local last_char_index9=0\n  local last_char_index10=0\n\
    \  local last_char_index11=0\n  local last_char_index12=0\n  local last_char_index13=0\n\
    \  local last_char_index14=0\n  local last_char_index15=0\n  local last_char_index16=0\n\
    \  local last_char_index17=0\n  local last_char_index18=0\n  local last_char_index19=0\n\
    \  local last_char_index20=0\n  local last_char_index21=0\n  local last_char_index22=0\n\
    \  local last_char_index23=0\n  local last_char_index24=0\n  local last_char_index25=0\n\
    \  local last_char_index26=0\n  local last_char_index27=0\n  local last_char_index28=0\n\
    \  local last_char_index29=0\n  local last_char_index30=0\n  local last_char_index31=0\n\
    \  local last_char_index32=0\n  local last_char_index33=0\n  local last_char_index34=0\n\
    \  local last_char_index35=0\n  local last_char_index36=0\n  local last_char_index37=0\n\
    \  local last_char_index38=0\n  local last_char_index39=0\n  local last_char_index40=0\n\
    \  local last_char_index41=0\n  local last_char_index42=0\n  local last_char_index43=0\n\
    \  local last_char_index44=0\n  local last_char_index45=0\n  local last_char_index46=0\n\
    \  local last_char_index47=0\n  local last_char_index48=0\n  local last_char_index49=0\n\
    \  local last_char_index50=0\n  local last_char_index51=0\n  local last_char_index52=0\n\
    \  local last_char_index53=0\n  local last_char_index54=0\n  local last_char_index55=0\n\
    \  local last_char_index56=0\n  local last_char_index57=0\n  local last_char_index58=0\n\
    \  local last_char_index59=0\n  local last_char_index60=0\n  local last_\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    while [ $i -lt ${#string} ]; do\n        local j=0\n        while [\
    \ $j -lt ${#string} ]; do\n            local k=0\n            while [ $k -lt ${#string}\
    \ ]; do\n                if [[ ${string:$j:$k} == \" \" ]]; then\n           \
    \         let k+=1\n                else\n                    let j+=1\n     \
    \               let k+=1\n                fi\n            done\n            local\
    \ new_string+=\"$(echo ${string:$j:$k} | tr -d '[:alpha:]')\"\n            let\
    \ j+=1\n        done\n        let i+=1\n    done\n    echo \"$new_string\"\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local length\n  local word\n  local character\n  local\
    \ character_index\n  local character_count\n  local character_count_index\n  local\
    \ character_count_index2\n  local character_count_index3\n  local character_count_index4\n\
    \  local character_count_index5\n  local character_count_index6\n  local character_count_index7\n\
    \  local character_count_index8\n  local character_count_index9\n  local character_count_index10\n\
    \  local character_count_index11\n  local character_count_index12\n  local character_count_index13\n\
    \  local character_count_index14\n  local character_count_index15\n  local character_count_index16\n\
    \  local character_count_index17\n  local character_count_index18\n  local character_count_index19\n\
    \  local character_count_index20\n  local character_count_index21\n  local character_count_index22\n\
    \  local character_count_index23\n  local character_count_index24\n  local character_count_index25\n\
    \  local character_count_index26\n  local character_count_index27\n  local character_count_index28\n\
    \  local character_count_index29\n  local character_count_index30\n  local character_count_index31\n\
    \  local character_count_index32\n  local character_count_index33\n  local character_count_index34\n\
    \  local character_count_index35\n  local character_count_index36\n  local character_count_index37\n\
    \  local character_count_index38\n  local character_count_index39\n  local character_count_index40\n\
    \  local character_count_index41\n  local character_count_index42\n  local character_count_index43\n\
    \  local character_count_index44\n  local character_count_index45\n  local character_count_index46\n\
    \  local character_count_index47\n  local character_count_index48\n  local character_count_index49\n\
    \  local character_count_index50\n  local character_count_index51\n  local character_count_index52\n\
    \  local character_count_index53\n  local character_count_index54\n  local character_count_index55\n\
    \  local character_count_index56\n  local character_count_index57\n  local character_count_index58\n\
    \  local character_count_index59\n  local character_count_index60\n  local character_count_index61\n\
    \  local character_count_index62\n  local character_count_index63\n  local character_count_index64\n\
    \  local character_count_index65\n  local character_count_index66\n  local character_count_index\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local count=0\n  local count2=0\n  local count3=0\n\
    \  local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local\
    \ count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n\
    \  local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n\
    \  local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n\
    \  local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n\
    \  local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n\
    \  local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n\
    \  local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n\
    \  local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n\
    \  local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n\
    \  local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n\
    \  local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n\
    \  local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n\
    \  local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n\
    \  local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n\
    \  local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n\
    \  local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n\
    \  local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n\
    \  local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n\
    \  local count81=0\n  local count82=0\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        if [ $i -eq 0 ]; then\n  \
    \          new_string=$new_string ${string[$i]}\n        else\n            new_string=$new_string\
    \ ${string[$i]} \" \"\n        fi\n        i=$((i+1))\n    done\n    echo $new_string\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpixivxher.sh: line 16: Hi: command not found

    /tmp/tmpixivxher.sh: line 18:  : command not found

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local word\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local sorted_string=\"\"\n  local i=0\
    \ j=0\n  while [ \"$i\" -lt \"$string\" ]; do\n    local c=\"${string:$i:1}\"\n\
    \    local b=\"${string:$i:1}\"\n    local a=\"${string:$i:1}\"\n    local d=\"\
    ${string:$i:1}\"\n    local e=\"${string:$i:1}\"\n    local f=\"${string:$i:1}\"\
    \n    local g=\"${string:$i:1}\"\n    local h=\"${string:$i:1}\"\n    local k=\"\
    ${string:$i:1}\"\n    local l=\"${string:$i:1}\"\n    local m=\"${string:$i:1}\"\
    \n    local n=\"${string:$i:1}\"\n    local o=\"${string:$i:1}\"\n    local p=\"\
    ${string:$i:1}\"\n    local q=\"${string:$i:1}\"\n    local r=\"${string:$i:1}\"\
    \n    local s=\"${string:$i:1}\"\n    local t=\"${string:$i:1}\"\n    local u=\"\
    ${string:$i:1}\"\n    local v=\"${string:$i:1}\"\n    local w=\"${string:$i:1}\"\
    \n    local x=\"${string:$i:1}\"\n    local y=\"${string:$i:1}\"\n    local z=\"\
    ${string:$i:1}\"\n    local A=\"${string:$i:1}\"\n    local B=\"${string:$i:1}\"\
    \n    local C=\"${string:$i:1}\"\n    local D=\"${string:$i:1}\"\n    local E=\"\
    ${string:$i:1}\"\n    local F=\"${string:$i:1}\"\n    local G=\"${string:$i:1}\"\
    \n    local H=\"${string:$i:1}\"\n    local I=\"${string:$i:1}\"\n    local J=\"\
    ${string:$i:1}\"\n    local K=\"${string:$i:1}\"\n    local L=\"${string:$i:1}\"\
    \n    local M=\"${string:$i:1}\"\n    local N=\"${string:$i:1}\"\n    local O=\"\
    ${string:$i:1}\"\n    local P=\"${string:$i:1}\"\n    local Q=\"${string:$i:1}\"\
    \n    local R=\"${string:$i:1}\"\n    local S=\"${string:$i:1}\"\n    local T=\"\
    ${string:$i:1}\"\n    local U=\"${string:$i:1}\"\n    local V=\"${string:$i:1}\"\
    \n    local W=\"${string:$i:1}\"\n    local X=\"${string:$i:1}\"\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaps70z0y.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmpaps70z0y.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local space=\"\
    \"\n  local words=\"\"\n  local new_word=\"\"\n  local i=0 j=0\n  while [[ $i\
    \ -lt ${#string} ]]; do\n    words=$(echo $string | sed -n \"${i}p\")\n    space=$(echo\
    \ $string | sed -n \"${i}p\")\n    new_word=$(echo $string | sed -n \"${i}p\"\
    )\n    new_string=\"$new_string $new_word\"\n    i=$((i+1))\n  done\n  echo $new_string\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 2: invalid usage of line address 0

    sed: -e expression #1, char 2: invalid usage of line address 0

    sed: -e expression #1, char 2: invalid usage of line address 0

    sed: -e expression #1, char 2: invalid usage of line address 0

    sed: -e expression #1, char 2: invalid usage of line address 0

    sed: -e expression #1, char 2: invalid usage of line address 0

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_length_count=0\n  local\
    \ word_length_max=0\n  local word_length_min=0\n  local word_length_avg=0\n  local\
    \ word_length_sum=0\n  local word_length_min_index=0\n  local word_length_max_index=0\n\
    \  local word_length_avg_index=0\n  local word_length_sum_index=0\n  local word_length_min_count=0\n\
    \  local word_length_max_count=0\n  local word_length_avg_count=0\n  local word_length_sum_count=0\n\
    \  local word_length_min_length=0\n  local word_length_max_length=0\n  local word_length_avg_length=0\n\
    \  local word_length_sum_length=0\n  local word_length_min_length_index=0\n  local\
    \ word_length_max_length_index=0\n  local word_length_avg_length_index=0\n  local\
    \ word_length_sum_length_index=0\n  local word_length_min_length_count=0\n  local\
    \ word_length_max_length_count=0\n  local word_length_avg_length_count=0\n  local\
    \ word_length_sum_length_count=0\n  local word_length_min_length_length=0\n  local\
    \ word_length_max_length_length=0\n  local word_length_avg_length_length=0\n \
    \ local word_length_sum_length_length=0\n  local word_length_min_length_length_index=0\n\
    \  local word_length_max_length_length_index=0\n  local word_length_avg_length_length_index=0\n\
    \  local word_length_sum_length_length_index=0\n  local word_length_min_length_length_count=0\n\
    \  local word_length_max_length_length_count=0\n  local word_length_avg_length_length_count=0\n\
    \  local word_length_sum_length_length_count=0\n  local word_length_min_length_length_length=0\n\
    \  local word_length_max_length_length_length=0\n  local word_length_avg_length_length_length=0\n\
    \  local word_length_sum_length_length_length=0\n  local word_length_min_length_length_length_index=0\n\
    \  local word_length_max_length_length_length_index=0\n  local word_length_avg_length_length_length_index=0\n\
    \  local word_length_sum_length_length_length_index=0\n  local word_length_min_length_length_length_count=0\n\
    \  local word_length_max_length_length_length_count=0\n  local word_length_avg_length_length_length_count=0\n\
    \  local word_length_sum_length_length_length_count=0\n  local word_length_min_length_length_length_length=0\n\
    \  local word_length_max_length_length_length_length=0\n  local word_length_avg_length_length_length_length=0\n\
    \  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_length_count=0\n  local\
    \ word_length_index=0\n  local word_length_length=0\n  local word_length_length_count=0\n\
    \  local word_length_length_length=0\n  local word_length_length_length_count=0\n\
    \  local word_length_length_length_length=0\n  local word_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length=0\n  local word_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_count=0\n  local\
    \ word_length_length_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length=0\n  local\
    \ word_length_length_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local count2=0\n    local count3=0\n    local count4=0\n    local\
    \ count5=0\n    local count6=0\n    local count7=0\n    local count8=0\n    local\
    \ count9=0\n    local count10=0\n    local count11=0\n    local count12=0\n  \
    \  local count13=0\n    local count14=0\n    local count15=0\n    local count16=0\n\
    \    local count17=0\n    local count18=0\n    local count19=0\n    local count20=0\n\
    \    local count21=0\n    local count22=0\n    local count23=0\n    local count24=0\n\
    \    local count25=0\n    local count26=0\n    local count27=0\n    local count28=0\n\
    \    local count29=0\n    local count30=0\n    local count31=0\n    local count32=0\n\
    \    local count33=0\n    local count34=0\n    local count35=0\n    local count36=0\n\
    \    local count37=0\n    local count38=0\n    local count39=0\n    local count40=0\n\
    \    local count41=0\n    local count42=0\n    local count43=0\n    local count44=0\n\
    \    local count45=0\n    local count46=0\n    local count47=0\n    local count48=0\n\
    \    local count49=0\n    local count50=0\n    local count51=0\n    local count52=0\n\
    \    local count53=0\n    local count54=0\n    local count55=0\n    local count56=0\n\
    \    local count57=0\n    local count58=0\n    local count59=0\n    local count60=0\n\
    \    local count61=0\n    local count62=0\n    local count63=0\n    local count64=0\n\
    \    local count65=0\n    local count66=0\n    local count67=0\n    local count68=0\n\
    \    local count69=0\n    local count70=0\n    local count71=0\n    local count72=0\n\
    \    local count73=0\n    local count74=0\n    local count75=0\n    local count76=0\n\
    \    local count77=0\n    local count78=0\n    local count79=0\n    local count80=0\n\
    \    local count81=0\n    local count82=0\n    local count83=0\n    local count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local\
    \ h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local\
    \ n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local\
    \ t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local\
    \ z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local\
    \ d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local A=0\n  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n\
    \  local G=0\n  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n\
    \  local M=0\n  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n\
    \  local S=0\n  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n\
    \  local Y=0\n  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n\
    \  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n\
    \  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n\
    \  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n\
    \  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i\n  local\
    \ j\n  local k\n  local length\n  local temp\n  local count\n  local word\n  local\
    \ char\n  local char_ascii\n  local char_ascii2\n  local char_ascii3\n  local\
    \ char_ascii4\n  local char_ascii5\n  local char_ascii6\n  local char_ascii7\n\
    \  local char_ascii8\n  local char_ascii9\n  local char_ascii10\n  local char_ascii11\n\
    \  local char_ascii12\n  local char_ascii13\n  local char_ascii14\n  local char_ascii15\n\
    \  local char_ascii16\n  local char_ascii17\n  local char_ascii18\n  local char_ascii19\n\
    \  local char_ascii20\n  local char_ascii21\n  local char_ascii22\n  local char_ascii23\n\
    \  local char_ascii24\n  local char_ascii25\n  local char_ascii26\n  local char_ascii27\n\
    \  local char_ascii28\n  local char_ascii29\n  local char_ascii30\n  local char_ascii31\n\
    \  local char_ascii32\n  local char_ascii33\n  local char_ascii34\n  local char_ascii35\n\
    \  local char_ascii36\n  local char_ascii37\n  local char_ascii38\n  local char_ascii39\n\
    \  local char_ascii40\n  local char_ascii41\n  local char_ascii42\n  local char_ascii43\n\
    \  local char_ascii44\n  local char_ascii45\n  local char_ascii46\n  local char_ascii47\n\
    \  local char_ascii48\n  local char_ascii49\n  local char_ascii50\n  local char_ascii51\n\
    \  local char_ascii52\n  local char_ascii53\n  local char_ascii54\n  local char_ascii55\n\
    \  local char_ascii56\n  local char_ascii57\n  local char_ascii58\n  local char_ascii59\n\
    \  local char_ascii60\n  local char_ascii61\n  local char_ascii62\n  local char_ascii63\n\
    \  local char_ascii64\n  local char_ascii65\n  local char_ascii66\n  local char_ascii67\n\
    \  local char_ascii68\n  local char_ascii69\n  local char_ascii70\n  local char_ascii71\n\
    \  local char_ascii72\n  local char_ascii73\n  local char_ascii74\n  local char_ascii75\n\
    \  local char_ascii76\n  local char_ascii77\n  local char_ascii78\n  \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local\
    \ B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local\
    \ H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local\
    \ N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local\
    \ T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local\
    \ Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local\
    \ D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local\
    \ J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local\
    \ P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local\
    \ V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_char_length=0\n\
    \    local word_char_char_char_length=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_length=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_character\n    local word_character_index=0\n    local word_character_length=0\n\
    \    local word_character_index=0\n    local word_character_length=0\n    local\
    \ word_character_index=0\n    local word_character_length=0\n    local word_character_index=0\n\
    \    local word_character_length=0\n    local word_character_index=0\n    local\
    \ word_character_length=0\n    local word_character_index=0\n    local word_character_length=0\n\
    \    local word_character_index=0\n    local word_character_length=0\n    local\
    \ word_character_index=0\n    local word_character_length=0\n    local word_character_index=0\n\
    \    local word_character_length=0\n    local word_character_index=0\n    local\
    \ word_character_length=0\n    local word_character_index=0\n    local word_character_length=0\n\
    \    local word_character_index=0\n    local word_character_length=0\n    local\
    \ word_character_index=0\n    local word_character_length=0\n    local word_character_index=0\n\
    \    local word_character_length=0\n    local word_character_index=0\n    local\
    \ word_character_length=0\n    local word_character_index=0\n    local word_character_length=0\n\
    \    local word_character_index=0\n    local word_character_length=0\n    local\
    \ word_character_index=0\n    local word_character_length=0\n    local word_character_index=0\n\
    \    local word_character_length=0\n    local word_character_index=0\n    local\
    \ word_character_length=0\n    local word_character_index=0\n    local word_character_length=0\n\
    \    local word_character_index=0\n    local word_character_length=0\n    local\
    \ word_character_index=0\n    local word_character_length=0\n    local word_character_index=0\n\
    \    local word_character_length=0\n    local word_character_index=0\n    local\
    \ word_character_length=0\n    local word_character_index=0\n    local word_character_length=0\n\
    \    local word_character_index=0\n    local word_character_length=0\n    local\
    \ word_character_index=0\n    local word_character_length=0\n    local word_character_index=0\n\
    \    local word_character_length=0\n    local word_character_index=0\n    local\
    \ word_character_length=0\n    local word_character_index=0\n    local word_character_length=0\n\
    \    local word_character_index=0\n    local word_character_length=0\n    local\
    \ word_character_index=0\n    local word_character_length=0\n    local word_character_index=0\n\
    \    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char\n    local word_char_value\n\
    \    local word_char_prev\n    local word_char_next\n    local word_char_prev_index\n\
    \    local word_char_next_index\n    local word_char_prev_index\n    local word_char_next_index\n\
    \    local word_char_prev_value\n    local word_char_next_value\n    local word_char_prev_char\n\
    \    local word_char_next_char\n    local word_char_prev_char_value\n    local\
    \ word_char_next_char_value\n    local word_char_prev_char_index\n    local word_char_next_char_index\n\
    \    local word_char_prev_char_index\n    local word_char_next_char_index\n  \
    \  local word_char_prev_char_value\n    local word_char_next_char_value\n    local\
    \ word_char_prev_char_index\n    local word_char_next_char_index\n    local word_char_prev_char_value\n\
    \    local word_char_next_char_value\n    local word_char_prev_char_index\n  \
    \  local word_char_next_char_index\n    local word_char_prev_char_value\n    local\
    \ word_char_next_char_value\n    local word_char_prev_char_index\n    local word_char_next_char_index\n\
    \    local word_char_prev_char_value\n    local word_char_next_char_value\n  \
    \  local word_char_prev_char_index\n    local word_char_next_char_index\n    local\
    \ word_char_prev_char_value\n    local word_char_next_char_value\n    local word_char_prev_char_index\n\
    \    local word_char_next_char_index\n    local word_char_prev_char_value\n  \
    \  local word_char_next_char_value\n    local word_char_prev_char_index\n    local\
    \ word_char_next_char_index\n    local word_char_prev_char_value\n    local word_char_next_char_value\n\
    \    local word_char_prev_char_index\n    local word_char_next_char_index\n  \
    \  local word_char_prev_char_value\n    local word_char_next_char_value\n    local\
    \ word_char_prev_char_index\n    local word_char_next_char_index\n    local word_char_prev_char_value\n\
    \    local word_char_next_char_value\n    local word_char_prev_char_index\n  \
    \  local word_char_next_char_index\n    local word_char_prev_char_value\n    local\
    \ word_char_next_char_value\n    local word_char_prev_char_index\n    local word_char_next_char_index\n\
    \    local word_char_prev_char_value\n    local word_char_next_char_value\n  \
    \  local word_char_prev_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local count=0\n  local count2=0\n  local count3=0\n\
    \  local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local\
    \ count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n\
    \  local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n\
    \  local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n\
    \  local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n\
    \  local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n\
    \  local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n\
    \  local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n\
    \  local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n\
    \  local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n\
    \  local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n\
    \  local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n\
    \  local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n\
    \  local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n\
    \  local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n\
    \  local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n\
    \  local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n\
    \  local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n\
    \  local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n\
    \  local count81=0\n  local count82=0\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_char_length=0\n\
    \  local word_char_char_char_length=0\n  local word_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$string\n\
    \  local space=$'\\n'\n  local count=0\n  local count2=0\n  local count3=0\n \
    \ local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local\
    \ count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n\
    \  local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n\
    \  local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n\
    \  local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n\
    \  local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n\
    \  local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n\
    \  local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n\
    \  local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n\
    \  local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n\
    \  local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n\
    \  local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n\
    \  local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n\
    \  local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n\
    \  local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n\
    \  local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n\
    \  local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n\
    \  local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n\
    \  local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n\
    \  local count81=0\n  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_count2=0\n  local word_count3=0\n  local word_count4=0\n  local\
    \ word_count5=0\n  local word_count6=0\n  local word_count7=0\n  local word_count8=0\n\
    \  local word_count9=0\n  local word_count10=0\n  local word_count11=0\n  local\
    \ word_count12=0\n  local word_count13=0\n  local word_count14=0\n  local word_count15=0\n\
    \  local word_count16=0\n  local word_count17=0\n  local word_count18=0\n  local\
    \ word_count19=0\n  local word_count20=0\n  local word_count21=0\n  local word_count22=0\n\
    \  local word_count23=0\n  local word_count24=0\n  local word_count25=0\n  local\
    \ word_count26=0\n  local word_count27=0\n  local word_count28=0\n  local word_count29=0\n\
    \  local word_count30=0\n  local word_count31=0\n  local word_count32=0\n  local\
    \ word_count33=0\n  local word_count34=0\n  local word_count35=0\n  local word_count36=0\n\
    \  local word_count37=0\n  local word_count38=0\n  local word_count39=0\n  local\
    \ word_count40=0\n  local word_count41=0\n  local word_count42=0\n  local word_count43=0\n\
    \  local word_count44=0\n  local word_count45=0\n  local word_count46=0\n  local\
    \ word_count47=0\n  local word_count48=0\n  local word_count49=0\n  local word_count50=0\n\
    \  local word_count51=0\n  local word_count52=0\n  local word_count53=0\n  local\
    \ word_count54=0\n  local word_count55=0\n  local word_count56=0\n  local word_count57=0\n\
    \  local word_count58=0\n  local word_count59=0\n  local word_count60=0\n  local\
    \ word_count61=0\n  local word_count62=0\n  local word_count63=0\n  local word_count64=0\n\
    \  local word_count65=0\n  local word_count66=0\n  local word_count67=0\n  local\
    \ word_count68=0\n  local word_count69=0\n  local word_count70=0\n  local word_count71=0\n\
    \  local word_count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word\n    for word in $string; do\n        local new_word\n        new_word=$(echo\
    \ $word | sed 's/ /\\n/g' | sort -u)\n        new_string=\"$new_string $new_word\"\
    \n    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_count2=0\n\
    \  local word_index2=0\n  local word_length2=0\n  local word_count3=0\n  local\
    \ word_index3=0\n  local word_length3=0\n  local word_count4=0\n  local word_index4=0\n\
    \  local word_length4=0\n  local word_count5=0\n  local word_index5=0\n  local\
    \ word_length5=0\n  local word_count6=0\n  local word_index6=0\n  local word_length6=0\n\
    \  local word_count7=0\n  local word_index7=0\n  local word_length7=0\n  local\
    \ word_count8=0\n  local word_index8=0\n  local word_length8=0\n  local word_count9=0\n\
    \  local word_index9=0\n  local word_length9=0\n  local word_count10=0\n  local\
    \ word_index10=0\n  local word_length10=0\n  local word_count11=0\n  local word_index11=0\n\
    \  local word_length11=0\n  local word_count12=0\n  local word_index12=0\n  local\
    \ word_length12=0\n  local word_count13=0\n  local word_index13=0\n  local word_length13=0\n\
    \  local word_count14=0\n  local word_index14=0\n  local word_length14=0\n  local\
    \ word_count15=0\n  local word_index15=0\n  local word_length15=0\n  local word_count16=0\n\
    \  local word_index16=0\n  local word_length16=0\n  local word_count17=0\n  local\
    \ word_index17=0\n  local word_length17=0\n  local word_count18=0\n  local word_index18=0\n\
    \  local word_length18=0\n  local word_count19=0\n  local word_index19=0\n  local\
    \ word_length19=0\n  local word_count20=0\n  local word_index20=0\n  local word_length20=0\n\
    \  local word_count21=0\n  local word_index21=0\n  local word_length21=0\n  local\
    \ word_count22=0\n  local word_index22=0\n  local word_length22=0\n  local word_count23=0\n\
    \  local word_index23=0\n  local word_length23=0\n  local word_count24=0\n  local\
    \ word_index24\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local length\n  local word\n  local word_length\n  local word_count\n\
    \  local new_word\n  local new_word_count\n  local new_word_length\n  local new_word_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_word_length_index\n  local new_word_length_index\n\
    \  local new_word_length_index\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        if [ $char_value -gt $j ]; then\n            new_string=$new_string$char\n\
    \            j=$char_value\n        fi\n        i=$((i+1))\n    done\n    echo\
    \ $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpojq6gwzk.sh: line 18: [: -gt: unary operator expected

    /tmp/tmpojq6gwzk.sh: line 18: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_char=0\n\
    \  local word_char_char_count=0\n  local word_char_char_length=0\n  local word_char_char_char=0\n\
    \  local word_char_char_char_count=0\n  local word_char_char_char_length=0\n \
    \ local word_char_char_char_char=0\n  local word_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_length=0\n  local word_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_count=0\n  local word_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char=0\n  local word_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_count=0\n  local word_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char=0\n  local word_char_char_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_count=0\n  local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char=0\n  local word_char_char_char_char_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_length=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char=0\n  local word_char_char_char_char_char_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_count=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local new_count=0\n  local char_count=0\n  local char_index=0\n  local char_index2=0\n\
    \  local char_index3=0\n  local char_index4=0\n  local char_index5=0\n  local\
    \ char_index6=0\n  local char_index7=0\n  local char_index8=0\n  local char_index9=0\n\
    \  local char_index10=0\n  local char_index11=0\n  local char_index12=0\n  local\
    \ char_index13=0\n  local char_index14=0\n  local char_index15=0\n  local char_index16=0\n\
    \  local char_index17=0\n  local char_index18=0\n  local char_index19=0\n  local\
    \ char_index20=0\n  local char_index21=0\n  local char_index22=0\n  local char_index23=0\n\
    \  local char_index24=0\n  local char_index25=0\n  local char_index26=0\n  local\
    \ char_index27=0\n  local char_index28=0\n  local char_index29=0\n  local char_index30=0\n\
    \  local char_index31=0\n  local char_index32=0\n  local char_index33=0\n  local\
    \ char_index34=0\n  local char_index35=0\n  local char_index36=0\n  local char_index37=0\n\
    \  local char_index38=0\n  local char_index39=0\n  local char_index40=0\n  local\
    \ char_index41=0\n  local char_index42=0\n  local char_index43=0\n  local char_index44=0\n\
    \  local char_index45=0\n  local char_index46=0\n  local char_index47=0\n  local\
    \ char_index48=0\n  local char_index49=0\n  local char_index50=0\n  local char_index51=0\n\
    \  local char_index52=0\n  local char_index53=0\n  local char_index54=0\n  local\
    \ char_index55=0\n  local char_index56=0\n  local char_index57=0\n  local char_index58=0\n\
    \  local char_index59=0\n  local char_index60=0\n  local char_index61=0\n  local\
    \ char_index62=0\n  local char_index63=0\n  local char_index64=0\n  local char_index65=0\n\
    \  local char_index66=0\n  local char_index67=0\n  local char_index68=0\n  local\
    \ char_index69=0\n  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local\
    \ h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local\
    \ n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local\
    \ t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local\
    \ z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local\
    \ d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_space=\"\"\n  local new_letter=\"\"\n  local new_letter_value=\"\
    \"\n  local new_letter_value2=\"\"\n  local new_letter_value3=\"\"\n  local new_letter_value4=\"\
    \"\n  local new_letter_value5=\"\"\n  local new_letter_value6=\"\"\n  local new_letter_value7=\"\
    \"\n  local new_letter_value8=\"\"\n  local new_letter_value9=\"\"\n  local new_letter_value10=\"\
    \"\n  local new_letter_value11=\"\"\n  local new_letter_value12=\"\"\n  local\
    \ new_letter_value13=\"\"\n  local new_letter_value14=\"\"\n  local new_letter_value15=\"\
    \"\n  local new_letter_value16=\"\"\n  local new_letter_value17=\"\"\n  local\
    \ new_letter_value18=\"\"\n  local new_letter_value19=\"\"\n  local new_letter_value20=\"\
    \"\n  local new_letter_value21=\"\"\n  local new_letter_value22=\"\"\n  local\
    \ new_letter_value23=\"\"\n  local new_letter_value24=\"\"\n  local new_letter_value25=\"\
    \"\n  local new_letter_value26=\"\"\n  local new_letter_value27=\"\"\n  local\
    \ new_letter_value28=\"\"\n  local new_letter_value29=\"\"\n  local new_letter_value30=\"\
    \"\n  local new_letter_value31=\"\"\n  local new_letter_value32=\"\"\n  local\
    \ new_letter_value33=\"\"\n  local new_letter_value34=\"\"\n  local new_letter_value35=\"\
    \"\n  local new_letter_value36=\"\"\n  local new_letter_value37=\"\"\n  local\
    \ new_letter_value38=\"\"\n  local new_letter_value39=\"\"\n  local new_letter_value40=\"\
    \"\n  local new_letter_value41=\"\"\n  local new_letter_value42=\"\"\n  local\
    \ new_letter_value43=\"\"\n  local new_letter_value44=\"\"\n  local new_letter_value45=\"\
    \"\n  local new_letter_value46=\"\"\n  local new_letter_value47=\"\"\n  local\
    \ new_letter_value48=\"\"\n  local new_letter_value49=\"\"\n  local new_letter_value50=\"\
    \"\n  local new_letter_value51=\"\"\n  local new_letter_value52=\"\"\n  local\
    \ new_letter_value53=\"\"\n  local new_letter_value54=\"\"\n  local new_letter_value55=\"\
    \"\n  local new_letter_value56=\"\"\n  local new_letter_value57=\"\"\n  local\
    \ new_letter_value58=\"\"\n  local new_letter_value59=\"\"\n  local new_letter_value60=\"\
    \"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local count2=0\n    local count3=0\n    local count4=0\n    local\
    \ count5=0\n    local count6=0\n    local count7=0\n    local count8=0\n    local\
    \ count9=0\n    local count10=0\n    local count11=0\n    local count12=0\n  \
    \  local count13=0\n    local count14=0\n    local count15=0\n    local count16=0\n\
    \    local count17=0\n    local count18=0\n    local count19=0\n    local count20=0\n\
    \    local count21=0\n    local count22=0\n    local count23=0\n    local count24=0\n\
    \    local count25=0\n    local count26=0\n    local count27=0\n    local count28=0\n\
    \    local count29=0\n    local count30=0\n    local count31=0\n    local count32=0\n\
    \    local count33=0\n    local count34=0\n    local count35=0\n    local count36=0\n\
    \    local count37=0\n    local count38=0\n    local count39=0\n    local count40=0\n\
    \    local count41=0\n    local count42=0\n    local count43=0\n    local count44=0\n\
    \    local count45=0\n    local count46=0\n    local count47=0\n    local count48=0\n\
    \    local count49=0\n    local count50=0\n    local count51=0\n    local count52=0\n\
    \    local count53=0\n    local count54=0\n    local count55=0\n    local count56=0\n\
    \    local count57=0\n    local count58=0\n    local count59=0\n    local count60=0\n\
    \    local count61=0\n    local count62=0\n    local count63=0\n    local count64=0\n\
    \    local count65=0\n    local count66=0\n    local count67=0\n    local count68=0\n\
    \    local count69=0\n    local count70=0\n    local count71=0\n    local count72=0\n\
    \    local count73=0\n    local count74=0\n    local count75=0\n    local count76=0\n\
    \    local count77=0\n    local count78=0\n    local count79=0\n    local count80=0\n\
    \    local count81=0\n    local count82=0\n    local count83=0\n    local count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local count=0\n  local count2=0\n  local count3=0\n  local count4=0\n  local\
    \ count5=0\n  local count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n\
    \  local count10=0\n  local count11=0\n  local count12=0\n  local count13=0\n\
    \  local count14=0\n  local count15=0\n  local count16=0\n  local count17=0\n\
    \  local count18=0\n  local count19=0\n  local count20=0\n  local count21=0\n\
    \  local count22=0\n  local count23=0\n  local count24=0\n  local count25=0\n\
    \  local count26=0\n  local count27=0\n  local count28=0\n  local count29=0\n\
    \  local count30=0\n  local count31=0\n  local count32=0\n  local count33=0\n\
    \  local count34=0\n  local count35=0\n  local count36=0\n  local count37=0\n\
    \  local count38=0\n  local count39=0\n  local count40=0\n  local count41=0\n\
    \  local count42=0\n  local count43=0\n  local count44=0\n  local count45=0\n\
    \  local count46=0\n  local count47=0\n  local count48=0\n  local count49=0\n\
    \  local count50=0\n  local count51=0\n  local count52=0\n  local count53=0\n\
    \  local count54=0\n  local count55=0\n  local count56=0\n  local count57=0\n\
    \  local count58=0\n  local count59=0\n  local count60=0\n  local count61=0\n\
    \  local count62=0\n  local count63=0\n  local count64=0\n  local count65=0\n\
    \  local count66=0\n  local count67=0\n  local count68=0\n  local count69=0\n\
    \  local count70=0\n  local count71=0\n  local count72=0\n  local count73=0\n\
    \  local count74=0\n  local count75=0\n  local count76=0\n  local count77=0\n\
    \  local count78=0\n  local count79=0\n  local count80=0\n  local count81=0\n\
    \  local count82=0\n  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index1=0\n  local word_char_length1=0\n\
    \  local word_char_index2=0\n  local word_char_length2=0\n  local word_char_index3=0\n\
    \  local word_char_length3=0\n  local word_char_index4=0\n  local word_char_length4=0\n\
    \  local word_char_index5=0\n  local word_char_length5=0\n  local word_char_index6=0\n\
    \  local word_char_length6=0\n  local word_char_index7=0\n  local word_char_length7=0\n\
    \  local word_char_index8=0\n  local word_char_length8=0\n  local word_char_index9=0\n\
    \  local word_char_length9=0\n  local word_char_index10=0\n  local word_char_length10=0\n\
    \  local word_char_index11=0\n  local word_char_length11=0\n  local word_char_index12=0\n\
    \  local word_char_length12=0\n  local word_char_index13=0\n  local word_char_length13=0\n\
    \  local word_char_index14=0\n  local word_char_length14=0\n  local word_char_index15=0\n\
    \  local word_char_length15=0\n  local word_char_index16=0\n  local word_char_length16=0\n\
    \  local word_char_index17=0\n  local word_char_length17=0\n  local word_char_index18=0\n\
    \  local word_char_length18=0\n  local word_char_index19=0\n  local word_char_length19=0\n\
    \  local word_char_index20=0\n  local word_char_length20=0\n  local word_char_index21=0\n\
    \  local word_char_length21=0\n  local word_char_index22=0\n  local word_char_length22=0\n\
    \  local word_char_index23=0\n  local word_char_length23=0\n  local word_char_index24=0\n\
    \  local word_char_length24=0\n  local word_char_index25=0\n  local word_char_length25=0\n\
    \  local word_char_index26=0\n  local word_char_length26=0\n  local word_char_index27=0\n\
    \  local word_char_length27=0\n  local word_char_index28=0\n  local word_char_length28=0\n\
    \  local word_char_index29=0\n  local word_char_length29=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc_dubqk_.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmpc_dubqk_.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local new_count=0\n  local last_char=\"\"\n  local last_char_count=0\n  local\
    \ last_char_index=0\n  local last_char_position=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index=0\n  local\
    \ last_char_position_index=0\n  local last_char_position_index=0\n  local last_char_position_index=0\n\
    \  local last_char_position_index=0\n  local last_char_position_index\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local new_string2=\"\
    \"\n    local new_string3=\"\"\n    local new_string4=\"\"\n    local new_string5=\"\
    \"\n    local new_string6=\"\"\n    local new_string7=\"\"\n    local new_string8=\"\
    \"\n    local new_string9=\"\"\n    local new_string10=\"\"\n    local new_string11=\"\
    \"\n    local new_string12=\"\"\n    local new_string13=\"\"\n    local new_string14=\"\
    \"\n    local new_string15=\"\"\n    local new_string16=\"\"\n    local new_string17=\"\
    \"\n    local new_string18=\"\"\n    local new_string19=\"\"\n    local new_string20=\"\
    \"\n    local new_string21=\"\"\n    local new_string22=\"\"\n    local new_string23=\"\
    \"\n    local new_string24=\"\"\n    local new_string25=\"\"\n    local new_string26=\"\
    \"\n    local new_string27=\"\"\n    local new_string28=\"\"\n    local new_string29=\"\
    \"\n    local new_string30=\"\"\n    local new_string31=\"\"\n    local new_string32=\"\
    \"\n    local new_string33=\"\"\n    local new_string34=\"\"\n    local new_string35=\"\
    \"\n    local new_string36=\"\"\n    local new_string37=\"\"\n    local new_string38=\"\
    \"\n    local new_string39=\"\"\n    local new_string40=\"\"\n    local new_string41=\"\
    \"\n    local new_string42=\"\"\n    local new_string43=\"\"\n    local new_string44=\"\
    \"\n    local new_string45=\"\"\n    local new_string46=\"\"\n    local new_string47=\"\
    \"\n    local new_string48=\"\"\n    local new_string49=\"\"\n    local new_string50=\"\
    \"\n    local new_string51=\"\"\n    local new_string52=\"\"\n    local new_string53=\"\
    \"\n    local new_string54=\"\"\n    local new_string55=\"\"\n    local new_string56=\"\
    \"\n    local new_string57=\"\"\n    local new_string58=\"\"\n    local new_string59=\"\
    \"\n    local new_string60=\"\"\n    local new_string61=\"\"\n    local new_string62=\"\
    \"\n    local new_string63=\"\"\n    local new_string64=\"\"\n    local new_string65=\"\
    \"\n    local new_string66=\"\"\n    local new_string67=\"\"\n    local new_string68=\"\
    \"\n    local new_string69=\"\"\n    local new_string70=\"\"\n    local new_string71=\"\
    \"\n    local new_string72=\"\"\n    local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local i=0 j=0\n  local words=\"\"\n  local space=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n    local\
    \ F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n\
    \    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n \
    \   local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n  \
    \  local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n   \
    \ local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local\
    \ f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n    local\
    \ F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n\
    \    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n \
    \   local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n  \
    \  local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n   \
    \ local a=0\n    local b=0\n    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        if [ $i -eq 0 ]; then\n  \
    \          new_string=\"${new_string} ${string}\"\n        else\n            local\
    \ first_char=${string:$i:1}\n            local second_char=${string:$((i+1)):1}\n\
    \            local third_char=${string:$((i+2)):1}\n            local fourth_char=${string:$((i+3)):1}\n\
    \            local fifth_char=${string:$((i+4)):1}\n            local sixth_char=${string:$((i+5)):1}\n\
    \            local seventh_char=${string:$((i+6)):1}\n            local eighth_char=${string:$((i+7)):1}\n\
    \            local ninth_char=${string:$((i+8)):1}\n            local tenth_char=${string:$((i+9)):1}\n\
    \            local eleventh_char=${string:$((i+10)):1}\n            local twelfth_char=${string:$((i+11)):1}\n\
    \            local thirteenth_char=${string:$((i+12)):1}\n            local fourteenth_char=${string:$((i+13)):1}\n\
    \            local fifteenth_char=${string:$((i+14)):1}\n            local sixteenth_char=${string:$((i+15)):1}\n\
    \            local seventeenth_char=${string:$((i+16)):1}\n            local eighteenth_char=${string:$((i+17)):1}\n\
    \            local nineteenth_char=${string:$((i+18)):1}\n            local twentieth_char=${string:$((i+19)):1}\n\
    \            local twenty_char=${string:$((i+20)):1}\n            local twenty_one_char=${string:$((i+21))}\n\
    \            local twenty_two_char=${string:$((i+22))}\n            local twenty_three_char=${string:$((i+23))}\n\
    \            local twenty_four_char=${string:$((i+24))}\n            local twenty_five_char=${string:$((i+25))}\n\
    \            local twenty_six_char=${string:$((i+26))}\n            local twenty_seven_char=${string:$((i+27))}\n\
    \            local twenty_eight_char=${string:$((i+28))}\n            local twenty_nine_char=${string:$((i+29))}\n\
    \            local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb2e56ji7.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpb2e56ji7.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local ascii_val=$(echo $char | sed 's/\\(.\\)/\\1/g')\n        if [ $ascii_val\
    \ -gt $j ]; then\n            local new_char=$(echo $char | sed 's/\\(.\\)/\\\
    1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' |\
    \ sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed\
    \ 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\\
    (.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\\
    1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' |\
    \ sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed\
    \ 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\\
    (.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\\
    1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' |\
    \ sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed\
    \ 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\\
    (.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ak41qb_.sh: line 18: unexpected EOF while looking for matching
    `''''

    /tmp/tmp3ak41qb_.sh: line 37: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_length_count=0\n  local\
    \ word_length_total=0\n  local word_length_index=0\n  local word_length_total_index=0\n\
    \  local word_length_total_count=0\n  local word_length_total_index=0\n  local\
    \ word_length_total_count2=0\n  local word_length_total_index2=0\n  local word_length_total_count3=0\n\
    \  local word_length_total_index3=0\n  local word_length_total_count4=0\n  local\
    \ word_length_total_index4=0\n  local word_length_total_count5=0\n  local word_length_total_index5=0\n\
    \  local word_length_total_count6=0\n  local word_length_total_index6=0\n  local\
    \ word_length_total_count7=0\n  local word_length_total_index7=0\n  local word_length_total_count8=0\n\
    \  local word_length_total_index8=0\n  local word_length_total_count9=0\n  local\
    \ word_length_total_index9=0\n  local word_length_total_count10=0\n  local word_length_total_index10=0\n\
    \  local word_length_total_count11=0\n  local word_length_total_index11=0\n  local\
    \ word_length_total_count12=0\n  local word_length_total_index12=0\n  local word_length_total_count13=0\n\
    \  local word_length_total_index13=0\n  local word_length_total_count14=0\n  local\
    \ word_length_total_index14=0\n  local word_length_total_count15=0\n  local word_length_total_index15=0\n\
    \  local word_length_total_count16=0\n  local word_length_total_index16=0\n  local\
    \ word_length_total_count17=0\n  local word_length_total_index17=0\n  local word_length_total_count18=0\n\
    \  local word_length_total_index18=0\n  local word_length_total_count19=0\n  local\
    \ word_length_total_index19=0\n  local word_length_total_count20=0\n  local word_length_total_index20=0\n\
    \  local word_length_total_count21=0\n  local word_length_total_index21=0\n  local\
    \ word_length_total_count22=0\n  local word_length_total_index22=0\n  local word_length_total_count23=0\n\
    \  local word_length_total_index23=0\n  local word_length_total_count24=0\n  local\
    \ word_length_total_index24=0\n  local word_length_total_count25=0\n  local word_length_total_index25=0\n\
    \  local word_length_total_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    while [ $i -lt ${#string} ]; do\n        word_count=$((word_count+1))\n\
    \        i=$((i+1))\n        local char=${string:$i:1}\n        if [ $char ]\n\
    \        then\n            local char_value=$(echo $char | tr -d \"[:space:]\"\
    )\n            local new_char_value=$((char_value+65))\n            local new_char=$(echo\
    \ $new_char_value | bc)\n            local new_word=\"${new_string%$char}${new_char}\"\
    \n            new_string=\"${new_string%$char}${new_word}\"\n        fi\n    done\n\
    \    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local i\n  for i in $string; do\n    count=$((count+1))\n    if [ \"$count\"\
    \ -gt \"$#\" ]; then\n      new_string=\"$new_string $i\"\n      count=0\n   \
    \ else\n      new_string=\"$new_string $i\"\n    fi\n  done\n  echo \"$new_string\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_space=\"\"\n  local new_char=\"\"\n  local new_char2=\"\"\n  local\
    \ new_char3=\"\"\n  local new_char4=\"\"\n  local new_char5=\"\"\n  local new_char6=\"\
    \"\n  local new_char7=\"\"\n  local new_char8=\"\"\n  local new_char9=\"\"\n \
    \ local new_char10=\"\"\n  local new_char11=\"\"\n  local new_char12=\"\"\n  local\
    \ new_char13=\"\"\n  local new_char14=\"\"\n  local new_char15=\"\"\n  local new_char16=\"\
    \"\n  local new_char17=\"\"\n  local new_char18=\"\"\n  local new_char19=\"\"\n\
    \  local new_char20=\"\"\n  local new_char21=\"\"\n  local new_char22=\"\"\n \
    \ local new_char23=\"\"\n  local new_char24=\"\"\n  local new_char25=\"\"\n  local\
    \ new_char26=\"\"\n  local new_char27=\"\"\n  local new_char28=\"\"\n  local new_char29=\"\
    \"\n  local new_char30=\"\"\n  local new_char31=\"\"\n  local new_char32=\"\"\n\
    \  local new_char33=\"\"\n  local new_char34=\"\"\n  local new_char35=\"\"\n \
    \ local new_char36=\"\"\n  local new_char37=\"\"\n  local new_char38=\"\"\n  local\
    \ new_char39=\"\"\n  local new_char40=\"\"\n  local new_char41=\"\"\n  local new_char42=\"\
    \"\n  local new_char43=\"\"\n  local new_char44=\"\"\n  local new_char45=\"\"\n\
    \  local new_char46=\"\"\n  local new_char47=\"\"\n  local new_char48=\"\"\n \
    \ local new_char49=\"\"\n  local new_char50=\"\"\n  local new_char51=\"\"\n  local\
    \ new_char52=\"\"\n  local new_char53=\"\"\n  local new_char54=\"\"\n  local new_char55=\"\
    \"\n  local new_char56=\"\"\n  local new_char57=\"\"\n  local new_char58=\"\"\n\
    \  local new_char59=\"\"\n  local new_char60=\"\"\n  local new_char61=\"\"\n \
    \ local new_char62=\"\"\n  local new_char63=\"\"\n  local new_char64=\"\"\n  local\
    \ new_char65=\"\"\n  local new_char66=\"\"\n  local new_char67=\"\"\n  local new_char68=\"\
    \"\n  local new_char69=\"\"\n  local new_char70=\"\"\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local words=\"\"\n  local space=\"\"\n  local word=\"\"\n  local character=\"\
    \"\n  local characters=\"\"\n  local characters_string=\"\"\n  local characters_string2=\"\
    \"\n  local characters_string3=\"\"\n  local characters_string4=\"\"\n  local\
    \ characters_string5=\"\"\n  local characters_string6=\"\"\n  local characters_string7=\"\
    \"\n  local characters_string8=\"\"\n  local characters_string9=\"\"\n  local\
    \ characters_string10=\"\"\n  local characters_string11=\"\"\n  local characters_string12=\"\
    \"\n  local characters_string13=\"\"\n  local characters_string14=\"\"\n  local\
    \ characters_string15=\"\"\n  local characters_string16=\"\"\n  local characters_string17=\"\
    \"\n  local characters_string18=\"\"\n  local characters_string19=\"\"\n  local\
    \ characters_string20=\"\"\n  local characters_string21=\"\"\n  local characters_string22=\"\
    \"\n  local characters_string23=\"\"\n  local characters_string24=\"\"\n  local\
    \ characters_string25=\"\"\n  local characters_string26=\"\"\n  local characters_string27=\"\
    \"\n  local characters_string28=\"\"\n  local characters_string29=\"\"\n  local\
    \ characters_string30=\"\"\n  local characters_string31=\"\"\n  local characters_string32=\"\
    \"\n  local characters_string33=\"\"\n  local characters_string34=\"\"\n  local\
    \ characters_string35=\"\"\n  local characters_string36=\"\"\n  local characters_string37=\"\
    \"\n  local characters_string38=\"\"\n  local characters_string39=\"\"\n  local\
    \ characters_string40=\"\"\n  local characters_string41=\"\"\n  local characters_string42=\"\
    \"\n  local characters_string43=\"\"\n  local characters_string44=\"\"\n  local\
    \ characters_string45=\"\"\n  local characters_string46=\"\"\n  local characters_string47=\"\
    \"\n  local characters_string48=\"\"\n  local characters_string49=\"\"\n  local\
    \ characters_string50=\"\"\n  local characters_string51=\"\"\n  local characters_string52=\"\
    \"\n  local characters_string53=\"\"\n  local characters_string54=\"\"\n  local\
    \ characters_string55=\"\"\n  local characters_string56=\"\"\n  local characters_string57=\"\
    \"\n  local characters_string58=\"\"\n  local character\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_space=\"\"\n  local new_char=\"\"\n  local new_char2=\"\"\n  local\
    \ new_char3=\"\"\n  local new_char4=\"\"\n  local new_char5=\"\"\n  local new_char6=\"\
    \"\n  local new_char7=\"\"\n  local new_char8=\"\"\n  local new_char9=\"\"\n \
    \ local new_char10=\"\"\n  local new_char11=\"\"\n  local new_char12=\"\"\n  local\
    \ new_char13=\"\"\n  local new_char14=\"\"\n  local new_char15=\"\"\n  local new_char16=\"\
    \"\n  local new_char17=\"\"\n  local new_char18=\"\"\n  local new_char19=\"\"\n\
    \  local new_char20=\"\"\n  local new_char21=\"\"\n  local new_char22=\"\"\n \
    \ local new_char23=\"\"\n  local new_char24=\"\"\n  local new_char25=\"\"\n  local\
    \ new_char26=\"\"\n  local new_char27=\"\"\n  local new_char28=\"\"\n  local new_char29=\"\
    \"\n  local new_char30=\"\"\n  local new_char31=\"\"\n  local new_char32=\"\"\n\
    \  local new_char33=\"\"\n  local new_char34=\"\"\n  local new_char35=\"\"\n \
    \ local new_char36=\"\"\n  local new_char37=\"\"\n  local new_char38=\"\"\n  local\
    \ new_char39=\"\"\n  local new_char40=\"\"\n  local new_char41=\"\"\n  local new_char42=\"\
    \"\n  local new_char43=\"\"\n  local new_char44=\"\"\n  local new_char45=\"\"\n\
    \  local new_char46=\"\"\n  local new_char47=\"\"\n  local new_char48=\"\"\n \
    \ local new_char49=\"\"\n  local new_char50=\"\"\n  local new_char51=\"\"\n  local\
    \ new_char52=\"\"\n  local new_char53=\"\"\n  local new_char54=\"\"\n  local new_char55=\"\
    \"\n  local new_char56=\"\"\n  local new_char57=\"\"\n  local new_char58=\"\"\n\
    \  local new_char59=\"\"\n  local new_char60=\"\"\n  local new_char61=\"\"\n \
    \ local new_char62=\"\"\n  local new_char63=\"\"\n  local new_char64=\"\"\n  local\
    \ new_char65=\"\"\n  local new_char66=\"\"\n  local new_char67=\"\"\n  local new_char68=\"\
    \"\n  local new_char69=\"\"\n  local new_char70=\"\"\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local len\n  local word\n  local char\n  local tmp\n\
    \  local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local\
    \ tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n\
    \  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n \
    \ local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local tmp22\n  local\
    \ tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n\
    \  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n \
    \ local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local tmp38\n  local\
    \ tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n\
    \  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n \
    \ local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local tmp54\n  local\
    \ tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n\
    \  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n \
    \ local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local tmp70\n  local\
    \ tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n\
    \  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n \
    \ local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local tmp86\n  local\
    \ tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n\
    \  local tmp93\n  local tmp94\n  local tmp95\n  local \n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local\
    \ h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local\
    \ n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local\
    \ t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local\
    \ z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local\
    \ d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word\n\
    \  local i\n  local j\n  local k\n  local len\n  local count\n  local char\n \
    \ local temp\n  local count2\n  local count3\n  local count4\n  local count5\n\
    \  local count6\n  local count7\n  local count8\n  local count9\n  local count10\n\
    \  local count11\n  local count12\n  local count13\n  local count14\n  local count15\n\
    \  local count16\n  local count17\n  local count18\n  local count19\n  local count20\n\
    \  local count21\n  local count22\n  local count23\n  local count24\n  local count25\n\
    \  local count26\n  local count27\n  local count28\n  local count29\n  local count30\n\
    \  local count31\n  local count32\n  local count33\n  local count34\n  local count35\n\
    \  local count36\n  local count37\n  local count38\n  local count39\n  local count40\n\
    \  local count41\n  local count42\n  local count43\n  local count44\n  local count45\n\
    \  local count46\n  local count47\n  local count48\n  local count49\n  local count50\n\
    \  local count51\n  local count52\n  local count53\n  local count54\n  local count55\n\
    \  local count56\n  local count57\n  local count58\n  local count59\n  local count60\n\
    \  local count61\n  local count62\n  local count63\n  local count64\n  local count65\n\
    \  local count66\n  local count67\n  local count68\n  local count69\n  local count70\n\
    \  local count71\n  local count72\n  local count73\n  local count74\n  local count75\n\
    \  local count76\n  local count77\n  local count78\n  local count79\n  local count80\n\
    \  local count81\n  local count82\n  local count83\n  local count84\n  local count85\n\
    \  local count86\n  local count87\n  local count88\n  local count89\n  local count90\n\
    \  local count91\n  local count92\n  local count93\n  local count94\n  local count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output\n  output=\"$(echo \"\
    $string\" | sed -e 's/\\s/ /g' | sed -e 's/\\([^ ]\\)/\\1 /g' | sort -n | sed\
    \ -e 's/ /\\n/g')\"\n  echo \"$output\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_length_count=0\n  local\
    \ word_length_count2=0\n  local word_length_count3=0\n  local word_length_count4=0\n\
    \  local word_length_count5=0\n  local word_length_count6=0\n  local word_length_count7=0\n\
    \  local word_length_count8=0\n  local word_length_count9=0\n  local word_length_count10=0\n\
    \  local word_length_count11=0\n  local word_length_count12=0\n  local word_length_count13=0\n\
    \  local word_length_count14=0\n  local word_length_count15=0\n  local word_length_count16=0\n\
    \  local word_length_count17=0\n  local word_length_count18=0\n  local word_length_count19=0\n\
    \  local word_length_count20=0\n  local word_length_count21=0\n  local word_length_count22=0\n\
    \  local word_length_count23=0\n  local word_length_count24=0\n  local word_length_count25=0\n\
    \  local word_length_count26=0\n  local word_length_count27=0\n  local word_length_count28=0\n\
    \  local word_length_count29=0\n  local word_length_count30=0\n  local word_length_count31=0\n\
    \  local word_length_count32=0\n  local word_length_count33=0\n  local word_length_count34=0\n\
    \  local word_length_count35=0\n  local word_length_count36=0\n  local word_length_count37=0\n\
    \  local word_length_count38=0\n  local word_length_count39=0\n  local word_length_count40=0\n\
    \  local word_length_count41=0\n  local word_length_count42=0\n  local word_length_count43=0\n\
    \  local word_length_count44=0\n  local word_length_count45=0\n  local word_length_count46=0\n\
    \  local word_length_count47=0\n  local word_length_count48=0\n  local word_length_count49=0\n\
    \  local word_length_count50=0\n  local word_length_count51=0\n  local word_length_count52=0\n\
    \  local word_length_count53=0\n  local word_length_count54=0\n  local word_length_count55=0\n\
    \  local word_length_count56=0\n  local word_length_count57=0\n  local word_length_count58=0\n\
    \  local word_length_count59=0\n  local word_length_count60=0\n  local \n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_length_count=0\n  local\
    \ word_length_length=0\n  local word_length_length_count=0\n  local word_length_length_length=0\n\
    \  local word_length_length_length_count=0\n  local word_length_length_length_length=0\n\
    \  local word_length_length_length_length_count=0\n  local word_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_count=0\n  local word_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_count=0\n  local word_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length=0\n  local\
    \ word_length_length_length_length_length_length_length_count=0\n  local word_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_length_length_length_length_count=0\n\
    \  local word_length_length_length_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local len\n  local word\n  local char\n  local char_ascii\n\
    \  local char_ascii2\n  local char_ascii3\n  local char_ascii4\n  local char_ascii5\n\
    \  local char_ascii6\n  local char_ascii7\n  local char_ascii8\n  local char_ascii9\n\
    \  local char_ascii10\n  local char_ascii11\n  local char_ascii12\n  local char_ascii13\n\
    \  local char_ascii14\n  local char_ascii15\n  local char_ascii16\n  local char_ascii17\n\
    \  local char_ascii18\n  local char_ascii19\n  local char_ascii20\n  local char_ascii21\n\
    \  local char_ascii22\n  local char_ascii23\n  local char_ascii24\n  local char_ascii25\n\
    \  local char_ascii26\n  local char_ascii27\n  local char_ascii28\n  local char_ascii29\n\
    \  local char_ascii30\n  local char_ascii31\n  local char_ascii32\n  local char_ascii33\n\
    \  local char_ascii34\n  local char_ascii35\n  local char_ascii36\n  local char_ascii37\n\
    \  local char_ascii38\n  local char_ascii39\n  local char_ascii40\n  local char_ascii41\n\
    \  local char_ascii42\n  local char_ascii43\n  local char_ascii44\n  local char_ascii45\n\
    \  local char_ascii46\n  local char_ascii47\n  local char_ascii48\n  local char_ascii49\n\
    \  local char_ascii50\n  local char_ascii51\n  local char_ascii52\n  local char_ascii53\n\
    \  local char_ascii54\n  local char_ascii55\n  local char_ascii56\n  local char_ascii57\n\
    \  local char_ascii58\n  local char_ascii59\n  local char_ascii60\n  local char_ascii61\n\
    \  local char_ascii62\n  local char_ascii63\n  local char_ascii64\n  local char_ascii65\n\
    \  local char_ascii66\n  local char_ascii67\n  local char_ascii68\n  local char_ascii69\n\
    \  local char_ascii70\n  local char_ascii71\n  local char_ascii72\n  local char_ascii73\n\
    \  local char_ascii74\n  local char_ascii75\n  local char_ascii76\n  local char_ascii77\n\
    \  local char_ascii78\n  local char_ascii79\n  local char_\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local\
    \ h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local\
    \ n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local\
    \ t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local\
    \ z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local\
    \ d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local e=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    while [ $i -lt ${#string} ]; do\n        local j=0\n        while [ $j -lt\
    \ ${#new_string} ]; do\n            local char=${string:$i:1}\n            local\
    \ char_value=${char:0:1}\n            local char_value_ascii=${char_value:0:1}\n\
    \            local char_value_ascii_value=${char_value_ascii:0:1}\n          \
    \  if [ $char_value_ascii_value -gt $j ]; then\n                char=${char:1:1}\n\
    \                char_value=${char_value:1:1}\n                char_value_ascii=${char_value_ascii:1:1}\n\
    \                char_value_ascii_value=${char_value_ascii_value:1:1}\n      \
    \      fi\n            local char_value_ascii_value=${char_value_ascii_value:0:1}\n\
    \            if [ $char_value_ascii_value -eq $j ]; then\n                char=${char:0:1}\n\
    \                char_value=${char_value:0:1}\n                char_value_ascii=${char_value_ascii:0:1}\n\
    \                char_value_ascii_value=${char_value_ascii_value:0:1}\n      \
    \      fi\n            local char_value_ascii_value=${char_value_ascii_value:0:1}\n\
    \            if [ $char_value_ascii_value -lt $j ]; then\n                char=${char:1:1}\n\
    \                char_value=${char_value:1:1}\n                char_value_ascii=${char_value_ascii:1:1}\n\
    \                char_value_ascii_value=${char_value_ascii_value:1:1}\n      \
    \      fi\n            local char_value_ascii_value=${char_value_ascii_value:0:1}\n\
    \            if [ $char_value_ascii_value -eq $j ]; then\n                char=${char:0:1}\n\
    \                char_value=${char_value:0:1}\n                char_value_ascii=${char_value_ascii:0:1}\n\
    \                char_value_ascii_value=${char_value_ascii_value:0:1}\n      \
    \      fi\n            local char_value_ascii_value=${char_value_ascii_value:0:1}\n\
    \            if [ $char_value_ascii_value -lt $j ]; then\n                char=${char:1:1}\n\
    \                char_value=${char_value:1:1}\n                char_value_ascii=${char_value_ascii:1:1}\n\
    \                char_value_ascii_value=${char_value_ascii_value:1:1}\n      \
    \      fi\n            local char_value_ascii_value=${char_value_ascii_value:0:1}\n\
    \            if [ $char_value_ascii_value -eq $j ]; then\n                char=${char:0:1}\n\
    \                char_value=${char_value:0:1}\n                char_value_ascii=${char_value_ascii:0:1}\n\
    \                char\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsxirw1pg.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmpsxirw1pg.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word\n\
    \  local count\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n \
    \ local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n\
    \  local word_char_count=0\n  local word_char_length=0\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_count2=0\n  local word_count3=0\n  local word_count4=0\n  local\
    \ word_count5=0\n  local word_count6=0\n  local word_count7=0\n  local word_count8=0\n\
    \  local word_count9=0\n  local word_count10=0\n  local word_count11=0\n  local\
    \ word_count12=0\n  local word_count13=0\n  local word_count14=0\n  local word_count15=0\n\
    \  local word_count16=0\n  local word_count17=0\n  local word_count18=0\n  local\
    \ word_count19=0\n  local word_count20=0\n  local word_count21=0\n  local word_count22=0\n\
    \  local word_count23=0\n  local word_count24=0\n  local word_count25=0\n  local\
    \ word_count26=0\n  local word_count27=0\n  local word_count28=0\n  local word_count29=0\n\
    \  local word_count30=0\n  local word_count31=0\n  local word_count32=0\n  local\
    \ word_count33=0\n  local word_count34=0\n  local word_count35=0\n  local word_count36=0\n\
    \  local word_count37=0\n  local word_count38=0\n  local word_count39=0\n  local\
    \ word_count40=0\n  local word_count41=0\n  local word_count42=0\n  local word_count43=0\n\
    \  local word_count44=0\n  local word_count45=0\n  local word_count46=0\n  local\
    \ word_count47=0\n  local word_count48=0\n  local word_count49=0\n  local word_count50=0\n\
    \  local word_count51=0\n  local word_count52=0\n  local word_count53=0\n  local\
    \ word_count54=0\n  local word_count55=0\n  local word_count56=0\n  local word_count57=0\n\
    \  local word_count58=0\n  local word_count59=0\n  local word_count60=0\n  local\
    \ word_count61=0\n  local word_count62=0\n  local word_count63=0\n  local word_count64=0\n\
    \  local word_count65=0\n  local word_count66=0\n  local word_count67=0\n  local\
    \ word_count68=0\n  local word_count69=0\n  local word_count70=0\n  local word_count71=0\n\
    \  local word_count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local new_count=0\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word\n\
    \  local i\n  local j\n  local length\n  local count\n  local count2\n  local\
    \ count3\n  local count4\n  local count5\n  local count6\n  local count7\n  local\
    \ count8\n  local count9\n  local count10\n  local count11\n  local count12\n\
    \  local count13\n  local count14\n  local count15\n  local count16\n  local count17\n\
    \  local count18\n  local count19\n  local count20\n  local count21\n  local count22\n\
    \  local count23\n  local count24\n  local count25\n  local count26\n  local count27\n\
    \  local count28\n  local count29\n  local count30\n  local count31\n  local count32\n\
    \  local count33\n  local count34\n  local count35\n  local count36\n  local count37\n\
    \  local count38\n  local count39\n  local count40\n  local count41\n  local count42\n\
    \  local count43\n  local count44\n  local count45\n  local count46\n  local count47\n\
    \  local count48\n  local count49\n  local count50\n  local count51\n  local count52\n\
    \  local count53\n  local count54\n  local count55\n  local count56\n  local count57\n\
    \  local count58\n  local count59\n  local count60\n  local count61\n  local count62\n\
    \  local count63\n  local count64\n  local count65\n  local count66\n  local count67\n\
    \  local count68\n  local count69\n  local count70\n  local count71\n  local count72\n\
    \  local count73\n  local count74\n  local count75\n  local count76\n  local count77\n\
    \  local count78\n  local count79\n  local count80\n  local count81\n  local count82\n\
    \  local count83\n  local count84\n  local count85\n  local count86\n  local count87\n\
    \  local count88\n  local count89\n  local count90\n  local count91\n  local count92\n\
    \  local count93\n  local count94\n  local count95\n  local count96\n  local count97\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local space=\"\
    \ \"\n  local words=\"\"\n  local word_count=0\n  local word_length=0\n  local\
    \ word_length_count=0\n  local word_length_count2=0\n  local word_length_count3=0\n\
    \  local word_length_count4=0\n  local word_length_count5=0\n  local word_length_count6=0\n\
    \  local word_length_count7=0\n  local word_length_count8=0\n  local word_length_count9=0\n\
    \  local word_length_count10=0\n  local word_length_count11=0\n  local word_length_count12=0\n\
    \  local word_length_count13=0\n  local word_length_count14=0\n  local word_length_count15=0\n\
    \  local word_length_count16=0\n  local word_length_count17=0\n  local word_length_count18=0\n\
    \  local word_length_count19=0\n  local word_length_count20=0\n  local word_length_count21=0\n\
    \  local word_length_count22=0\n  local word_length_count23=0\n  local word_length_count24=0\n\
    \  local word_length_count25=0\n  local word_length_count26=0\n  local word_length_count27=0\n\
    \  local word_length_count28=0\n  local word_length_count29=0\n  local word_length_count30=0\n\
    \  local word_length_count31=0\n  local word_length_count32=0\n  local word_length_count33=0\n\
    \  local word_length_count34=0\n  local word_length_count35=0\n  local word_length_count36=0\n\
    \  local word_length_count37=0\n  local word_length_count38=0\n  local word_length_count39=0\n\
    \  local word_length_count40=0\n  local word_length_count41=0\n  local word_length_count42=0\n\
    \  local word_length_count43=0\n  local word_length_count44=0\n  local word_length_count45=0\n\
    \  local word_length_count46=0\n  local word_length_count47=0\n  local word_length_count48=0\n\
    \  local word_length_count49=0\n  local word_length_count50=0\n  local word_length_count51=0\n\
    \  local word_length_count52=0\n  local word_length_count53=0\n  local word_length_count54=0\n\
    \  local word_length_count55=0\n  local word_length_count56=0\n  local word_length_count57=0\n\
    \  local word_length_count58=0\n  local word_length_count59=0\n  local word_length_count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$string\n\
    \  local space=$'\\n'\n  local count=0\n  local count2=0\n  local count3=0\n \
    \ local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local\
    \ count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n\
    \  local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n\
    \  local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n\
    \  local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n\
    \  local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n\
    \  local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n\
    \  local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n\
    \  local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n\
    \  local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n\
    \  local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n\
    \  local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n\
    \  local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n\
    \  local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n\
    \  local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n\
    \  local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n\
    \  local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n\
    \  local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n\
    \  local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n\
    \  local count81=0\n  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_length_count=0\n  local\
    \ word_length_index=0\n  local word_length_count2=0\n  local word_length_count3=0\n\
    \  local word_length_count4=0\n  local word_length_count5=0\n  local word_length_count6=0\n\
    \  local word_length_count7=0\n  local word_length_count8=0\n  local word_length_count9=0\n\
    \  local word_length_count10=0\n  local word_length_count11=0\n  local word_length_count12=0\n\
    \  local word_length_count13=0\n  local word_length_count14=0\n  local word_length_count15=0\n\
    \  local word_length_count16=0\n  local word_length_count17=0\n  local word_length_count18=0\n\
    \  local word_length_count19=0\n  local word_length_count20=0\n  local word_length_count21=0\n\
    \  local word_length_count22=0\n  local word_length_count23=0\n  local word_length_count24=0\n\
    \  local word_length_count25=0\n  local word_length_count26=0\n  local word_length_count27=0\n\
    \  local word_length_count28=0\n  local word_length_count29=0\n  local word_length_count30=0\n\
    \  local word_length_count31=0\n  local word_length_count32=0\n  local word_length_count33=0\n\
    \  local word_length_count34=0\n  local word_length_count35=0\n  local word_length_count36=0\n\
    \  local word_length_count37=0\n  local word_length_count38=0\n  local word_length_count39=0\n\
    \  local word_length_count40=0\n  local word_length_count41=0\n  local word_length_count42=0\n\
    \  local word_length_count43=0\n  local word_length_count44=0\n  local word_length_count45=0\n\
    \  local word_length_count46=0\n  local word_length_count47=0\n  local word_length_count48=0\n\
    \  local word_length_count49=0\n  local word_length_count50=0\n  local word_length_count51=0\n\
    \  local word_length_count52=0\n  local word_length_count53=0\n  local word_length_count54=0\n\
    \  local word_length_count55=0\n  local word_length_count56=0\n  local word_length_count57=0\n\
    \  local word_length_count58=0\n  local word_length_count59=0\n  local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local length\n  local count\n  local word\n  local char\n  local\
    \ new_char\n  local new_word\n  local new_length\n  local new_count\n  local new_word\n\
    \  local new_char\n  local new_word\n  local new_char\n  local new_word\n  local\
    \ new_char\n  local new_word\n  local new_char\n  local new_word\n  local new_char\n\
    \  local new_word\n  local new_char\n  local new_word\n  local new_char\n  local\
    \ new_word\n  local new_char\n  local new_word\n  local new_char\n  local new_word\n\
    \  local new_char\n  local new_word\n  local new_char\n  local new_word\n  local\
    \ new_char\n  local new_word\n  local new_char\n  local new_word\n  local new_char\n\
    \  local new_word\n  local new_char\n  local new_word\n  local new_char\n  local\
    \ new_word\n  local new_char\n  local new_word\n  local new_char\n  local new_word\n\
    \  local new_char\n  local new_word\n  local new_char\n  local new_word\n  local\
    \ new_char\n  local new_word\n  local new_char\n  local new_word\n  local new_char\n\
    \  local new_word\n  local new_char\n  local new_word\n  local new_char\n  local\
    \ new_word\n  local new_char\n  local new_word\n  local new_char\n  local new_word\n\
    \  local new_char\n  local new_word\n  local new_char\n  local new_word\n  local\
    \ new_char\n  local new_word\n  local new_char\n  local new_word\n  local new_char\n\
    \  local new_word\n  local new_char\n  local new_word\n  local new_char\n  local\
    \ new_word\n  local new_char\n  local new_word\n  local new_char\n  local new_word\n\
    \  local new_char\n  local new_word\n  local new_char\n  local new_word\n  local\
    \ new_char\n  local new_word\n  local new_char\n  local new_word\n  local new_char\n\
    \  local new_word\n  local new_char\n  local new_word\n  local new_char\n  local\
    \ new_word\n  local new_char\n  local new_word\n  local new_char\n  local new_word\n\
    \  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_count1=0\n  local word_length1=0\n\
    \  local word_count2=0\n  local word_length2=0\n  local word_count3=0\n  local\
    \ word_length3=0\n  local word_count4=0\n  local word_length4=0\n  local word_count5=0\n\
    \  local word_length5=0\n  local word_count6=0\n  local word_length6=0\n  local\
    \ word_count7=0\n  local word_length7=0\n  local word_count8=0\n  local word_length8=0\n\
    \  local word_count9=0\n  local word_length9=0\n  local word_count10=0\n  local\
    \ word_length10=0\n  local word_count11=0\n  local word_length11=0\n  local word_count12=0\n\
    \  local word_length12=0\n  local word_count13=0\n  local word_length13=0\n  local\
    \ word_count14=0\n  local word_length14=0\n  local word_count15=0\n  local word_length15=0\n\
    \  local word_count16=0\n  local word_length16=0\n  local word_count17=0\n  local\
    \ word_length17=0\n  local word_count18=0\n  local word_length18=0\n  local word_count19=0\n\
    \  local word_length19=0\n  local word_count20=0\n  local word_length20=0\n  local\
    \ word_count21=0\n  local word_length21=0\n  local word_count22=0\n  local word_length22=0\n\
    \  local word_count23=0\n  local word_length23=0\n  local word_count24=0\n  local\
    \ word_length24=0\n  local word_count25=0\n  local word_length25=0\n  local word_count26=0\n\
    \  local word_length26=0\n  local word_count27=0\n  local word_length27=0\n  local\
    \ word_count28=0\n  local word_length28=0\n  local word_count29=0\n  local word_length29=0\n\
    \  local word_count30=0\n  local word_length30=0\n  local word_count31=0\n  local\
    \ word_length31=0\n  local word_count32=0\n  local word_length32=0\n  local word_count33=0\n\
    \  local word_length33=0\n  local word_count34=0\n  local word_length34=0\n  local\
    \ word_count35\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_length_count=0\n\
    \    local word_length_char_count=0\n    local word_length_char_length=0\n   \
    \ local word_length_char_length_count=0\n    local word_length_char_length_char_count=0\n\
    \    local word_length_char_length_word_count=0\n    local word_length_char_length_word_char_count=0\n\
    \    local word_length_char_length_word_word_count=0\n    local word_length_char_length_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_count=0\n    local word_length_char_length_word_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_word_count=0\n    local word_length_char_length_word_word_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_count=0\n    local\
    \ word_length_char_length_word_word_word_word_word_char_count=0\n    local word_length_char_length_word_word_word_word_word_word_word_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_word_word_word_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_char_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_count=0\n\
    \    local word_length_char_length_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    while [ $i -lt ${#string} ]; do\n        local j=0\n        while [ $j -lt\
    \ ${#string} ]; do\n            local k=$(echo $j | bc);\n            local l=$(echo\
    \ $k | bc);\n            local m=$(( $k + $l ));\n            local n=$(( $m +\
    \ $i ));\n            local o=$(echo $n | bc);\n            local p=$(( $n + $i\
    \ ));\n            local q=$(( $o + $j ));\n            local r=$(( $o + $k ));\n\
    \            local s=$(( $q + $l ));\n            local t=$(( $q + $k ));\n  \
    \          local u=$(( $r + $j ));\n            local v=$(( $r + $k ));\n    \
    \        local w=$(( $s + $l ));\n            local x=$(( $s + $k ));\n      \
    \      local y=$(( $t + $l ));\n            local z=$(( $t + $k ));\n        \
    \    local A=$(( $u + $j ));\n            local B=$(( $u + $k ));\n          \
    \  local C=$(( $v + $j ));\n            local D=$(( $v + $k ));\n            local\
    \ E=$(( $w + $j ));\n            local F=$(( $w + $k ));\n            local G=$((\
    \ $x + $j ));\n            local H=$(( $x + $k ));\n            local I=$(( $y\
    \ + $j ));\n            local J=$(( $y + $k ));\n            local K=$(( $z +\
    \ $j ));\n            local L=$(( $z + $k ));\n            local M=$(( $A + $j\
    \ ));\n            local N=$(( $A + $k ));\n            local O=$(( $B + $j ));\n\
    \            local P=$(( $B + $k ));\n            local Q=$(( $C + $j ));\n  \
    \          local R=$(( $C + $k ));\n            local S=$(( $D + $j ));\n    \
    \        local T=$(( $D + $k ));\n            local U=$(( $E + $j ));\n      \
    \      local V=$(( $E + $k ));\n            local W=$(( $F + $j ));\n        \
    \    local X=$(( $F + $k ));\n            local Y=$((\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8w745zcr.sh: line 57: unexpected EOF while looking for matching
    `)''

    /tmp/tmp8w745zcr.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local blanks=\"\"\n  local chars=\"\"\n  local count=0\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local\
    \ B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local\
    \ H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local\
    \ N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local\
    \ T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local\
    \ Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local\
    \ D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local\
    \ J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local\
    \ P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local\
    \ V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_count2=0\n  local word_length2=0\n  local\
    \ word_count3=0\n  local word_length3=0\n  local word_count4=0\n  local word_length4=0\n\
    \  local word_count5=0\n  local word_length5=0\n  local word_count6=0\n  local\
    \ word_length6=0\n  local word_count7=0\n  local word_length7=0\n  local word_count8=0\n\
    \  local word_length8=0\n  local word_count9=0\n  local word_length9=0\n  local\
    \ word_count10=0\n  local word_length10=0\n  local word_count11=0\n  local word_length11=0\n\
    \  local word_count12=0\n  local word_length12=0\n  local word_count13=0\n  local\
    \ word_length13=0\n  local word_count14=0\n  local word_length14=0\n  local word_count15=0\n\
    \  local word_length15=0\n  local word_count16=0\n  local word_length16=0\n  local\
    \ word_count17=0\n  local word_length17=0\n  local word_count18=0\n  local word_length18=0\n\
    \  local word_count19=0\n  local word_length19=0\n  local word_count20=0\n  local\
    \ word_length20=0\n  local word_count21=0\n  local word_length21=0\n  local word_count22=0\n\
    \  local word_length22=0\n  local word_count23=0\n  local word_length23=0\n  local\
    \ word_count24=0\n  local word_length24=0\n  local word_count25=0\n  local word_length25=0\n\
    \  local word_count26=0\n  local word_length26=0\n  local word_count27=0\n  local\
    \ word_length27=0\n  local word_count28=0\n  local word_length28=0\n  local word_count29=0\n\
    \  local word_length29=0\n  local word_count30=0\n  local word_length30=0\n  local\
    \ word_count31=0\n  local word_length31=0\n  local word_count32=0\n  local word_length32=0\n\
    \  local word_count33=0\n  local word_length33=0\n  local word_count34=0\n  local\
    \ word_length34=0\n  local word_count35=0\n  local word_length35=0\n  local word_count36=0\n\
    \  local word_length36\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_count1=0\n\
    \    local word_length1=0\n    local word_count2=0\n    local word_length2=0\n\
    \    local word_count3=0\n    local word_length3=0\n    local word_count4=0\n\
    \    local word_length4=0\n    local word_count5=0\n    local word_length5=0\n\
    \    local word_count6=0\n    local word_length6=0\n    local word_count7=0\n\
    \    local word_length7=0\n    local word_count8=0\n    local word_length8=0\n\
    \    local word_count9=0\n    local word_length9=0\n    local word_count10=0\n\
    \    local word_length10=0\n    local word_count11=0\n    local word_length11=0\n\
    \    local word_count12=0\n    local word_length12=0\n    local word_count13=0\n\
    \    local word_length13=0\n    local word_count14=0\n    local word_length14=0\n\
    \    local word_count15=0\n    local word_length15=0\n    local word_count16=0\n\
    \    local word_length16=0\n    local word_count17=0\n    local word_length17=0\n\
    \    local word_count18=0\n    local word_length18=0\n    local word_count19=0\n\
    \    local word_length19=0\n    local word_count20=0\n    local word_length20=0\n\
    \    local word_count21=0\n    local word_length21=0\n    local word_count22=0\n\
    \    local word_length22=0\n    local word_count23=0\n    local word_length23=0\n\
    \    local word_count24=0\n    local word_length24=0\n    local word_count25=0\n\
    \    local word_length25=0\n    local word_count26=0\n    local word_length26=0\n\
    \    local word_count27=0\n    local word_length27=0\n    local word_count28=0\n\
    \    local word_length28=0\n    local word_count29=0\n    local word_length29=0\n\
    \    local word_count30=0\n    local word_length30=0\n    local word_count31=0\n\
    \    local word_length31=0\n    local word_count32=0\n    local word_length32=0\n\
    \    local word_count33=0\n    local word_length33=0\n    local word_count34=0\n\
    \    local word_length34=0\n    local word_count35\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local space=\"\"\n    local word=\"\"\n    local count=0\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_length_count=0\n    local word_length_max=0\n    local word_length_min=0\n\
    \    local word_length_sum=0\n    local word_length_avg=0\n    local word_length_median=0\n\
    \    local word_length_std=0\n    local word_length_variance=0\n    local word_length_variance_index=0\n\
    \    local word_length_variance_max=0\n    local word_length_variance_min=0\n\
    \    local word_length_variance_sum=0\n    local word_length_variance_avg=0\n\
    \    local word_length_variance_median=0\n    local word_length_variance_std=0\n\
    \    local word_length_variance_variance=0\n    local word_length_variance_variance_index=0\n\
    \    local word_length_variance_variance_max=0\n    local word_length_variance_variance_min=0\n\
    \    local word_length_variance_variance_sum=0\n    local word_length_variance_variance_avg=0\n\
    \    local word_length_variance_variance_median=0\n    local word_length_variance_variance_std=0\n\
    \    local word_length_variance_variance_variance=0\n    local word_length_variance_variance_variance_index=0\n\
    \    local word_length_variance_variance_variance_max=0\n    local word_length_variance_variance_min=0\n\
    \    local word_length_variance_variance_sum=0\n    local word_length_variance_variance_avg=0\n\
    \    local word_length_variance_variance_median=0\n    local word_length_variance_variance_std=0\n\
    \    local word_length_variance_variance_variance=0\n    local word_length_variance_variance_variance_index=0\n\
    \    local word_length_variance_variance_variance_max=0\n    local word_length_variance_variance_min=0\n\
    \    local word_length_variance_variance_sum=0\n    local word_length_variance_variance_avg=0\n\
    \    local word_length_variance_variance_median=0\n    local word_length_variance_variance_std=0\n\
    \    local word_length_variance_variance_variance=0\n    local word_length_variance_variance_variance_index=0\n\
    \    local word_length_variance_variance_variance_max=0\n    local word_length_variance_variance_min=0\n\
    \    local word_length_variance_variance_sum=0\n    local word_length_variance_variance_avg=0\n\
    \    local word_length_variance_variance_median=0\n    local word_length_variance_variance_std=0\n\
    \    local word_length_variance_variance_variance=0\n    local word_length_variance_variance_variance_index=0\n\
    \    local word_length_variance_variance_variance_max=0\n    local word_length_variance_variance_min=0\n\
    \    local word_length_variance_variance_sum=0\n    local word_length_variance_variance_avg=0\n\
    \    local word_length_variance_variance_median=0\n    local word_length_variance_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=$(echo\
    \ $string | sed 's/ /\\n/g')\n  local word_count=0\n  local word_length=0\n  local\
    \ word_count2=0\n  local word_length2=0\n  local word_count3=0\n  local word_length3=0\n\
    \  local word_count4=0\n  local word_length4=0\n  local word_count5=0\n  local\
    \ word_length5=0\n  local word_count6=0\n  local word_length6=0\n  local word_count7=0\n\
    \  local word_length7=0\n  local word_count8=0\n  local word_length8=0\n  local\
    \ word_count9=0\n  local word_length9=0\n  local word_count10=0\n  local word_length10=0\n\
    \  local word_count11=0\n  local word_length11=0\n  local word_count12=0\n  local\
    \ word_length12=0\n  local word_count13=0\n  local word_length13=0\n  local word_count14=0\n\
    \  local word_length14=0\n  local word_count15=0\n  local word_length15=0\n  local\
    \ word_count16=0\n  local word_length16=0\n  local word_count17=0\n  local word_length17=0\n\
    \  local word_count18=0\n  local word_length18=0\n  local word_count19=0\n  local\
    \ word_length19=0\n  local word_count20=0\n  local word_length20=0\n  local word_count21=0\n\
    \  local word_length21=0\n  local word_count22=0\n  local word_length22=0\n  local\
    \ word_count23=0\n  local word_length23=0\n  local word_count24=0\n  local word_length24=0\n\
    \  local word_count25=0\n  local word_length25=0\n  local word_count26=0\n  local\
    \ word_length26=0\n  local word_count27=0\n  local word_length27=0\n  local word_count28=0\n\
    \  local word_length28=0\n  local word_count29=0\n  local word_length29=0\n  local\
    \ word_count30=0\n  local word_length30=0\n  local word_count31=0\n  local word_length31=0\n\
    \  local word_count32=0\n  local word_length32=0\n  local word_count33=0\n  local\
    \ word_length33=0\n  local word_count34=0\n  local word_length34=0\n  local word_count35=0\n\
    \  local word_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$string\n\
    \  local blanks=$string\n  local spaces=$string\n  local sorted_words=$string\n\
    \  local sorted_blanks=$string\n  local sorted_spaces=$string\n  local sorted_words_in_order=$string\n\
    \  local sorted_blanks_in_order=$string\n  local sorted_spaces_in_order=$string\n\
    \  local sorted_words_in_order_reverse=$string\n  local sorted_blanks_in_order_reverse=$string\n\
    \  local sorted_spaces_in_order_reverse=$string\n  local sorted_words_in_order_reverse_no_spaces=$string\n\
    \  local sorted_blanks_in_order_reverse_no_spaces=$string\n  local sorted_spaces_in_order_reverse_no_spaces=$string\n\
    \  local sorted_words_in_order_reverse_no_spaces_no_spaces=$string\n  local sorted_blanks_in_order_reverse_no_spaces_no_spaces=$string\n\
    \  local sorted_spaces_in_order_reverse_no_spaces_no_spaces=$string\n  local sorted_words_in_order_reverse_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_blanks_in_order_reverse_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_spaces_in_order_reverse_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_words_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_blanks_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_spaces_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_words_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_blanks_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_spaces_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_words_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_blanks_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_spaces_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces=$string\n\
    \  local sorted_words_in_order_reverse_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_start=0\n  local word_end=0\n\
    \  local word_length_count=0\n  local word_length_start=0\n  local word_length_end=0\n\
    \  local word_length_length=0\n  local word_length_length_start=0\n  local word_length_length_end=0\n\
    \  local word_length_length_length=0\n  local word_length_length_length_start=0\n\
    \  local word_length_length_length_end=0\n  local word_length_length_length_length=0\n\
    \  local word_length_length_length_length_start=0\n  local word_length_length_length_length_end=0\n\
    \  local word_length_length_length_length_length=0\n  local word_length_length_length_length_length_start=0\n\
    \  local word_length_length_length_length_length_end=0\n  local word_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_start=0\n  local word_length_length_length_length_length_end=0\n\
    \  local word_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_start=0\n\
    \  local word_length_length_length_length_length_length_end=0\n  local word_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_start=0\n  local word_length_length_length_length_length_length_end=0\n\
    \  local word_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_start=0\n\
    \  local word_length_length_length_length_length_length_end=0\n  local word_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_start=0\n  local\
    \ word_length_length_length_length_length_length_length_end=0\n  local word_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_length_start=0\n  local\
    \ word_length_length_length_length_length_length_length_end=0\n  local word_length_length_length_length_length_length_length=0\n\
    \  local word_length_length_length_length_length_length_start=0\n  local word_length_length_length_length_length_length_end=0\n\
    \  local word_length_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_length_start=0\n\
    \  local word_length_length_length_length_length_length_length_end=0\n  local\
    \ word_length_length_length_length_length_length_length_length=0\n  local word_length_length_length_length_length_length_length_start=0\n\
    \  local word_length_length_length_length_length_length_length_end=0\n  local\
    \ word_length_length_length_length_length_length_length_length=0\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ words=\"\"\n    local count=0\n    local chars=\"\"\n    local new_chars=\"\"\
    \n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n   \
    \ local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local\
    \ H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n\
    \    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n \
    \   local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n  \
    \  local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n   \
    \ local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local\
    \ h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n   \
    \ local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local\
    \ H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n\
    \    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n \
    \   local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n  \
    \  local X=0\n    local Y=0\n    local Z\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local count=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local D=0\n  local E=0\n\
    \  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local J=0\n  local K=0\n\
    \  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local P=0\n  local Q=0\n\
    \  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local V=0\n  local W=0\n\
    \  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n  local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local A=0\n  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n\
    \  local G=0\n  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n\
    \  local M=0\n  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n\
    \  local S=0\n  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n\
    \  local Y=0\n  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n\
    \  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n\
    \  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n\
    \  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n\
    \  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_count2=0\n\
    \    local word_length2=0\n    local word_count3=0\n    local word_length3=0\n\
    \    local word_count4=0\n    local word_length4=0\n    local word_count5=0\n\
    \    local word_length5=0\n    local word_count6=0\n    local word_length6=0\n\
    \    local word_count7=0\n    local word_length7=0\n    local word_count8=0\n\
    \    local word_length8=0\n    local word_count9=0\n    local word_length9=0\n\
    \    local word_count10=0\n    local word_length10=0\n    local word_count11=0\n\
    \    local word_length11=0\n    local word_count12=0\n    local word_length12=0\n\
    \    local word_count13=0\n    local word_length13=0\n    local word_count14=0\n\
    \    local word_length14=0\n    local word_count15=0\n    local word_length15=0\n\
    \    local word_count16=0\n    local word_length16=0\n    local word_count17=0\n\
    \    local word_length17=0\n    local word_count18=0\n    local word_length18=0\n\
    \    local word_count19=0\n    local word_length19=0\n    local word_count20=0\n\
    \    local word_length20=0\n    local word_count21=0\n    local word_length21=0\n\
    \    local word_count22=0\n    local word_length22=0\n    local word_count23=0\n\
    \    local word_length23=0\n    local word_count24=0\n    local word_length24=0\n\
    \    local word_count25=0\n    local word_length25=0\n    local word_count26=0\n\
    \    local word_length26=0\n    local word_count27=0\n    local word_length27=0\n\
    \    local word_count28=0\n    local word_length28=0\n    local word_count29=0\n\
    \    local word_length29=0\n    local word_count30=0\n    local word_length30=0\n\
    \    local word_count31=0\n    local word_length31=0\n    local word_count32=0\n\
    \    local word_length32=0\n    local word_count33=0\n    local word_length33=0\n\
    \    local word_count34=0\n    local word_length34=0\n    local word_count35=0\n\
    \    local word_length35=0\n    local word_count36\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_start=0\n  local word_end=0\n\
    \  local word_character\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_start\n  local word_character_end\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  local word_character_index\n  local word_character\n\
    \  local word_character_index\n  local word_character\n  local word_character_index\n\
    \  local word_character\n  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ words=$string\n    local space=\"\"\n    local new_space=\"\"\n    local count=0\n\
    \    local count2=0\n    local count3=0\n    local count4=0\n    local count5=0\n\
    \    local count6=0\n    local count7=0\n    local count8=0\n    local count9=0\n\
    \    local count10=0\n    local count11=0\n    local count12=0\n    local count13=0\n\
    \    local count14=0\n    local count15=0\n    local count16=0\n    local count17=0\n\
    \    local count18=0\n    local count19=0\n    local count20=0\n    local count21=0\n\
    \    local count22=0\n    local count23=0\n    local count24=0\n    local count25=0\n\
    \    local count26=0\n    local count27=0\n    local count28=0\n    local count29=0\n\
    \    local count30=0\n    local count31=0\n    local count32=0\n    local count33=0\n\
    \    local count34=0\n    local count35=0\n    local count36=0\n    local count37=0\n\
    \    local count38=0\n    local count39=0\n    local count40=0\n    local count41=0\n\
    \    local count42=0\n    local count43=0\n    local count44=0\n    local count45=0\n\
    \    local count46=0\n    local count47=0\n    local count48=0\n    local count49=0\n\
    \    local count50=0\n    local count51=0\n    local count52=0\n    local count53=0\n\
    \    local count54=0\n    local count55=0\n    local count56=0\n    local count57=0\n\
    \    local count58=0\n    local count59=0\n    local count60=0\n    local count61=0\n\
    \    local count62=0\n    local count63=0\n    local count64=0\n    local count65=0\n\
    \    local count66=0\n    local count67=0\n    local count68=0\n    local count69=0\n\
    \    local count70=0\n    local count71=0\n    local count72=0\n    local count73=0\n\
    \    local count74=0\n    local count75=0\n    local count76=0\n    local count77=0\n\
    \    local count78=0\n    local count79=0\n    local count80=0\n    local count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n  \
    \  local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n   \
    \ local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local\
    \ M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n\
    \    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n \
    \   local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n  \
    \  local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n   \
    \ local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local\
    \ M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n\
    \    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n \
    \   local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    while [ $i -lt ${#string} ]; do\n        local j=0\n        while [ $j -lt\
    \ ${#string} ]; do\n            local k=$(echo $string | cut -c $j | cut -c $i)\n\
    \            local l=$(echo $string | cut -c $i | cut -c $j)\n            local\
    \ m=$((${#k}+${#l}))\n            local n=$((${#k}+${#l}+1))\n            local\
    \ o=$((${#k}+${#l}+2))\n            if [ $m -gt $n ]; then\n                local\
    \ p=$((${#k}+${#l}+3))\n                local q=$((${#k}+${#l}+4))\n         \
    \       local r=$((${#k}+${#l}+5))\n                local s=$((${#k}+${#l}+6))\n\
    \                local t=$((${#k}+${#l}+7))\n                local u=$((${#k}+${#l}+8))\n\
    \                local v=$((${#k}+${#l}+9))\n                local w=$((${#k}+${#l}+10))\n\
    \                local x=$((${#k}+${#l}+11))\n                local y=$((${#k}+${#l}+12))\n\
    \                local z=$((${#k}+${#l}+13))\n                local A=$((${#k}+${#l}+14))\n\
    \                local B=$((${#k}+${#l}+15))\n                local C=$((${#k}+${#l}+16))\n\
    \                local D=$((${#k}+${#l}+17))\n                local E=$((${#k}+${#l}+18))\n\
    \                local F=$((${#k}+${#l}+19))\n                local G=$((${#k}+${#l}+20))\n\
    \                local H=$((${#k}+${#l}+21))\n                local I=$((${#k}+${#l}+22))\n\
    \                local J=$((${#k}+${#l}+23))\n                local K=$((${#k\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5jmaxcth.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5jmaxcth.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033036
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local length=$#\n  local char\n  local new_char\n  while [ $i -lt $length ];\
    \ do\n    char=${string:$i:1}\n    new_char=${char:0:1}\n    new_string=\"$new_string\
    \ $new_char\"\n    i=$((i+1))\n  done\n  new_string=\"$new_string $char\"\n  echo\
    \ $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033036
