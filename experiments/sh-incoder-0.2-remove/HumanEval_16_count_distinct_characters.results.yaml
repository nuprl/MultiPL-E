language: sh
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  while read -r char; do\n    char_count=$(echo \"$string\" | grep -c \"$char\"\
    )\n    (( count+=char_count ))\n  done < <(echo \"$string\" | sed 's/./& /g')\n\
    \  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local characters=$(echo $string | tr\
    \ A-Z a-z)\n  local characters_count=$(echo $characters |wc -c)\n  while [ \"\
    $characters_count\" -gt \"$count\" ]; do\n    count=$((count+1))\n    characters=$(echo\
    \ $characters |tr a-z A-Z)\n    characters_count=$(echo $characters |wc -c)\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local character\n  local character2\n\
    \  local character3\n  local character4\n  local character5\n  local character6\n\
    \  local character7\n  local character8\n  local character9\n  local character10\n\
    \  local character11\n  local character12\n  local character13\n  local character14\n\
    \  local character15\n  local character16\n  local character17\n  local character18\n\
    \  local character19\n  local character20\n  local character21\n  local character22\n\
    \  local character23\n  local character24\n  local character25\n  local character26\n\
    \  local character27\n  local character28\n  local character29\n  local character30\n\
    \  local character31\n  local character32\n  local character33\n  local character34\n\
    \  local character35\n  local character36\n  local character37\n  local character38\n\
    \  local character39\n  local character40\n  local character41\n  local character42\n\
    \  local character43\n  local character44\n  local character45\n  local character46\n\
    \  local character47\n  local character48\n  local character49\n  local character50\n\
    \  local character51\n  local character52\n  local character53\n  local character54\n\
    \  local character55\n  local character56\n  local character57\n  local character58\n\
    \  local character59\n  local character60\n  local character61\n  local character62\n\
    \  local character63\n  local character64\n  local character65\n  local character66\n\
    \  local character67\n  local character68\n  local character69\n  local character70\n\
    \  local character71\n  local character72\n  local character73\n  local character74\n\
    \  local character75\n  local character76\n  local character77\n  local character78\n\
    \  local character79\n  local character80\n  local character81\n  local character82\n\
    \  local character83\n  local character84\n  local character85\n  local character86\n\
    \  local character87\n  local character88\n  local character89\n  local character90\n\
    \  local character91\n  local character92\n  local character93\n  local character94\n\
    \  local character95\n  local character96\n  local character97\n  local character98\n\
    \  local character99\n  local character100\n  local \n}\n\ncandidate() {\n   \
    \ count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local character\n  local character2\n\
    \  local character3\n  local character4\n  local character5\n  local character6\n\
    \  local character7\n  local character8\n  local character9\n  local character10\n\
    \  local character11\n  local character12\n  local character13\n  local character14\n\
    \  local character15\n  local character16\n  local character17\n  local character18\n\
    \  local character19\n  local character20\n  local character21\n  local character22\n\
    \  local character23\n  local character24\n  local character25\n  local character26\n\
    \  local character27\n  local character28\n  local character29\n  local character30\n\
    \  local character31\n  local character32\n  local character33\n  local character34\n\
    \  local character35\n  local character36\n  local character37\n  local character38\n\
    \  local character39\n  local character40\n  local character41\n  local character42\n\
    \  local character43\n  local character44\n  local character45\n  local character46\n\
    \  local character47\n  local character48\n  local character49\n  local character50\n\
    \  local character51\n  local character52\n  local character53\n  local character54\n\
    \  local character55\n  local character56\n  local character57\n  local character58\n\
    \  local character59\n  local character60\n  local character61\n  local character62\n\
    \  local character63\n  local character64\n  local character65\n  local character66\n\
    \  local character67\n  local character68\n  local character69\n  local character70\n\
    \  local character71\n  local character72\n  local character73\n  local character74\n\
    \  local character75\n  local character76\n  local character77\n  local character78\n\
    \  local character79\n  local character80\n  local character81\n  local character82\n\
    \  local character83\n  local character84\n  local character85\n  local character86\n\
    \  local character87\n  local character88\n  local character89\n  local character90\n\
    \  local character91\n  local character92\n  local character93\n  local character94\n\
    \  local character95\n  local character96\n  local character97\n  local character98\n\
    \  local character99\n  local character100\n  local \n}\n\ncandidate() {\n   \
    \ count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" == \"\
    ${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe_xawpd7.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpe_xawpd7.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  lower=$(echo\
    \ \"$string\" | tr '[:upper:]' '[:lower:]')\n  upper=$(echo \"$string\" | tr '[:lower:]'\
    \ '[:upper:]')\n  lower_index=$(echo \"$lower\" | wc -c)\n  upper_index=$(echo\
    \ \"$upper\" | wc -c)\n  for ((i=0; i<$lower_index; i++)); do\n    character=$(echo\
    \ \"$lower\" | sed -n \"${i}p\")\n    count=$((count+1))\n  done\n  for ((i=0;\
    \ i<$upper_index; i++)); do\n    character=$(echo \"$upper\" | sed -n \"${i}p\"\
    )\n    count=$((count+1))\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n   \
    \ count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 2: invalid usage of line address 0

    sed: -e expression #1, char 2: invalid usage of line address 0

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"${character}\" == \"${character^^}\"\
    \ ] && continue\n        ((count++))\n    done\n    echo \"${count}\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower2\n  local upper2\n  local lower3\n  local upper3\n\
    \  local lower4\n  local upper4\n  local lower5\n  local upper5\n  local lower6\n\
    \  local upper6\n  local lower7\n  local upper7\n  local lower8\n  local upper8\n\
    \  local lower9\n  local upper9\n  local lower10\n  local upper10\n  local lower11\n\
    \  local upper11\n  local lower12\n  local upper12\n  local lower13\n  local upper13\n\
    \  local lower14\n  local upper14\n  local lower15\n  local upper15\n  local lower16\n\
    \  local upper16\n  local lower17\n  local upper17\n  local lower18\n  local upper18\n\
    \  local lower19\n  local upper19\n  local lower20\n  local upper20\n  local lower21\n\
    \  local upper21\n  local lower22\n  local upper22\n  local lower23\n  local upper23\n\
    \  local lower24\n  local upper24\n  local lower25\n  local upper25\n  local lower26\n\
    \  local upper26\n  local lower27\n  local upper27\n  local lower28\n  local upper28\n\
    \  local lower29\n  local upper29\n  local lower30\n  local upper30\n  local lower31\n\
    \  local upper31\n  local lower32\n  local upper32\n  local lower33\n  local upper33\n\
    \  local lower34\n  local upper34\n  local lower35\n  local upper35\n  local lower36\n\
    \  local upper36\n  local lower37\n  local upper37\n  local lower38\n  local upper38\n\
    \  local lower39\n  local upper39\n  local lower40\n  local upper40\n  local lower41\n\
    \  local upper41\n  local lower42\n  local upper42\n  local lower43\n  local upper43\n\
    \  local lower44\n  local upper44\n  local lower45\n  local upper45\n  local lower46\n\
    \  local upper46\n  local lower47\n  local upper47\n  local lower48\n  local upper48\n\
    \  local lower49\n  local upper49\n  local lower50\n  local upper50\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local characters=()\n  local character\n\
    \  local i\n  local j\n  local k\n  for (( i=1; i<${#string}; i++ )); do\n   \
    \ character=\"${string:$i:1}\"\n    characters[${#characters[@]}]=\"$character\"\
    \n  done\n  for (( j=1; j<${#characters[@]}; j++ )); do\n    for (( k=0; k<${#characters[@]};\
    \ k++ )); do\n      if [[ ${characters[$k]} != ${characters[$j]}  ]]; then\n \
    \       (( count++ ))\n      fi\n    done\n  done\n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while IFS= read\
    \ -r character; do\n    count=$(( ${count} + 1 ))\n  done < <(echo \"$string\"\
    \ | tr A-Z a-z)\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     [ \"$char\" == \"${string^}\" ] && continue\n        ((count++))\n    done\n\
    \    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  local char_array\n  local char_array_count\n  local char_array_index\n  local\
    \ char_array_element\n  local char_array_element_count\n  local char_array_element_index\n\
    \  local char_array_element_value\n  local char_array_element_value_count\n  local\
    \ char_array_element_value_index\n  local char_array_element_value_char\n  local\
    \ char_array_element_value_char_count\n  local char_array_element_value_char_array\n\
    \  local char_array_element_value_char_array_count\n  local char_array_element_value_char_array_index\n\
    \  local char_array_element_value_char_array_element\n  local char_array_element_value_char_array_element_count\n\
    \  local char_array_element_value_char_array_element_index\n  local char_array_element_value_char_array_element_value\n\
    \  local char_array_element_value_char_array_element_value_count\n  local char_array_element_value_char_array_element_value_index\n\
    \  local char_array_element_value_char_array_element_value_char\n  local char_array_element_value_char_array_element_value_char_count\n\
    \  local char_array_element_value_char_array_element_value_char_array\n  local\
    \ char_array_element_value_char_array_element_value_char_array_count\n  local\
    \ char_array_element_value_char_array_element_value_char_array_index\n  local\
    \ char_array_element_value_char_array_element_value_char_array_element\n  local\
    \ char_array_element_value_char_array_element_value_char_array_element_count\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_index\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_count\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_index\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_count\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_array\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_array_count\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_array_index\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_array_element\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_array_element_count\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_array_element_index\n\
    \  local char_array_element_value_char_array_element_value_char_array_element_value_char_array_element_value\n\
    \  \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  \n}\n\ncandidate() {\n   \
    \ count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"$count\"\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local characters=$(echo $string\
    \ | tr [A-Z] [a-z])\n    for c in $characters\n    do\n        ((count++))\n \
    \   done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [[ $char == [A-Z] ]] && count=$((count+1))\n \
    \       [[ $char == [a-z] ]] && count=$((count+1))\n        [[ $char == [0-9]\
    \ ]] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local i\n  for\
    \ i in \"${string}\"; do\n    character=\"${i:0:1}\"\n    if [[ \"$character\"\
    \ == \"$i\" ]]; then\n      ((count++))\n    fi\n  done\n  echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n\n  lower=$(echo\
    \ \"$string\" | sed 's/[a-z]//g')\n  upper=$(echo \"$string\" | sed 's/[A-Z]//g')\n\
    \n  while read -r character; do\n    if [[ \"$character\" == \"$lower\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"$character\" == \"$upper\" ]]; then\n    \
    \  (( count-- ))\n    fi\n  done < <(echo \"$string\" | sed 's/[^a-zA-Z]//g')\n\
    \n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local chars\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        (( count++ ))\n\
    \    done\n    echo \"${count}\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    [[ \"$character\" =~ ^[a-z]$ ]] || continue\n    [[ \"$character\"\
    \ =~ ^[A-Z]$ ]] || continue\n    [[ \"$character\" =~ ^[0-9]$ ]] || continue\n\
    \    [[ \"$character\" =~ ^[[:space:]]$ ]] || continue\n    [[ \"$character\"\
    \ =~ ^[[:punct:]]$ ]] || continue\n    [[ \"$character\" =~ ^[[:upper:]]$ ]] ||\
    \ continue\n    [[ \"$character\" =~ ^[[:lower:]]$ ]] || continue\n    [[ \"$character\"\
    \ =~ ^[[:digit:]]$ ]] || continue\n    ((count++))\n  done < <(echo \"$string\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:digit:]' '[:lower:]')\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: misaligned [:upper:] and/or [:lower:] construct

    tr: misaligned [:upper:] and/or [:lower:] construct

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" == \"\
    ${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm6_08a70.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpm6_08a70.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  while read -r char; do\n    char_count=$(echo \"$string\" | grep -c \"$char\"\
    )\n    if [ \"$char_count\" -eq 0 ]; then\n      count=$(( $count + 1 ))\n   \
    \ fi\n  done < <(echo \"$string\" | tr '[:upper:]' '[:lower:]')\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    [[ \"$character\" =~ ^[A-Za-z]$ ]] || continue\n    (( ++count\
    \ ))\n  done < <(echo \"$string\" | tr A-Z a-z)\n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  local char_count_array\n  local char_count_array_index\n  local char_count_array_length\n\
    \  local char_count_array_element\n  local char_count_array_element_index\n  local\
    \ char_count_array_element_length\n  local char_count_array_element_value\n  local\
    \ char_count_array_element_value_length\n  local char_count_array_element_value_length_index\n\
    \  local char_count_array_element_value_length_index_length\n  local char_count_array_element_value_length_index_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value\n  local\
    \ char_count_array_element_value_length_index_length_index_value_length\n  local\
    \ char_count_array_element_value_length_index_length_index_value_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        ((count++))\n\
    \    done\n    echo \"${count}\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  lower=$(echo\
    \ \"$string\" | tr '[:upper:]' '[:lower:]')\n  upper=$(echo \"$string\" | tr '[:lower:]'\
    \ '[:upper:]')\n  lower_index=$(echo \"$lower\" | wc -l)\n  upper_index=$(echo\
    \ \"$upper\" | wc -l)\n  for (( i=0; i<$lower_index; i++ )); do\n    character=$(echo\
    \ \"$lower\" | sed -n \"$i\"p)\n    count=$(( $count + $(echo \"$character\" |\
    \ grep -c \"$character\") ))\n  done\n  for (( i=0; i<$upper_index; i++ )); do\n\
    \    character=$(echo \"$upper\" | sed -n \"$i\"p)\n    count=$(( $count + $(echo\
    \ \"$character\" | grep -c \"$character\") ))\n  done\n  echo \"$count\"\n}\n\n\
    candidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n\
    \    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\"\
    ) = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 2: invalid usage of line address 0

    sed: -e expression #1, char 2: invalid usage of line address 0

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"${character}\" == \"${character^^}\"\
    \ ] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local characters=()\n  local character\n\
    \  local i\n  local j\n  local k\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local chars\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local characters=$(echo $string | tr\
    \ A-Z a-z)\n  local character=$(echo $characters | tr -d '[:space:]')\n  while\
    \ [ \"$character\" != \"\" ]; do\n    count=$((count+1))\n    character=$(echo\
    \ $characters | tr -d $character)\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  local j\n\
    \  local character_index\n  local character\n  local character_index\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  local character\n  local character\n  local\
    \ character\n  local character\n  \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"$character\" == \"$string\" ] &&\
    \ continue\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        (( count++ ))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n  \
    \  count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  while read -r char; do\n    char_count=$(echo \"$string\" | grep -c \"$char\"\
    )\n    ((count+=char_count))\n  done < <(echo \"$string\" | tr '[:upper:]' '[:lower:]')\n\
    \  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        (( count++ ))\n\
    \    done\n    echo \"${count}\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local characters=$(echo $string\
    \ | tr [A-Z] [a-z])\n    for character in $characters\n    do\n        (( count++\
    \ ))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local characters=$(echo \"$string\"\
    \ | tr '[:upper:]' '[:lower:]' | sed 's/^[[:space:]]*//g' | sed 's/[[:space:]]*$//g')\n\
    \  local character\n  for character in $characters\n  do\n    count=$((count+1))\n\
    \  done\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     (( count++ ))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        (( count++ ))\n    done\n    echo \"${count}\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local character2\n\
    \  local character3\n  local character4\n  local character5\n  local character6\n\
    \  local character7\n  local character8\n  local character9\n  local character10\n\
    \  local character11\n  local character12\n  local character13\n  local character14\n\
    \  local character15\n  local character16\n  local character17\n  local character18\n\
    \  local character19\n  local character20\n  local character21\n  local character22\n\
    \  local character23\n  local character24\n  local character25\n  local character26\n\
    \  local character27\n  local character28\n  local character29\n  local character30\n\
    \  local character31\n  local character32\n  local character33\n  local character34\n\
    \  local character35\n  local character36\n  local character37\n  local character38\n\
    \  local character39\n  local character40\n  local character41\n  local character42\n\
    \  local character43\n  local character44\n  local character45\n  local character46\n\
    \  local character47\n  local character48\n  local character49\n  local character50\n\
    \  local character51\n  local character52\n  local character53\n  local character54\n\
    \  local character55\n  local character56\n  local character57\n  local character58\n\
    \  local character59\n  local character60\n  local character61\n  local character62\n\
    \  local character63\n  local character64\n  local character65\n  local character66\n\
    \  local character67\n  local character68\n  local character69\n  local character70\n\
    \  local character71\n  local character72\n  local character73\n  local character74\n\
    \  local character75\n  local character76\n  local character77\n  local character78\n\
    \  local character79\n  local character80\n  local character81\n  local character82\n\
    \  local character83\n  local character84\n  local character85\n  local character86\n\
    \  local character87\n  local character88\n  local character89\n  local character90\n\
    \  local character91\n  local character92\n  local character93\n  local character94\n\
    \  local character95\n  local character96\n  local character97\n  local character98\n\
    \  local character99\n  local character100\n  local \n}\n\ncandidate() {\n   \
    \ count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local character\n  local i\n  for i\
    \ in $(seq 0 $((${#string} - 1)))\n  do\n    character=${string:$i:1}\n    if\
    \ [[ ${character} != ${character^^} ]]\n    then\n      ((count++))\n    fi\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n\n  for char in \"\
    ${string}\"; do\n    [[ \"$char\" =~ [A-Z] ]] && count=$((count+1))\n    [[ \"\
    $char\" =~ [a-z] ]] && count=$((count+1))\n    [[ \"$char\" =~ [0-9] ]] && count=$((count+1))\n\
    \    [[ \"$char\" =~ [!-~] ]] && count=$((count+1))\n  done\n\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [[ $character == [A-Z] ]] && count=$((count+1))\n\
    \        [[ $character == [a-z] ]] && count=$((count+1))\n        [[ $character\
    \ == [0-9] ]] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2jsdppyu.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmp2jsdppyu.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        (( count++ ))\n    done\n    echo \"${count}\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [[ $char =~ ^[[:upper:]]$ ]] && count=$((count+1))\n\
    \        [[ $char =~ ^[[:lower:]]$ ]] && count=$((count+1))\n    done\n    echo\
    \ \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    count=$((count+1))\n  done <<< \"$string\"\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     (( count++ ))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n\n    for char\
    \ in \"${string}\"; do\n        ((count++))\n    done\n\n    echo \"$count\"\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local char\n  while read -r char; do\n\
    \    [[ \"$char\" =~ ^[[:upper:][:lower:]]+$ ]] || continue\n    ((count++))\n\
    \  done <<< \"$string\"\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"$character\" == \"$string\" ] &&\
    \ continue\n        (( count++ ))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    [[ \"$character\" =~ ^[a-zA-Z0-9_]$ ]] || continue\n    ((count++))\n\
    \  done < <(echo \"$string\" | sed 's/[^a-zA-Z0-9_]//g')\n  echo \"$count\"\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  lower=$(echo\
    \ \"$string\" | sed 's/[a-z]//g')\n  upper=$(echo \"$string\" | sed 's/[A-Z]//g')\n\
    \  lower_index=$(echo \"$lower\" | wc -c)\n  upper_index=$(echo \"$upper\" | wc\
    \ -c)\n  for ((i=0; i<$lower_index; i++)); do\n    character=$(echo \"$lower\"\
    \ | sed \"s/^$i//g\")\n    if [[ \"$character\" == \"$lower\" ]]; then\n     \
    \ count=$((count+1))\n    fi\n  done\n  for ((i=0; i<$upper_index; i++)); do\n\
    \    character=$(echo \"$upper\" | sed \"s/^$i//g\")\n    if [[ \"$character\"\
    \ == \"$upper\" ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n\n  lower=$(echo\
    \ \"$string\" | sed 's/\\(.\\)/\\L\\1/')\n  upper=$(echo \"$string\" | sed 's/\\\
    (.\\)/\\U\\1/')\n\n  while read -r character; do\n    if [[ \"$character\" ==\
    \ \"$lower\" ]]; then\n      (( count++ ))\n    elif [[ \"$character\" == \"$upper\"\
    \ ]]; then\n      (( count-- ))\n    fi\n  done <<< \"$string\"\n\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while IFS= read\
    \ -r character; do\n    count=$((count+1))\n  done <<< \"$string\"\n  echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     [ \"$char\" == \"${string^}\" ] && continue\n        [ \"$char\" == \"${string^^}\"\
    \ ] && continue\n        [ \"$char\" == \"${string^^^}\" ] && continue\n     \
    \   [ \"$char\" == \"${string^^^^}\" ] && continue\n        [ \"$char\" == \"\
    ${string^^^^}\" ] && continue\n        [ \"$char\" == \"${string^^^^^}\" ] &&\
    \ continue\n        [ \"$char\" == \"${string^^^^^^}\" ] && continue\n       \
    \ [ \"$char\" == \"${string^^^^^^^}\" ] && continue\n        [ \"$char\" == \"\
    ${string^^^^^^^^}\" ] && continue\n        [ \"$char\" == \"${string^^^^^^^^^}\"\
    \ ] && continue\n        [ \"$char\" == \"${string^^^^^^^^^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^^^^^^^^^^}\" ] && continue\n        [ \"$char\"\
    \ == \"${string^^^^^^^^^^^^}\" ] && continue\n        [ \"$char\" == \"${string^^^^^^^^^^^^^}\"\
    \ ] && continue\n        [ \"$char\" == \"${string^^^^^^^^^^^^^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^^^^^^^^^^^^^^}\" ] && continue\n        [\
    \ \"$char\" == \"${string^^^^^^^^^^^^^^^^}\" ] && continue\n        [ \"$char\"\
    \ == \"${string^^^^^^^^^^^^^^^^^}\" ] && continue\n        [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^}\"\
    \ ] && continue\n        [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^}\" ] &&\
    \ continue\n        [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n   \
    \     [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n     \
    \   [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n      \
    \  [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n      \
    \  [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n     \
    \   [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n   \
    \     [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^}\" \n}\n\n\
    candidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n\
    \    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\"\
    ) = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnc77sv8h.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpnc77sv8h.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local char\n  local char_count\n  local\
    \ char_count_array\n  local char_count_array_index\n  local char_count_array_length\n\
    \  local char_count_array_element\n  local char_count_array_element_index\n  local\
    \ char_count_array_element_length\n  local char_count_array_element_value\n  local\
    \ char_count_array_element_value_length\n  local char_count_array_element_value_length_index\n\
    \  local char_count_array_element_value_length_index_length\n  local char_count_array_element_value_length_index_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value\n  local\
    \ char_count_array_element_value_length_index_length_index_value_length\n  local\
    \ char_count_array_element_value_length_index_length_index_value_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local i\n  lower=$(echo \"$string\" | sed 's/[a-z]//g')\n  upper=$(echo\
    \ \"$string\" | sed 's/[A-Z]//g')\n  for i in $(seq 0 $((${#lower} - 1))); do\n\
    \    character=$(echo \"$lower\" | sed \"s/^$lower$i//g\")\n    if [[ \"$character\"\
    \ != \"$lower\" ]]; then\n      count=$((count + 1))\n    fi\n  done\n  for i\
    \ in $(seq 0 $((${#upper} - 1))); do\n    character=$(echo \"$upper\" | sed \"\
    s/^$upper$i//g\")\n    if [[ \"$character\" != \"$upper\" ]]; then\n      count=$((count\
    \ + 1))\n    fi\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local i\n  for\
    \ i in \"${string}\"; do\n    character=\"${i:0:1}\"\n    if [[ \"$character\"\
    \ == \"$i\" ]]; then\n      ((count++))\n    fi\n  done\n  echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local character\n  while read -r character; do\n    lower=\"\
    ${character,,}\"\n    upper=\"${character,,}\"\n    lower=\"${lower,,}\"\n   \
    \ upper=\"${upper,,}\"\n    if [[ \"$lower\" == \"$upper\" ]]; then\n      count=$((count+1))\n\
    \    fi\n  done <<< \"$string\"\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local lower\n  local\
    \ upper\n  local lowerchar\n  local upperchar\n\n  for char in \"${string}\";\
    \ do\n    lower=\"${char,,}\"\n    upper=\"${lower,,}\"\n    lowerchar=\"${lower,,}\"\
    \n    upperchar=\"${upper,,}\"\n\n    if [ \"$lower\" == \"$upper\" ]; then\n\
    \      (( count++ ))\n    elif [ \"$lower\" == \"$lowerchar\" ]; then\n      ((\
    \ count++ ))\n    elif [ \"$upper\" == \"$upperchar\" ]; then\n      (( count++\
    \ ))\n    elif [ \"$lower\" == \"$upperchar\" ]; then\n      (( count++ ))\n \
    \   elif [ \"$upper\" == \"$lowerchar\" ]; then\n      (( count++ ))\n    elif\
    \ [ \"$lower\" == \"$lowerchar\" ] && [ \"$upper\" == \"$upperchar\" ]; then\n\
    \      (( count++ ))\n    elif [ \"$lower\" == \"$upperchar\" ] && [ \"$upper\"\
    \ == \"$lowerchar\" ]; then\n      (( count++ ))\n    elif [ \"$lower\" == \"\
    $lowerchar\" ] && [ \"$upper\" == \"$upperchar\" ]; then\n      (( count++ ))\n\
    \    elif [ \"$upper\" == \"$lowerchar\" ] && [ \"$lower\" == \"$upperchar\" ];\
    \ then\n      (( count++ ))\n    elif [ \"$lower\" == \"$lowerchar\" ] && [ \"\
    $upper\" == \"$upperchar\" ]; then\n      (( count++ ))\n    elif [ \"$upper\"\
    \ == \"$upperchar\" ] && [ \"$lower\" == \"$lowerchar\" ]; then\n      (( count++\
    \ ))\n    elif [ \"$lower\" == \"$lowerchar\" ] && [ \"$upper\" == \"$upperchar\"\
    \ ]; then\n      (( count++ ))\n    elif [ \"$upper\" == \"$upperchar\" ] && [\
    \ \"$lower\" == \"$lowerchar\" ]; then\n      (( count++ ))\n    elif [ \"$lower\"\
    \ == \"$lowerchar\" ] && [ \"$upper\" == \"$upperchar\" ]; then\n      (( count++\
    \ ))\n    elif [ \"$upper\" == \"$upperchar\" ] && [ \"$lower\" == \"$lowerchar\"\
    \ ]; then\n      (( count++ ))\n    elif [ \"$lower\" == \"$lowerchar\" ] && [\
    \ \"$upper\" == \"$upperchar\" ]; then\n      (( count++ ))\n    elif [ \"$upper\"\
    \ == \"$upperchar\" ] && [ \"$lower\" == \"$lowerchar\" ]; then\n      (( count++\
    \ ))\n    elif [ \"$lower\" == \"$lowerchar\" ] && [ \"$upper\" == \"$upperchar\"\
    \ ]; then\n      (( count++ ))\n    elif [ \"$upper\" == \"$upperchar\" ] && [\
    \ \"$lower\" == \"$lowerchar\" ]; then\n\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnkzsglr1.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmpnkzsglr1.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local chars\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    [[ \"$character\" =~ ^[A-Za-z]$ ]] || continue\n    ((count++))\n\
    \  done < <(echo \"$string\" | tr A-Z a-z)\n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"${character}\" == \"${character^^}\"\
    \ ] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [[ $char =~ [A-Z] ]] && count=$((count+1))\n \
    \       [[ $char =~ [a-z] ]] && count=$((count+1))\n        [[ $char =~ [0-9]\
    \ ]] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower2\n  local upper2\n  local lower3\n  local upper3\n\
    \  local lower4\n  local upper4\n  local lower5\n  local upper5\n  local lower6\n\
    \  local upper6\n  local lower7\n  local upper7\n  local lower8\n  local upper8\n\
    \  local lower9\n  local upper9\n  local lower10\n  local upper10\n  local lower11\n\
    \  local upper11\n  local lower12\n  local upper12\n  local lower13\n  local upper13\n\
    \  local lower14\n  local upper14\n  local lower15\n  local upper15\n  local lower16\n\
    \  local upper16\n  local lower17\n  local upper17\n  local lower18\n  local upper18\n\
    \  local lower19\n  local upper19\n  local lower20\n  local upper20\n  local lower21\n\
    \  local upper21\n  local lower22\n  local upper22\n  local lower23\n  local upper23\n\
    \  local lower24\n  local upper24\n  local lower25\n  local upper25\n  local lower26\n\
    \  local upper26\n  local lower27\n  local upper27\n  local lower28\n  local upper28\n\
    \  local lower29\n  local upper29\n  local lower30\n  local upper30\n  local lower31\n\
    \  local upper31\n  local lower32\n  local upper32\n  local lower33\n  local upper33\n\
    \  local lower34\n  local upper34\n  local lower35\n  local upper35\n  local lower36\n\
    \  local upper36\n  local lower37\n  local upper37\n  local lower38\n  local upper38\n\
    \  local lower39\n  local upper39\n  local lower40\n  local upper40\n  local lower41\n\
    \  local upper41\n  local lower42\n  local upper42\n  local lower43\n  local upper43\n\
    \  local lower44\n  local upper44\n  local lower45\n  local upper45\n  local lower46\n\
    \  local upper46\n  local lower47\n  local upper47\n  local lower48\n  local upper48\n\
    \  local lower49\n  local upper49\n  local lower50\n  local upper50\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [[ $character == [A-Z] ]] && count=$((count+1))\n\
    \        [[ $character == [a-z] ]] && count=$((count+1))\n        [[ $character\
    \ == [0-9] ]] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     [ \"$char\" == \"$char\" ] && continue\n        [ \"$char\" == \"$char\"\
    \ ] && continue\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  while read -r char;\
    \ do\n    [[ \"$char\" =~ ^[a-zA-Z0-9]$ ]] || continue\n    ((count++))\n  done\
    \ < <(echo \"$string\" | tr A-Z a-z)\n  echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [[ $char =~ ^[a-z]*$ ]] && count=$((count+1))\n\
    \        [[ $char =~ ^[A-Z]*$ ]] && count=$((count+1))\n        [[ $char =~ ^[0-9]*$\
    \ ]] && count=$((count+1))\n        [[ $char =~ ^[[:space:]]*$ ]] && count=$((count+1))\n\
    \    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"${character}\" == \"${character^^}\"\
    \ ] && continue\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  for char in \"${string}\"; do\n    char_count=$(echo \"$string\" | grep -c\
    \ \"$char\")\n    if [[ $char_count -gt 0 ]]; then\n      ((count+=char_count))\n\
    \    fi\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local characters=$(echo $string | tr\
    \ [A-Z] [a-z])\n  while read -r character; do\n    count=$((count+1))\n  done\
    \ <<< \"$characters\"\n  echo $count\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"${character}\" == \"${character^^}\"\
    \ ] && count=$((count+1))\n    done\n    echo \"${count}\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local char\n  local char2\n  local char3\n  local char4\n  local\
    \ char5\n  local char6\n  local char7\n  local char8\n  local char9\n  local char10\n\
    \  local char11\n  local char12\n  local char13\n  local char14\n  local char15\n\
    \  local char16\n  local char17\n  local char18\n  local char19\n  local char20\n\
    \  local char21\n  local char22\n  local char23\n  local char24\n  local char25\n\
    \  local char26\n  local char27\n  local char28\n  local char29\n  local char30\n\
    \  local char31\n  local char32\n  local char33\n  local char34\n  local char35\n\
    \  local char36\n  local char37\n  local char38\n  local char39\n  local char40\n\
    \  local char41\n  local char42\n  local char43\n  local char44\n  local char45\n\
    \  local char46\n  local char47\n  local char48\n  local char49\n  local char50\n\
    \  local char51\n  local char52\n  local char53\n  local char54\n  local char55\n\
    \  local char56\n  local char57\n  local char58\n  local char59\n  local char60\n\
    \  local char61\n  local char62\n  local char63\n  local char64\n  local char65\n\
    \  local char66\n  local char67\n  local char68\n  local char69\n  local char70\n\
    \  local char71\n  local char72\n  local char73\n  local char74\n  local char75\n\
    \  local char76\n  local char77\n  local char78\n  local char79\n  local char80\n\
    \  local char81\n  local char82\n  local char83\n  local char84\n  local char85\n\
    \  local char86\n  local char87\n  local char88\n  local char89\n  local char90\n\
    \  local char91\n  local char92\n  local char93\n  local char94\n  local char95\n\
    \  local char96\n  local char97\n  local char98\n\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while IFS= read\
    \ -r character; do\n    count=$((count+1))\n  done < <(echo \"$string\" | tr '[:upper:]'\
    \ '[:lower:]' | sort | uniq -c)\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n\n  for char in \"\
    ${string}\"; do\n    [[ \"$char\" =~ [A-Z] ]] && count=$((count+1))\n    [[ \"\
    $char\" =~ [a-z] ]] && count=$((count+1))\n    [[ \"$char\" =~ [0-9] ]] && count=$((count+1))\n\
    \    [[ \"$char\" =~ [!-~] ]] && count=$((count+1))\n  done\n\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local character\n  local lower\n  local\
    \ upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  local upper\n  local character\n\
    \  local lower\n  local upper\n  local character\n  local lower\n  local upper\n\
    \  local character\n  local lower\n  local upper\n  local character\n  local lower\n\
    \  local upper\n  local character\n  local lower\n  \n}\n\ncandidate() {\n   \
    \ count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  local j\n\
    \  local k\n  local characters_seen\n  local characters_seen_lower\n  local characters_seen_upper\n\
    \  local characters_seen_lower_index\n  local characters_seen_upper_index\n  local\
    \ characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  local characters_seen_upper_index_in_string\n\
    \  local characters_seen_lower_index_in_string\n  \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     [ \"$char\" == \"${string^}\" ] && continue\n        [ \"$char\" == \"${string^^}\"\
    \ ] && continue\n        [ \"$char\" == \"${string^^^}\" ] && continue\n     \
    \   ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local lower\n  local\
    \ upper\n  local lowerchar\n  local upperchar\n  local lowercharcount\n  local\
    \ uppercharcount\n  local lowercharcount2\n  local uppercharcount2\n  local lowercharcount3\n\
    \  local uppercharcount3\n  local lowercharcount4\n  local uppercharcount4\n \
    \ local lowercharcount5\n  local uppercharcount5\n  local lowercharcount6\n  local\
    \ uppercharcount6\n  local lowercharcount7\n  local uppercharcount7\n  local lowercharcount8\n\
    \  local uppercharcount8\n  local lowercharcount9\n  local uppercharcount9\n \
    \ local lowercharcount10\n  local uppercharcount10\n  local lowercharcount11\n\
    \  local uppercharcount11\n  local lowercharcount12\n  local uppercharcount12\n\
    \  local lowercharcount13\n  local uppercharcount13\n  local lowercharcount14\n\
    \  local uppercharcount14\n  local lowercharcount15\n  local uppercharcount15\n\
    \  local lowercharcount16\n  local uppercharcount16\n  local lowercharcount17\n\
    \  local uppercharcount17\n  local lowercharcount18\n  local uppercharcount18\n\
    \  local lowercharcount19\n  local uppercharcount19\n  local lowercharcount20\n\
    \  local uppercharcount20\n  local lowercharcount21\n  local uppercharcount21\n\
    \  local lowercharcount22\n  local uppercharcount22\n  local lowercharcount23\n\
    \  local uppercharcount23\n  local lowercharcount24\n  local uppercharcount24\n\
    \  local lowercharcount25\n  local uppercharcount25\n  local lowercharcount26\n\
    \  local uppercharcount26\n  local lowercharcount27\n  local uppercharcount27\n\
    \  local lowercharcount28\n  local uppercharcount28\n  local lowercharcount29\n\
    \  local uppercharcount29\n  local lowercharcount30\n  local uppercharcount30\n\
    \  local lowercharcount31\n  local uppercharcount31\n  local lowercharcount32\n\
    \  local uppercharcount32\n  local lowercharcount33\n  local uppercharcount33\n\
    \  local lowercharcount34\n  local uppercharcount34\n  local lowercharcount\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read character;\
    \ do\n    count=$((count+1))\n  done < <(echo \"$string\" | sed 's/[^A-Za-z0-9]//g'\
    \ | sort -u)\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    [[ \"$character\" =~ ^[a-z]$ ]] && count=$((count+1))\n \
    \   [[ \"$character\" =~ ^[A-Z]$ ]] && count=$((count+1))\n    [[ \"$character\"\
    \ =~ ^[0-9]$ ]] && count=$((count+1))\n    [[ \"$character\" =~ ^[[:space:]]$\
    \ ]] && count=$((count+1))\n  done <<< \"$string\"\n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        (( count++ ))\n\
    \    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  local j\n\
    \  local k\n  local characters_in_string\n  local characters_in_string_lowercase\n\
    \  local characters_in_string_uppercase\n  local characters_in_string_lowercase_index\n\
    \  local characters_in_string_uppercase_index\n  local characters_in_string_lowercase_index_in_string\n\
    \  local characters_in_string_uppercase_index_in_string\n  local characters_in_string_lowercase_index_in_string_lowercase\n\
    \  local characters_in_string_uppercase_index_in_string_uppercase\n  local characters_in_string_lowercase_index_in_string_uppercase_index\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index\n  local\
    \ characters_in_string_lowercase_index_in_string_uppercase_index_in_string\n \
    \ local characters_in_string_uppercase_index_in_string_lowercase_index_in_string\n\
    \  local characters_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase\n\
    \  local characters_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index\n\
    \  local characters_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string\n\
    \  local characters_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string_lowercase\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_uppercase\n\
    \  local characters_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string_lowercase\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string_lowercase_index_in_string_uppercase\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_in_string_lowercase\n\
    \  local characters_in_string_uppercase_index_in_string_lowercase_index_in_string_uppercase_index_\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    [[ \"$character\" =~ ^[[:upper:]]+$ ]] || continue\n    [[\
    \ \"$character\" =~ ^[[:lower:]]+$ ]] || continue\n    count=$((count+1))\n  done\
    \ <<< \"$string\"\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower\n  local upper\n\n  for character in \"${string}\"\
    ; do\n    lower=\"${character,,}\"\n    upper=\"${character,,}\"\n    lower=\"\
    ${lower,,}\"\n    upper=\"${upper,,}\"\n    if [[ \"$lower\" == \"$upper\" ]];\
    \ then\n      count=$((count+1))\n    elif [[ \"$lower\" == \"$character\" ]];\
    \ then\n      count=$((count+1))\n    elif [[ \"$upper\" == \"$character\" ]];\
    \ then\n      count=$((count+1))\n    fi\n  done\n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [[ $character == [A-Z] ]] && count=$((count+1))\n\
    \        [[ $character == [a-z] ]] && count=$((count+1))\n        [[ $character\
    \ == [0-9] ]] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lowerCount\n  local upperCount\n  local lowerChar\n  local\
    \ upperChar\n  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n\
    \  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local\
    \ lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n\
    \  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local\
    \ upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n\
    \  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local\
    \ lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n\
    \  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local\
    \ upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n\
    \  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local\
    \ lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n\
    \  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local\
    \ upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n\
    \  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local\
    \ lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n\
    \  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local\
    \ upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n\
    \  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local\
    \ lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n\
    \  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n  local\
    \ upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local lowerCharCount\n\
    \  local upperCharCount\n  local lowerCharCount\n  local upperCharCount\n  local\
    \ lowerCharCount\n  local upperCharCount\n  \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  local chars\n  local char\n  local char_count\n  local chars\n  local char\n\
    \  local char_count\n  local chars\n  local char\n  local char_count\n  local\
    \ chars\n  local char\n  local char_count\n  local chars\n  local char\n  local\
    \ char_count\n  local chars\n  local char\n  local char_count\n  local chars\n\
    \  local char\n  local char_count\n  local chars\n  local char\n  local char_count\n\
    \  local chars\n  local char\n  local char_count\n  local chars\n  local char\n\
    \  local char_count\n  local chars\n  local char\n  local char_count\n  local\
    \ chars\n  local char\n  local char_count\n  local chars\n  local char\n  local\
    \ char_count\n  local chars\n  local char\n  local char_count\n  local chars\n\
    \  local char\n  local char_count\n  local chars\n  local char\n  local char_count\n\
    \  local chars\n  local char\n  local char_count\n  local chars\n  local char\n\
    \  local char_count\n  local chars\n  local char\n  local char_count\n  local\
    \ chars\n  local char\n  local char_count\n  local chars\n  local char\n  local\
    \ char_count\n  local chars\n  local char\n  local char_count\n  local chars\n\
    \  local char\n  local char_count\n  local chars\n  local char\n  local char_count\n\
    \  local chars\n  local char\n  local char_count\n  local chars\n  local char\n\
    \  local char_count\n  local chars\n  local char\n  local char_count\n  local\
    \ chars\n  local char\n  local char_count\n  local chars\n  local char\n  local\
    \ char_count\n  local chars\n  local char\n  local char_count\n  local chars\n\
    \  local char\n  local char_count\n  local chars\n  local char\n  local char_count\n\
    \  local chars\n  local char\n  local char_count\n  local chars\n  local char\n\
    \  local char_count\n  local chars\n  local char\n  local char_count\n  local\
    \ \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local character2\n\
    \  local character3\n  local character4\n  local character5\n  local character6\n\
    \  local character7\n  local character8\n  local character9\n  local character10\n\
    \  local character11\n  local character12\n  local character13\n  local character14\n\
    \  local character15\n  local character16\n  local character17\n  local character18\n\
    \  local character19\n  local character20\n  local character21\n  local character22\n\
    \  local character23\n  local character24\n  local character25\n  local character26\n\
    \  local character27\n  local character28\n  local character29\n  local character30\n\
    \  local character31\n  local character32\n  local character33\n  local character34\n\
    \  local character35\n  local character36\n  local character37\n  local character38\n\
    \  local character39\n  local character40\n  local character41\n  local character42\n\
    \  local character43\n  local character44\n  local character45\n  local character46\n\
    \  local character47\n  local character48\n  local character49\n  local character50\n\
    \  local character51\n  local character52\n  local character53\n  local character54\n\
    \  local character55\n  local character56\n  local character57\n  local character58\n\
    \  local character59\n  local character60\n  local character61\n  local character62\n\
    \  local character63\n  local character64\n  local character65\n  local character66\n\
    \  local character67\n  local character68\n  local character69\n  local character70\n\
    \  local character71\n  local character72\n  local character73\n  local character74\n\
    \  local character75\n  local character76\n  local character77\n  local character78\n\
    \  local character79\n  local character80\n  local character81\n  local character82\n\
    \  local character83\n  local character84\n  local character85\n  local character86\n\
    \  local character87\n  local character88\n  local character89\n  local character90\n\
    \  local character91\n  local character92\n  local character93\n  local character94\n\
    \  local character95\n  local character96\n  local character97\n  local character98\n\
    \  local character99\n  local character100\n  local \n}\n\ncandidate() {\n   \
    \ count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  while read -r char;\
    \ do\n    [[ \"$char\" =~ ^[a-z]$ ]] || continue\n    [[ \"$char\" =~ ^[A-Z]$\
    \ ]] || continue\n    [[ \"$char\" =~ ^[0-9]$ ]] || continue\n    [[ \"$char\"\
    \ =~ ^[[:space:]]$ ]] || continue\n    ((count++))\n  done <<< \"$string\"\n \
    \ echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n\n  lower=$(echo \"$string\" | tr '[:upper:]' '[:lower:]')\n\
    \  upper=$(echo \"$string\" | tr '[:lower:]' '[:upper:]')\n  lower_index=$(echo\
    \ \"$lower\" | wc -c)\n  upper_index=$(echo \"$upper\" | wc -c)\n  i=$((lower_index))\n\
    \  j=$((upper_index))\n  k=$(echo \"$lower_index + $upper_index\" | bc)\n  l=$((k-1))\n\
    \  m=$((j-1))\n  n=$((m+1))\n  o=$((n-1))\n  p=$((o+1))\n  q=$((p+1))\n  r=$((q+1))\n\
    \  s=$((r+1))\n  t=$((s+1))\n  u=$((t+1))\n  v=$((u+1))\n  w=$((v+1))\n  x=$((w+1))\n\
    \  y=$((x+1))\n  z=$((y+1))\n\n  while [ \"$i\" -le \"$j\" ]; do\n    character=$(echo\
    \ \"$lower\" | sed -n \"${i}p\")\n    if [ \"$character\" != \"\" ]; then\n  \
    \    ((count++))\n    fi\n    ((i++))\n  done\n\n  while [ \"$j\" -le \"$k\" ];\
    \ do\n    character=$(echo \"$upper\" | sed -n \"${j}p\")\n    if [ \"$character\"\
    \ != \"\" ]; then\n      ((count++))\n    fi\n    ((j++))\n  done\n\n  while [\
    \ \"$m\" -le \"$n\" ]; do\n    character=$(echo \"$lower\" | sed -n \"${m}p\"\
    )\n    if [ \"$character\" != \"\" ]; then\n      ((count++))\n    fi\n    ((m++))\n\
    \  done\n\n  while [ \"$n\" -le \"$o\" ]; do\n    character=$(echo \"$upper\"\
    \ | sed -n \"${n}p\")\n    if [ \"$character\" != \"\" ]; then\n      ((count++))\n\
    \    fi\n    ((\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpftbx0gd9.sh: line 84: unexpected EOF while looking for matching
    `)''

    /tmp/tmpftbx0gd9.sh: line 101: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local characters_seen\n\
    \n  characters_seen=()\n  for character in \"${string}\"; do\n    characters_seen+=(\"\
    $character\")\n  done\n\n  for character in \"${characters_seen[@]}\"; do\n  \
    \  (( count++ ))\n  done\n\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local character\n  local lower\n  local\
    \ upper\n  local lower_index\n  local upper_index\n  local i\n  lower=$(echo $string\
    \ | tr '[:upper:]' '[:lower:]')\n  upper=$(echo $string | tr '[:lower:]' '[:upper:]')\n\
    \  lower_index=$(echo $lower | tr '[:upper:]' '[:lower:]')\n  upper_index=$(echo\
    \ $upper | tr '[:lower:]' '[:upper:]')\n  for (( i=0; i<${#string}; i++ )); do\n\
    \    character=${string:$i:1}\n    if [[ $character == $lower ]]; then\n     \
    \ (( count++ ))\n    elif [[ $character == $upper ]]; then\n      (( count-- ))\n\
    \    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"$count\"\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        [ \"${character}\" == \"${character^^}\"\
    \ ] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     (( count++ ))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  for char in \"${string}\"\
    ; do\n    [[ \"$char\" =~ [A-Z] ]] && count=$((count+1))\n    [[ \"$char\" =~\
    \ [a-z] ]] && count=$((count+1))\n    [[ \"$char\" =~ [0-9] ]] && count=$((count+1))\n\
    \    [[ \"$char\" =~ [!-~] ]] && count=$((count+1))\n  done\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    count=$((count+1))\n  done <<< \"$string\"\n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  local char_array\n  local char_array_count\n  local char_array_index\n  local\
    \ char_array_element\n  local char_array_element_count\n  local char_array_element_index\n\
    \  local char_array_element_value\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n  local char_array_element_value_lower\n  local\
    \ char_array_element_value_upper\n\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower\n  local upper\n\n  lower=$(echo \"$string\" | sed\
    \ 's/[a-z]//g')\n  upper=$(echo \"$string\" | sed 's/[A-Z]//g')\n  lower=$(echo\
    \ \"$lower\" | sed 's/^[ \\t]*//g')\n  upper=$(echo \"$upper\" | sed 's/^[ \\\
    t]*//g')\n\n  for character in $lower; do\n    count=$(echo \"$count\" | sed \"\
    s/^$character//g\")\n  done\n\n  for character in $upper; do\n    count=$(echo\
    \ \"$count\" | sed \"s/^$character//g\")\n  done\n\n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local i\n  for\
    \ i in \"${string}\"; do\n    character=\"${i:0:1}\"\n    if [[ \"$character\"\
    \ == \"$i\" ]]; then\n      ((count++))\n    fi\n  done\n  echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  local char_counts\n  local char_counts_sorted\n  local char_counts_sorted_index\n\
    \  local char_counts_sorted_index_count\n  local char_counts_sorted_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count\n  local char_counts_sorted_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count\n  local char_counts_sorted_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \  local char_counts_sorted_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    }\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local lower\n  local\
    \ upper\n  local char_count\n  \n  lower=$(echo \"$string\" | sed 's/[a-z]//g')\n\
    \  upper=$(echo \"$string\" | sed 's/[A-Z]//g')\n  \n  for char in $lower; do\n\
    \    char_count=$(echo \"$string\" | sed -n \"s/^$char//p\")\n    if [ -z \"$char_count\"\
    \ ]; then\n      char_count=0\n    fi\n    \n    count=$(( $count + $char_count\
    \ ))\n  done\n  \n  for char in $upper; do\n    char_count=$(echo \"$string\"\
    \ | sed -n \"s/^$char//p\")\n    if [ -z \"$char_count\" ]; then\n      char_count=0\n\
    \    fi\n    \n    count=$(( $count + $char_count ))\n  done\n  \n  echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  while read -r char;\
    \ do\n    [[ \"$char\" =~ ^[A-Za-z]$ ]] && count=$((count+1))\n  done <<< \"$string\"\
    \n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local char_index\n\
    \  local char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char_index\n  local char\n  local char_count\n\
    \  local char_index\n  local char\n  local char_count\n  local char_index\n  local\
    \ char\n  local char_count\n  local char\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\
    \ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local char_count\n\
    \  local char_count_array\n  local char_count_array_index\n  local char_count_array_length\n\
    \  local char_count_array_element\n  local char_count_array_element_index\n  local\
    \ char_count_array_element_length\n  local char_count_array_element_value\n  local\
    \ char_count_array_element_value_length\n  local char_count_array_element_value_length_index\n\
    \  local char_count_array_element_value_length_index_length\n  local char_count_array_element_value_length_index_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value\n  local\
    \ char_count_array_element_value_length_index_length_index_value_length\n  local\
    \ char_count_array_element_value_length_index_length_index_value_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local char_count_array_element_value_length_index_length_index_value_\n}\n\n\
    candidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n\
    \    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\"\
    ) = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  local lower\n  local\
    \ upper\n  local digit\n  local special\n  local other\n  local char_count\n \
    \ local lowercase_count\n  local uppercase_count\n  local digit_count\n  local\
    \ special_count\n  local other_count\n  local char_count\n  local lowercase_count\n\
    \  local uppercase_count\n  local digit_count\n  local special_count\n  local\
    \ other_count\n  local char_count\n  local lowercase_count\n  local uppercase_count\n\
    \  local digit_count\n  local special_count\n  local other_count\n  local char_count\n\
    \  local lowercase_count\n  local uppercase_count\n  local digit_count\n  local\
    \ special_count\n  local other_count\n  local char_count\n  local lowercase_count\n\
    \  local uppercase_count\n  local digit_count\n  local special_count\n  local\
    \ other_count\n  local char_count\n  local lowercase_count\n  local uppercase_count\n\
    \  local digit_count\n  local special_count\n  local other_count\n  local char_count\n\
    \  local lowercase_count\n  local uppercase_count\n  local digit_count\n  local\
    \ special_count\n  local other_count\n  local char_count\n  local lowercase_count\n\
    \  local uppercase_count\n  local digit_count\n  local special_count\n  local\
    \ other_count\n  local char_count\n  local lowercase_count\n  local uppercase_count\n\
    \  local digit_count\n  local special_count\n  local other_count\n  local char_count\n\
    \  local lowercase_count\n  local uppercase_count\n  local digit_count\n  local\
    \ special_count\n  local other_count\n  local char_count\n  local lowercase_count\n\
    \  local uppercase_count\n  local digit_count\n  local special_count\n  local\
    \ other_count\n  local char_count\n  local lowercase_count\n  local uppercase_count\n\
    \  local digit_count\n  local special_count\n  local other_count\n  local char_count\n\
    \  local lowercase_count\n  local uppercase_count\n  local digit_count\n  local\
    \ special_count\n  local other_count\n  local char_count\n  local lowercase_count\n\
    \  local uppercase_count\n  local digit_count\n  local special_count\n  local\
    \ other_count\n  local char_count\n  local lowercase_count\n  local uppercase_count\n\
    \  local digit_count\n  local special_count\n  local \n}\n\ncandidate() {\n  \
    \  count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local i\n  for\
    \ (( i=1; i<${#string}; i++ )); do\n    character=\"${string:$i:1}\"\n    if [[\
    \ \"$character\" == \"$character\" ]]; then\n      (( count++ ))\n    fi\n  done\n\
    \  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local character\n  local lower\n  local\
    \ upper\n  local lower_index\n  local upper_index\n  lower=$(echo $string | tr\
    \ '[:upper:]' '[:lower:]')\n  upper=$(echo $string | tr '[:lower:]' '[:upper:]')\n\
    \  lower_index=$(echo $lower | tr '[:upper:]' '[:lower:]')\n  upper_index=$(echo\
    \ $upper | tr '[:lower:]' '[:upper:]')\n  while read -r character; do\n    if\
    \ [ \"$character\" == \"$lower\" ]; then\n      (( count++ ))\n    elif [ \"$character\"\
    \ == \"$upper\" ]; then\n      (( count-- ))\n    fi\n  done < <(echo $string\
    \ | tr ' ' '\\n' | sort -u)\n  echo $count\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower2\n  local upper2\n  local lower3\n  local upper3\n\
    \  local lower4\n  local upper4\n  local lower5\n  local upper5\n  local lower6\n\
    \  local upper6\n  local lower7\n  local upper7\n  local lower8\n  local upper8\n\
    \  local lower9\n  local upper9\n  local lower10\n  local upper10\n  local lower11\n\
    \  local upper11\n  local lower12\n  local upper12\n  local lower13\n  local upper13\n\
    \  local lower14\n  local upper14\n  local lower15\n  local upper15\n  local lower16\n\
    \  local upper16\n  local lower17\n  local upper17\n  local lower18\n  local upper18\n\
    \  local lower19\n  local upper19\n  local lower20\n  local upper20\n  local lower21\n\
    \  local upper21\n  local lower22\n  local upper22\n  local lower23\n  local upper23\n\
    \  local lower24\n  local upper24\n  local lower25\n  local upper25\n  local lower26\n\
    \  local upper26\n  local lower27\n  local upper27\n  local lower28\n  local upper28\n\
    \  local lower29\n  local upper29\n  local lower30\n  local upper30\n  local lower31\n\
    \  local upper31\n  local lower32\n  local upper32\n  local lower33\n  local upper33\n\
    \  local lower34\n  local upper34\n  local lower35\n  local upper35\n  local lower36\n\
    \  local upper36\n  local lower37\n  local upper37\n  local lower38\n  local upper38\n\
    \  local lower39\n  local upper39\n  local lower40\n  local upper40\n  local lower41\n\
    \  local upper41\n  local lower42\n  local upper42\n  local lower43\n  local upper43\n\
    \  local lower44\n  local upper44\n  local lower45\n  local upper45\n  local lower46\n\
    \  local upper46\n  local lower47\n  local upper47\n  local lower48\n  local upper48\n\
    \  local lower49\n  local upper49\n  local lower50\n  local upper50\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local characters=$(echo $string\
    \ | sed 's/[^A-Za-z0-9]//g' | sed 's/ //g')\n    for character in $characters\n\
    \    do\n        count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while IFS= read\
    \ -r character; do\n    count=$((count+1))\n  done <<< \"$string\"\n  echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [[ $char =~ [A-Z] ]] && count=$((count+1))\n \
    \       [[ $char =~ [a-z] ]] && count=$((count+1))\n        [[ $char =~ [0-9]\
    \ ]] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while IFS= read\
    \ -r character; do\n    [[ \"$character\" =~ ^[a-zA-Z0-9_]$ ]] || continue\n \
    \   ((count++))\n  done <<< \"$string\"\n  echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local character\n    for character\
    \ in $string; do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [[ $char =~ [A-Z] ]] && count=$((count+1))\n \
    \       [[ $char =~ [a-z] ]] && count=$((count+1))\n        [[ $char =~ [0-9]\
    \ ]] && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        (( count++ ))\n    done\n    echo \"\
    $count\"\n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\"\
    ) = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate\
    \ \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"\
    5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=$1\n  local count=0\n  local char\n  local char_count\n  \n\
    \  for char in $(echo $string | sed -e 's/ /\\n/g' | sed -e 's/^/\\n/g' | sed\
    \ -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\n/g'\
    \ | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | sed -e 's/^/\\\
    n/g' | sed -e 's/$/\\n/g' | sed -e 's/\\n/ /g' | sed -e 's/\\s/ /g' | \n}\n\n\
    candidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n\
    \    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\"\
    ) = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpydxx_ck2.sh: line 11: unexpected EOF while looking for matching
    `)''

    /tmp/tmpydxx_ck2.sh: line 28: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lowerchar\n  local upperchar\n\n  for character in \"\
    ${string}\"; do\n    lower=\"${character,,}\"\n    upper=\"${lower,,}\"\n    lowerchar=\"\
    ${lower,,}\"\n    upperchar=\"${upper,,}\"\n    if [[ \"$lower\" == \"$upper\"\
    \ ]]; then\n      count=$((count+1))\n    elif [[ \"$lower\" == \"$lowerchar\"\
    \ ]]; then\n      count=$((count+1))\n    elif [[ \"$upper\" == \"$upperchar\"\
    \ ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo \"$count\"\n}\n\n\
    candidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n\
    \    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\"\
    ) = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local character\n    for\
    \ character in \"${string}\"; do\n        ((count++))\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
    \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"\
    aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        [[ $char =~ ^[[:upper:]] ]] && count=$((count+1))\n        [[ $char\
    \ =~ ^[[:lower:]] ]] && count=$((count+1))\n        [[ $char =~ ^[[:digit:]] ]]\
    \ && count=$((count+1))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n \
    \   count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local char\n  while read -r char;\
    \ do\n    [[ \"$char\" =~ ^[[:upper:]]$ ]] && count=$((count+1))\n    [[ \"$char\"\
    \ =~ ^[[:lower:]]$ ]] && count=$((count+1))\n    [[ \"$char\" =~ ^[[:digit:]]$\
    \ ]] && count=$((count+1))\n    [[ \"$char\" =~ ^[[:space:]]$ ]] && count=$((count+1))\n\
    \  done <<< \"$string\"\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  while read -r\
    \ character; do\n    count=$((count+1))\n  done < <(echo \"$string\" | tr A-Z\
    \ a-z)\n  echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate\
    \ \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n  \
    \  [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY\
    \ JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        (( count++ ))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n  \
    \  count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=$1\n    local count=0\n    local char\n    for char in $string;\
    \ do\n        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate\
    \ \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\"\
    \ ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" == \"\
    ${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && continue\n        [ \"$char\" ==\
    \ \"${string^^}\" ] && continue\n        [ \"$char\" == \"${string^^}\" ] && continue\n\
    \        [ \"$char\" == \"${string^^}\" ] && \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe_xawpd7.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpe_xawpd7.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660036984
- exit_code: 2
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"\
    ${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n\
    \        [ \"${char}\" == \"${string^^}\" ] && continue\n        [ \"${char}\"\
    \ == \"${string^^}\" ] && continue\n        [ \"${char}\" == \"${string^^}\" ]\
    \ && continue\n        [ \"${char}\" == \"${string^^}\" ] && continue\n      \
    \  [ \"${char}\" == \"${string^^}\" ] && \n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo7mqkegg.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpo7mqkegg.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"${char}\" == \"${string}\" ] && continue\n\
    \        ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n    local string=\"$1\"\n    local count=0\n    local char\n    for char\
    \ in \"${string}\"; do\n        [ \"$char\" == \"$string\" ] && continue\n   \
    \     ((count++))\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036984
- exit_code: 1
  program: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n#\n# $1 is a string\ncount_distinct_characters()\
    \ {\n  local string=\"$1\"\n  local count=0\n  local character\n  local lower\n\
    \  local upper\n  local lower_index\n  local upper_index\n  local i\n  local j\n\
    \  local k\n  local characters_in_string\n  local characters_in_string_lower\n\
    \  local characters_in_string_upper\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n  local characters_in_string_lower_count\n\
    \  local characters_in_string_upper_count\n}\n\ncandidate() {\n    count_distinct_characters\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n   \
    \ [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\")\
    \ = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate\
    \ \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036985
