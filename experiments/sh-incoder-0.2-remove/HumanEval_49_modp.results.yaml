language: sh
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\tp=$1\n\tn=$2\n\t\
    i=$(( (n-1) % p ))\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p\
    \ + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p +\
    \ 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1\
    \ )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 ))\
    \ )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) ))\
    \ | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) |\
    \ bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\
    \techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo\
    \ $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $((\
    \ p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p\
    \ * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p *\
    \ $(( p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $((\
    \ p + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( p\
    \ + 1 )) )) | bc\n\techo $(( p * $(( p + 1 )) )) | bc\n\techo $(( p * $(( \n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpon7agoxp.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmpon7agoxp.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x=$(( (n-1) % p ))\n\techo $(( x * p + (n-1) % p ))\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\
    \n\techo \"$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpodq2_1u1.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpodq2_1u1.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$((p-1))\n\tlocal res\n\tlocal i\n\tfor i in $(seq 1 $((n-1))); do\n\t\t\
    res=$((res+$((p^$((i))))))\n\tdone\n\techo $((res%$mod))\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ [ $i -gt 0 ]; do\n\t\ti=$(( $i - $j ))\n\t\tj=$(( $j + $2 ))\n\tdone\n\techo\
    \ $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal r\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal\
    \ n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal r\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ r\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal i\n\tlocal j\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i%$j ))\n\tdone\n\techo $i\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$p\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal tmp\n\tlocal tmp2\n\
    \tlocal tmp3\n\tlocal tmp4\n\tlocal tmp5\n\tlocal tmp6\n\tlocal tmp7\n\tlocal\
    \ tmp8\n\tlocal tmp9\n\tlocal tmp10\n\tlocal tmp11\n\tlocal tmp12\n\tlocal tmp13\n\
    \tlocal tmp14\n\tlocal tmp15\n\tlocal tmp16\n\tlocal tmp17\n\tlocal tmp18\n\t\
    local tmp19\n\tlocal tmp20\n\tlocal tmp21\n\tlocal tmp22\n\tlocal tmp23\n\tlocal\
    \ tmp24\n\tlocal tmp25\n\tlocal tmp26\n\tlocal tmp27\n\tlocal tmp28\n\tlocal tmp29\n\
    \tlocal tmp30\n\tlocal tmp31\n\tlocal tmp32\n\tlocal tmp33\n\tlocal tmp34\n\t\
    local tmp35\n\tlocal tmp36\n\tlocal tmp37\n\tlocal tmp38\n\tlocal tmp39\n\tlocal\
    \ tmp40\n\tlocal tmp41\n\tlocal tmp42\n\tlocal tmp43\n\tlocal tmp44\n\tlocal tmp45\n\
    \tlocal tmp46\n\tlocal tmp47\n\tlocal tmp48\n\tlocal tmp49\n\tlocal tmp50\n\t\
    local tmp51\n\tlocal tmp52\n\tlocal tmp53\n\tlocal tmp54\n\tlocal tmp55\n\tlocal\
    \ tmp56\n\tlocal tmp57\n\tlocal tmp58\n\tlocal tmp59\n\tlocal tmp60\n\tlocal tmp61\n\
    \tlocal tmp62\n\tlocal tmp63\n\tlocal tmp64\n\tlocal tmp65\n\tlocal tmp66\n\t\
    local tmp67\n\tlocal tmp68\n\tlocal tmp69\n\tlocal tmp70\n\tlocal tmp71\n\tlocal\
    \ tmp72\n\tlocal tmp73\n\tlocal tmp74\n\tlocal tmp75\n\tlocal tmp76\n\tlocal tmp77\n\
    \tlocal tmp78\n\tlocal tmp79\n\tlocal tmp80\n\tlocal tmp81\n\tlocal tmp82\n\t\
    local tmp83\n\tlocal tmp84\n\tlocal tmp85\n\tlocal tmp86\n\tlocal tmp87\n\tlocal\
    \ tmp88\n\tlocal tmp89\n\tlocal tmp90\n\tlocal tmp91\n\tlocal tmp92\n\tlocal tmp93\n\
    \tlocal tmp94\n\tlocal tmp95\n\tlocal tmp96\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * j % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$((i+1))\n\tdone\n\techo $(( ($i % $j) + $j ))\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$2\n\tlocal\
    \ n=$1\n\tlocal mod=$((p-1))\n\tlocal modp=$((mod*((n%mod)+mod)))\n\techo $modp\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\ti=$1\n\tp=$2\n\t\
    n=$(( ($i % $p) + $p ))\n\techo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\twhile\
    \ (( i <= p )); do\n\t\t(( i % p )) && return $i\n\t\t(( i++ ))\n\tdone\n\treturn\
    \ $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal n=$3\n\tlocal a\n\n\ta=$(( p % q ))\n\ti=$(( p / q ))\n\tj=$((\
    \ q - i ))\n\twhile [ $i -gt 0 ]; do\n\t\ta=$(( a * q ))\n\t\ti=$(( i - 1 ))\n\
    \tdone\n\twhile [ $j -gt 0 ]; do\n\t\ta=$(( a % q ))\n\t\tj=$(( j - 1 ))\n\tdone\n\
    \techo $a\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x=$(( (n%p) + p ))\n\techo $x\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo \"$q\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * j % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p res\n\ti=\"$1\"\n\t\
    n=\"$2\"\n\tp=\"$3\"\n\tres=\"$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpctc_usjs.sh: line 11: unexpected EOF while looking for matching
    `)''

    /tmp/tmpctc_usjs.sh: line 30: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo \"$q\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal xm\n\tlocal ym\n\tlocal zm\n\tlocal rm\n\t\
    local sm\n\tlocal tm\n\tlocal um\n\tlocal vm\n\tlocal wm\n\tlocal xmr\n\tlocal\
    \ ymr\n\tlocal zmr\n\tlocal rms\n\tlocal sms\n\tlocal tmr\n\tlocal umr\n\tlocal\
    \ vmr\n\tlocal wmr\n\tlocal xms\n\tlocal yms\n\tlocal zms\n\tlocal rms\n\tlocal\
    \ sms\n\tlocal tmr\n\tlocal umr\n\tlocal vmr\n\tlocal wmr\n\tlocal xmr\n\tlocal\
    \ ymr\n\tlocal zmr\n\tlocal rms\n\tlocal sms\n\tlocal tmr\n\tlocal umr\n\tlocal\
    \ vmr\n\tlocal wmr\n\tlocal xms\n\tlocal yms\n\tlocal zms\n\tlocal rms\n\tlocal\
    \ sms\n\tlocal tmr\n\tlocal umr\n\tlocal vmr\n\tlocal wmr\n\tlocal xmr\n\tlocal\
    \ ymr\n\tlocal zmr\n\tlocal rms\n\tlocal sms\n\tlocal tmr\n\tlocal umr\n\tlocal\
    \ vmr\n\tlocal wmr\n\tlocal xms\n\tlocal yms\n\tlocal zms\n\tlocal rms\n\tlocal\
    \ sms\n\tlocal tmr\n\tlocal umr\n\tlocal vmr\n\tlocal wmr\n\tlocal xmr\n\tlocal\
    \ ymr\n\tlocal zmr\n\tlocal rms\n\tlocal sms\n\tlocal tmr\n\tlocal umr\n\tlocal\
    \ vmr\n\tlocal wmr\n\tlocal xms\n\tlocal yms\n\tlocal zms\n\tlocal rms\n\tlocal\
    \ sms\n\tlocal tmr\n\tlocal umr\n\tlocal vmr\n\tlocal wmr\n\tlocal xmr\n\tlocal\
    \ ymr\n\tlocal zmr\n\tlocal rms\n\tlocal sms\n\tlocal tmr\n\tlocal umr\n\tlocal\
    \ vmr\n\tlocal wmr\n\tlocal xms\n\tlocal yms\n\tlocal zms\n\tlocal \n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tres=0\n\tfor i in $(seq 0 $((n-1))); do\n\t\tres=$((res+$((p^$((n-1-i)))))%$p\n\
    \tdone\n\techo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplb8ypsl0.sh: line 13: unexpected EOF while looking for matching
    `)''

    /tmp/tmplb8ypsl0.sh: line 34: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ [ $i -gt 0 ]; do\n\t\ti=$(( $i % $j ))\n\tdone\n\techo $i\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$((p-1))\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal\
    \ nmod\n\tlocal pmod\n\tlocal q\n\tlocal qmod\n\tlocal qmod2\n\tlocal qmod3\n\t\
    local qmod4\n\tlocal qmod5\n\tlocal qmod6\n\tlocal qmod7\n\tlocal qmod8\n\tlocal\
    \ qmod9\n\tlocal qmod10\n\tlocal qmod11\n\tlocal qmod12\n\tlocal qmod13\n\tlocal\
    \ qmod14\n\tlocal qmod15\n\tlocal qmod16\n\tlocal qmod17\n\tlocal qmod18\n\tlocal\
    \ qmod19\n\tlocal qmod20\n\tlocal qmod21\n\tlocal qmod22\n\tlocal qmod23\n\tlocal\
    \ qmod24\n\tlocal qmod25\n\tlocal qmod26\n\tlocal qmod27\n\tlocal qmod28\n\tlocal\
    \ qmod29\n\tlocal qmod30\n\tlocal qmod31\n\tlocal qmod32\n\tlocal qmod33\n\tlocal\
    \ qmod34\n\tlocal qmod35\n\tlocal qmod36\n\tlocal qmod37\n\tlocal qmod38\n\tlocal\
    \ qmod39\n\tlocal qmod40\n\tlocal qmod41\n\tlocal qmod42\n\tlocal qmod43\n\tlocal\
    \ qmod44\n\tlocal qmod45\n\tlocal qmod46\n\tlocal qmod47\n\tlocal qmod48\n\tlocal\
    \ qmod49\n\tlocal qmod50\n\tlocal qmod51\n\tlocal qmod52\n\tlocal qmod53\n\tlocal\
    \ qmod54\n\tlocal qmod55\n\tlocal qmod56\n\tlocal qmod57\n\tlocal qmod58\n\tlocal\
    \ qmod59\n\tlocal qmod60\n\tlocal qmod61\n\tlocal qmod62\n\tlocal qmod63\n\tlocal\
    \ qmod64\n\tlocal qmod65\n\tlocal qmod66\n\tlocal qmod67\n\tlocal qmod68\n\tlocal\
    \ qmod69\n\tlocal qmod70\n\tlocal qmod71\n\tlocal qmod72\n\tlocal qmod73\n\tlocal\
    \ qmod74\n\tlocal qmod75\n\tlocal qmod76\n\tlocal q\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\twhile\
    \ (( i < p )); do\n\t\t(( i++ ))\n\tdone\n\techo $(( i % p ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal pmodp\n\
    \tlocal q\n\tlocal qmodp\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal \n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=$1\n\tp=$2\n\t\
    ret=$(( (n%p) + p ))\n\techo $ret\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal pmodp\n\
    \tlocal pmodq\n\tlocal qmodp\n\tlocal qmodq\n\tlocal qmodqmodp\n\tlocal qmodqmodq\n\
    \tlocal qmodqmodqmodp\n\tlocal qmodqmodqmodp\n\tlocal qmodqmodqmodq\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmod\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\tdone\n\t(( i % $2 ))\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p q r s t\n\ti=$1\n\t\
    n=$2\n\tp=$(( 2**$n ))\n\tq=$(( 2**$n ))\n\tr=`echo $(( 2**$n / $1 ))`\n\ts=$((\
    \ 2**$n / $2 ))\n\tt=`echo $(( 2**$n / $q ))`\n\techo $(( r * $s + $t ))\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n p ret\n    n=$1\n    p=$2\n\
    \    ret=$(( (n%p) + p ))\n    if [ $ret -eq 0 ]; then\n        ret=$p\n    fi\n\
    \    echo \"$ret\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i n p ret\n    n=$1\n  \
    \  p=$2\n    i=$(( (n-1) % p ))\n    ret=$(( i * p ))\n    return $ret\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n0\n\tlocal n1\n\t\
    local n2\n\tlocal n3\n\tlocal n4\n\tlocal n5\n\tlocal n6\n\tlocal n7\n\tlocal\
    \ n8\n\tlocal n9\n\tlocal n10\n\tlocal n11\n\tlocal n12\n\tlocal n13\n\tlocal\
    \ n14\n\tlocal n15\n\tlocal n16\n\tlocal n17\n\tlocal n18\n\tlocal n19\n\tlocal\
    \ n20\n\tlocal n21\n\tlocal n22\n\tlocal n23\n\tlocal n24\n\tlocal n25\n\tlocal\
    \ n26\n\tlocal n27\n\tlocal n28\n\tlocal n29\n\tlocal n30\n\tlocal n31\n\tlocal\
    \ n32\n\tlocal n33\n\tlocal n34\n\tlocal n35\n\tlocal n36\n\tlocal n37\n\tlocal\
    \ n38\n\tlocal n39\n\tlocal n40\n\tlocal n41\n\tlocal n42\n\tlocal n43\n\tlocal\
    \ n44\n\tlocal n45\n\tlocal n46\n\tlocal n47\n\tlocal n48\n\tlocal n49\n\tlocal\
    \ n50\n\tlocal n51\n\tlocal n52\n\tlocal n53\n\tlocal n54\n\tlocal n55\n\tlocal\
    \ n56\n\tlocal n57\n\tlocal n58\n\tlocal n59\n\tlocal n60\n\tlocal n61\n\tlocal\
    \ n62\n\tlocal n63\n\tlocal n64\n\tlocal n65\n\tlocal n66\n\tlocal n67\n\tlocal\
    \ n68\n\tlocal n69\n\tlocal n70\n\tlocal n71\n\tlocal n72\n\tlocal n73\n\tlocal\
    \ n74\n\tlocal n75\n\tlocal n76\n\tlocal n77\n\tlocal n78\n\tlocal n79\n\tlocal\
    \ n80\n\tlocal n81\n\tlocal n82\n\tlocal n83\n\tlocal n84\n\tlocal n85\n\tlocal\
    \ n86\n\tlocal n87\n\tlocal n88\n\tlocal n89\n\tlocal n90\n\tlocal n91\n\tlocal\
    \ n92\n\tlocal n93\n\tlocal n94\n\tlocal n95\n\tlocal \n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j * 2 ))\n\tdone\n\techo $j\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal pmodp\n\
    \tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\t\
    local x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\t\
    local e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\t\
    local l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\t\
    local s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\t\
    local z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\t\
    local g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\t\
    local n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\t\
    local u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\t\
    local b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\t\
    local i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\t\
    local p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\t\
    local w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\t\
    local d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\t\
    local k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\t\
    local r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\t\
    local y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    i=$1\n    j=$2\n\
    \    while [ $i -le $j ]; do\n        i=$((i+1))\n    done\n    echo $((2**$i%$2))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i % j ))\n\t\ti=$(( i + 1 ))\n\tdone\n\techo $i\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    i=$1; j=$2\n  \
    \  local p=$3\n    local q\n    q=$(( (j % p) + p ))\n    i=$(( i - q * p ))\n\
    \    i=$(( i % p ))\n    return $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb1zg0645.sh: line 11: (j % p) + p : division by 0 (error token
    is "p) + p ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    local p=$1\n  \
    \  local q=$2\n    local n=$3\n    local res\n\n    res=$(( ($n % $p) + $p ))\n\
    \    for (( i=1; i<$n; i++ )); do\n        res=$(( $res * $p ))\n    done\n  \
    \  echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi2_sujy6.sh: line 13: ( % 3) + 3 : syntax error: operand expected
    (error token is "% 3) + 3 ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i p n\n    i=$1\n    p=$2\n\
    \    n=$(( ($1+$2+$p)/$p ))\n    [ $n -gt $1 ] && n=$1\n    [ $n -lt 0 ] && n=$1\n\
    \    echo \"$n\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j * 2 ))\n\tdone\n\techo $j\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\twhile\
    \ (( i < p )); do\n\t\ti=$(( i + 1 ))\n\tdone\n\techo $i\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p n\n\tlocal\
    \ mod\n\tp=$1\n\tn=$2\n\tmod=$(( (n%p) + p ))\n\ti=$(( n - mod ))\n\tj=$(( mod\
    \ - p ))\n\techo $(( i * j ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p res\n\tn=$1\n\tp=$2\n\t\
    res=$(( (n%p) + p ))\n\techo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=${1:?integer\
    \ required}\n\tp=${2:?integer required}\n\tret=$(( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp52ero2ml.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmp52ero2ml.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$p\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmod\n\
    \tlocal nres\n\tlocal nmodp\n\tlocal nmodq\n\tlocal nmodr\n\tlocal nmods\n\tlocal\
    \ nmodt\n\tlocal nmodu\n\tlocal nmodv\n\tlocal nmodw\n\tlocal nmodx\n\tlocal nmody\n\
    \tlocal nmodz\n\tlocal nmodsmodp\n\tlocal nmodsmodq\n\tlocal nmodsmodr\n\tlocal\
    \ nmodsmods\n\tlocal nmodsmodt\n\tlocal nmodsmodu\n\tlocal nmodsmodv\n\tlocal\
    \ nmodsmodw\n\tlocal nmodsmodx\n\tlocal nmodsmody\n\tlocal nmodsmodz\n\tlocal\
    \ nmodsmodsmodp\n\tlocal nmodsmodsmodq\n\tlocal nmodsmodsmodr\n\tlocal nmodsmodsmods\n\
    \tlocal nmodsmodsmodt\n\tlocal nmodsmodsmodu\n\tlocal nmodsmodsmodv\n\tlocal nmodsmodsmodw\n\
    \tlocal nmodsmodsmodx\n\tlocal nmodsmodsmody\n\tlocal nmodsmodsmodz\n\tlocal nmodsmodsmodsmodp\n\
    \tlocal nmodsmodsmodsmodq\n\tlocal nmodsmodsmodsmodr\n\tlocal nmodsmodsmodsmods\n\
    \tlocal nmodsmodsmodsmodt\n\tlocal nmodsmodsmodsmodu\n\tlocal nmodsmodsmodsmodv\n\
    \tlocal nmodsmodsmodsmodw\n\tlocal nmodsmodsmodsmodx\n\tlocal nmodsmodsmodsmody\n\
    \tlocal nmodsmodsmodsmodz\n\tlocal nmodsmodsmodsmodsmodp\n\tlocal nmodsmodsmodsmodsmodq\n\
    \tlocal nmodsmodsmodsmodsmodr\n\tlocal nmodsmodsmodsmodsmods\n\tlocal nmodsmodsmodsmodsmod\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p res\n\tn=$1\n\tp=$2\n\
    \tres=$(( (n%p) + p ))\n\techo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal mod=$(( ($p + $q - 1) % $q ))\n\tlocal res\n\tlocal modp\n\tlocal\
    \ modq\n\tlocal modqmodp\n\tlocal modqmodq\n\tlocal modqmodqmodp\n\tlocal modqmodqmodq\n\
    \tlocal modqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodq\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i<j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i%$2 ))\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ m=$((p-1))\n\tlocal x=$((n%p))\n\tlocal y=$((p-1))\n\tlocal z=$((p-1))\n\tlocal\
    \ w=$((p-1))\n\tlocal u=$((p-1))\n\tlocal v=$((p-1))\n\tlocal t=$((p-1))\n\tlocal\
    \ s=$((p-1))\n\tlocal r=$((p-1))\n\tlocal q=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal n=$((p-1))\n\tlocal m=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal\
    \ o=$((p-1))\n\tlocal p=$((p-1))\n\tlocal o\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i <= j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=29 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\techo\
    \ $(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy373z37s.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpy373z37s.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$((p-1))\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=${1:?integer\
    \ required}\n\tp=${2:?integer required}\n\tret=$(( (n%p) + p ))\n\techo \"$ret\"\
    \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p q\n\t(( n = $1 ))\n\t\
    (( p = $2 ))\n\t(( q = $2 ))\n\t(( i = n ))\n\twhile (( i > 0 ))\n\tdo\n\t\t((\
    \ q = ( q * p ) % $2 ))\n\t\t(( i = i - 1 ))\n\tdone\n\techo $q\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i<j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p q\n\tn=$1\n\tp=$2\n\t\
    q=$(( (n%p) + p ))\n\techo \"$q\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ [ $i -gt 0 ]; do\n\t\ti=$(( $i % $j ))\n\t\tj=$(( $j % $j ))\n\tdone\n\techo\
    \ $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpj76heal0.sh: line 11: 3 % 0 : division by 0 (error token is "0
    ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$((p-1))\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal tmp\n\t\
    local tmp2\n\tlocal tmp3\n\tlocal tmp4\n\tlocal tmp5\n\tlocal tmp6\n\tlocal tmp7\n\
    \tlocal tmp8\n\tlocal tmp9\n\tlocal tmp10\n\tlocal tmp11\n\tlocal tmp12\n\tlocal\
    \ tmp13\n\tlocal tmp14\n\tlocal tmp15\n\tlocal tmp16\n\tlocal tmp17\n\tlocal tmp18\n\
    \tlocal tmp19\n\tlocal tmp20\n\tlocal tmp21\n\tlocal tmp22\n\tlocal tmp23\n\t\
    local tmp24\n\tlocal tmp25\n\tlocal tmp26\n\tlocal tmp27\n\tlocal tmp28\n\tlocal\
    \ tmp29\n\tlocal tmp30\n\tlocal tmp31\n\tlocal tmp32\n\tlocal tmp33\n\tlocal tmp34\n\
    \tlocal tmp35\n\tlocal tmp36\n\tlocal tmp37\n\tlocal tmp38\n\tlocal tmp39\n\t\
    local tmp40\n\tlocal tmp41\n\tlocal tmp42\n\tlocal tmp43\n\tlocal tmp44\n\tlocal\
    \ tmp45\n\tlocal tmp46\n\tlocal tmp47\n\tlocal tmp48\n\tlocal tmp49\n\tlocal tmp50\n\
    \tlocal tmp51\n\tlocal tmp52\n\tlocal tmp53\n\tlocal tmp54\n\tlocal tmp55\n\t\
    local tmp56\n\tlocal tmp57\n\tlocal tmp58\n\tlocal tmp59\n\tlocal tmp60\n\tlocal\
    \ tmp61\n\tlocal tmp62\n\tlocal tmp63\n\tlocal tmp64\n\tlocal tmp65\n\tlocal tmp66\n\
    \tlocal tmp67\n\tlocal tmp68\n\tlocal tmp69\n\tlocal tmp70\n\tlocal tmp71\n\t\
    local tmp72\n\tlocal tmp73\n\tlocal tmp74\n\tlocal tmp75\n\tlocal tmp76\n\tlocal\
    \ tmp77\n\tlocal tmp78\n\tlocal tmp79\n\tlocal tmp80\n\tlocal tmp81\n\tlocal tmp82\n\
    \tlocal tmp83\n\tlocal tmp84\n\tlocal tmp85\n\tlocal tmp86\n\tlocal tmp87\n\t\
    local tmp88\n\tlocal tmp89\n\tlocal tmp90\n\tlocal tmp91\n\tlocal tmp92\n\tlocal\
    \ tmp93\n\tlocal tmp94\n\tlocal tmp95\n\tlocal \n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\
    \n\techo \"$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpodq2_1u1.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpodq2_1u1.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    i=$1\n    j=$2\n\
    \    local p=$3\n    local m=$4\n    local n=$5\n    local q\n    local r\n  \
    \  local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    \n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ m=$(( (n-1) % p ))\n\techo $(( (n-1) % p ))\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\t(( n\
    \ % p )) && printf -v r '%.0g' $(( n % p ))\n\tprintf -v r '%.0g' $(( n / p ))\n\
    \tprintf -v r '%.0g' $(( r * p ))\n\tprintf -v r '%.0g' $(( r + p ))\n\tprintf\
    \ -v r '%.0g' $(( r - p ))\n\tprintf -v r '%.0g' $(( r * p ))\n\tprintf -v r '%.0g'\
    \ $(( r / p ))\n\tprintf -v r '%.0g' $(( r - p ))\n\tprintf -v r '%.0g' $(( r\
    \ + p ))\n\tprintf -v r '%.0g' $(( r * p ))\n\tprintf -v r '%.0g' $(( r / p ))\n\
    \tprintf -v r '%.0g' $(( r - p ))\n\tprintf -v r '%.0g' $(( r + p ))\n\tprintf\
    \ -v r '%.0g' $(( r * p ))\n\tprintf -v r '%.0g' $(( r / p ))\n\tprintf -v r '%.0g'\
    \ $(( r - p ))\n\tprintf -v r '%.0g' $(( r + p ))\n\tprintf -v r '%.0g' $(( r\
    \ * p ))\n\tprintf -v r '%.0g' $(( r / p ))\n\tprintf -v r '%.0g' $(( r - p ))\n\
    \tprintf -v r '%.0g' $(( r + p ))\n\tprintf -v r '%.0g' $(( r * p ))\n\tprintf\
    \ -v r '%.0g' $(( r / p ))\n\tprintf -v r '%.0g' $(( r - p ))\n\tprintf -v r '%.0g'\
    \ $(( r + p ))\n\tprintf -v r '%.0g' $(( r * p ))\n\tprintf -v r '%.0g' $(( r\
    \ / p ))\n\tprintf -v r '%.0g\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6e89mr7p.sh: line 36: unexpected EOF while looking for matching
    `''''

    /tmp/tmp6e89mr7p.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p res\n\t(( n = $1 ))\n\
    \t(( p = $2 ))\n\t(( res = $1 ))\n\t(( while (( n > 0 ))\n\t\tdo\n\t\t\t(( res\
    \ = $(( res * n )) ))\n\t\t\t(( n = $(( n - 1 )) ))\n\t\tdone\n\t))\n\t(( while\
    \ (( p > 0 ))\n\t\tdo\n\t\t\t(( res = $(( res * p )) ))\n\t\t\t(( p = $(( p -\
    \ 1 )) ))\n\t\tdone\n\t))\n\t(( while (( res > 0 ))\n\t\tdo\n\t\t\t(( res = $((\
    \ res - 1 )) ))\n\t\tdone\n\t))\n\t(( while (( res < 0 ))\n\t\tdo\n\t\t\t(( res\
    \ = $(( res + 1 )) ))\n\t\tdone\n\t))\n\t(( while (( res == 0 ))\n\t\tdo\n\t\t\
    \t(( res = $(( res + 1 )) ))\n\t\tdone\n\t))\n\t(( while (( res == 1 ))\n\t\t\
    do\n\t\t\t(( res = $(( res + 1 )) ))\n\t\tdone\n\t))\n\t(( while (( res == 2 ))\n\
    \t\tdo\n\t\t\t(( res = $(( res + 1 )) ))\n\t\tdone\n\t))\n\t(( while (( res ==\
    \ 3 ))\n\t\tdo\n\t\t\t(( res = $(( res + 1 )) ))\n\t\tdone\n\t))\n\t(( while ((\
    \ res == 4 ))\n\t\tdo\n\t\t\t(( res = $(( res + 1 )) ))\n\t\tdone\n\t))\n\t((\
    \ while (( res == 5 ))\n\t\tdo\n\t\t\t(( res = $(( res + 1 )) ))\n\t\tdone\n\t\
    ))\n\t(( while (( res == 6 ))\n\t\tdo\n\t\t\t(( res = $(( res + 1 )) ))\n\t\t\
    done\n\t))\n\t(( while (( res == 7 ))\n\t\tdo\n\t\t\t(( res = $(( res + 1 )) ))\n\
    \t\tdone\n\t))\n\t(( while (( res == 8 ))\n\t\tdo\n\t\t\t(( res = $(( res + 1\
    \ )) ))\n\t\tdone\n\t))\n\t(( while (( res == 9 ))\n\t\tdo\n\t\t\t(( res = $((\
    \ res + 1 )) ))\n\t\tdone\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6r3e8zl4.sh: line 78: unexpected EOF while looking for matching
    `)''

    /tmp/tmp6r3e8zl4.sh: line 100: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    i=$1\n    j=$2\n\
    \    while (( i < j )); do\n        (( i++ ))\n    done\n    echo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\t(( n\
    \ % p )) && printf -v n \"%02d\" \"$(( n % p ))\"\n\tprintf -v n \"%02d\" \"$((\
    \ n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\"\
    \ \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"\
    %02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v\
    \ n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf\
    \ -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\t\
    printf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\
    \n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p\
    \ ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$((\
    \ n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\"\
    \ \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"\
    %02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v\
    \ n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf\
    \ -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \"$(( n / p ))\"\n\t\
    printf -v n \"%02d\" \"$(( n / p ))\"\n\tprintf -v n \"%02d\" \n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\tp=$1\n\tn=$2\n\t\
    i=$(( (n-1) % p ))\n\tif (( i < 0 )) ; then\n\t\ti=p+i\n\tfi\n\techo $i\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\tn=$1\n\tp=$2\n\
    \tret=$(( (n%p) + p ))\n\techo \"$ret\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i<j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( ($i % $j) +\
    \ $j ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p res\n\tn=$1\n\tp=$2\n\t\
    res=$(( (n%p) + p ))\n\techo \"$res\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\t(( n = $1 ))\n\
    \t(( p = $2 ))\n\t(( ret = $1 ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret %= $n ))\n\t(( ret\
    \ %= $p ))\n\t(( ret %= $n ))\n\t(( ret %= $p ))\n\t(( ret \n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoqmwprf6.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpoqmwprf6.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\tp=2\n\tn=$1\n\twhile\
    \ (( n > 0 )); do\n\t\ti=$(( n - p ))\n\t\t(( n -= p ))\n\t\tp=(( p + p ))\n\t\
    \techo $(( i * p ))\n\tdone\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpqpj18wi1.sh: line 13: syntax error near unexpected token `('\n\
    /tmp/tmpqpj18wi1.sh: line 13: `\t\tp=(( p + p ))'\n/tmp/tmpqpj18wi1.sh: line 15:\
    \ syntax error near unexpected token `done'\n/tmp/tmpqpj18wi1.sh: line 15: `\t\
    done'\n"
  stdout: '0

    '
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\tread n p <<< \"$2\"\
    \n\t(( n = n % p ))\n\t(( n = n ? n + p : n ))\n\techo $(( n ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpns7yp85z.sh: line 9: ((: n = n % p : division by 0 (error token
    is "p ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ m=$((p-1))\n\tlocal r=$((n%p))\n\t(( n -= r ))\n\t(( m %= p ))\n\t(( r += m\
    \ ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %=\
    \ p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r\
    \ += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t\
    (( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\
    \t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\
    \t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\
    \t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\
    \t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\
    \t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\
    \t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\
    \t(( r %= p ))\n\t(( r += m ))\n\t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\
    \t(( r += p ))\n\t(( r %= p ))\n\t(( r += m ))\n\t(( \n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn1u1vq3z.sh: line 71: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn1u1vq3z.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ m=$((p-1))\n\tlocal r=$((n%p))\n\t((r==0)) && return 0\n\t((r>0)) && return\
    \ $m+modp $r $p\n\t((r<0)) && return $m-modp $r $p\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2sie1rl2.sh: line 12: return: 4+modp: numeric argument required

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ [ $i -le $j ]; do\n\t\ti=$((i+1))\n\tdone\n\techo $((2**$j))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=$1\n\tp=$2\n\t\
    ret=$(( (n%p) + p ))\n\tif [ $ret -eq 0 ]; then\n\t\techo \"$n\"\n\telse\n\t\t\
    echo \"$ret\"\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * j ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\t(( n = $1 ))\n\
    \t(( p = $2 ))\n\t(( ret = $n % p ))\n\t(( ret = ret < 0 ? ret + p : ret ))\n\t\
    (( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > p ? ret : p ))\n\t(( ret = ret\
    \ < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 :\
    \ ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t\
    (( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret\
    \ > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret\
    \ : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t\
    (( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret\
    \ < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 :\
    \ ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t\
    (( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret\
    \ > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret\
    \ : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t\
    (( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret\
    \ < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 :\
    \ ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t\
    (( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret\
    \ > n ? ret : n ))\n\t(( ret = ret < 0 ? 0 : ret ))\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\ti=$1\n\tn=$2\n\t\
    p=$3\n\t(( i % p )) && printf \"%d\\n\" $(( i % p ))\n}\n\ncandidate() {\n   \
    \ modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpibfl4jqc.sh: line 11: ((: i % p : division by 0 (error token is
    "p ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    i=$1; shift\n \
    \   j=$1; shift\n    while (( i < j )); do\n        (( i++ ))\n        j=$(( j\
    \ % $2 ))\n    done\n    echo $(( $i % $2 ))\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfhf6d1k3.sh: line 12: j %  : syntax error: operand expected (error
    token is "%  ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal n=$3\n\tlocal m=$(( (p-1)/q+1 ))\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal A\n\tlocal B\n\tlocal C\n\tlocal D\n\tlocal\
    \ E\n\tlocal F\n\tlocal G\n\tlocal H\n\tlocal I\n\tlocal J\n\tlocal K\n\tlocal\
    \ L\n\tlocal M\n\tlocal N\n\tlocal O\n\tlocal P\n\tlocal Q\n\tlocal R\n\tlocal\
    \ S\n\tlocal T\n\tlocal U\n\tlocal V\n\tlocal W\n\tlocal X\n\tlocal Y\n\tlocal\
    \ Z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal A\n\tlocal\
    \ B\n\tlocal C\n\tlocal D\n\tlocal E\n\tlocal F\n\tlocal G\n\tlocal H\n\tlocal\
    \ I\n\tlocal J\n\tlocal K\n\tlocal L\n\tlocal M\n\tlocal N\n\tlocal O\n\tlocal\
    \ P\n\tlocal Q\n\tlocal R\n\tlocal S\n\tlocal T\n\tlocal U\n\tlocal V\n\tlocal\
    \ W\n\tlocal X\n\tlocal Y\n\tlocal Z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * j % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i p\n    i=$1\n    p=$2\n\
    \    echo $(( ( ( $i % $p ) + $p ) % $p ))\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal nmodpmodp\n\
    \tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmod\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\
    \n\techo \"$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpodq2_1u1.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpodq2_1u1.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\techo\
    \ $(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy373z37s.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpy373z37s.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal mod=$((p-1))\n\tlocal res\n\tlocal sign\n\tlocal tmp\n\tlocal\
    \ tmp2\n\tlocal tmp3\n\tlocal tmp4\n\tlocal tmp5\n\tlocal tmp6\n\tlocal tmp7\n\
    \tlocal tmp8\n\tlocal tmp9\n\tlocal tmp10\n\tlocal tmp11\n\tlocal tmp12\n\tlocal\
    \ tmp13\n\tlocal tmp14\n\tlocal tmp15\n\tlocal tmp16\n\tlocal tmp17\n\tlocal tmp18\n\
    \tlocal tmp19\n\tlocal tmp20\n\tlocal tmp21\n\tlocal tmp22\n\tlocal tmp23\n\t\
    local tmp24\n\tlocal tmp25\n\tlocal tmp26\n\tlocal tmp27\n\tlocal tmp28\n\tlocal\
    \ tmp29\n\tlocal tmp30\n\tlocal tmp31\n\tlocal tmp32\n\tlocal tmp33\n\tlocal tmp34\n\
    \tlocal tmp35\n\tlocal tmp36\n\tlocal tmp37\n\tlocal tmp38\n\tlocal tmp39\n\t\
    local tmp40\n\tlocal tmp41\n\tlocal tmp42\n\tlocal tmp43\n\tlocal tmp44\n\tlocal\
    \ tmp45\n\tlocal tmp46\n\tlocal tmp47\n\tlocal tmp48\n\tlocal tmp49\n\tlocal tmp50\n\
    \tlocal tmp51\n\tlocal tmp52\n\tlocal tmp53\n\tlocal tmp54\n\tlocal tmp55\n\t\
    local tmp56\n\tlocal tmp57\n\tlocal tmp58\n\tlocal tmp59\n\tlocal tmp60\n\tlocal\
    \ tmp61\n\tlocal tmp62\n\tlocal tmp63\n\tlocal tmp64\n\tlocal tmp65\n\tlocal tmp66\n\
    \tlocal tmp67\n\tlocal tmp68\n\tlocal tmp69\n\tlocal tmp70\n\tlocal tmp71\n\t\
    local tmp72\n\tlocal tmp73\n\tlocal tmp74\n\tlocal tmp75\n\tlocal tmp76\n\tlocal\
    \ tmp77\n\tlocal tmp78\n\tlocal tmp79\n\tlocal tmp80\n\tlocal tmp81\n\tlocal tmp82\n\
    \tlocal tmp83\n\tlocal tmp84\n\tlocal tmp85\n\tlocal tmp86\n\tlocal tmp87\n\t\
    local tmp88\n\tlocal tmp89\n\tlocal tmp90\n\tlocal tmp91\n\tlocal tmp92\n\tlocal\
    \ tmp93\n\tlocal tmp94\n\tlocal tmp95\n\tlocal tmp96\n\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\tp=$1\n\tn=$2\n\t\
    i=1\n\twhile (( i <= n )); do\n\t\t(( p *= p ))\n\t\t(( i++ ))\n\tdone\n\techo\
    \ $p\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i % $j ))\n\tdone\n\techo $i\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=3 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p res\n\tn=$1\n\tp=$2\n\
    \tres=$(( (n%p) + p ))\n\t[ \"$res\" -eq \"$p\" ] && return $res\n\t[ \"$res\"\
    \ -eq \"$(( n%p ))\" ] && return $(( n%p ))\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\ti=$1\n\tn=$2\n\t\
    p=$3\n\t(( i % p )) && printf \"%.0f\\n\" $(( i % p ))\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp12ldijd5.sh: line 11: ((: i % p : division by 0 (error token is
    "p ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal nmodpmodp\n\
    \tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmod\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=$1\n\tp=$2\n\t\
    ret=$(( (n%p) + p ))\n\techo \"$ret\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal pmodp\n\
    \tlocal pmodp2\n\tlocal pmodp2modp\n\tlocal pmodp2modp2\n\tlocal pmodp2modp3\n\
    \tlocal pmodp2modp4\n\tlocal pmodp2modp5\n\tlocal pmodp2modp6\n\tlocal pmodp2modp7\n\
    \tlocal pmodp2modp8\n\tlocal pmodp2modp9\n\tlocal pmodp2modp10\n\tlocal pmodp2modp11\n\
    \tlocal pmodp2modp12\n\tlocal pmodp2modp13\n\tlocal pmodp2modp14\n\tlocal pmodp2modp15\n\
    \tlocal pmodp2modp16\n\tlocal pmodp2modp17\n\tlocal pmodp2modp18\n\tlocal pmodp2modp19\n\
    \tlocal pmodp2modp20\n\tlocal pmodp2modp21\n\tlocal pmodp2modp22\n\tlocal pmodp2modp23\n\
    \tlocal pmodp2modp24\n\tlocal pmodp2modp25\n\tlocal pmodp2modp26\n\tlocal pmodp2modp27\n\
    \tlocal pmodp2modp28\n\tlocal pmodp2modp29\n\tlocal pmodp2modp30\n\tlocal pmodp2modp31\n\
    \tlocal pmodp2modp32\n\tlocal pmodp2modp33\n\tlocal pmodp2modp34\n\tlocal pmodp2modp35\n\
    \tlocal pmodp2modp36\n\tlocal pmodp2modp37\n\tlocal pmodp2modp38\n\tlocal pmodp2modp39\n\
    \tlocal pmodp2modp40\n\tlocal pmodp2modp41\n\tlocal pmodp2modp42\n\tlocal pmodp2modp43\n\
    \tlocal pmodp2modp44\n\tlocal pmodp2modp45\n\tlocal pmodp2modp46\n\tlocal pmodp2modp47\n\
    \tlocal pmodp2modp48\n\tlocal pmodp2modp49\n\tlocal pmodp2modp50\n\tlocal pmodp2modp51\n\
    \tlocal pmodp2\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal nmodpmodp\n\
    \tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmod\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=$1\n\tp=$2\n\t\
    ret=$(( (n%p) + p ))\n\techo \"$ret\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=$1\n\tp=$2\n\t\
    ret=$(( (n%p) + p ))\n\techo \"$ret\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal r\n\tlocal t\n\n\ti=$(( p - 1 ))\n\tj=$(( q - 1 ))\n\tr=$(( p\
    \ + q - 1 ))\n\twhile (( i < j )); do\n\t\tt=$(( r + 1 ))\n\t\tr=$(( t - 1 ))\n\
    \t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i p\n    i=$1\n    p=$2\n\
    \    echo $(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphxdxqibo.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmphxdxqibo.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\
    \n\t(( i % j == 0 )) && echo \"$i\" || echo \"$(( i % j + j ))\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * j % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$((p-1))\n\tlocal ret=$((n%p))\n\tif ((ret==0)); then\n\t\tret=$((mod))\n\
    \tfi\n\techo $ret\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ [ $i -gt 0 ]; do\n\t\ti=$(( $i - $j ))\n\t\tj=$(( $j + $1 ))\n\tdone\n\techo\
    \ $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ m=$(( (n-1) % p ))\n\techo $(( (n-1) % p ))\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i % j ))\n\t\t(( i++ ))\n\tdone\n\techo $i\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\t(( n\
    \ % p )) && printf \"%s\\n\" \"$(modp $(( n / p )) $p)\"\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n0\n\tlocal p0\n\t\
    local q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\t\
    local x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\t\
    local e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i0\n\tlocal j0\n\tlocal k0\n\
    \tlocal l\n\tlocal m0\n\tlocal n0\n\tlocal o\n\tlocal p\n\tlocal q0\n\tlocal r0\n\
    \tlocal s0\n\tlocal t0\n\tlocal u0\n\tlocal v0\n\tlocal w0\n\tlocal x0\n\tlocal\
    \ y0\n\tlocal z0\n\tlocal a0\n\tlocal b0\n\tlocal c0\n\tlocal d0\n\tlocal e0\n\
    \tlocal f0\n\tlocal g0\n\tlocal h0\n\tlocal i1\n\tlocal j1\n\tlocal k1\n\tlocal\
    \ l0\n\tlocal m1\n\tlocal n1\n\tlocal o0\n\tlocal p0\n\tlocal q1\n\tlocal r1\n\
    \tlocal s1\n\tlocal t1\n\tlocal u1\n\tlocal v1\n\tlocal w1\n\tlocal x1\n\tlocal\
    \ y1\n\tlocal z1\n\tlocal a1\n\tlocal b1\n\tlocal c1\n\tlocal d1\n\tlocal e1\n\
    \tlocal f1\n\tlocal g1\n\tlocal h1\n\tlocal i2\n\tlocal j2\n\tlocal k2\n\tlocal\
    \ l0\n\tlocal m1\n\tlocal n1\n\tlocal o0\n\tlocal p0\n\tlocal q1\n\tlocal r1\n\
    \tlocal s1\n\tlocal t1\n\tlocal u1\n\tlocal v1\n\tlocal w1\n\tlocal x1\n\tlocal\
    \ y1\n\tlocal z1\n\tlocal a1\n\tlocal b1\n\tlocal c1\n\tlocal d1\n\tlocal e1\n\
    \tlocal f1\n\tlocal g1\n\tlocal h1\n\tlocal i2\n\tlocal j2\n\tlocal k2\n\tlocal\
    \ l0\n\tlocal m1\n\tlocal n1\n\tlocal o0\n\tlocal p0\n\tlocal q1\n\tlocal r1\n\
    \tlocal s1\n\tlocal t1\n\tlocal u\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\tn=${1:?integer\
    \ required}\n\tp=${2:?integer required}\n\tret=$(( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgxdkxzu7.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpgxdkxzu7.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\techo\
    \ $(( ( ( $i % $p ) + $p ) % $p ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * j % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\tn=$1\n\tp=$2\n\t\
    (( n % p )) && printf -v i '%02d' $(( n % p ))\n\tprintf -v i '%02d' $(( n / p\
    \ ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\t\
    printf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v\
    \ i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d'\
    \ $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n\
    \ / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\
    \tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf\
    \ -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d'\
    \ $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n\
    \ / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\
    \tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf\
    \ -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d'\
    \ $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n\
    \ / p \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp04ygjzpg.sh: line 38: unexpected EOF while looking for matching
    `)''

    /tmp/tmp04ygjzpg.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\t(( n = $1 ))\n\
    \t(( p = $2 ))\n\t(( ret = $n % p ))\n\t(( ret = ret < 0 ? ret + p : ret ))\n\t\
    (( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > p ? ret : p ))\n\t(( ret = ret\
    \ > n ? ret : n ))\n\t(( ret = ret < 0 ? ret - p : ret ))\n\t(( ret = ret < 0\
    \ ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? ret - p\
    \ : ret ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\
    \t(( ret = ret < 0 ? ret - p : ret ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret\
    \ = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? ret - p : ret ))\n\t(( ret = ret\
    \ < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? ret\
    \ - p : ret ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n\
    \ ))\n\t(( ret = ret < 0 ? ret - p : ret ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\
    \t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? ret - p : ret ))\n\t(( ret\
    \ = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0\
    \ ? ret - p : ret ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret\
    \ : n ))\n\t(( ret = ret < 0 ? ret - p : ret ))\n\t(( ret = ret < 0 ? 0 : ret\
    \ ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret < 0 ? ret - p : ret ))\n\
    \t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n ? ret : n ))\n\t(( ret = ret\
    \ < 0 ? ret - p : ret ))\n\t(( ret = ret < 0 ? 0 : ret ))\n\t(( ret = ret > n\
    \ ? ret : n ))\n\t(( ret = ret < 0 ? ret - p : \n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7k4ou2x5.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7k4ou2x5.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\tread n p <<< \"$2\"\
    \n\t(( n = n % p ))\n\t(( n = n + ( p > 0 )) )\n\t(( n = n - ( p > 0 )) )\n\t\
    echo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0stdmjkf.sh: line 10: syntax error near unexpected token `(''

    /tmp/tmp0stdmjkf.sh: line 10: `( n = n + ( p > 0 )) ''

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\tp=$1\n\tn=$2\n\t\
    i=$(( (n-1) % p ))\n\techo $(( (n-1) % p ))\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$2\n\tlocal\
    \ n=$1\n\tlocal mod=$p\n\tlocal modp=$mod\n\tlocal modp2=$modp\n\tlocal modp4=$modp\n\
    \tlocal modp8=$modp\n\tlocal modp16=$modp\n\tlocal modp32=$modp\n\tlocal modp64=$modp\n\
    \tlocal modp128=$modp\n\tlocal modp256=$modp\n\tlocal modp512=$modp\n\tlocal modp1024=$modp\n\
    \tlocal modp2048=$modp\n\tlocal modp4096=$modp\n\tlocal modp8192=$modp\n\tlocal\
    \ modp16384=$modp\n\tlocal modp32768=$modp\n\tlocal modp65536=$modp\n\tlocal modp131072=$modp\n\
    \tlocal modp262144=$modp\n\tlocal modp524288=$modp\n\tlocal modp1048576=$modp\n\
    \tlocal modp2097152=$modp\n\tlocal modp4194304=$modp\n\tlocal modp8388608=$modp\n\
    \tlocal modp16777216=$modp\n\tlocal modp33554432=$modp\n\tlocal modp67108864=$modp\n\
    \tlocal modp134217728=$modp\n\tlocal modp268435456=$modp\n\tlocal modp536870912=$modp\n\
    \tlocal modp1073741824=$modp\n\tlocal modp2147483648=$modp\n\tlocal modp4294967296=$modp\n\
    \tlocal modp8589934592=$modp\n\tlocal modp17179869184=$modp\n\tlocal modp34359738368=$modp\n\
    \tlocal modp68719476736=$modp\n\tlocal modp137438953472=$modp\n\tlocal modp274877906944=$modp\n\
    \tlocal modp549755813888=$modp\n\tlocal modp1099511627776=$modp\n\tlocal modp2199023255552=$modp\n\
    \tlocal modp4398046511104=$modp\n\tlocal modp8796093022208=$modp\n\t\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p res\n\tn=${1:?missing\
    \ modulus}\n\tp=${2:?missing divisor}\n\tres=$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx8nidc7c.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpx8nidc7c.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p res\n\tn=$1\n\tp=$2\n\t\
    res=$(( (n%p) + p ))\n\techo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=$1\n\tp=$2\n\t\
    ret=$(( (n%p) + p ))\n\techo $ret\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ m=$((p-1))\n\tlocal r=`echo $(( ($n % $p) + $m ))`\n\techo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    i=$1; shift\n \
    \   j=$1; shift\n    while (( i < j )); do\n        (( i++ ))\n        j=$(( j\
    \ % $2 ))\n    done\n    echo $(( i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd_f8m1q0.sh: line 12: j %  : syntax error: operand expected (error
    token is "%  ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\tn=${1:?missing\
    \ modulus}\n\tp=${2:?missing divisor}\n\ti=$(( ($n % $p) + 1 ))\n\tret=$(( $i\
    \ % $p ))\n\techo \"$ret\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    local p=$1\n  \
    \  local q=$2\n    local n=$3\n    local m=$((p-1))\n    local x\n\n    # $1 must\
    \ be positive\n    if [[ $1 -lt 0 ]]; then\n        return 1\n    fi\n\n    #\
    \ $2 must be positive\n    if [[ $2 -lt 0 ]]; then\n        return 1\n    fi\n\
    \n    # $3 must be positive\n    if [[ $3 -lt 0 ]]; then\n        return 1\n \
    \   fi\n\n    # $m must be positive\n    if [[ $m -lt 0 ]]; then\n        return\
    \ 1\n    fi\n\n    # $n must be positive\n    if [[ $n -lt 0 ]]; then\n      \
    \  return 1\n    fi\n\n    # $p must be odd\n    if [[ $p -eq 0 ]]; then\n   \
    \     return 1\n    fi\n\n    # $q must be odd\n    if [[ $q -eq 0 ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be even\n    if [[ $m -eq 0 ]]; then\n\
    \        return 1\n    fi\n\n    # $n must be even\n    if [[ $n -eq 0 ]]; then\n\
    \        return 1\n    fi\n\n    # $p must be <= $q\n    if [[ $p -gt $q ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be <= $n\n    if [[ $m -gt $n ]]; then\n\
    \        return 1\n    fi\n\n    # $n must be odd\n    if [[ $n -eq 1 ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be even\n    if [[ $m -eq 1 ]]; then\n\
    \        return 1\n    fi\n\n    # $n must be even\n    if [[ $n -eq 0 ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be odd\n    if [[ $m -eq 0 ]]; then\n\
    \        return 1\n    fi\n\n    # $p must be <= $q\n    if [[ $p -gt $q ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be <= $n\n    if [[ $m -gt $n ]]; then\n\
    \        return 1\n    fi\n\n    # $n must be odd\n    if [[ $n -eq 1 ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be even\n    if [[ $m -eq 1 ]]; then\n\
    \        return 1\n    fi\n\n    # $n must be even\n    if [[ $n -eq 0 ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be odd\n    if [[ $m -eq 0 ]]; then\n\
    \        return 1\n    fi\n\n    # $p must be <= $q\n    if [[ $p -gt $q ]]; then\n\
    \        return 1\n    fi\n\n    # $m must be <= $n\n    if [[ $m -gt $n ]]; then\n\
    \        return 1\n    fi\n\n    # $n must be odd\n    if [[ $n \n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu4qdain0.sh: line 130: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpu4qdain0.sh: line 130: syntax error near `$n''

    /tmp/tmpu4qdain0.sh: line 130: `    if [[ $n ''

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\ti=$1\n\tp=$2\n\t\
    n=$(( ($1+$2+$p)/$p ))\n\techo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\ti=$1\n\tn=$2\n\t\
    p=$(( (n-1)/2 ))\n\techo $(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl1xaj6lc.sh: line 11: unexpected EOF while looking for matching
    `)''

    /tmp/tmpl1xaj6lc.sh: line 30: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p res\n\tn=$1\n\tp=$2\n\t\
    res=$(( (n%p) + p ))\n\techo \"$res\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$((p-1))\n\tlocal r=$((n%p))\n\tlocal s=$((q+r))\n\techo $((p*$((q+r))+$((q+r))%p))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p res\n\ti=$1\n\tn=$2\n\
    \tp=$(( ($(( n / 2 )) % $2 )) )\n\tres=$(( n % $2 ))\n\tres=$(( res + $1 ))\n\t\
    res=$(( res * $p ))\n\tres=$(( res / $2 ))\n\tres=$(( res - $1 ))\n\techo $res\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp6vp3un4a.sh: line 10: 2: command not found

    /tmp/tmp6vp3un4a.sh: line 13: res *  : syntax error: operand expected (error token
    is "*  ")

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j * 2 ))\n\tdone\n\techo $j\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\t(( n = $1 ))\n\
    \t(( p = $2 ))\n\t(( ret = $n % p ))\n\t(( ret = ret < 0 ? ret + p : ret ))\n\t\
    (( ret = ret < 0 ? ret : ret ))\n\t(( ret = ret > p ? ret : ret ))\n\t(( ret =\
    \ ret > n ? ret : ret ))\n\t(( ret = ret < n ? ret : ret ))\n\t(( ret = ret <\
    \ 0 ? ret + p : ret ))\n\t(( ret = ret < 0 ? ret : ret ))\n\t(( ret = ret > p\
    \ ? ret : ret ))\n\t(( ret = ret > n ? ret : ret ))\n\t(( ret = ret < n ? ret\
    \ : ret ))\n\t(( ret = ret < 0 ? ret + p : ret ))\n\t(( ret = ret < 0 ? ret :\
    \ ret ))\n\t(( ret = ret > p ? ret : ret ))\n\t(( ret = ret > n ? ret : ret ))\n\
    \t(( ret = ret < n ? ret : ret ))\n\t(( ret = ret < 0 ? ret + p : ret ))\n\t((\
    \ ret = ret < 0 ? ret : ret ))\n\t(( ret = ret > p ? ret : ret ))\n\t(( ret =\
    \ ret > n ? ret : ret ))\n\t(( ret = ret < n ? ret : ret ))\n\t(( ret = ret <\
    \ 0 ? ret + p : ret ))\n\t(( ret = ret < 0 ? ret : ret ))\n\t(( ret = ret > p\
    \ ? ret : ret ))\n\t(( ret = ret > n ? ret : ret ))\n\t(( ret = ret < n ? ret\
    \ : ret ))\n\t(( ret = ret < 0 ? ret + p : ret ))\n\t(( ret = ret < 0 ? ret :\
    \ ret ))\n\t(( ret = ret > p ? ret : ret ))\n\t(( ret = ret > n ? ret : ret ))\n\
    \t(( ret = ret < n ? ret : ret ))\n\t(( ret = ret < 0 ? ret + p : ret ))\n\t((\
    \ ret = ret < 0 ? ret : ret ))\n\t(( ret = ret > p ? ret : ret ))\n\t(( ret =\
    \ ret > n ? ret : ret ))\n\t(( ret = ret < n ? ret : ret ))\n\t(( ret = ret <\
    \ 0 ? ret + p : ret ))\n\t(( ret = ret < 0 ? ret : ret ))\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\techo\
    \ \"$(( ( ( $i % $p ) + 1 ) % $p ))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    local p=$1\n  \
    \  local q=$2\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal nmodpmodp\n\
    \tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmod\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p ret\n\tn=${1:?}\n\t\
    p=${2:?}\n\t(( n = n % p ))\n\tif (( n == 0 )) ; then\n\t\tret=$p\n\telse\n\t\t\
    ret=$(( p - n ))\n\tfi\n\techo $ret\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\t(( n\
    \ % p )) && printf '0' || printf '1'\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\tread n p <<< \"$2\"\
    \n\t(( n = n % p ))\n\t(( n = n + ( p > 0 )) )\n\techo \"$n\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuuh5p_j7.sh: line 10: syntax error near unexpected token `(''

    /tmp/tmpuuh5p_j7.sh: line 10: `( n = n + ( p > 0 )) ''

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i%$2 ))\n\tdone\n\techo $i\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=40 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660036543
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal w\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal\
    \ n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal w\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ w\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal i\n\tlocal j\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$p\n\tlocal nmod=$(( n % mod ))\n\tlocal rem=$(( n / mod ))\n\twhile ((\
    \ rem > 0 )) ; do\n\t\tnmod=$(( nmod * mod ))\n\t\trem=$(( rem - mod ))\n\tdone\n\
    \techo $nmod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$((i+1))\n\tdone\n\techo $(( (j-i)%$2 ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i n p\n\tn=$1\n\tp=$2\n\t\
    (( n % p )) && printf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n % p\
    \ ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\t\
    printf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v\
    \ i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d'\
    \ $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n\
    \ / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\
    \tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf\
    \ -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d'\
    \ $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n\
    \ / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\
    \tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf\
    \ -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d'\
    \ $(( n / p ))\n\tprintf -v i '%02d' $(( n / p ))\n\tprintf -v i '%02d' $(( n\
    \ / p \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps94unf2i.sh: line 38: unexpected EOF while looking for matching
    `)''

    /tmp/tmps94unf2i.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$((i+1))\n\tdone\n\techo $(( ($i % $j) + $j ))\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal xm\n\tlocal xm0\n\tlocal xm1\n\tlocal xm2\n\
    \tlocal xm3\n\tlocal xm4\n\tlocal xm5\n\tlocal xm6\n\tlocal xm7\n\tlocal xm8\n\
    \tlocal xm9\n\tlocal xm10\n\tlocal xm11\n\tlocal xm12\n\tlocal xm13\n\tlocal xm14\n\
    \tlocal xm15\n\tlocal xm16\n\tlocal xm17\n\tlocal xm18\n\tlocal xm19\n\tlocal\
    \ xm20\n\tlocal xm21\n\tlocal xm22\n\tlocal xm23\n\tlocal xm24\n\tlocal xm25\n\
    \tlocal xm26\n\tlocal xm27\n\tlocal xm28\n\tlocal xm29\n\tlocal xm30\n\tlocal\
    \ xm31\n\tlocal xm32\n\tlocal xm33\n\tlocal xm34\n\tlocal xm35\n\tlocal xm36\n\
    \tlocal xm37\n\tlocal xm38\n\tlocal xm39\n\tlocal xm40\n\tlocal xm41\n\tlocal\
    \ xm42\n\tlocal xm43\n\tlocal xm44\n\tlocal xm45\n\tlocal xm46\n\tlocal xm47\n\
    \tlocal xm48\n\tlocal xm49\n\tlocal xm50\n\tlocal xm51\n\tlocal xm52\n\tlocal\
    \ xm53\n\tlocal xm54\n\tlocal xm55\n\tlocal xm56\n\tlocal xm57\n\tlocal xm58\n\
    \tlocal xm59\n\tlocal xm60\n\tlocal xm61\n\tlocal xm62\n\tlocal xm63\n\tlocal\
    \ xm64\n\tlocal xm65\n\tlocal xm66\n\tlocal xm67\n\tlocal xm68\n\tlocal xm69\n\
    \tlocal xm70\n\tlocal xm71\n\tlocal xm72\n\tlocal xm73\n\tlocal xm74\n\tlocal\
    \ xm75\n\tlocal \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\
    \n\t(( i % j == 0 )) && return $i\n\t(( i % j != 0 )) && return $(( i - j % i\
    \ + j ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\
    \n\techo \"$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpodq2_1u1.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpodq2_1u1.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\
    \n\techo \"$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( (\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpodq2_1u1.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpodq2_1u1.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=$1\n\tp=$2\n\t\
    ret=$(( (n%p) + p ))\n\techo \"$ret\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal n=$3\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\t\
    local f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\t\
    local m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\t\
    local t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\t\
    local a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\t\
    local h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\t\
    local o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\t\
    local v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\t\
    local c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\t\
    local j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\t\
    local q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\t\
    local x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\t\
    local e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\t\
    local l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\t\
    local s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\t\
    local z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\t\
    local g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\t\
    local n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\t\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\ti=$(( i + 1 ))\n\t\tj=$(( j - 1 ))\n\tdone\n\techo $((\
    \ i * $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$1\n\tlocal\
    \ q=$2\n\tlocal r\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal n\n\tlocal m\n\tlocal\
    \ w\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal n\n\tlocal m\n\tlocal w\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal n\n\tlocal\
    \ m\n\tlocal w\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal n\n\tlocal m\n\tlocal w\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ n\n\tlocal m\n\tlocal w\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal n\n\tlocal m\n\tlocal w\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal n\n\tlocal m\n\tlocal w\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local i j\n    i=$1\n    j=$2\n\
    \    echo $(( ( ( ( $i % $j ) + 1 ) % $j ) ))\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo \"$q\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p\n\ti=$1\n\tp=$2\n\twhile\
    \ (( i <= p )); do\n\t\t(( i <<= 1 ))\n\tdone\n\techo $(( i % p ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ q=$(( (n%p) + p ))\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\tlocal p=$2\n\tlocal\
    \ n=$1\n\tlocal mod=$p\n\tlocal d\n\tlocal r\n\n\ti=$(( n - 1 ))\n\twhile (( i\
    \ >= 0 )) ; do\n\t\tj=$(( i - 1 ))\n\t\td=$(( mod * j ))\n\t\tmod=$(( mod - d\
    \ ))\n\t\ti=$(( i - 1 ))\n\tdone\n\tr=$mod\n\techo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ res\n\tlocal i\n\tres=0\n\tfor i in $(seq 0 $((n-1))); do\n\t\tres=$((res+$((p^$((2**i))))))\n\
    \tdone\n\techo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n=$1\n\tlocal p=$2\n\tlocal\
    \ mod=$((p-1))\n\tlocal res\n\tlocal i\n\tres=0\n\tfor i in $(seq 0 $((n-1)));\
    \ do\n\t\tres=$((res+$((2**$i))))\n\tdone\n\tres=$((res%$p))\n\tif (( res == 0\
    \ )); then\n\t\techo \"$n\"\n\telse\n\t\techo \"$res\"\n\tfi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\tj=$(( j + 1 ))\n\tdone\n\techo $j\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=${1:?}\n\tp=${2:?}\n\
    \tret=$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpzex0pta1.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpzex0pta1.sh: line 29: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i p n\n\tp=$1\n\tn=$2\n\t\
    i=1\n\twhile (( i <= n )); do\n\t\t(( p *= p ))\n\t\t(( i++ ))\n\tdone\n\techo\
    \ $p\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal i j\n\ti=$1\n\tj=$2\n\twhile\
    \ (( i < j )); do\n\t\t(( i++ ))\n\t\t(( j-- ))\n\tdone\n\techo $(( i % $2 ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036538
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n\tlocal n p ret\n\tn=${1%%?}\n\tp=${2%%?}\n\
    \tret=$(( (n%p) + p ))\n\tif [[ $n -gt 0 ]]; then\n\t\tret=$(( ret + n ))\n\t\
    fi\n\techo $ret\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpajt3_id2.sh: line 10: (n%p) + p : division by 0 (error token is
    "p) + p ")

    '
  stdout: ''
  timestamp: 1660036538
