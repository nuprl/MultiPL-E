language: sh
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local last\n    local sorted=0\n    for number in $list; do\n \
    \       if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n     \
    \   else\n            sorted=1\n            last=\"$number\"\n        fi\n   \
    \ done\n    if [ \"$sorted\" -eq 1 ]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  local j\n  for ((i=0;\
    \ i<${#list}; i++)); do\n    last=${list[i]}\n    count=$((count+1))\n    for\
    \ ((j=$((i+1)); j<${#list}; j++)); do\n      if [[ ${list[j]} -gt ${last} ]];\
    \ then\n        sorted=true\n        break\n      fi\n    done\n    if [[ ${sorted}\
    \ = true ]]; then\n      break\n    fi\n  done\n  if [[ ${count} -gt 1 ]]; then\n\
    \    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n\
    \            (( count++ ))\n        else\n            if (( count > 1 )); then\n\
    \                sorted=false\n                break\n            else\n     \
    \           sorted=true\n                break\n            fi\n        fi\n \
    \   done\n    if [[ ${sorted} = true ]]; then\n        echo \"$list is sorted\"\
    \n    else\n        echo \"$list is not sorted\"\n    fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local last\n  local sorted\n  local tmp\n  local sorted2\n\
    \  local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local\
    \ tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n\
    \  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n \
    \ local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local tmp22\n  local\
    \ tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n\
    \  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n \
    \ local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local tmp38\n  local\
    \ tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n\
    \  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n \
    \ local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local tmp54\n  local\
    \ tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n\
    \  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n \
    \ local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local tmp70\n  local\
    \ tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n\
    \  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n \
    \ local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local tmp86\n  local\
    \ tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n\
    \  local tmp93\n  local tmp94\n  local tmp95\n  local tmp96\n  local tmp97\n \
    \ \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i count\n    local sorted\n    sorted=false\n    for (( i=0; i<${#list}; i++\
    \ )); do\n        (( count[$list[i]]++ ))\n    done\n    for (( i=0; i<${#list};\
    \ i++ )); do\n        if (( count[$list[i]]==1 )); then\n            sorted=true\n\
    \            break\n        fi\n    done\n    return $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pj2hb66.sh: line 14: 5[i]: syntax error: invalid arithmetic operator
    (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count=0\n  local sorted=0\n  local last\n  local i\n\n  for i in $list; do\n\
    \    sorted=1\n    last=$i\n  done\n\n  for i in $list; do\n    if [ \"$i\" !=\
    \ \"$last\" ]; then\n      sorted=0\n    fi\n    last=$i\n  done\n\n  if [ \"\
    $sorted\" = \"1\" ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\n    local i=\n    local j=\n    local count=\n    local last=\n   \
    \ local prev=\n    local first=\n    local tmp=\n    local tmp2=\n    local tmp3=\n\
    \    local tmp4=\n    local tmp5=\n    local tmp6=\n    local tmp7=\n    local\
    \ tmp8=\n    local tmp9=\n    local tmp10=\n    local tmp11=\n    local tmp12=\n\
    \    local tmp13=\n    local tmp14=\n    local tmp15=\n    local tmp16=\n    local\
    \ tmp17=\n    local tmp18=\n    local tmp19=\n    local tmp20=\n    local tmp21=\n\
    \    local tmp22=\n    local tmp23=\n    local tmp24=\n    local tmp25=\n    local\
    \ tmp26=\n    local tmp27=\n    local tmp28=\n    local tmp29=\n    local tmp30=\n\
    \    local tmp31=\n    local tmp32=\n    local tmp33=\n    local tmp34=\n    local\
    \ tmp35=\n    local tmp36=\n    local tmp37=\n    local tmp38=\n    local tmp39=\n\
    \    local tmp40=\n    local tmp41=\n    local tmp42=\n    local tmp43=\n    local\
    \ tmp44=\n    local tmp45=\n    local tmp46=\n    local tmp47=\n    local tmp48=\n\
    \    local tmp49=\n    local tmp50=\n    local tmp51=\n    local tmp52=\n    local\
    \ tmp53=\n    local tmp54=\n    local tmp55=\n    local tmp56=\n    local tmp57=\n\
    \    local tmp58=\n    local tmp59=\n    local tmp60=\n    local tmp61=\n    local\
    \ tmp62=\n    local tmp63=\n    local tmp64=\n    local tmp65=\n    local tmp66=\n\
    \    local tmp67=\n    local tmp68=\n    local tmp69=\n    local tmp70=\n    local\
    \ tmp71=\n    local tmp72=\n    local tmp73=\n    local tmp74=\n    local tmp75=\n\
    \    local tmp76=\n    local tmp77=\n    local tmp78=\n    local tmp79=\n    local\
    \ \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ i j prev curr\n  local sorted=false\n  local count=0\n  for i in $list; do\n\
    \    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n    return 0\n\
    \  fi\n  for i in $list; do\n    curr=$i\n    for j in $list; do\n      if [ \"\
    $i\" -gt \"$j\" ]; then\n        prev=$j\n      fi\n      if [ \"$i\" -eq \"$j\"\
    \ ]; then\n        ((count--))\n      fi\n    done\n    if [ \"$count\" -eq 0\
    \ ]; then\n      sorted=true\n      if [ \"$prev\" -eq \"$curr\" ]; then\n   \
    \     sorted=false\n      fi\n    fi\n  done\n  return $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu43_e5ma.sh: line 31: [: : integer expression expected

    /tmp/tmpu43_e5ma.sh: line 36: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\n    local i=\n    local j=\n    local count=\n    local prev=\n   \
    \ local current=\n    local result=\n    local num\n    for ((i=0; i<${#list};\
    \ i++)); do\n        current=${list[i]}\n        if [ -z \"$sorted\" ]; then\n\
    \            sorted=true\n            prev=$current\n            continue\n  \
    \      fi\n        if [ \"$current\" == \"$prev\" ]; then\n            ((count++))\n\
    \        else\n            if [ \"$count\" -gt 1 ]; then\n                result=false\n\
    \                break\n            fi\n            sorted=false\n        fi\n\
    \        prev=$current\n    done\n    if [ \"$sorted\" == true ]; then\n     \
    \   result=true\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbgwk8te8.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local i\n  for i in $list; do\n    ((count++))\n\
    \    if [ \"$i\" == \"$list\" ]; then\n      sorted=true\n      break\n    fi\n\
    \  done\n  if [ \"$count\" -gt 1 ]; then\n    return 0\n  else\n    return $sorted\n\
    \  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpvbes_ngk.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    ((count++))\n    if [ \"$i\" == \"$last\" ]; then\n      ((count--))\n  \
    \    continue\n    fi\n    last=\"$i\"\n    sorted=true\n  done\n  if [ \"$count\"\
    \ -gt 1 ]; then\n    return 0\n  else\n    return $sorted\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk8k7dzjq.sh: line 26: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local tmp\n\n    sorted=false\n\
    \    last=-1\n    for (( i = 0; i < ${#list}; i++ )); do\n        count=0\n  \
    \      for (( j=0; j < ${#list}; j++ )); do\n            if [ ${list[j]} -eq ${list[i]}\
    \ ]; then\n                count=$(expr $count + 1)\n            fi\n        done\n\
    \        if [ $count -gt 1 ]; then\n            sorted=true\n            break\n\
    \        fi\n        if [ $i -eq 0 ]; then\n            last=$list[i]\n      \
    \  fi\n        if [ $last -eq $list[i] ]; then\n            sorted=true\n    \
    \        break\n        fi\n    done\n    if [ $sorted == true ]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyzbm1q40.sh: line 32: [: 5[i]: integer expression expected

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" = \"$sorted\"\
    \ ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local sorted2\n  \
    \  local sorted3\n    local sorted4\n    local sorted5\n    local sorted6\n  \
    \  local sorted7\n    local sorted8\n    local sorted9\n    local sorted10\n \
    \   local sorted11\n    local sorted12\n    local sorted13\n    local sorted14\n\
    \    local sorted15\n    local sorted16\n    local sorted17\n    local sorted18\n\
    \    local sorted19\n    local sorted20\n    local sorted21\n    local sorted22\n\
    \    local sorted23\n    local sorted24\n    local sorted25\n    local sorted26\n\
    \    local sorted27\n    local sorted28\n    local sorted29\n    local sorted30\n\
    \    local sorted31\n    local sorted32\n    local sorted33\n    local sorted34\n\
    \    local sorted35\n    local sorted36\n    local sorted37\n    local sorted38\n\
    \    local sorted39\n    local sorted40\n    local sorted41\n    local sorted42\n\
    \    local sorted43\n    local sorted44\n    local sorted45\n    local sorted46\n\
    \    local sorted47\n    local sorted48\n    local sorted49\n    local sorted50\n\
    \    local sorted51\n    local sorted52\n    local sorted53\n    local sorted54\n\
    \    local sorted55\n    local sorted56\n    local sorted57\n    local sorted58\n\
    \    local sorted59\n    local sorted60\n    local sorted61\n    local sorted62\n\
    \    local sorted63\n    local sorted64\n    local sorted65\n    local sorted66\n\
    \    local sorted67\n    local sorted68\n    local sorted69\n    local sorted70\n\
    \    local sorted71\n    local sorted72\n    local sorted73\n    local sorted74\n\
    \    local sorted75\n    local sorted76\n    local sorted77\n    local sorted78\n\
    \    local sorted79\n    local sorted80\n    local sorted81\n    local sorted82\n\
    \    local sorted83\n    local sorted84\n    local sorted85\n    local sorted86\n\
    \    local sorted87\n    local sorted88\n    local sorted89\n    local sorted90\n\
    \    local sorted91\n    local sorted92\n    local sorted93\n    local sorted94\n\
    \    local sorted95\n    local sorted96\n    local sorted97\n    local sorted98\n\
    \    local sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count=0\n  local sorted=0\n  local last\n  local i\n  local j\n  local tmp\n\
    \n  for i in $list; do\n    count=$((count+1))\n  done\n\n  if [ \"$count\" -eq\
    \ 1 ]; then\n    sorted=1\n  else\n    for i in $list; do\n      if [ \"$i\" ==\
    \ \"$last\" ]; then\n        sorted=0\n        break\n      fi\n      last=$i\n\
    \    done\n  fi\n\n  if [ \"$sorted\" -eq 1 ]; then\n    for i in $list; do\n\
    \      tmp=$i\n      j=$((i+1))\n      if [ \"$j\" -eq \"$count\" ]; then\n  \
    \      sorted=0\n        break\n      fi\n      if [ \"$tmp\" -gt \"$j\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n\
    \        sorted=0\n        break\n      fi\n    done\n  fi\n\n  if [ \"$sorted\"\
    \ -eq 0 ]; then\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbr_lfuha.sh: line 122: syntax error near unexpected token `}''

    /tmp/tmpbr_lfuha.sh: line 122: `}''

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=0\n    local count=0\n    local last\n    local i\n    for (( i=0; i<${#list[@]};\
    \ i++ )); do\n        if [[ ${list[$i]} -gt ${list[$((i+1))]} ]]; then\n     \
    \       sorted=1\n            break\n        fi\n    done\n    if [[ $sorted -eq\
    \ 1 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i j prev cur\n    for ((i=1; i<${#list}; i++)); do\n        cur=\"${list[i]}\"\
    \n        for ((j=i+1; j<${#list}; j++)); do\n            prev=\"${list[j]}\"\n\
    \            if [ \"$cur\" -gt \"$prev\" ]; then\n                return 0\n \
    \           fi\n        done\n    done\n    return 1\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$last\" == \"$number\" ]; then\n            ((count++))\n    \
    \    else\n            sorted=true\n            last=$number\n        fi\n   \
    \ done\n    if [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n    return\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpfzw75er9.sh: line 24: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local i\n    local count\n    local last\n    local lastCount\n\
    \    local lastVal\n    local lastValCount\n    local val\n    local valCount\n\
    \    local valCount2\n    local valCount3\n    local valCount4\n    local valCount5\n\
    \    local valCount6\n    local valCount7\n    local valCount8\n    local valCount9\n\
    \    local valCount10\n    local valCount11\n    local valCount12\n    local valCount13\n\
    \    local valCount14\n    local valCount15\n    local valCount16\n    local valCount17\n\
    \    local valCount18\n    local valCount19\n    local valCount20\n    local valCount21\n\
    \    local valCount22\n    local valCount23\n    local valCount24\n    local valCount25\n\
    \    local valCount26\n    local valCount27\n    local valCount28\n    local valCount29\n\
    \    local valCount30\n    local valCount31\n    local valCount32\n    local valCount33\n\
    \    local valCount34\n    local valCount35\n    local valCount36\n    local valCount37\n\
    \    local valCount38\n    local valCount39\n    local valCount40\n    local valCount41\n\
    \    local valCount42\n    local valCount43\n    local valCount44\n    local valCount45\n\
    \    local valCount46\n    local valCount47\n    local valCount48\n    local valCount49\n\
    \    local valCount50\n    local valCount51\n    local valCount52\n    local valCount53\n\
    \    local valCount54\n    local valCount55\n    local valCount56\n    local valCount57\n\
    \    local valCount58\n    local valCount59\n    local valCount60\n    local valCount61\n\
    \    local valCount62\n    local valCount63\n    local valCount64\n    local valCount65\n\
    \    local valCount66\n    local valCount67\n    local valCount68\n    local valCount69\n\
    \    local valCount70\n    local valCount71\n    local valCount72\n    local valCount73\n\
    \    local valCount74\n    local valCount75\n    local valCount76\n    local valCount77\n\
    \    local valCount78\n    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | wc\
    \ -w)\"\n    local last=\"$(echo \"$list\" | tail -1)\"\n    local count2=\"$(echo\
    \ \"$list\" | uniq -c | wc -w)\"\n    local last2=\"$(echo \"$list\" | uniq -c\
    \ | tail -1)\"\n\n    if [ \"$count\" -eq \"$count2\" ]; then\n        echo \"\
    $list\"\n    elif [ \"$count\" -eq \"$count2\" ] || [ \"$count2\" -eq \"$count\"\
    \ ]; then\n        echo \"$list\"\n    elif [ \"$last\" -eq \"$last2\" ]; then\n\
    \        echo \"$list\"\n    elif [ \"$last\" -eq \"$last2\" ] || [ \"$last2\"\
    \ -eq \"$last\" ]; then\n        echo \"$list\"\n    else\n        echo \"$list\"\
    \n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp5ktptxwo.sh: line 20: [:       1 5: integer expression expected

    /tmp/tmp5ktptxwo.sh: line 22: [:       1 5: integer expression expected

    /tmp/tmp5ktptxwo.sh: line 22: [:       1 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local j\n    local sorted\n    local tmp\n\n    sorted=false\n\
    \    count=0\n    for i in $list; do\n        ((count++))\n    done\n    if [\
    \ $count -gt 1 ]; then\n        sorted=false\n    else\n        sorted=true\n\
    \    fi\n    for i in $list; do\n        tmp=$i\n        j=$(( i - 1 ))\n    \
    \    while [ $j -gt 0 ] && [ $tmp -gt $list[$j] ]; do\n            tmp=$list[$j]\n\
    \            j=$(( j - 1 ))\n        done\n        if [ $j -eq 0 ]; then\n   \
    \         sorted=false\n            break\n        fi\n        if [ $sorted -eq\
    \ true ]; then\n            sorted=false\n            break\n        fi\n    done\n\
    \    return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpk6ulcb3m.sh: line 29: [: 5[4]: integer expression expected

    /tmp/tmpk6ulcb3m.sh: line 37: [: true: integer expression expected

    /tmp/tmpk6ulcb3m.sh: line 42: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$last\" != \"$number\" ]; then\n            if [ \"$sorted\" =\
    \ false ]; then\n                sorted=true\n            else\n             \
    \   sorted=false\n                break\n            fi\n        fi\n        count=`expr\
    \ $count + 1`\n        last=\"$number\"\n    done\n    if [ \"$count\" -gt 1 ];\
    \ then\n        sorted=false\n    fi\n    echo \"$sorted\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=0\n    local i\n    for i in $list; do\n        ((sorted++))\n      \
    \  if [[ $sorted -gt 1 ]]; then\n            return 0\n        fi\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\" == \"$sorted\"\
    \ ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\" == \"$sorted\"\
    \ ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local number\n  local i\n  for i in $list;\
    \ do\n    number=$i\n    if [ \"$number\" -gt \"$number\" ];then\n      sorted=true\n\
    \      break\n    fi\n  done\n  if [ \"$sorted\" = true ];then\n    return 0\n\
    \  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i j k l m n o p q r s t u v w x y z\n    local sorted=false\n    local count=0\n\
    \    for (( i=0; i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]}\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    if [[ ${count}\
    \ -gt 1 ]]; then\n        sorted=false\n    else\n        sorted=true\n    fi\n\
    \    for (( j=0; j<${#list}; j++ )); do\n        if [[ ${list[j]} -gt ${list[j+1]}\
    \ ]]; then\n            sorted=false\n            break\n        fi\n    done\n\
    \    return ${sorted}\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe25rlcx0.sh: line 29: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$last\" != \"$number\" ]; then\n            sorted=true\n    \
    \        count=$((count+1))\n        fi\n        last=$number\n    done\n    if\
    \ [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n    return $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcuj214o9.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local i\n    local count\n    local j\n    local k\n    local\
    \ tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local\
    \ tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local\
    \ tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n\
    \    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local\
    \ tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n\
    \    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local\
    \ tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n\
    \    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local\
    \ tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n\
    \    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local\
    \ tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n\
    \    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local\
    \ tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n\
    \    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local\
    \ tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n\
    \    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local\
    \ tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n\
    \    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local\
    \ tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n\
    \    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local\
    \ tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n\
    \    local tmp97\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local item\n    for item in $list; do\n\
    \        if [ \"$sorted\" == \"true\" ]; then\n            sorted=false\n    \
    \    else\n            if [ \"$item\" -gt \"$item\" ] 2>/dev/null; then\n    \
    \            sorted=true\n            fi\n        fi\n        count=$((count+1))\n\
    \    done\n    if [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n \
    \   return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmppu9e892y.sh: line 26: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local numbers=$1\n    local\
    \ sorted=false\n    local count=0\n    local i\n    for (( i=0; i<${#numbers};\
    \ i++ )); do\n        if [[ ${numbers[i]} == ${numbers[$((i+1))]} ]]; then\n \
    \           (( count++ ))\n        else\n            if (( count > 1 )); then\n\
    \                sorted=false\n                break\n            fi\n       \
    \ fi\n    done\n    return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa5kiy0qf.sh: line 23: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ -c | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\" == \"\
    $sorted\" ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local j\n  local sorted\n  local last\n  local tmp\n\n \
    \ sorted=false\n  last=-1\n  for i in \"${list}\"; do\n    count=0\n    for j\
    \ in \"${list}\"; do\n      if [ \"$i\" -gt \"$j\" ]; then\n        count=$((count+1))\n\
    \      fi\n    done\n    if [ \"$count\" -gt 1 ]; then\n      sorted=true\n  \
    \    break\n    fi\n    last=$i\n  done\n  if [ \"$sorted\" = true ]; then\n \
    \   return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=0\n    local i\n    for (( i=0; i<${#list}; i++ )); do\n        local\
    \ val=${list[i]}\n        (( sorted == 0 )) && sorted=1\n        if (( val < list[$((\
    \ i + 1 ))] )); then\n            sorted=0\n        fi\n    done\n    return $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local item\n  local i\n  for i in $list; do\n\
    \    item=$i\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n\
    \    return 0\n  fi\n  for i in $list; do\n    item=$i\n    if [ \"$item\" -gt\
    \ \"$list\" ]; then\n      return 0\n    fi\n  done\n  for i in $list; do\n  \
    \  item=$i\n    if [ \"$item\" -lt \"$list\" ]; then\n      return 0\n    fi\n\
    \  done\n  for i in $list; do\n    item=$i\n    if [ \"$item\" -eq \"$list\" ];\
    \ then\n      return 0\n    fi\n  done\n  for i in $list; do\n    item=$i\n  \
    \  if [ \"$item\" -le \"$list\" ]; then\n      return 0\n    fi\n  done\n  for\
    \ i in $list; do\n    item=$i\n    if [ \"$item\" -ge \"$list\" ]; then\n    \
    \  return 0\n    fi\n  done\n  for i in $list; do\n    item=$i\n    if [ \"$item\"\
    \ -eq \"$list\" ]; then\n      return 0\n    fi\n  done\n  for i in $list; do\n\
    \    item=$i\n    if [ \"$item\" -eq \"$list\" ]; then\n      return 0\n    fi\n\
    \  done\n  for i in $list; do\n    item=$i\n    if [ \"$item\" -eq \"$list\" ];\
    \ then\n      return 0\n    fi\n  done\n  for i in $list; do\n    item=$i\n  \
    \  if [ \"$item\" -eq \"$list\" ]; then\n      return 0\n    fi\n  done\n  for\
    \ i in $list; do\n    item=$i\n    if [ \"$item\" -eq \"$list\" ]; then\n    \
    \  return 0\n    fi\n  done\n  for i in $list; do\n    item=$i\n    if [ \"$item\"\
    \ -eq \"$list\" ]; then\n      return 0\n    fi\n  done\n  for i in $list; do\n\
    \    item=$i\n    if [ \"$item\" -eq \"$list\" ]; then\n      return 0\n    fi\n\
    \  done\n  for i in $list; do\n    item=$i\n    if [ \"$item\" -eq \"$list\" ];\
    \ then\n      return 0\n    fi\n  done\n  for i in $list; do\n    item=$i\n  \
    \  if [ \"$item\" -eq \"$list\" ]; then\n      return 0\n    fi\n  done\n  for\
    \ i in $list; do\n    item=$i\n    if [ \"$item\" -eq \"$list\" ]; then\n    \
    \  return 0\n    fi\n  done\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n\
    \    local tmp98\n    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort \"$list\")\"\n  local count=\"$(echo \"$sorted\" | uniq | wc\
    \ -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$sorted\" == \"$list\" ]]\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local numbers=$1\n    local\
    \ sorted=false\n    local count\n    local i\n    local j\n    local k\n    local\
    \ count\n    local number\n    for ((i=0; i<${#numbers}; i++)); do\n        count=0\n\
    \        for ((j=0; j<${#numbers}; j++)); do\n            if [[ ${numbers[j]}\
    \ -eq ${numbers[i]} ]]; then\n                count=$((count+1))\n           \
    \ fi\n        done\n        if [[ ${count} -gt 1 ]]; then\n            sorted=false\n\
    \            break\n        fi\n    done\n    return ${sorted}\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0n31bsup.sh: line 29: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local i\n    for (( i=0; i<${#list}; i++\
    \ )); do\n        if [[ ${list[$i]} == ${list[$((i+1))]} ]]; then\n          \
    \  (( count++ ))\n        else\n            if (( count > 1 )); then\n       \
    \         sorted=false\n                break\n            else\n            \
    \    sorted=true\n            fi\n        fi\n    done\n    return $sorted\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpindko61w.sh: line 25: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n    \
    \    else\n            sorted=true\n            last=\"$number\"\n        fi\n\
    \    done\n    if [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n \
    \   return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp85j59m8k.sh: line 24: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local sorted\n    local tmp\n    sorted=false\n    for\
    \ (( i=1; i<${#list}; i++ )); do\n        count=0\n        for (( j=0; j<i; j++\
    \ )); do\n            if [[ ${list[j]} == ${list[i]} ]]; then\n              \
    \  (( count++ ))\n            fi\n        done\n        if (( count > 1 )); then\n\
    \            sorted=true\n            break\n        fi\n    done\n    if [[ $sorted\
    \ ]]; then\n        echo \"$list is sorted\"\n    else\n        echo \"$list is\
    \ not sorted\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ count=0\n    local sorted=0\n    local last\n    local i\n    for (( i=0; i<${#list};\
    \ i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n            ((\
    \ count++ ))\n        else\n            if [[ ${count} -gt 1 ]]; then\n      \
    \          return 0\n            fi\n            sorted=1\n            last=${list[i]}\n\
    \        fi\n    done\n    if [[ ${sorted} -eq 1 ]]; then\n        return 1\n\
    \    else\n        return 0\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq |\
    \ wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" = \"$sorted\"\
    \ ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" = \"$sorted\"\
    \ ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local item\n  local i\n  for i in $list; do\n\
    \    item=$i\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n\
    \    sorted=false\n  else\n    sorted=true\n  fi\n  for i in $list; do\n    if\
    \ [ \"$i\" != \"$item\" ]; then\n      sorted=false\n      break\n    fi\n  done\n\
    \  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  local j\n  local k\n\
    \  for ((i=0; i<${#list}; i++)); do\n    last=${list[i]}\n    count=$((count+1))\n\
    \    for ((j=i+1; j<${#list}; j++)); do\n      if [[ ${list[i]} -gt ${list[j]}\
    \ ]]; then\n        sorted=true\n        break\n      fi\n    done\n    if [[\
    \ ${sorted} = true ]]; then\n      break\n    fi\n  done\n  if [[ ${count} -gt\
    \ 1 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" != \"$element\" ]; then\n            if [ \"$sorted\"\
    \ = false ]; then\n                sorted=true\n            else\n           \
    \     return 0\n            fi\n        fi\n        count=$((count+1))\n     \
    \   last=$element\n    done\n    if [ \"$count\" -gt 1 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local i j\n  for (( i=0; i<${#list}-1; i++ )); do\n    (( j=i+1\
    \ ))\n    while [[ ${list[j]} -eq ${list[i]} ]]; do\n      (( j++ ))\n    done\n\
    \    if [[ ${list[i]} -gt ${list[j]} ]]; then\n      sorted=true\n      break\n\
    \    fi\n  done\n  echo \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local i\n    local j\n    local tmp\n \
    \   for ((i=0; i<${#list}; i++)); do\n        if [[ ${list[i]} == ${list[i+1]}\
    \ ]]; then\n            ((count++))\n        else\n            if [[ ${count}\
    \ -gt 1 ]]; then\n                sorted=false\n                break\n      \
    \      fi\n            sorted=true\n            count=1\n        fi\n    done\n\
    \    if [[ ${sorted} == false ]]; then\n        sorted=true\n    fi\n    echo\
    \ ${sorted}\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n\
    \            (( count++ ))\n        else\n            if (( count > 1 )); then\n\
    \                sorted=false\n                break\n            else\n     \
    \           sorted=true\n            fi\n        fi\n    done\n    if [[ ${sorted}\
    \ == true ]]; then\n        echo true\n    else\n        echo false\n    fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\n    local count=0\n    local last=\n    local first=\n    local last2=\n\
    \    local first2=\n    local i\n    for (( i=0; i<${#list}; i++ )); do\n    \
    \    if [[ ${list[i]} == ${list[i+1]} ]]; then\n            (( count++ ))\n  \
    \      else\n            if [[ ${count} -gt 1 ]]; then\n                return\
    \ 0\n            fi\n            sorted=\n            count=0\n            last=${list[i]}\n\
    \            first=${list[i]}\n            last2=${list[i+1]}\n            first2=${list[i+1]}\n\
    \        fi\n    done\n    if [[ ${count} -gt 1 ]]; then\n        return 0\n \
    \   fi\n    if [[ ${first} -gt ${last} ]]; then\n        return 1\n    fi\n  \
    \  if [[ ${first2} -gt ${last2} ]]; then\n        return 1\n    fi\n    return\
    \ 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | wc\
    \ -w)\"\n    local last=\"$(echo \"$list\" | tail -n 1)\"\n    local first=\"\
    $(echo \"$list\" | head -n 1)\"\n    local equal\n    local result\n    local\
    \ i\n\n    # Handle empty list\n    if [ \"$list\" == \"\" ]\n    then\n     \
    \   return 0\n    fi\n\n    # Handle single number\n    if [ \"$list\" == \"$first\"\
    \ ]\n    then\n        return 0\n    fi\n\n    # Handle single duplicate\n   \
    \ if [ \"$count\" == \"1\" ]\n    then\n        return 0\n    fi\n\n    # Handle\
    \ multiple duplicates\n    if [ \"$count\" -gt 1 ]\n    then\n        return 0\n\
    \    fi\n\n    # Handle sorted list\n    if [ \"$sorted\" == \"$list\" ]\n   \
    \ then\n        return 0\n    fi\n\n    # Handle unsorted list\n    if [ \"$list\"\
    \ == \"$last\" ]\n    then\n        return 0\n    fi\n\n    # Handle unsorted\
    \ list\n    if [ \"$list\" == \"$sorted\" ]\n    then\n        return 0\n    fi\n\
    \n    # Handle unsorted list\n    if [ \"$list\" == \"$first\" ]\n    then\n \
    \       return 0\n    fi\n\n    # Handle unsorted list\n    if [ \"$list\" ==\
    \ \"$last\" ]\n    then\n        return 0\n    fi\n\n    # Handle unsorted list\n\
    \    if [ \"$list\" == \"$sorted\" ]\n    then\n        return 0\n    fi\n\n \
    \   # Handle unsorted list\n    if [ \"$list\" == \"$first\" ]\n    then\n   \
    \     return 0\n    fi\n\n    # Handle unsorted list\n    if [ \"$list\" == \"\
    $last\" ]\n    then\n        return 0\n    fi\n\n    # Handle unsorted list\n\
    \    if [ \"$list\" == \"$sorted\" ]\n    then\n        return 0\n    fi\n\n \
    \   # Handle unsorted list\n    if [ \"$list\" == \"$first\" ]\n    then\n   \
    \     return 0\n    fi\n\n    # Handle unsorted list\n    if [ \"$list\" == \"\
    $last\" ]\n    then\n        return 0\n    fi\n\n    # Handle unsorted list\n\
    \    if [ \"$list\" == \"$sorted\" ]\n    then\n        return 0\n    fi\n\n \
    \   # Handle unsorted list\n    if [ \"$list\" == \"$first\" ]\n    then\n   \
    \     return 0\n    fi\n\n    # Handle unsorted list\n    if [ \"$list\" == \"\
    $last\" ]\n    then\n        return 0\n    fi\n\n    # Handle unsorted list\n\
    \    if [ \"$list\" == \"$sorted\" ]\n    then\n        return 0\n    fi\n\n \
    \   # Handle unsorted list\n    if [ \"$list\" == \"$first\" ]\n    then\n   \
    \     return 0\n    fi\n\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local numbers=$1\n    local\
    \ sorted=false\n    local count=0\n    local last_number\n    local last_number_index\n\
    \    local last_number_index2\n    local last_number_index3\n    local last_number_index4\n\
    \    local last_number_index5\n    local last_number_index6\n    local last_number_index7\n\
    \    local last_number_index8\n    local last_number_index9\n    local last_number_index10\n\
    \    local last_number_index11\n    local last_number_index12\n    local last_number_index13\n\
    \    local last_number_index14\n    local last_number_index15\n    local last_number_index16\n\
    \    local last_number_index17\n    local last_number_index18\n    local last_number_index19\n\
    \    local last_number_index20\n    local last_number_index21\n    local last_number_index22\n\
    \    local last_number_index23\n    local last_number_index24\n    local last_number_index25\n\
    \    local last_number_index26\n    local last_number_index27\n    local last_number_index28\n\
    \    local last_number_index29\n    local last_number_index30\n    local last_number_index31\n\
    \    local last_number_index32\n    local last_number_index33\n    local last_number_index34\n\
    \    local last_number_index35\n    local last_number_index36\n    local last_number_index37\n\
    \    local last_number_index38\n    local last_number_index39\n    local last_number_index40\n\
    \    local last_number_index41\n    local last_number_index42\n    local last_number_index43\n\
    \    local last_number_index44\n    local last_number_index45\n    local last_number_index46\n\
    \    local last_number_index47\n    local last_number_index48\n    local last_number_index49\n\
    \    local last_number_index50\n    local last_number_index51\n    local last_number_index52\n\
    \    local last_number_index53\n    local last_number_index54\n    local last_number_index55\n\
    \    local last_number_index56\n    local last_number_index57\n    local last_number_index58\n\
    \    local last_number_index59\n    local last_number_index60\n    local last_number_index61\n\
    \    local last_number_index62\n    local last_number_index63\n    local last_number_index64\n\
    \    local last_number_index65\n    local last_number_index66\n    local last_number_index67\n\
    \    local last_number_index68\n    local last_number_index69\n    local last_number_index70\n\
    \    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local last\n  local sorted\n  sorted=false\n  last=-1\n\
    \  for i in $list; do\n    count=$(echo $i | wc -w)\n    if [ \"$count\" -eq 1\
    \ ]; then\n      if [ \"$last\" -eq \"$i\" ]; then\n        sorted=true\n    \
    \  else\n        sorted=false\n        break\n      fi\n    fi\n    last=$i\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local numbers=$1\n    local\
    \ sorted=false\n    local count=0\n    local last=-1\n    for number in $numbers;\
    \ do\n        if [ $number -gt $last ]; then\n            sorted=true\n      \
    \  fi\n        count=$((count+1))\n        last=$number\n    done\n    if [ $count\
    \ -gt 1 ]; then\n        sorted=false\n    fi\n    return $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvs62rtxb.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local duplicates=0\n    local number\n    for number in $list;\
    \ do\n        if [ \"$number\" == \"$number\" ] || [ \"$number\" == \"$number\"\
    \ -o \"$number\" == \"$number\" -o \"$number\" == \"$number\" -o \"$number\" ==\
    \ \"$number\" -o \"$number\" == \"$number\" -o \"$number\" == \"$number\" ]; then\n\
    \            duplicates=$((duplicates+1))\n        fi\n    done\n    if [ \"$duplicates\"\
    \ -gt 1 ]; then\n        sorted=false\n    else\n        sorted=true\n    fi\n\
    \    return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp1pza_2mg.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n\
    \            (( count++ ))\n        else\n            if (( count > 1 )); then\n\
    \                sorted=false\n                break\n            else\n     \
    \           sorted=true\n            fi\n        fi\n    done\n    if [[ ${sorted}\
    \ = true ]]; then\n        echo \"$list is sorted\"\n    else\n        echo \"\
    $list is not sorted\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local item\n  local last\n  local i\n\n  for\
    \ i in $list; do\n    last=\"$i\"\n  done\n\n  for i in $list; do\n    count=$((count+1))\n\
    \    if [ \"$last\" != \"$i\" ]; then\n      if [ \"$count\" -gt 1 ]; then\n \
    \       sorted=false\n        break\n      else\n        sorted=true\n       \
    \ break\n      fi\n    fi\n    last=\"$i\"\n  done\n\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local tmp\n\n    sorted=false\n\
    \    last=-1\n    for i in $list; do\n        if [ \"$last\" -eq \"$i\" ]; then\n\
    \            ((count++))\n        else\n            sorted=true\n            last=\"\
    $i\"\n            count=1\n        fi\n    done\n\n    if [ \"$sorted\" = true\
    \ ]; then\n        echo \"$list is sorted\"\n    else\n        echo \"$list is\
    \ not sorted\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=false\n\
    \  local count=0\n  local last=\n  local lastCount=0\n  local lastLast=\n  local\
    \ lastLastCount=0\n  local lastLastLast=\n  local lastLastLastCount=0\n  local\
    \ lastLastLastLast=\n  local lastLastLastLastCount=0\n  local lastLastLastLastLast=\n\
    \  local lastLastLastLastLastCount=0\n  local lastLastLastLastLastLast=\n  local\
    \ lastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastCount=0\n \
    \ local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLastLastLastLastLastLastCount=0\n  local lastLastLastLastLastLastLastCount=0\n\
    \  local lastLast\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" == \"$sorted\"\
    \ ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n\
    \            (( count++ ))\n        else\n            if [[ ${count} -gt 1 ]];\
    \ then\n                sorted=false\n                break\n            fi\n\
    \            sorted=true\n            last=${list[i]}\n        fi\n    done\n\
    \    if [[ ${sorted} == true ]]; then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local i\n    local j\n    local tmp\n\n\
    \    for (( i=1; i<${#list}; i++ )); do\n        if [[ ${list[$i]} -gt ${list[$((i-1))]\
    \ ]]; then\n            sorted=true\n            break\n        fi\n    done\n\
    \n    if [[ ${sorted} == true ]]; then\n        echo \"$list is sorted\"\n   \
    \ else\n        echo \"$list is not sorted\"\n    fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpthnuy2gd.sh: line 17: syntax error in conditional expression

    /tmp/tmpthnuy2gd.sh: line 30: syntax error near `candidate(''

    /tmp/tmpthnuy2gd.sh: line 30: `candidate() {''

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  local j\n  local k\n\
    \  for (( i=0; i<${#list}; i++ )); do\n    last=${list[i]}\n    count=$((count+1))\n\
    \    for (( j=i+1; j<${#list}; j++ )); do\n      if [ \"${list[i]}\" -gt \"${list[j]}\"\
    \ ]; then\n        sorted=true\n        break\n      fi\n    done\n    if [ \"\
    ${sorted}\" == true ]; then\n      break\n    fi\n  done\n  if [ \"${count}\"\
    \ -gt 1 ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i sorted=0 duplicates=0\n    for (( i=0; i<${#list}; i++ )); do\n        local\
    \ j\n        for (( j=0; j<i; j++ )); do\n            local k\n            if\
    \ [[ ${list[i]} -gt ${list[j]} ]]; then\n                sorted=1\n          \
    \      break\n            fi\n        done\n        if [[ ${sorted} -eq 1 ]];\
    \ then\n            duplicates=$((duplicates+1))\n        fi\n    done\n    if\
    \ [[ ${duplicates} -gt 1 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq | wc -l)\"\
    \n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" == \"$sorted\" ]] || return\
    \ 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\n    local i=\n    local j=\n    local count=\n    local last_num=\n\
    \    local last_count=\n    local last_element=\n    local result=\n    local\
    \ element\n\n    for element in $list; do\n        sorted=\n        count=\n \
    \       last_num=\n        last_count=\n        last_element=\n        for ((\
    \ i=1; i<=$#list; i++ )); do\n            (( count++ ))\n            if [ \"$element\"\
    \ == \"$list[$i]\" ]; then\n                (( last_count++ ))\n             \
    \   if [ \"$last_count\" -eq \"$count\" ]; then\n                    sorted=\n\
    \                else\n                    sorted=\n                    last_num=\n\
    \                fi\n            else\n                if [ \"$last_count\" -eq\
    \ \"$count\" ]; then\n                    sorted=\n                else\n    \
    \                sorted=\n                    last_num=\n                fi\n\
    \            fi\n            last_count=$count\n            last_num=$element\n\
    \            last_element=${list[$i]}\n        done\n        if [ \"$sorted\"\
    \ == \"$element\" ]; then\n            result=\n        else\n            result=false\n\
    \        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr8vilwfq.sh: line 26: ((: i<=1list: value too great for base (error
    token is "1list")

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\" = \"$sorted\"\
    \ ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ i j temp\n  local sorted=false\n  local count\n  local last\n  local count2\n\
    \  local last2\n  local count3\n  local last3\n  local count4\n  local last4\n\
    \  local count5\n  local last5\n  local count6\n  local last6\n  local count7\n\
    \  local last7\n  local count8\n  local last8\n  local count9\n  local last9\n\
    \  local count10\n  local last10\n  local count11\n  local last11\n  local count12\n\
    \  local last12\n  local count13\n  local last13\n  local count14\n  local last14\n\
    \  local count15\n  local last15\n  local count16\n  local last16\n  local count17\n\
    \  local last17\n  local count18\n  local last18\n  local count19\n  local last19\n\
    \  local count20\n  local last20\n  local count21\n  local last21\n  local count22\n\
    \  local last22\n  local count23\n  local last23\n  local count24\n  local last24\n\
    \  local count25\n  local last25\n  local count26\n  local last26\n  local count27\n\
    \  local last27\n  local count28\n  local last28\n  local count29\n  local last29\n\
    \  local count30\n  local last30\n  local count31\n  local last31\n  local count32\n\
    \  local last32\n  local count33\n  local last33\n  local count34\n  local last34\n\
    \  local count35\n  local last35\n  local count36\n  local last36\n  local count37\n\
    \  local last37\n  local count38\n  local last38\n  local count39\n  local last39\n\
    \  local count40\n  local last40\n  local count41\n  local last41\n  local count42\n\
    \  local last42\n  local count43\n  local last43\n  local count44\n  local last44\n\
    \  local count45\n  local last45\n  local count46\n  local last46\n  local count47\n\
    \  local last47\n  local count48\n  local last48\n  local count49\n  local last49\n\
    \  local count50\n  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last=\n  local i\n  for i in $list; do\n\
    \    [[ \"$i\" == \"$last\" ]] && continue\n    (( count++ ))\n    last=\"$i\"\
    \n  done\n  [[ \"$count\" -gt 1 ]] && return 0\n  [[ \"$sorted\" == \"true\" ]]\
    \ && return 0\n  sorted=true\n  for i in $list; do\n    [[ \"$i\" < \"$last\"\
    \ ]] && return 0\n  done\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local sorted\n    local last\n    local first\n    local\
    \ tmp\n\n    sorted=false\n    first=true\n    last=true\n    for (( i = 0; i\
    \ < ${#list}; i++ )); do\n        if [ $first -eq true ]; then\n            first=false\n\
    \            last=true\n        fi\n        if [ $last -eq true ]; then\n    \
    \        sorted=true\n            break\n        fi\n        if [ $i -eq 0 ];\
    \ then\n            tmp=${list[i]}\n        else\n            tmp=${list[i]}\n\
    \            if [ $tmp -gt ${list[i - 1]} ]; then\n                last=false\n\
    \            fi\n        fi\n    done\n    return $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi7d0ffvw.sh: line 21: [: true: integer expression expected

    /tmp/tmpi7d0ffvw.sh: line 25: [: true: integer expression expected

    /tmp/tmpi7d0ffvw.sh: line 38: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" != \"$element\" ]; then\n            sorted=true\n   \
    \     fi\n        count=$((count+1))\n        last=$element\n    done\n    if\
    \ [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n    return $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpexeyds3g.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local j\n    local sorted\n    local last\n    local\
    \ tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local\
    \ tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local\
    \ tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n\
    \    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local\
    \ tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n\
    \    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local\
    \ tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n\
    \    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local\
    \ tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n\
    \    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local\
    \ tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n\
    \    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local\
    \ tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n\
    \    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local\
    \ tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n\
    \    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local\
    \ tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n\
    \    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local\
    \ tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n\
    \    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local\
    \ tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n\
    \    local tmp97\n    local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=0\n  local count=0\n  local number\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n\n  for ((i=0; i<${#numbers[@]}; i++)); do\n    number=${numbers[$i]}\n\
    \    count=$((count+1))\n    if [ \"$count\" -gt 1 ]; then\n      return 0\n \
    \   fi\n    if [ \"$number\" -gt \"$sorted\" ]; then\n      sorted=$number\n \
    \   fi\n  done\n\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    last=$i\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n\
    \    sorted=false\n  else\n    sorted=true\n  fi\n  for i in $list; do\n    if\
    \ [ \"$i\" != \"$last\" ]; then\n      sorted=false\n    fi\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local item\n    for item in $list; do\n\
    \        if [ \"$item\" == \"$item\" ]; then\n            ((count++))\n      \
    \  fi\n    done\n    if [ \"$count\" -gt 1 ]; then\n        sorted=false\n   \
    \ elif [ \"$count\" -eq 1 ]; then\n        sorted=true\n    fi\n    echo \"$sorted\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    ((count++))\n    if [ \"$i\" == \"$last\" ]; then\n      ((count--))\n  \
    \    continue\n    fi\n    last=\"$i\"\n    sorted=true\n  done\n  if [ \"$count\"\
    \ -gt 1 ]; then\n    return 0\n  else\n    return $sorted\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk8k7dzjq.sh: line 26: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" != \"$element\" ]; then\n            sorted=true\n   \
    \     fi\n        count=$((count+1))\n        last=$element\n    done\n    if\
    \ [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n    return $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpexeyds3g.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local sorted=0\n    local last\n    local i\n    local j\n    local\
    \ k\n    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local\
    \ tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local\
    \ tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n\
    \    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local\
    \ tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n\
    \    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local\
    \ tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n\
    \    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local\
    \ tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n\
    \    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local\
    \ tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n\
    \    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local\
    \ tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n\
    \    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local\
    \ tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n\
    \    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local\
    \ tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n\
    \    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local\
    \ tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n\
    \    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local\
    \ tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n\
    \    local tmp96\n    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    last=$i\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n\
    \    sorted=false\n  else\n    sorted=true\n  fi\n  if [ \"$sorted\" = true ];\
    \ then\n    for i in $list; do\n      if [ \"$i\" -gt \"$last\" ]; then\n    \
    \    sorted=false\n        break\n      fi\n    done\n  fi\n  echo \"$sorted\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local last\n  local sorted\n\n  sorted=false\n  last=-1\n\
    \  for i in $list; do\n    count=$(echo \"$list\" | grep -c \"$i\")\n    if [\
    \ \"$count\" -eq 0 ]; then\n      sorted=true\n      break\n    elif [ \"$count\"\
    \ -gt 0 ]; then\n      sorted=false\n      break\n    fi\n  done\n\n  if [ \"\
    $sorted\" = true ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | wc\
    \ -w)\"\n    local last=\"$(echo \"$list\" | tail -n 1)\"\n    local first=\"\
    $(echo \"$list\" | head -n 1)\"\n    local result=\"$(( $sorted > $list ))\"\n\
    \    if [ \"$count\" -gt 1 ]; then\n        result=\"false\"\n    fi\n    if [\
    \ \"$last\" != \"$first\" ]; then\n        result=\"false\"\n    fi\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local sorted\n    sorted=false\n    count=0\n    for\
    \ i in $list; do\n        if [ \"$sorted\" == \"false\" ]; then\n            if\
    \ [ \"$i\" == \"$list\" ]; then\n                sorted=true\n            else\n\
    \                if [ \"$count\" -gt 1 ]; then\n                    sorted=false\n\
    \                fi\n            fi\n        fi\n        ((count++))\n    done\n\
    \    return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmphekcwksx.sh: line 27: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local sorted\n    local last\n    local lastCount\n\
    \    local lastI\n    local lastSorted\n    local lastLast\n    local lastLastCount\n\
    \    local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local\
    \ lastLastSorted\n    local lastLastI\n    local lastLastSorted\n    local lastLastI\n\
    \    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n   \
    \ local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n\
    \    local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local\
    \ lastLastSorted\n    local lastLastI\n    local lastLastSorted\n    local lastLastI\n\
    \    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n   \
    \ local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n\
    \    local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local\
    \ lastLastSorted\n    local lastLastI\n    local lastLastSorted\n    local lastLastI\n\
    \    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n   \
    \ local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n\
    \    local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local\
    \ lastLastSorted\n    local lastLastI\n    local lastLastSorted\n    local lastLastI\n\
    \    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n   \
    \ local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n\
    \    local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local\
    \ lastLastSorted\n    local lastLastI\n    local lastLastSorted\n    local lastLastI\n\
    \    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n   \
    \ local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local lastLastSorted\n\
    \    local lastLastI\n    local lastLastSorted\n    local lastLastI\n    local\
    \ lastLastSorted\n    local lastLastI\n    local lastLastSorted\n    local lastLastI\n\
    \    local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n\
    \            (( count++ ))\n        else\n            if [[ ${count} -gt 1 ]];\
    \ then\n                sorted=false\n                break\n            else\n\
    \                sorted=true\n            fi\n        fi\n    done\n    if [[\
    \ ${sorted} = true ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local item\n  local last\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n    \
    \    else\n            sorted=true\n            last=$number\n        fi\n   \
    \ done\n    if [ \"$sorted\" = true ]; then\n        echo \"$list is sorted\"\n\
    \    else\n        echo \"$list is not sorted\"\n    fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\n  local i=\n  local j=\n  local count=\n  local last=\n  local prev=\n\
    \  local tmp=\n  local tmp2=\n  local tmp3=\n  local tmp4=\n  local tmp5=\n  local\
    \ tmp6=\n  local tmp7=\n  local tmp8=\n  local tmp9=\n  local tmp10=\n  local\
    \ tmp11=\n  local tmp12=\n  local tmp13=\n  local tmp14=\n  local tmp15=\n  local\
    \ tmp16=\n  local tmp17=\n  local tmp18=\n  local tmp19=\n  local tmp20=\n  local\
    \ tmp21=\n  local tmp22=\n  local tmp23=\n  local tmp24=\n  local tmp25=\n  local\
    \ tmp26=\n  local tmp27=\n  local tmp28=\n  local tmp29=\n  local tmp30=\n  local\
    \ tmp31=\n  local tmp32=\n  local tmp33=\n  local tmp34=\n  local tmp35=\n  local\
    \ tmp36=\n  local tmp37=\n  local tmp38=\n  local tmp39=\n  local tmp40=\n  local\
    \ tmp41=\n  local tmp42=\n  local tmp43=\n  local tmp44=\n  local tmp45=\n  local\
    \ tmp46=\n  local tmp47=\n  local tmp48=\n  local tmp49=\n  local tmp50=\n  local\
    \ tmp51=\n  local tmp52=\n  local tmp53=\n  local tmp54=\n  local tmp55=\n  local\
    \ tmp56=\n  local tmp57=\n  local tmp58=\n  local tmp59=\n  local tmp60=\n  local\
    \ tmp61=\n  local tmp62=\n  local tmp63=\n  local tmp64=\n  local tmp65=\n  local\
    \ tmp66=\n  local tmp67=\n  local tmp68=\n  local tmp69=\n  local tmp70=\n  local\
    \ tmp71=\n  local tmp72=\n  local tmp73=\n  local tmp74=\n  local tmp75=\n  local\
    \ tmp76=\n  local tmp77=\n  local tmp78=\n  local tmp79=\n  local tmp80=\n  \n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local i\n    for (( i=0; i<${#list}; i++\
    \ )); do\n        if [[ ${list[$i]} -gt ${list[$((i+1))]} ]]; then\n         \
    \   sorted=true\n        fi\n        count=$((count+1))\n    done\n    if [[ ${count}\
    \ -gt 1 ]]; then\n        sorted=false\n    fi\n    echo \"$sorted\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp1jpt1hk.sh: line 14: [[: 1 2 3 4 5: syntax error in expression
    (error token is "2 3 4 5")

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local last_number\n  local last_number_index\n\
    \  local i\n  for i in $numbers; do\n    count=$((count+1))\n    if [ $count -gt\
    \ 1 ]; then\n      sorted=true\n      break\n    fi\n    if [ $i -gt $last_number\
    \ ]; then\n      sorted=true\n      break\n    fi\n    last_number=$i\n    last_number_index=$count\n\
    \  done\n  if [ $sorted == false ]; then\n    return 0\n  else\n    return 1\n\
    \  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpx16ps6ug.sh: line 21: [: 5: unary operator expected

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local j\n  local sorted\n  local tmp\n  sorted=false\n \
    \ for i in $list; do\n    count=$(echo \"$list\" | grep -c \"$i\")\n    if [ \"\
    $count\" -gt 1 ]; then\n      sorted=true\n      break\n    fi\n  done\n  if [\
    \ \"$sorted\" = true ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local item\n    for item in $list; do\n\
    \        if [ \"$sorted\" == \"true\" ]; then\n            sorted=false\n    \
    \    elif [ \"$item\" -gt \"$count\" ]; then\n            sorted=true\n      \
    \  fi\n        count=$((count+1))\n    done\n    return $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpysapr72i.sh: line 21: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i count\n    for (( i=1; i<${#list}; i++ )); do\n        count=$(( ${#list}\
    \ > i ? ${#list} - i : i ))\n        if [[ ${list[i]} == ${list[i-1]} ]]; then\n\
    \            (( count > 1 )) && return 0\n        fi\n    done\n    return 1\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    last=$i\n  done\n  for i in $list; do\n    if [ \"$i\" == \"$last\" ]; then\n\
    \      ((count++))\n    else\n      if [ \"$count\" -gt 1 ]; then\n        sorted=false\n\
    \        break\n      else\n        sorted=true\n        break\n      fi\n   \
    \ fi\n  done\n  echo \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local sorted2\n  \
    \  local sorted3\n    local sorted4\n    local sorted5\n    local sorted6\n  \
    \  local sorted7\n    local sorted8\n    local sorted9\n    local sorted10\n \
    \   local sorted11\n    local sorted12\n    local sorted13\n    local sorted14\n\
    \    local sorted15\n    local sorted16\n    local sorted17\n    local sorted18\n\
    \    local sorted19\n    local sorted20\n    local sorted21\n    local sorted22\n\
    \    local sorted23\n    local sorted24\n    local sorted25\n    local sorted26\n\
    \    local sorted27\n    local sorted28\n    local sorted29\n    local sorted30\n\
    \    local sorted31\n    local sorted32\n    local sorted33\n    local sorted34\n\
    \    local sorted35\n    local sorted36\n    local sorted37\n    local sorted38\n\
    \    local sorted39\n    local sorted40\n    local sorted41\n    local sorted42\n\
    \    local sorted43\n    local sorted44\n    local sorted45\n    local sorted46\n\
    \    local sorted47\n    local sorted48\n    local sorted49\n    local sorted50\n\
    \    local sorted51\n    local sorted52\n    local sorted53\n    local sorted54\n\
    \    local sorted55\n    local sorted56\n    local sorted57\n    local sorted58\n\
    \    local sorted59\n    local sorted60\n    local sorted61\n    local sorted62\n\
    \    local sorted63\n    local sorted64\n    local sorted65\n    local sorted66\n\
    \    local sorted67\n    local sorted68\n    local sorted69\n    local sorted70\n\
    \    local sorted71\n    local sorted72\n    local sorted73\n    local sorted74\n\
    \    local sorted75\n    local sorted76\n    local sorted77\n    local sorted78\n\
    \    local sorted79\n    local sorted80\n    local sorted81\n    local sorted82\n\
    \    local sorted83\n    local sorted84\n    local sorted85\n    local sorted86\n\
    \    local sorted87\n    local sorted88\n    local sorted89\n    local sorted90\n\
    \    local sorted91\n    local sorted92\n    local sorted93\n    local sorted94\n\
    \    local sorted95\n    local sorted96\n    local sorted97\n    local sorted98\n\
    \    local sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ i prev cur prev2\n  local sorted=false\n  for i in $list; do\n    prev=$cur\n\
    \    cur=$i\n    prev2=$prev\n    if [ \"$prev\" -gt \"$cur\" ]; then\n      sorted=true\n\
    \    fi\n  done\n  if [ \"$sorted\" = true ]; then\n    return 0\n  else\n   \
    \ return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp6y0u99iv.sh: line 16: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local i\n    local count\n    local j\n    local tmp\n   \
    \ local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n\
    \    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n\
    \    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local\
    \ tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n\
    \    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local\
    \ tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n\
    \    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local\
    \ tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n\
    \    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local\
    \ tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n\
    \    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local\
    \ tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n\
    \    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local\
    \ tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n\
    \    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local\
    \ tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n\
    \    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local\
    \ tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n\
    \    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local\
    \ tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n\
    \    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local\
    \ tmp97\n    local tmp98\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $numbers;\
    \ do\n    last=$i\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ];\
    \ then\n    sorted=false\n  else\n    sorted=true\n  fi\n  for i in $numbers;\
    \ do\n    if [ \"$i\" != \"$last\" ]; then\n      sorted=false\n    fi\n  done\n\
    \  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    last=$i\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n\
    \    sorted=false\n  else\n    sorted=true\n  fi\n  if [ \"$sorted\" = true ];\
    \ then\n    for i in $list; do\n      if [ \"$i\" != \"$last\" ]; then\n     \
    \   sorted=false\n        break\n      fi\n    done\n  fi\n  echo $sorted\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | wc -w)\"\
    \n  local last=\"$(echo \"$list\" | tail -1)\"\n  local first=\"$(echo \"$list\"\
    \ | head -1)\"\n  [[ \"$list\" =~ (^|[[:space:]])\"$last\"($|[[:space:]]) ]] ||\
    \ return 1\n  [[ \"$list\" =~ (^|[[:space:]])\"$first\"($|[[:space:]]) ]] || return\
    \ 1\n  [[ \"$list\" =~ (^|[[:space:]])\"$sorted\"($|[[:space:]]) ]] || return\
    \ 1\n  [[ \"$count\" -gt 1 ]] || return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local number\n  local i\n  local j\n  for i\
    \ in $list; do\n    number=$i\n    count=$((count+1))\n    for j in $list; do\n\
    \      if [ \"$j\" == \"$number\" ]; then\n        sorted=true\n        break\n\
    \      fi\n    done\n    if [ \"$sorted\" == \"false\" ]; then\n      sorted=false\n\
    \      break\n    fi\n  done\n  if [ \"$sorted\" == \"true\" ]; then\n    return\
    \ 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n\n    sorted=false\n \
    \   last=-1\n    for i in $list; do\n        count=$(( $count + 1 ))\n       \
    \ if [ $count -gt 1 ]; then\n            sorted=true\n            break\n    \
    \    fi\n        if [ $i -gt $last ]; then\n            sorted=true\n        \
    \    break\n        fi\n        last=$i\n    done\n    return $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphwsi_y3n.sh: line 29: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$sorted\" |\
    \ uniq -c | wc -l)\"\n    [[ \"$count\" -gt 1 ]] && return 0\n    [[ \"$list\"\
    \ = \"$sorted\" ]] && return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n    \
    \    else\n            sorted=true\n            last=\"$number\"\n        fi\n\
    \    done\n    if [ \"$sorted\" = true ]; then\n        echo \"$list is sorted\"\
    \n    else\n        echo \"$list is not sorted\"\n    fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ -c | wc -l)\"\n    [[ \"$count\" -gt 1 ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local j\n    local sorted\n    local sorted1\n    local\
    \ sorted2\n    local sorted3\n    local sorted4\n    local sorted5\n    local\
    \ sorted6\n    local sorted7\n    local sorted8\n    local sorted9\n    local\
    \ sorted10\n    local sorted11\n    local sorted12\n    local sorted13\n    local\
    \ sorted14\n    local sorted15\n    local sorted16\n    local sorted17\n    local\
    \ sorted18\n    local sorted19\n    local sorted20\n    local sorted21\n    local\
    \ sorted22\n    local sorted23\n    local sorted24\n    local sorted25\n    local\
    \ sorted26\n    local sorted27\n    local sorted28\n    local sorted29\n    local\
    \ sorted30\n    local sorted31\n    local sorted32\n    local sorted33\n    local\
    \ sorted34\n    local sorted35\n    local sorted36\n    local sorted37\n    local\
    \ sorted38\n    local sorted39\n    local sorted40\n    local sorted41\n    local\
    \ sorted42\n    local sorted43\n    local sorted44\n    local sorted45\n    local\
    \ sorted46\n    local sorted47\n    local sorted48\n    local sorted49\n    local\
    \ sorted50\n    local sorted51\n    local sorted52\n    local sorted53\n    local\
    \ sorted54\n    local sorted55\n    local sorted56\n    local sorted57\n    local\
    \ sorted58\n    local sorted59\n    local sorted60\n    local sorted61\n    local\
    \ sorted62\n    local sorted63\n    local sorted64\n    local sorted65\n    local\
    \ sorted66\n    local sorted67\n    local sorted68\n    local sorted69\n    local\
    \ sorted70\n    local sorted71\n    local sorted72\n    local sorted73\n    local\
    \ sorted74\n    local sorted75\n    local sorted76\n    local sorted77\n    local\
    \ sorted78\n    local sorted79\n    local sorted80\n    local sorted81\n    local\
    \ sorted82\n    local sorted83\n    local sorted84\n    local sorted85\n    local\
    \ sorted86\n    local sorted87\n    local sorted88\n    local sorted89\n    local\
    \ sorted90\n    local sorted91\n    local sorted92\n    local sorted93\n    local\
    \ sorted94\n    local sorted95\n    local sorted96\n    local sorted97\n    local\
    \ sorted98\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local lastNumber\n  local lastNumberCount\n\
    \  local lastNumberIndex\n  local lastNumberIndexCount\n  local lastNumberIndexCount2\n\
    \  local lastNumberIndexCount3\n  local lastNumberIndexCount4\n  local lastNumberIndexCount5\n\
    \  local lastNumberIndexCount6\n  local lastNumberIndexCount7\n  local lastNumberIndexCount8\n\
    \  local lastNumberIndexCount9\n  local lastNumberIndexCount10\n  local lastNumberIndexCount11\n\
    \  local lastNumberIndexCount12\n  local lastNumberIndexCount13\n  local lastNumberIndexCount14\n\
    \  local lastNumberIndexCount15\n  local lastNumberIndexCount16\n  local lastNumberIndexCount17\n\
    \  local lastNumberIndexCount18\n  local lastNumberIndexCount19\n  local lastNumberIndexCount20\n\
    \  local lastNumberIndexCount21\n  local lastNumberIndexCount22\n  local lastNumberIndexCount23\n\
    \  local lastNumberIndexCount24\n  local lastNumberIndexCount25\n  local lastNumberIndexCount26\n\
    \  local lastNumberIndexCount27\n  local lastNumberIndexCount28\n  local lastNumberIndexCount29\n\
    \  local lastNumberIndexCount30\n  local lastNumberIndexCount31\n  local lastNumberIndexCount32\n\
    \  local lastNumberIndexCount33\n  local lastNumberIndexCount34\n  local lastNumberIndexCount35\n\
    \  local lastNumberIndexCount36\n  local lastNumberIndexCount37\n  local lastNumberIndexCount38\n\
    \  local lastNumberIndexCount39\n  local lastNumberIndexCount40\n  local lastNumberIndexCount41\n\
    \  local lastNumberIndexCount42\n  local lastNumberIndexCount43\n  local lastNumberIndexCount44\n\
    \  local lastNumberIndexCount45\n  local lastNumberIndexCount46\n  local lastNumberIndexCount47\n\
    \  local lastNumberIndexCount48\n  local lastNumberIndexCount49\n  local lastNumberIndexCount50\n\
    \  local lastNumberIndexCount51\n  local lastNumberIndexCount52\n  local lastNumberIndexCount53\n\
    \  local lastNumberIndexCount54\n  local lastNumberIndexCount55\n  local lastNumberIndexCount56\n\
    \  local lastNumberIndexCount57\n  local lastNumberIndexCount58\n  local lastNumberIndexCount59\n\
    \  local lastNumberIndexCount60\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | wc -w)\"\
    \n  local count2=\"$(echo \"$list\" | uniq | wc -w)\"\n  local count3=\"$(echo\
    \ \"$list\" | uniq -c | wc -w)\"\n  local count4=\"$(echo \"$list\" | uniq -c\
    \ | awk '{print $1}' | wc -w)\"\n  local count5=\"$(echo \"$list\" | uniq -c |\
    \ awk '{print $2}' | wc -w)\"\n  local count6=\"$(echo \"$list\" | uniq -c | awk\
    \ '{print $3}' | wc -w)\"\n  local count7=\"$(echo \"$list\" | uniq -c | awk '{print\
    \ $4}' | wc -w)\"\n  local count8=\"$(echo \"$list\" | uniq -c | awk '{print $5}'\
    \ | wc -w)\"\n  local count9=\"$(echo \"$list\" | uniq -c | awk '{print $6}' |\
    \ wc -w)\"\n  local count10=\"$(echo \"$list\" | uniq -c | awk '{print $7}' |\
    \ wc -w)\"\n  local count11=\"$(echo \"$list\" | uniq -c | awk '{print $8}' |\
    \ wc -w)\"\n  local count12=\"$(echo \"$list\" | uniq -c | awk '{print $9}' |\
    \ wc -w)\"\n  local count13=\"$(echo \"$list\" | uniq -c | awk '{print $10}' |\
    \ wc -w)\"\n  local count14=\"$(echo \"$list\" | uniq -c | awk '{print $11}' |\
    \ wc -w)\"\n  local count15=\"$(echo \"$list\" | uniq -c | awk '{print $12}' |\
    \ wc -w)\"\n  local count16=\"$(echo \"$list\" | uniq -c | awk '{print $13}' |\
    \ wc -w)\"\n  local count17=\"$(echo \"$list\" | uniq -c | awk '{print $14}' |\
    \ wc -w)\"\n  local count18=\"$(echo \"$list\" | uniq -c | awk '{print $15}' |\
    \ wc -w)\"\n  local count19=\"$(echo \"$list\" | uniq -c | awk '{print $16}' |\
    \ wc -w)\"\n  local count20=\"$(echo \"$list\" | \n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptfn6tang.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmptfn6tang.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i prev curr\n    local sorted=0\n    local duplicates=0\n    local sorted\n\
    \    for (( i=0; i<${#list}; i++ )); do\n        curr=\"${list[i]}\"\n       \
    \ if [[ ${sorted} -eq 1 ]]; then\n            sorted=0\n            duplicates=0\n\
    \        fi\n        if [[ ${prev} -gt ${curr} ]]; then\n            sorted=1\n\
    \            duplicates=0\n        elif [[ ${prev} -lt ${curr} ]]; then\n    \
    \        sorted=0\n            duplicates=1\n        fi\n        prev=\"${curr}\"\
    \n    done\n    if [[ ${duplicates} -gt 1 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n\
    \            (( count++ ))\n        else\n            if (( count > 1 )); then\n\
    \                sorted=false\n                break\n            else\n     \
    \           sorted=true\n            fi\n        fi\n    done\n    if [[ ${sorted}\
    \ == true ]]; then\n        echo true\n    else\n        echo false\n    fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n\
    \    local tmp98\n    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" != \"$element\" ]; then\n            sorted=true\n   \
    \     fi\n        count=$((count+1))\n        last=$element\n    done\n    if\
    \ [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n    return $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpexeyds3g.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ i\n    local count\n    local prev\n    local sorted\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ count\n    local i\n    local j\n    local sorted\n    local last\n    local\
    \ tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local\
    \ tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local\
    \ tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n\
    \    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local\
    \ tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n\
    \    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local\
    \ tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n\
    \    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local\
    \ tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n\
    \    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local\
    \ tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n\
    \    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local\
    \ tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n\
    \    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local\
    \ tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n\
    \    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local\
    \ tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n\
    \    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local\
    \ tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n\
    \    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local\
    \ tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n\
    \    local tmp97\n    local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local item\n    for item in $list; do\n\
    \        ((count++))\n        if [ \"$item\" == \"$item\" ] || [ \"$item\" ==\
    \ \"$item\" -o \"$item\" == \"$item\" -o \"$item\" == \"$item\" -o \"$item\" ==\
    \ \"$item\" ]; then\n            sorted=true\n            break\n        fi\n\
    \    done\n    if [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n \
    \   return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp3qxre34m.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" != \"$element\" ]; then\n            if [ \"$sorted\"\
    \ = false ]; then\n                sorted=true\n            fi\n            count=$((count+1))\n\
    \        fi\n        last=$element\n    done\n    if [ \"$sorted\" = false ];\
    \ then\n        echo \"$list is not sorted\"\n        exit 1\n    fi\n    if [\
    \ \"$count\" -gt 1 ]; then\n        echo \"$list has more than 1 duplicate of\
    \ the same number\"\n        exit 1\n    fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    last=$i\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n\
    \    return 0\n  fi\n  for i in $list; do\n    if [ \"$i\" -eq \"$last\" ]; then\n\
    \      count=$((count-1))\n      if [ \"$count\" -eq 0 ]; then\n        sorted=true\n\
    \        break\n      fi\n    fi\n  done\n  return $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdhf136rf.sh: line 30: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ i j count prev tmp\n    count=0\n    for ((i=0; i<${#list[@]}; i++)); do\n \
    \       tmp=${list[$i]}\n        j=$((i+1))\n        while ((j<${#list[@]}) &&\
    \ (${list[$j]}==tmp)); do\n            ((j++))\n        done\n        if ((j<${#list[@]})\
    \ && ($j>i)); then\n            count=$((count+1))\n        fi\n    done\n   \
    \ if (($count>1)); then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpea41hdz9.sh: line 15: j: command not found

    /tmp/tmpea41hdz9.sh: line 18: j: command not found

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local last\n    for element in $list; do\n        if [ \"$last\"\
    \ != \"$element\" ]; then\n            count=$((count+1))\n        fi\n      \
    \  last=$element\n    done\n    if [ \"$count\" -gt 1 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local j\n    local sorted\n    local sorted2\n    local\
    \ sorted3\n    local sorted4\n    local sorted5\n    local sorted6\n    local\
    \ sorted7\n    local sorted8\n    local sorted9\n    local sorted10\n    local\
    \ sorted11\n    local sorted12\n    local sorted13\n    local sorted14\n    local\
    \ sorted15\n    local sorted16\n    local sorted17\n    local sorted18\n    local\
    \ sorted19\n    local sorted20\n    local sorted21\n    local sorted22\n    local\
    \ sorted23\n    local sorted24\n    local sorted25\n    local sorted26\n    local\
    \ sorted27\n    local sorted28\n    local sorted29\n    local sorted30\n    local\
    \ sorted31\n    local sorted32\n    local sorted33\n    local sorted34\n    local\
    \ sorted35\n    local sorted36\n    local sorted37\n    local sorted38\n    local\
    \ sorted39\n    local sorted40\n    local sorted41\n    local sorted42\n    local\
    \ sorted43\n    local sorted44\n    local sorted45\n    local sorted46\n    local\
    \ sorted47\n    local sorted48\n    local sorted49\n    local sorted50\n    local\
    \ sorted51\n    local sorted52\n    local sorted53\n    local sorted54\n    local\
    \ sorted55\n    local sorted56\n    local sorted57\n    local sorted58\n    local\
    \ sorted59\n    local sorted60\n    local sorted61\n    local sorted62\n    local\
    \ sorted63\n    local sorted64\n    local sorted65\n    local sorted66\n    local\
    \ sorted67\n    local sorted68\n    local sorted69\n    local sorted70\n    local\
    \ sorted71\n    local sorted72\n    local sorted73\n    local sorted74\n    local\
    \ sorted75\n    local sorted76\n    local sorted77\n    local sorted78\n    local\
    \ sorted79\n    local sorted80\n    local sorted81\n    local sorted82\n    local\
    \ sorted83\n    local sorted84\n    local sorted85\n    local sorted86\n    local\
    \ sorted87\n    local sorted88\n    local sorted89\n    local sorted90\n    local\
    \ sorted91\n    local sorted92\n    local sorted93\n    local sorted94\n    local\
    \ sorted95\n    local sorted96\n    local sorted97\n    local sorted98\n    local\
    \ sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=1;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[$i]} == ${list[$((i-1))} ]]; then\n\
    \            (( count++ ))\n        else\n            if (( count > 1 )); then\n\
    \                sorted=false\n                break\n            else\n     \
    \           sorted=true\n            fi\n        fi\n    done\n    if [[ $sorted\
    \ ]]; then\n        echo \"$list is sorted\"\n    else\n        echo \"$list is\
    \ not sorted\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local sorted2\n  \
    \  local sorted3\n    local sorted4\n    local sorted5\n    local sorted6\n  \
    \  local sorted7\n    local sorted8\n    local sorted9\n    local sorted10\n \
    \   local sorted11\n    local sorted12\n    local sorted13\n    local sorted14\n\
    \    local sorted15\n    local sorted16\n    local sorted17\n    local sorted18\n\
    \    local sorted19\n    local sorted20\n    local sorted21\n    local sorted22\n\
    \    local sorted23\n    local sorted24\n    local sorted25\n    local sorted26\n\
    \    local sorted27\n    local sorted28\n    local sorted29\n    local sorted30\n\
    \    local sorted31\n    local sorted32\n    local sorted33\n    local sorted34\n\
    \    local sorted35\n    local sorted36\n    local sorted37\n    local sorted38\n\
    \    local sorted39\n    local sorted40\n    local sorted41\n    local sorted42\n\
    \    local sorted43\n    local sorted44\n    local sorted45\n    local sorted46\n\
    \    local sorted47\n    local sorted48\n    local sorted49\n    local sorted50\n\
    \    local sorted51\n    local sorted52\n    local sorted53\n    local sorted54\n\
    \    local sorted55\n    local sorted56\n    local sorted57\n    local sorted58\n\
    \    local sorted59\n    local sorted60\n    local sorted61\n    local sorted62\n\
    \    local sorted63\n    local sorted64\n    local sorted65\n    local sorted66\n\
    \    local sorted67\n    local sorted68\n    local sorted69\n    local sorted70\n\
    \    local sorted71\n    local sorted72\n    local sorted73\n    local sorted74\n\
    \    local sorted75\n    local sorted76\n    local sorted77\n    local sorted78\n\
    \    local sorted79\n    local sorted80\n    local sorted81\n    local sorted82\n\
    \    local sorted83\n    local sorted84\n    local sorted85\n    local sorted86\n\
    \    local sorted87\n    local sorted88\n    local sorted89\n    local sorted90\n\
    \    local sorted91\n    local sorted92\n    local sorted93\n    local sorted94\n\
    \    local sorted95\n    local sorted96\n    local sorted97\n    local sorted98\n\
    \    local sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\n    local duplicates=\n    local i=\n    local j=\n    local k=\n \
    \   local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n    local result=\n\
    \    local sorted=\n    local duplicates=\n    local i=\n    local j=\n    local\
    \ k=\n    local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n    local result=\n\
    \    local sorted=\n    local duplicates=\n    local i=\n    local j=\n    local\
    \ k=\n    local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n    local result=\n\
    \    local sorted=\n    local duplicates=\n    local i=\n    local j=\n    local\
    \ k=\n    local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n    local result=\n\
    \    local sorted=\n    local duplicates=\n    local i=\n    local j=\n    local\
    \ k=\n    local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n    local result=\n\
    \    local sorted=\n    local duplicates=\n    local i=\n    local j=\n    local\
    \ k=\n    local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n    local result=\n\
    \    local sorted=\n    local duplicates=\n    local i=\n    local j=\n    local\
    \ k=\n    local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n    local result=\n\
    \    local sorted=\n    local duplicates=\n    local i=\n    local j=\n    local\
    \ k=\n    local length=\n    local result=\n    local sorted=\n    local duplicates=\n\
    \    local i=\n    local j=\n    local k=\n    local length=\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" == \"$element\" ]; then\n            ((count++))\n   \
    \     else\n            sorted=true\n            last=$element\n        fi\n \
    \   done\n    if [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n  \
    \  return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpi92wrfbb.sh: line 24: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n    \
    \    else\n            if [ \"$count\" -gt 1 ]; then\n                sorted=false\n\
    \                break\n            else\n                sorted=true\n      \
    \          last=\"$number\"\n            fi\n        fi\n    done\n    return\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpgm_npci1.sh: line 26: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local number\n  local i\n  local j\n  for number\
    \ in $list; do\n    ((count++))\n    if [ \"$number\" == \"$number\" ] || [ \"\
    $number\" == \"$number\" -o \"$number\" == \"$number\" -o \"$number\" == \"$number\"\
    \ -o \"$number\" == \"$number\" ]; then\n      continue\n    fi\n    if [ \"$count\"\
    \ -gt 1 ]; then\n      sorted=true\n      break\n    fi\n  done\n  if [ \"$sorted\"\
    \ == \"false\" ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local i\n  for i in $list; do\n    case \"$i\" in\n      \"\
    $i\")\n        sorted=true\n        ;;\n      *)\n        sorted=false\n     \
    \   ;;\n    esac\n  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ i j prev cur prev2\n  local sorted=false\n  local count=0\n  for ((i=0; i<${#list};\
    \ i++)); do\n    prev=${list[i]}\n    cur=${list[i+1]}\n    count=$((count+1))\n\
    \    if [ \"$cur\" == \"$prev\" ]; then\n      ((count--))\n      if [ \"$count\"\
    \ -eq 0 ]; then\n        sorted=true\n        break\n      fi\n    fi\n  done\n\
    \  if [ \"$sorted\" == true ]; then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i j prev cur\n    for (( i = 0; i < ${#list}; i++ )); do\n        cur=\"${list[i]}\"\
    \n        j=$(( i + 1 ))\n        while (( j > 0 )) && (( ${list[j]} > cur ));\n\
    \        do\n            list[j-1]=\"${list[j]}\"\n            j=$(( j - 1 ))\n\
    \        done\n        list[j-1]=\"${cur}\"\n    done\n    local count\n    for\
    \ (( i = 0; i < ${#list}; i++ )); do\n        count=$(( count + 1 ))\n    done\n\
    \    (( count > 0 )) && return 0\n    return 1\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgbt67x19.sh: line 14: ((: > cur : syntax error: operand expected
    (error token is "> cur ")

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i count\n    local sorted\n    sorted=false\n    for ((i=0; i<${#list}; i++));\
    \ do\n        count=$((${#list}-1))\n        while (( ${count} > 0 )); do\n  \
    \          if [[ ${list}[${count}] == \"${list}[${count-1}]\" ]]; then\n     \
    \           sorted=true\n                break\n            fi\n            count=${count-1}\n\
    \        done\n        if [[ ${sorted} == false ]]; then\n            sorted=true\n\
    \        fi\n    done\n    echo $sorted\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local item\n    for item in $list; do\n\
    \        if [ \"$item\" == \"$item\" ] || [ \"$item\" == \"$item\" -o \"$item\"\
    \ == \"$item\" -o \"$item\" == \"$item\" -o \"$item\" == \"$item\" -o \"$item\"\
    \ == \"$item\" ]; then\n            ((count++))\n        fi\n    done\n    if\
    \ [ \"$count\" -gt 1 ]; then\n        sorted=false\n    else\n        sorted=true\n\
    \    fi\n    return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdcjy_tw5.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local item\n    for item in $list; do\n\
    \        if [ \"$item\" == \"$list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null;\
    \ then\n            echo \"$item is equal to itself\"\n        fi\n        if\
    \ [ \"$item\" == \"$list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n\
    \            echo \"$item is equal to itself\"\n        fi\n        if [ \"$item\"\
    \ == \"$list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n           \
    \ echo \"$item is equal to itself\"\n        fi\n        if [ \"$item\" == \"\
    $list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n            echo \"\
    $item is equal to itself\"\n        fi\n        if [ \"$item\" == \"$list\" ]\
    \ || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n            echo \"$item is\
    \ equal to itself\"\n        fi\n        if [ \"$item\" == \"$list\" ] || [ \"\
    $item\" == \"$list\" ] 2>/dev/null; then\n            echo \"$item is equal to\
    \ itself\"\n        fi\n        if [ \"$item\" == \"$list\" ] || [ \"$item\" ==\
    \ \"$list\" ] 2>/dev/null; then\n            echo \"$item is equal to itself\"\
    \n        fi\n        if [ \"$item\" == \"$list\" ] || [ \"$item\" == \"$list\"\
    \ ] 2>/dev/null; then\n            echo \"$item is equal to itself\"\n       \
    \ fi\n        if [ \"$item\" == \"$list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null;\
    \ then\n            echo \"$item is equal to itself\"\n        fi\n        if\
    \ [ \"$item\" == \"$list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n\
    \            echo \"$item is equal to itself\"\n        fi\n        if [ \"$item\"\
    \ == \"$list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n           \
    \ echo \"$item is equal to itself\"\n        fi\n        if [ \"$item\" == \"\
    $list\" ] || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n            echo \"\
    $item is equal to itself\"\n        fi\n        if [ \"$item\" == \"$list\" ]\
    \ || [ \"$item\" == \"$list\" ] 2>/dev/null; then\n            echo \"$item is\
    \ equal to itself\"\n        fi\n        if [ \"$item\" == \"$list\" ] || [ \"\
    $item\" == \"$list\" ] 2>/dev/null; then\n            echo \"$item is equal to\
    \ itself\"\n        fi\n        if [ \"$item\" == \"$list\" \n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwbq3gfzt.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpwbq3gfzt.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[$(( i + 1 ))]} ]];\
    \ then\n            (( count++ ))\n        else\n            if (( count > 1 ));\
    \ then\n                sorted=false\n                break\n            else\n\
    \                sorted=true\n                break\n            fi\n        fi\n\
    \    done\n    if [[ ${sorted} == true ]]; then\n        echo true\n    else\n\
    \        echo false\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local sortedCount\n\
    \    local sortedLast\n    local sortedLastCount\n    local sortedLastIndex\n\
    \    local sortedLastIndexCount\n    local sortedLastIndexCount2\n    local sortedLastIndexCount3\n\
    \    local sortedLastIndexCount4\n    local sortedLastIndexCount5\n    local sortedLastIndexCount6\n\
    \    local sortedLastIndexCount7\n    local sortedLastIndexCount8\n    local sortedLastIndexCount9\n\
    \    local sortedLastIndexCount10\n    local sortedLastIndexCount11\n    local\
    \ sortedLastIndexCount12\n    local sortedLastIndexCount13\n    local sortedLastIndexCount14\n\
    \    local sortedLastIndexCount15\n    local sortedLastIndexCount16\n    local\
    \ sortedLastIndexCount17\n    local sortedLastIndexCount18\n    local sortedLastIndexCount19\n\
    \    local sortedLastIndexCount20\n    local sortedLastIndexCount21\n    local\
    \ sortedLastIndexCount22\n    local sortedLastIndexCount23\n    local sortedLastIndexCount24\n\
    \    local sortedLastIndexCount25\n    local sortedLastIndexCount26\n    local\
    \ sortedLastIndexCount27\n    local sortedLastIndexCount28\n    local sortedLastIndexCount29\n\
    \    local sortedLastIndexCount30\n    local sortedLastIndexCount31\n    local\
    \ sortedLastIndexCount32\n    local sortedLastIndexCount33\n    local sortedLastIndexCount34\n\
    \    local sortedLastIndexCount35\n    local sortedLastIndexCount36\n    local\
    \ sortedLastIndexCount37\n    local sortedLastIndexCount38\n    local sortedLastIndexCount39\n\
    \    local sortedLastIndexCount40\n    local sortedLastIndexCount41\n    local\
    \ sortedLastIndexCount42\n    local sortedLastIndexCount43\n    local sortedLastIndexCount44\n\
    \    local sortedLastIndexCount45\n    local sortedLastIndexCount46\n    local\
    \ sortedLastIndexCount47\n    local sortedLastIndexCount48\n    local sortedLastIndexCount49\n\
    \    local sortedLastIndexCount50\n    local sortedLastIndexCount51\n    local\
    \ sortedLastIndexCount52\n    local sortedLastIndexCount53\n    local sortedLastIndexCount54\n\
    \    local sortedLastIndexCount55\n    local sortedLastIndexCount56\n    local\
    \ sortedLastIndexCount57\n    local sortedLastIndexCount58\n    local sortedLastIndex\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for ((i=0;\
    \ i<${#list}; i++)); do\n        if [[ ${list[i]} -gt ${list[i+1]} ]]; then\n\
    \            sorted=true\n            break\n        fi\n    done\n    if [[ ${sorted}\
    \ = true ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnlf6rcm0.sh: line 15: [[: 1 2 3 4 5: syntax error in expression
    (error token is "2 3 4 5")

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local sorted1\n  \
    \  local sorted2\n    local sorted3\n    local sorted4\n    local sorted5\n  \
    \  local sorted6\n    local sorted7\n    local sorted8\n    local sorted9\n  \
    \  local sorted10\n    local sorted11\n    local sorted12\n    local sorted13\n\
    \    local sorted14\n    local sorted15\n    local sorted16\n    local sorted17\n\
    \    local sorted18\n    local sorted19\n    local sorted20\n    local sorted21\n\
    \    local sorted22\n    local sorted23\n    local sorted24\n    local sorted25\n\
    \    local sorted26\n    local sorted27\n    local sorted28\n    local sorted29\n\
    \    local sorted30\n    local sorted31\n    local sorted32\n    local sorted33\n\
    \    local sorted34\n    local sorted35\n    local sorted36\n    local sorted37\n\
    \    local sorted38\n    local sorted39\n    local sorted40\n    local sorted41\n\
    \    local sorted42\n    local sorted43\n    local sorted44\n    local sorted45\n\
    \    local sorted46\n    local sorted47\n    local sorted48\n    local sorted49\n\
    \    local sorted50\n    local sorted51\n    local sorted52\n    local sorted53\n\
    \    local sorted54\n    local sorted55\n    local sorted56\n    local sorted57\n\
    \    local sorted58\n    local sorted59\n    local sorted60\n    local sorted61\n\
    \    local sorted62\n    local sorted63\n    local sorted64\n    local sorted65\n\
    \    local sorted66\n    local sorted67\n    local sorted68\n    local sorted69\n\
    \    local sorted70\n    local sorted71\n    local sorted72\n    local sorted73\n\
    \    local sorted74\n    local sorted75\n    local sorted76\n    local sorted77\n\
    \    local sorted78\n    local sorted79\n    local sorted80\n    local sorted81\n\
    \    local sorted82\n    local sorted83\n    local sorted84\n    local sorted85\n\
    \    local sorted86\n    local sorted87\n    local sorted88\n    local sorted89\n\
    \    local sorted90\n    local sorted91\n    local sorted92\n    local sorted93\n\
    \    local sorted94\n    local sorted95\n    local sorted96\n    local sorted97\n\
    \    local sorted98\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local sorted=0\n    local last\n    local i\n    for (( i=0; i<${#list};\
    \ i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n            ((\
    \ count++ ))\n        else\n            if [[ $sorted -eq 0 ]]; then\n       \
    \         sorted=1\n            fi\n            if [[ $count -eq 1 ]]; then\n\
    \                return 0\n            fi\n        fi\n    done\n    return 1\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local j\n  local sorted\n  local last\n  local last2\n \
    \ local last3\n  local last4\n  local last5\n  local last6\n  local last7\n  local\
    \ last8\n  local last9\n  local last10\n  local last11\n  local last12\n  local\
    \ last13\n  local last14\n  local last15\n  local last16\n  local last17\n  local\
    \ last18\n  local last19\n  local last20\n  local last21\n  local last22\n  local\
    \ last23\n  local last24\n  local last25\n  local last26\n  local last27\n  local\
    \ last28\n  local last29\n  local last30\n  local last31\n  local last32\n  local\
    \ last33\n  local last34\n  local last35\n  local last36\n  local last37\n  local\
    \ last38\n  local last39\n  local last40\n  local last41\n  local last42\n  local\
    \ last43\n  local last44\n  local last45\n  local last46\n  local last47\n  local\
    \ last48\n  local last49\n  local last50\n  local last51\n  local last52\n  local\
    \ last53\n  local last54\n  local last55\n  local last56\n  local last57\n  local\
    \ last58\n  local last59\n  local last60\n  local last61\n  local last62\n  local\
    \ last63\n  local last64\n  local last65\n  local last66\n  local last67\n  local\
    \ last68\n  local last69\n  local last70\n  local last71\n  local last72\n  local\
    \ last73\n  local last74\n  local last75\n  local last76\n  local last77\n  local\
    \ last78\n  local last79\n  local last80\n  local last81\n  local last82\n  local\
    \ last83\n  local last84\n  local last85\n  local last86\n  local last87\n  local\
    \ last88\n  local last89\n  local last90\n  local last91\n  local last92\n  local\
    \ last93\n  local last94\n  local last95\n  local last96\n  local last97\n  local\
    \ last98\n  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq | wc -l)\"\
    \n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" =~ $sorted ]] || return\
    \ 0\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq |\
    \ wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" == \"$sorted\"\
    \ ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort \"$list\")\"\n    local count=\"$(echo \"$sorted\" | uniq |\
    \ wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    return 1\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n    \
    \    else\n            sorted=true\n            last=\"$number\"\n        fi\n\
    \    done\n    if [ \"$sorted\" = true ]; then\n        return 0\n    else\n \
    \       return 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i imax\n    local sorted=false\n    local dupes=0\n    local num\n    local\
    \ nums\n    local nums_sorted\n    local nums_sorted_tmp\n    local nums_sorted_tmp2\n\
    \    local nums_sorted_tmp3\n    local nums_sorted_tmp4\n    local nums_sorted_tmp5\n\
    \    local nums_sorted_tmp6\n    local nums_sorted_tmp7\n    local nums_sorted_tmp8\n\
    \    local nums_sorted_tmp9\n    local nums_sorted_tmp10\n    local nums_sorted_tmp11\n\
    \    local nums_sorted_tmp12\n    local nums_sorted_tmp13\n    local nums_sorted_tmp14\n\
    \    local nums_sorted_tmp15\n    local nums_sorted_tmp16\n    local nums_sorted_tmp17\n\
    \    local nums_sorted_tmp18\n    local nums_sorted_tmp19\n    local nums_sorted_tmp20\n\
    \    local nums_sorted_tmp21\n    local nums_sorted_tmp22\n    local nums_sorted_tmp23\n\
    \    local nums_sorted_tmp24\n    local nums_sorted_tmp25\n    local nums_sorted_tmp26\n\
    \    local nums_sorted_tmp27\n    local nums_sorted_tmp28\n    local nums_sorted_tmp29\n\
    \    local nums_sorted_tmp30\n    local nums_sorted_tmp31\n    local nums_sorted_tmp32\n\
    \    local nums_sorted_tmp33\n    local nums_sorted_tmp34\n    local nums_sorted_tmp35\n\
    \    local nums_sorted_tmp36\n    local nums_sorted_tmp37\n    local nums_sorted_tmp38\n\
    \    local nums_sorted_tmp39\n    local nums_sorted_tmp40\n    local nums_sorted_tmp41\n\
    \    local nums_sorted_tmp42\n    local nums_sorted_tmp43\n    local nums_sorted_tmp44\n\
    \    local nums_sorted_tmp45\n    local nums_sorted_tmp46\n    local nums_sorted_tmp47\n\
    \    local nums_sorted_tmp48\n    local nums_sorted_tmp49\n    local nums_sorted_tmp50\n\
    \    local nums_sorted_tmp51\n    local nums_sorted_tmp52\n    local nums_sorted_tmp53\n\
    \    local nums_sorted_tmp54\n    local nums_sorted_tmp55\n    local nums_sorted_tmp56\n\
    \    local nums_sorted_tmp57\n    local nums_sorted_tmp58\n    local nums_sorted_tmp59\n\
    \    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local lastNumber\n  local lastNumberCount\n\
    \  local lastNumberIndex\n  local lastNumberCountIndex\n  local lastNumberIndexCount\n\
    \  local lastNumberIndexCountIndex\n  local lastNumberIndexCountIndexIndex\n \
    \ local lastNumberIndexCountIndexIndexCount\n  local lastNumberIndexCountIndexCountIndex\n\
    \  local lastNumberIndexCountIndexCountIndexCount\n  local lastNumberIndexCountIndexCountIndexCountIndex\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCount\n  local lastNumberIndexCountIndexCountIndexCountIndexCountIndex\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndex\n  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCount\n  local\
    \ lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumberIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \  local lastNumber\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local sorted\n    local last\n    local last2\n    local\
    \ last3\n    local last4\n    local last5\n    local last6\n    local last7\n\
    \    local last8\n    local last9\n    local last10\n    local last11\n    local\
    \ last12\n    local last13\n    local last14\n    local last15\n    local last16\n\
    \    local last17\n    local last18\n    local last19\n    local last20\n    local\
    \ last21\n    local last22\n    local last23\n    local last24\n    local last25\n\
    \    local last26\n    local last27\n    local last28\n    local last29\n    local\
    \ last30\n    local last31\n    local last32\n    local last33\n    local last34\n\
    \    local last35\n    local last36\n    local last37\n    local last38\n    local\
    \ last39\n    local last40\n    local last41\n    local last42\n    local last43\n\
    \    local last44\n    local last45\n    local last46\n    local last47\n    local\
    \ last48\n    local last49\n    local last50\n    local last51\n    local last52\n\
    \    local last53\n    local last54\n    local last55\n    local last56\n    local\
    \ last57\n    local last58\n    local last59\n    local last60\n    local last61\n\
    \    local last62\n    local last63\n    local last64\n    local last65\n    local\
    \ last66\n    local last67\n    local last68\n    local last69\n    local last70\n\
    \    local last71\n    local last72\n    local last73\n    local last74\n    local\
    \ last75\n    local last76\n    local last77\n    local last78\n    local last79\n\
    \    local last80\n    local last81\n    local last82\n    local last83\n    local\
    \ last84\n    local last85\n    local last86\n    local last87\n    local last88\n\
    \    local last89\n    local last90\n    local last91\n    local last92\n    local\
    \ last93\n    local last94\n    local last95\n    local last96\n    local last97\n\
    \    local last98\n    local last99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i count\n    for ((i=1; i<${#list}; i++)); do\n        count=$((${#list} + 1\
    \ - i))\n        if [[ ${list[i]} == ${list[i-1]} ]]; then\n            (( count\
    \ > 1 )) && return 0\n        fi\n    done\n    return 1\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    ((count++))\n    if [ \"$i\" == \"$last\" ]; then\n      ((count--))\n  \
    \    continue\n    fi\n    last=\"$i\"\n  done\n  if [ \"$count\" -eq 0 ]; then\n\
    \    sorted=true\n  else\n    sorted=false\n  fi\n  echo \"$sorted\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local sorted2\n  \
    \  local sorted3\n    local sorted4\n    local sorted5\n    local sorted6\n  \
    \  local sorted7\n    local sorted8\n    local sorted9\n    local sorted10\n \
    \   local sorted11\n    local sorted12\n    local sorted13\n    local sorted14\n\
    \    local sorted15\n    local sorted16\n    local sorted17\n    local sorted18\n\
    \    local sorted19\n    local sorted20\n    local sorted21\n    local sorted22\n\
    \    local sorted23\n    local sorted24\n    local sorted25\n    local sorted26\n\
    \    local sorted27\n    local sorted28\n    local sorted29\n    local sorted30\n\
    \    local sorted31\n    local sorted32\n    local sorted33\n    local sorted34\n\
    \    local sorted35\n    local sorted36\n    local sorted37\n    local sorted38\n\
    \    local sorted39\n    local sorted40\n    local sorted41\n    local sorted42\n\
    \    local sorted43\n    local sorted44\n    local sorted45\n    local sorted46\n\
    \    local sorted47\n    local sorted48\n    local sorted49\n    local sorted50\n\
    \    local sorted51\n    local sorted52\n    local sorted53\n    local sorted54\n\
    \    local sorted55\n    local sorted56\n    local sorted57\n    local sorted58\n\
    \    local sorted59\n    local sorted60\n    local sorted61\n    local sorted62\n\
    \    local sorted63\n    local sorted64\n    local sorted65\n    local sorted66\n\
    \    local sorted67\n    local sorted68\n    local sorted69\n    local sorted70\n\
    \    local sorted71\n    local sorted72\n    local sorted73\n    local sorted74\n\
    \    local sorted75\n    local sorted76\n    local sorted77\n    local sorted78\n\
    \    local sorted79\n    local sorted80\n    local sorted81\n    local sorted82\n\
    \    local sorted83\n    local sorted84\n    local sorted85\n    local sorted86\n\
    \    local sorted87\n    local sorted88\n    local sorted89\n    local sorted90\n\
    \    local sorted91\n    local sorted92\n    local sorted93\n    local sorted94\n\
    \    local sorted95\n    local sorted96\n    local sorted97\n    local sorted98\n\
    \    local sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n\n    sorted=false\n \
    \   last=-1\n    count=0\n    for i in $list; do\n        if [ \"$last\" -eq \"\
    $i\" ]; then\n            ((count++))\n        else\n            if [ \"$count\"\
    \ -gt 1 ]; then\n                sorted=false\n                break\n       \
    \     else\n                last=\"$i\"\n                count=1\n           \
    \ fi\n        fi\n    done\n    return $sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpildyujpc.sh: line 31: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\n  local i\n  for ((i=1; i<${#list}; i++)); do\n    sorted+=\"${list[i]}\
    \ \"\n  done\n  sorted+=\"${list[${#list}-1]}\"\n  echo \"$sorted\" | sort -n\
    \ | uniq -c | grep -q \" \"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local sorted=0\n    local last\n    local i\n    for (( i=0; i<${#list};\
    \ i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n            ((\
    \ count++ ))\n        else\n            if (( count > 1 )); then\n           \
    \     return 0\n            fi\n            sorted=1\n            last=${list[i]}\n\
    \        fi\n    done\n    if [[ ${sorted} == 1 ]]; then\n        return 1\n \
    \   else\n        return 0\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local j\n    local sorted\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n\
    \    local tmp98\n    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" != \"$element\" ]; then\n            sorted=true\n   \
    \     fi\n        count=$((count+1))\n        last=$element\n    done\n    if\
    \ [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n    return $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpexeyds3g.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local j\n    local sorted\n    local sorted1\n    local\
    \ sorted2\n    local sorted3\n    local sorted4\n    local sorted5\n    local\
    \ sorted6\n    local sorted7\n    local sorted8\n    local sorted9\n    local\
    \ sorted10\n    local sorted11\n    local sorted12\n    local sorted13\n    local\
    \ sorted14\n    local sorted15\n    local sorted16\n    local sorted17\n    local\
    \ sorted18\n    local sorted19\n    local sorted20\n    local sorted21\n    local\
    \ sorted22\n    local sorted23\n    local sorted24\n    local sorted25\n    local\
    \ sorted26\n    local sorted27\n    local sorted28\n    local sorted29\n    local\
    \ sorted30\n    local sorted31\n    local sorted32\n    local sorted33\n    local\
    \ sorted34\n    local sorted35\n    local sorted36\n    local sorted37\n    local\
    \ sorted38\n    local sorted39\n    local sorted40\n    local sorted41\n    local\
    \ sorted42\n    local sorted43\n    local sorted44\n    local sorted45\n    local\
    \ sorted46\n    local sorted47\n    local sorted48\n    local sorted49\n    local\
    \ sorted50\n    local sorted51\n    local sorted52\n    local sorted53\n    local\
    \ sorted54\n    local sorted55\n    local sorted56\n    local sorted57\n    local\
    \ sorted58\n    local sorted59\n    local sorted60\n    local sorted61\n    local\
    \ sorted62\n    local sorted63\n    local sorted64\n    local sorted65\n    local\
    \ sorted66\n    local sorted67\n    local sorted68\n    local sorted69\n    local\
    \ sorted70\n    local sorted71\n    local sorted72\n    local sorted73\n    local\
    \ sorted74\n    local sorted75\n    local sorted76\n    local sorted77\n    local\
    \ sorted78\n    local sorted79\n    local sorted80\n    local sorted81\n    local\
    \ sorted82\n    local sorted83\n    local sorted84\n    local sorted85\n    local\
    \ sorted86\n    local sorted87\n    local sorted88\n    local sorted89\n    local\
    \ sorted90\n    local sorted91\n    local sorted92\n    local sorted93\n    local\
    \ sorted94\n    local sorted95\n    local sorted96\n    local sorted97\n    local\
    \ sorted98\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort \"$list\")\"\n  local count=\"$(echo \"$sorted\" | uniq | wc\
    \ -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ count=0\n    local sorted=0\n    local last\n    local i\n    for (( i=0; i<${#list};\
    \ i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n            ((\
    \ count++ ))\n        else\n            if (( count > 1 )); then\n           \
    \     return 0\n            else\n                sorted=1\n            fi\n \
    \       fi\n    done\n    if (( sorted == 0 )); then\n        return 1\n    else\n\
    \        return 0\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    local i\n    for (( i=0;\
    \ i<${#list}; i++ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n\
    \            (( count++ ))\n        else\n            if (( count > 1 )); then\n\
    \                sorted=false\n                break\n            fi\n       \
    \     sorted=true\n            last=${list[i]}\n        fi\n    done\n    if [[\
    \ ${sorted} == true ]]; then\n        echo true\n    else\n        echo false\n\
    \    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    ((count++))\n    if [ \"$i\" == \"$last\" ]; then\n      ((count--))\n  \
    \    if [ \"$count\" -eq 0 ]; then\n        sorted=true\n        break\n     \
    \ fi\n    else\n      last=\"$i\"\n    fi\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local sorted=0\n    local last\n    local i\n    local j\n    local\
    \ k\n    local tmp\n\n    for (( i=0; i<${#list}; i++ )); do\n        sorted=0\n\
    \        last=\"${list[i]}\"\n        for (( j=i+1; j<${#list}; j++ )); do\n \
    \           if [ \"${list[i]}\" -gt \"${list[j]}\" ]; then\n                sorted=1\n\
    \                break\n            fi\n        done\n        if [ \"${sorted}\"\
    \ -eq 1 ]; then\n            count=$((count+1))\n        else\n            sorted=0\n\
    \        fi\n    done\n    if [ \"${count}\" -gt 1 ]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n    [ \"$count\" -eq 1 ] || return 1\n    local last=\"$sorted\"\
    \n    while read -r line; do\n        [ \"$line\" != \"$last\" ] && [ \"$line\"\
    \ -ne \"$last\" ] && return 0\n    done <<< \"$sorted\"\n    return 1\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local tmp\n    sorted=false\n\
    \    for ((i = 0; i < ${#list}; i++)); do\n        count=0\n        last=${list[i]}\n\
    \        for ((j = i + 1; j < ${#list}; j++)); do\n            if [[ ${list[i]}\
    \ -eq ${list[j]} ]]; then\n                count=$((count+1))\n              \
    \  if [[ ${count} -gt 1 ]]; then\n                    sorted=true\n          \
    \          break\n                fi\n            else\n                break\n\
    \            fi\n        done\n        if [[ ${sorted} = false ]]; then\n    \
    \        sorted=true\n        fi\n    done\n    return ${sorted}\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcdjx5ad8.sh: line 34: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ i count\n  local sorted\n  sorted=false\n  for i in $list; do\n    count=$(echo\
    \ $list | tr \" \" \"\\n\" | sort | uniq -c | wc -l)\n    if [ \"$count\" -gt\
    \ 1 ]; then\n      sorted=true\n      break\n    fi\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i count\n    local sorted\n    local last\n    sorted=false\n    last=-1\n \
    \   for (( i=0; i<${#list}; i++ )); do\n        if [[ ${list[i]} -gt ${last} ]];\
    \ then\n            sorted=true\n            last=${list[i]}\n        elif [[\
    \ ${list[i]} -eq ${last} ]]; then\n            (( count++ ))\n            if [[\
    \ ${count} -gt 1 ]]; then\n                sorted=false\n                break\n\
    \            fi\n        fi\n    done\n    return ${sorted}\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3rp431tt.sh: line 27: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local element\n    for element in $list;\
    \ do\n        if [ \"$element\" == \"$list\" ]; then\n            sorted=true\n\
    \            break\n        fi\n        if [ \"$element\" == \"$count\" ]; then\n\
    \            sorted=false\n            break\n        fi\n        ((count++))\n\
    \    done\n    echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local i\n    local count\n    local last\n    local lastCount\n\
    \    local lastNum\n    local num\n    local numCount\n    local numCount2\n \
    \   local numCount3\n    local numCount4\n    local numCount5\n    local numCount6\n\
    \    local numCount7\n    local numCount8\n    local numCount9\n    local numCount10\n\
    \    local numCount11\n    local numCount12\n    local numCount13\n    local numCount14\n\
    \    local numCount15\n    local numCount16\n    local numCount17\n    local numCount18\n\
    \    local numCount19\n    local numCount20\n    local numCount21\n    local numCount22\n\
    \    local numCount23\n    local numCount24\n    local numCount25\n    local numCount26\n\
    \    local numCount27\n    local numCount28\n    local numCount29\n    local numCount30\n\
    \    local numCount31\n    local numCount32\n    local numCount33\n    local numCount34\n\
    \    local numCount35\n    local numCount36\n    local numCount37\n    local numCount38\n\
    \    local numCount39\n    local numCount40\n    local numCount41\n    local numCount42\n\
    \    local numCount43\n    local numCount44\n    local numCount45\n    local numCount46\n\
    \    local numCount47\n    local numCount48\n    local numCount49\n    local numCount50\n\
    \    local numCount51\n    local numCount52\n    local numCount53\n    local numCount54\n\
    \    local numCount55\n    local numCount56\n    local numCount57\n    local numCount58\n\
    \    local numCount59\n    local numCount60\n    local numCount61\n    local numCount62\n\
    \    local numCount63\n    local numCount64\n    local numCount65\n    local numCount66\n\
    \    local numCount67\n    local numCount68\n    local numCount69\n    local numCount70\n\
    \    local numCount71\n    local numCount72\n    local numCount73\n    local numCount74\n\
    \    local numCount75\n    local numCount76\n    local numCount77\n    local numCount78\n\
    \    local numCount79\n    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local item\n    for item in $list; do\n\
    \        ((count++))\n        if [ \"$item\" -gt \"$count\" ]; then\n        \
    \    sorted=true\n            break\n        fi\n    done\n    if [ \"$sorted\"\
    \ = true ]; then\n        echo \"$list is sorted\"\n    else\n        echo \"\
    $list is not sorted\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local i\n    for (( i=0; i<${#list}; i++\
    \ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n            (( count++\
    \ ))\n        fi\n    done\n    if [[ ${count} -gt 1 ]]; then\n        sorted=true\n\
    \    fi\n    return ${sorted}\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa3d16zfk.sh: line 21: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | wc\
    \ -w)\"\n    local count2=\"$(echo \"$list\" | uniq | wc -w)\"\n    local count3=\"\
    $(echo \"$list\" | uniq -d | wc -w)\"\n    local count4=\"$(echo \"$list\" | uniq\
    \ -u)\"\n    local count5=\"$(echo \"$list\" | uniq -u -d)\"\n    local count6=\"\
    $(echo \"$list\" | uniq -u -u)\"\n    local count7=\"$(echo \"$list\" | uniq -u\
    \ -u -d)\"\n    local count8=\"$(echo \"$list\" | uniq -u -u -u)\"\n    local\
    \ count9=\"$(echo \"$list\" | uniq -u -u -u -d)\"\n    local count10=\"$(echo\
    \ \"$list\" | uniq -u -u -u -u -d)\"\n    local count11=\"$(echo \"$list\" | uniq\
    \ -u -u -u -u -u -d)\"\n    local count12=\"$(echo \"$list\" | uniq -u -u -u -u\
    \ -u -u)\"\n    local count13=\"$(echo \"$list\" | uniq -u -u -u -u -u -u -d)\"\
    \n    local count14=\"$(echo \"$list\" | uniq -u -u -u -u -u -u -u -u)\"\n   \
    \ local count15=\"$(echo \"$list\" | uniq -u -u -u -u -u -u -u -u -d)\"\n    local\
    \ count16=\"$(echo \"$list\" | uniq -u -u -u -u -u -u -u -u -u)\"\n    local count17=\"\
    $(echo \"$list\" | uniq -u -u -u -u -u -u -u -u -u -u -d)\"\n    local count18=\"\
    $(echo \"$list\" | uniq -u -u -u -u -u -u -u -u -u -u -u -u)\"\n    local count19=\"\
    $(echo \"$list\" | uniq -u -u -u -u -u -u -u -u -u -u -u -u -u -u -u -u -u -u\
    \ -u -u -u -u -u -u -u -u -u -u\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_bxgtbzd.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmp_bxgtbzd.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local i count\n\
    \  local sorted\n  sorted=false\n  for i in $list; do\n    count=0\n    while\
    \ [ $i -le $(( i + 1 )) ]; do\n      if [ $i -eq $(( i + 1 )) ]; then\n      \
    \  sorted=true\n        break\n      fi\n      (( count = count + 1 ))\n     \
    \ if [ $count -gt 1 ]; then\n        sorted=false\n        break\n      fi\n \
    \     i=$(( i + 1 ))\n    done\n  done\n  echo $sorted\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n    \
    \    else\n            sorted=true\n            last=\"$number\"\n        fi\n\
    \    done\n    if [ \"$sorted\" = true ]; then\n        return 0\n    else\n \
    \       return 1\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\n  local i\n  local count\n  local last\n  local lastcount\n  local\
    \ lastvalue\n  local lastindex\n  local lastindex2\n  local lastindex3\n  local\
    \ lastindex4\n  local lastindex5\n  local lastindex6\n  local lastindex7\n  local\
    \ lastindex8\n  local lastindex9\n  local lastindex10\n  local lastindex11\n \
    \ local lastindex12\n  local lastindex13\n  local lastindex14\n  local lastindex15\n\
    \  local lastindex16\n  local lastindex17\n  local lastindex18\n  local lastindex19\n\
    \  local lastindex20\n  local lastindex21\n  local lastindex22\n  local lastindex23\n\
    \  local lastindex24\n  local lastindex25\n  local lastindex26\n  local lastindex27\n\
    \  local lastindex28\n  local lastindex29\n  local lastindex30\n  local lastindex31\n\
    \  local lastindex32\n  local lastindex33\n  local lastindex34\n  local lastindex35\n\
    \  local lastindex36\n  local lastindex37\n  local lastindex38\n  local lastindex39\n\
    \  local lastindex40\n  local lastindex41\n  local lastindex42\n  local lastindex43\n\
    \  local lastindex44\n  local lastindex45\n  local lastindex46\n  local lastindex47\n\
    \  local lastindex48\n  local lastindex49\n  local lastindex50\n  local lastindex51\n\
    \  local lastindex52\n  local lastindex53\n  local lastindex54\n  local lastindex55\n\
    \  local lastindex56\n  local lastindex57\n  local lastindex58\n  local lastindex59\n\
    \  local lastindex60\n  local lastindex61\n  local lastindex62\n  local lastindex63\n\
    \  local lastindex64\n  local lastindex65\n  local lastindex66\n  local lastindex67\n\
    \  local lastindex68\n  local lastindex69\n  local lastindex70\n  local lastindex71\n\
    \  local lastindex72\n  local lastindex73\n  local lastindex74\n  local lastindex75\n\
    \  local lastindex76\n  local lastindex77\n  local lastindex78\n  local lastindex79\n\
    \  local lastindex80\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\" == \"$sorted\"\
    \ ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local i\n    for (( i=0; i<${#list}; i++\
    \ )); do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n            (( count++\
    \ ))\n        else\n            sorted=true\n            break\n        fi\n \
    \   done\n    if [[ ${count} -gt 1 ]]; then\n        sorted=false\n    fi\n  \
    \  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for number in $list; do\n\
    \        if [ \"$number\" == \"$last\" ]; then\n            ((count++))\n    \
    \    else\n            sorted=true\n            last=\"$number\"\n        fi\n\
    \    done\n    if [ \"$sorted\" = false ]; then\n        return false\n    fi\n\
    \    if [ \"$count\" -gt 1 ]; then\n        return false\n    fi\n    return true\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0pcq2zt_.sh: line 27: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local i\n  for i in $list; do\n    ((count++))\n\
    \    if [ \"$i\" == \"$list\" ]; then\n      sorted=true\n      break\n    fi\n\
    \  done\n  if [ \"$sorted\" = true ]; then\n    return 0\n  else\n    return 1\n\
    \  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local last=-1\n  local i\n  for i in $numbers;\
    \ do\n    count=$((count+1))\n    if [ \"$last\" != \"$i\" ]; then\n      last=$i\n\
    \      sorted=true\n    fi\n  done\n  if [ \"$count\" -gt 1 ]; then\n    return\
    \ 0\n  else\n    return $sorted\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpplrm9sn_.sh: line 24: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local i\n    for (( i=0; i<${#list}; i++\
    \ )); do\n        if [[ ${list[$i]} -gt ${list[$((i+1))]} ]]; then\n         \
    \   sorted=true\n        fi\n        count=$((count+1))\n    done\n    if [[ ${count}\
    \ -gt 1 ]]; then\n        sorted=false\n    fi\n    echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_095xcdi.sh: line 14: [[: 1 2 3 4 5: syntax error in expression
    (error token is "2 3 4 5")

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local last\n  local sorted\n  local sorted2\n  local sorted3\n\
    \  local sorted4\n  local sorted5\n  local sorted6\n  local sorted7\n  local sorted8\n\
    \  local sorted9\n  local sorted10\n  local sorted11\n  local sorted12\n  local\
    \ sorted13\n  local sorted14\n  local sorted15\n  local sorted16\n  local sorted17\n\
    \  local sorted18\n  local sorted19\n  local sorted20\n  local sorted21\n  local\
    \ sorted22\n  local sorted23\n  local sorted24\n  local sorted25\n  local sorted26\n\
    \  local sorted27\n  local sorted28\n  local sorted29\n  local sorted30\n  local\
    \ sorted31\n  local sorted32\n  local sorted33\n  local sorted34\n  local sorted35\n\
    \  local sorted36\n  local sorted37\n  local sorted38\n  local sorted39\n  local\
    \ sorted40\n  local sorted41\n  local sorted42\n  local sorted43\n  local sorted44\n\
    \  local sorted45\n  local sorted46\n  local sorted47\n  local sorted48\n  local\
    \ sorted49\n  local sorted50\n  local sorted51\n  local sorted52\n  local sorted53\n\
    \  local sorted54\n  local sorted55\n  local sorted56\n  local sorted57\n  local\
    \ sorted58\n  local sorted59\n  local sorted60\n  local sorted61\n  local sorted62\n\
    \  local sorted63\n  local sorted64\n  local sorted65\n  local sorted66\n  local\
    \ sorted67\n  local sorted68\n  local sorted69\n  local sorted70\n  local sorted71\n\
    \  local sorted72\n  local sorted73\n  local sorted74\n  local sorted75\n  local\
    \ sorted76\n  local sorted77\n  local sorted78\n  local sorted79\n  local sorted80\n\
    \  local sorted81\n  local sorted82\n  local sorted83\n  local sorted84\n  local\
    \ sorted85\n  local sorted86\n  local sorted87\n  local sorted88\n  local sorted89\n\
    \  local sorted90\n  local sorted91\n  local sorted92\n  local sorted93\n  local\
    \ sorted94\n  local sorted95\n  local sorted96\n  local sorted97\n  local sorted98\n\
    \  local sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local last=\n  local i\n  for i in $numbers;\
    \ do\n    if [ \"$last\" != \"$i\" ]; then\n      last=$i\n      sorted=true\n\
    \    fi\n    count=$((count+1))\n  done\n  if [ \"$count\" -gt 1 ]; then\n   \
    \ return 0\n  else\n    return $sorted\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6hiyle20.sh: line 24: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i prev cur count\n    count=0\n    for ((i=0; i<${#list}; i++)); do\n      \
    \  cur=${list[i]}\n        if [[ ${cur} == ${prev} ]]; then\n            ((count++))\n\
    \        else\n            if [[ ${count} -gt 1 ]]; then\n                return\
    \ 0\n            fi\n            count=1\n        fi\n        prev=${cur}\n  \
    \  done\n    return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local numbers=$1\n    local\
    \ sorted=false\n    local count=0\n    local last=-1\n    local lastCount=0\n\
    \    local lastLast=-1\n    for number in $numbers; do\n        if [ \"$number\"\
    \ -gt \"$last\" ];then\n            sorted=true\n        fi\n        count=$((count+1))\n\
    \        if [ \"$count\" -gt \"$lastCount\" ];then\n            sorted=false\n\
    \        fi\n        last=$number\n        lastCount=$count\n        lastLast=$last\n\
    \    done\n    return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpllujsgvo.sh: line 27: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local last\n    local i\n    local j\n    local sorted\n\n    sorted=false\n\
    \    for ((i=0; i<${#list}; i++)); do\n        if [[ ${list[i]} == ${list[i+1]}\
    \ ]]; then\n            ((count++))\n        else\n            if [[ ${count}\
    \ -gt 1 ]]; then\n                sorted=false\n                break\n      \
    \      fi\n            count=1\n            last=${list[i]}\n        fi\n    done\n\
    \n    if [[ ${count} -gt 1 ]]; then\n        sorted=false\n    fi\n\n    echo\
    \ \"${sorted}\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ i count\n    for ((i=1; i<${#list}; i++)); do\n        count=$((${list[i]}+1))\n\
    \        if [[ ${list[i]} -eq ${list[i-1]} ]]; then\n            count=$((${count}-1))\n\
    \        fi\n        if [[ ${count} -eq 0 ]]; then\n            echo \"True\"\n\
    \            return\n        fi\n    done\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ count\n  local i\n  local sorted\n  sorted=false\n  for i in $list; do\n   \
    \ count=$(echo $i | wc -c)\n    if [ \"$count\" -gt 1 ]; then\n      sorted=true\n\
    \      break\n    fi\n  done\n  if [ \"$sorted\" = true ]; then\n    return 0\n\
    \  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq | wc\
    \ -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\" == \"$sorted\"\
    \ ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local last\n    for element in $list; do\n\
    \        if [ \"$last\" != \"$element\" ]; then\n            sorted=true\n   \
    \     fi\n        count=$((count+1))\n        last=$element\n    done\n    if\
    \ [ \"$count\" -gt 1 ]; then\n        sorted=false\n    fi\n    return $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpexeyds3g.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=false\n\
    \  local count=0\n  local last\n  local i\n  for ((i=0; i<${#list}; i++)); do\n\
    \    last=${list[i]}\n    count=$((count+1))\n    if [[ $count -gt 1 ]]; then\n\
    \      if [[ $sorted ]]; then\n        sorted=false\n        break\n      fi\n\
    \    fi\n    if [[ $last -gt $last ]]; then\n      sorted=true\n    fi\n  done\n\
    \  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local duplicates=0\n  local number\n  local i\n  local j\n \
    \ local k\n  local count\n  local tmp\n  local tmp2\n  local tmp3\n  local tmp4\n\
    \  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local tmp9\n  local\
    \ tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n  local tmp15\n\
    \  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n  local tmp20\n \
    \ local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local tmp25\n  local\
    \ tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n  local tmp31\n\
    \  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n  local tmp36\n \
    \ local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local tmp41\n  local\
    \ tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n  local tmp47\n\
    \  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n  local tmp52\n \
    \ local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local tmp57\n  local\
    \ tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n  local tmp63\n\
    \  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n  local tmp68\n \
    \ local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local tmp73\n  local\
    \ tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n  local tmp79\n\
    \  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n  local tmp84\n \
    \ local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local tmp89\n  local\
    \ tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local tmp94\n  local tmp95\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for i in $list; do\n\
    \    ((count++))\n    if [ \"$last\" != \"$i\" ]; then\n      if [ \"$sorted\"\
    \ = false ]; then\n        sorted=true\n      else\n        sorted=false\n   \
    \     break\n      fi\n    fi\n    last=\"$i\"\n  done\n  if [ \"$sorted\" = false\
    \ ]; then\n    return 1\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ i j prev cur count\n    count=0\n    for ((i=0; i<${#list}; i++)); do\n    \
    \    cur=\"${list[i]}\"\n        j=$((i+1))\n        while ((j<${#list}) && (\"\
    ${list[j]}\" == \"${cur}\")); do\n            ((j++))\n        done\n        if\
    \ ((j-i) > 1); then\n            ((count++))\n        fi\n        if ((count >\
    \ 1)); then\n            return 1\n        fi\n        prev=\"${list[i]}\"\n \
    \       list[i]=\"${list[j]}\"\n        list[j]=\"${cur}\"\n    done\n    if ((count\
    \ > 1)); then\n        return 0\n    fi\n    return 1\n}\n\ncandidate() {\n  \
    \  is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplqf5vekh.sh: line 15: j: command not found

    /tmp/tmplqf5vekh.sh: line 18: j-i: command not found

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  for (( i=0; i<${#numbers[@]};\
    \ i++ )); do\n    last=${numbers[$i]}\n    count=$(( count+1 ))\n    if [ \"$last\"\
    \ != \"$numbers[$(( i-1 ))]\" ]; then\n      if [ \"$count\" -gt 1 ]; then\n \
    \       sorted=true\n        break\n      fi\n    fi\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=$1\n  local\
    \ sorted=false\n  local count=0\n  local last=-1\n  local i\n  for (( i=0; i<${#numbers};\
    \ i++ )); do\n    (( count++ ))\n    if [[ ${numbers[i]} == ${last} ]]; then\n\
    \      continue\n    fi\n    last=${numbers[i]}\n    sorted=true\n  done\n  if\
    \ [[ ${count} -gt 1 ]]; then\n    return 0\n  else\n    return ${sorted}\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9u2tk7ds.sh: line 25: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count=0\n    local sorted=0\n    local i\n    for (( i=0; i<${#list}; i++ ));\
    \ do\n        if [[ ${list[i]} == ${list[i+1]} ]]; then\n            (( count++\
    \ ))\n        else\n            if (( count > 1 )); then\n                return\
    \ 0\n            else\n                sorted=1\n            fi\n        fi\n\
    \    done\n    if (( sorted == 0 )); then\n        return 1\n    else\n      \
    \  return 0\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\" | uniq\
    \ | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" == \"$sorted\"\
    \ ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\" | uniq\
    \ -c | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\" == \"\
    $sorted\" ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=false\n  local count=0\n  local last\n  local i\n  local j\n  local k\n\
    \  local tmp\n  local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local\
    \ tmp6\n  local tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n\
    \  local tmp12\n  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n \
    \ local tmp17\n  local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local\
    \ tmp22\n  local tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n\
    \  local tmp28\n  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n \
    \ local tmp33\n  local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local\
    \ tmp38\n  local tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n\
    \  local tmp44\n  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n \
    \ local tmp49\n  local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local\
    \ tmp54\n  local tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n\
    \  local tmp60\n  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n \
    \ local tmp65\n  local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local\
    \ tmp70\n  local tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n\
    \  local tmp76\n  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n \
    \ local tmp81\n  local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local\
    \ tmp86\n  local tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n\
    \  local tmp92\n  local tmp93\n  local tmp94\n  local tmp95\n  local tmp96\n\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034898
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ count\n    local i\n    local last\n    local sorted\n    local sorted2\n  \
    \  local sorted3\n    local sorted4\n    local sorted5\n    local sorted6\n  \
    \  local sorted7\n    local sorted8\n    local sorted9\n    local sorted10\n \
    \   local sorted11\n    local sorted12\n    local sorted13\n    local sorted14\n\
    \    local sorted15\n    local sorted16\n    local sorted17\n    local sorted18\n\
    \    local sorted19\n    local sorted20\n    local sorted21\n    local sorted22\n\
    \    local sorted23\n    local sorted24\n    local sorted25\n    local sorted26\n\
    \    local sorted27\n    local sorted28\n    local sorted29\n    local sorted30\n\
    \    local sorted31\n    local sorted32\n    local sorted33\n    local sorted34\n\
    \    local sorted35\n    local sorted36\n    local sorted37\n    local sorted38\n\
    \    local sorted39\n    local sorted40\n    local sorted41\n    local sorted42\n\
    \    local sorted43\n    local sorted44\n    local sorted45\n    local sorted46\n\
    \    local sorted47\n    local sorted48\n    local sorted49\n    local sorted50\n\
    \    local sorted51\n    local sorted52\n    local sorted53\n    local sorted54\n\
    \    local sorted55\n    local sorted56\n    local sorted57\n    local sorted58\n\
    \    local sorted59\n    local sorted60\n    local sorted61\n    local sorted62\n\
    \    local sorted63\n    local sorted64\n    local sorted65\n    local sorted66\n\
    \    local sorted67\n    local sorted68\n    local sorted69\n    local sorted70\n\
    \    local sorted71\n    local sorted72\n    local sorted73\n    local sorted74\n\
    \    local sorted75\n    local sorted76\n    local sorted77\n    local sorted78\n\
    \    local sorted79\n    local sorted80\n    local sorted81\n    local sorted82\n\
    \    local sorted83\n    local sorted84\n    local sorted85\n    local sorted86\n\
    \    local sorted87\n    local sorted88\n    local sorted89\n    local sorted90\n\
    \    local sorted91\n    local sorted92\n    local sorted93\n    local sorted94\n\
    \    local sorted95\n    local sorted96\n    local sorted97\n    local sorted98\n\
    \    local sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034897
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ sorted=false\n    local count=0\n    local number\n    for number in $list;\
    \ do\n        if [ \"$sorted\" == \"true\" ]; then\n            sorted=false\n\
    \        else\n            if [ \"$number\" == \"$number\" ]; then\n         \
    \       count=$((count+1))\n            else\n                if [ \"$count\"\
    \ -gt 1 ]; then\n                    sorted=true\n                fi\n       \
    \     fi\n        fi\n    done\n    return $sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj8tu48u4.sh: line 26: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660034898
