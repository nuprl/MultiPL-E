language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in \"${words[@]}\"; do\n    word=\"${i}\"\n    count=0\n \
    \   while [ \"${word}\" != \"${words[$((count++))]}\" ]; do\n      word=\"${words[$((count++))]}\"\
    \n    done\n    if [ \"${count}\" -gt \"${max}\" ]; then\n      max=\"${count}\"\
    \n      word=\"${words[$((count-1))]}\"\n    fi\n  done\n  echo \"${word}\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  for word\
    \ in $words; do\n    local count=0\n    for char in $word; do\n      ((count++))\n\
    \    done\n    if [ \"$count\" -gt \"$max\" ]; then\n      max=$count\n      echo\
    \ $word\n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local wordlen\n  local wordcount\n  local\
    \ wordcount2\n  local wordcount3\n  local wordcount4\n  local wordcount5\n  local\
    \ wordcount6\n  local wordcount7\n  local wordcount8\n  local wordcount9\n  local\
    \ wordcount10\n  local wordcount11\n  local wordcount12\n  local wordcount13\n\
    \  local wordcount14\n  local wordcount15\n  local wordcount16\n  local wordcount17\n\
    \  local wordcount18\n  local wordcount19\n  local wordcount20\n  local wordcount21\n\
    \  local wordcount22\n  local wordcount23\n  local wordcount24\n  local wordcount25\n\
    \  local wordcount26\n  local wordcount27\n  local wordcount28\n  local wordcount29\n\
    \  local wordcount30\n  local wordcount31\n  local wordcount32\n  local wordcount33\n\
    \  local wordcount34\n  local wordcount35\n  local wordcount36\n  local wordcount37\n\
    \  local wordcount38\n  local wordcount39\n  local wordcount40\n  local wordcount41\n\
    \  local wordcount42\n  local wordcount43\n  local wordcount44\n  local wordcount45\n\
    \  local wordcount46\n  local wordcount47\n  local wordcount48\n  local wordcount49\n\
    \  local wordcount50\n  local wordcount51\n  local wordcount52\n  local wordcount53\n\
    \  local wordcount54\n  local wordcount55\n  local wordcount56\n  local wordcount57\n\
    \  local wordcount58\n  local wordcount59\n  local wordcount60\n  local wordcount61\n\
    \  local wordcount62\n  local wordcount63\n  local wordcount64\n  local wordcount65\n\
    \  local wordcount66\n  local wordcount67\n  local wordcount68\n  local wordcount69\n\
    \  local wordcount70\n  local wordcount71\n  local wordcount72\n  local wordcount73\n\
    \  local wordcount74\n  local wordcount75\n  local wordcount76\n  local wordcount77\n\
    \  local wordcount78\n  local wordcount79\n  local word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=0\n\
    \        for char in $word; do\n            ((count++))\n        done\n      \
    \  if ((count > max)); then\n            max=count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local count=0\n    local word=\"\"\n    local index=0\n\
    \    local words=$(echo $words | sed 's/ /\\n/g')\n    for word in $words; do\n\
    \        count=$(echo $word | wc -c)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n            max_index=$index\n\
    \        fi\n        ((index++))\n    done\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max\n  local count\n  local\
    \ word\n  local i\n  local j\n  local len\n  local maxlen\n  local maxword\n \
    \ local wordcount\n  local wordlist\n  local wordlen\n  local wordcount\n  local\
    \ word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local\
    \ wordcount\n  local word\n  local wordlen\n  local wordcount\n  local word\n\
    \  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local wordcount\n\
    \  local word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n\
    \  local wordcount\n  local word\n  local wordlen\n  local wordcount\n  local\
    \ word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local\
    \ wordcount\n  local word\n  local wordlen\n  local wordcount\n  local word\n\
    \  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local wordcount\n\
    \  local word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n\
    \  local wordcount\n  local word\n  local wordlen\n  local wordcount\n  local\
    \ word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local\
    \ wordcount\n  local word\n  local wordlen\n  local wordcount\n  local word\n\
    \  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local wordcount\n\
    \  local word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n\
    \  local wordcount\n  local word\n  local wordlen\n  local wordcount\n  local\
    \ word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local\
    \ wordcount\n  local word\n  local wordlen\n  local wordcount\n  local word\n\
    \  local wordlen\n  local wordcount\n  local word\n  local wordlen\n  local wordcount\n\
    \  local word\n  local wordlen\n  local wordcount\n  local word\n  local wordlen\n\
    \  local wordcount\n  local word\n  local wordlen\n  local wordcount\n  local\
    \ word\n\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr '\
    \ ' '\\n' | sort | uniq -c | sort -nr | head -n 1)\n        if [[ $count -gt $max\
    \ ]]; then\n            max=$(echo $count | cut -d' ' -f1)\n        fi\n    done\n\
    \    echo $max\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3i2_js7g.sh: line 15: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmp3i2_js7g.sh: line 15: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmp3i2_js7g.sh: line 15: [[: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_chars=0\n  local max_word=\"\"\n  local words=(\
    \ \"$@\" )\n  local word\n  local count\n  local i\n  for word in \"${words[@]}\"\
    ; do\n    count=0\n    for (( i = 0; i < ${#word}; i++ )); do\n      (( count++\
    \ ))\n      if [[ ${word:$i:1} == \"$word\" ]] && [[ ${count} -gt $max_chars ]];\
    \ then\n        max_chars=$count\n        max_word=$word\n      fi\n    done\n\
    \  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ words=$1\n    for word in $words; do\n        local count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ {\n            max_count=$count\n            max_word=$word\n        }\n   \
    \ done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgl5wtcxj.sh: line 17: syntax error near unexpected token `{''

    /tmp/tmpgl5wtcxj.sh: line 17: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in \"${words[@]}\"; do\n    count=0\n    for word in $words;\
    \ do\n      if [[ \"$word\" == \"$i\" ]]; then\n        count=$((count+1))\n \
    \     fi\n    done\n    if [[ \"$count\" -gt \"$max\" ]]; then\n      max=$count\n\
    \      word=$i\n    fi\n  done\n  echo $word\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local wordcount\n  local\
    \ wordlen\n  local wordcount2\n  local wordlen2\n  local wordlen3\n  local wordlen4\n\
    \  local wordlen5\n  local wordlen6\n  local wordlen7\n  local wordlen8\n  local\
    \ wordlen9\n  local wordlen10\n  local wordlen11\n  local wordlen12\n  local wordlen13\n\
    \  local wordlen14\n  local wordlen15\n  local wordlen16\n  local wordlen17\n\
    \  local wordlen18\n  local wordlen19\n  local wordlen20\n  local wordlen21\n\
    \  local wordlen22\n  local wordlen23\n  local wordlen24\n  local wordlen25\n\
    \  local wordlen26\n  local wordlen27\n  local wordlen28\n  local wordlen29\n\
    \  local wordlen30\n  local wordlen31\n  local wordlen32\n  local wordlen33\n\
    \  local wordlen34\n  local wordlen35\n  local wordlen36\n  local wordlen37\n\
    \  local wordlen38\n  local wordlen39\n  local wordlen40\n  local wordlen41\n\
    \  local wordlen42\n  local wordlen43\n  local wordlen44\n  local wordlen45\n\
    \  local wordlen46\n  local wordlen47\n  local wordlen48\n  local wordlen49\n\
    \  local wordlen50\n  local wordlen51\n  local wordlen52\n  local wordlen53\n\
    \  local wordlen54\n  local wordlen55\n  local wordlen56\n  local wordlen57\n\
    \  local wordlen58\n  local wordlen59\n  local wordlen60\n  local wordlen61\n\
    \  local wordlen62\n  local wordlen63\n  local wordlen64\n  local wordlen65\n\
    \  local wordlen66\n  local wordlen67\n  local wordlen68\n  local wordlen69\n\
    \  local wordlen70\n  local wordlen71\n  local wordlen72\n  local wordlen73\n\
    \  local wordlen74\n  local wordlen75\n  local wordlen76\n  local wordlen77\n\
    \  local wordlen\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local word\n    for word in $1; do\n\
    \        local count=0\n        for char in $word; do\n            ((count++))\n\
    \        done\n        if ((count > max)) ; then\n            max=count\n    \
    \        echo $word\n        fi\n    done\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in $words; do\n    count=0\n    for word in $words; do\n \
    \     if [[ \"$word\" == \"$i\" ]]; then\n        ((count++))\n      fi\n    done\n\
    \    if [[ $count -gt $max ]]; then\n      max=$count\n      word=$i\n    fi\n\
    \  done\n  echo $word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local max_word=\"\"\n\
    \  local count=0\n  local word\n  for word in $words; do\n    count=0\n    for\
    \ char in $word; do\n      ((count++))\n    done\n    if [ \"$count\" -gt \"$max\"\
    \ ]; then\n      max=$count\n      max_word=$word\n    fi\n  done\n  echo $max_word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in \"${words[@]}\"; do\n    count=0\n    for word in \"${words[@]}\"\
    ; do\n      if [[ \"$word\" == \"$i\" ]]; then\n        (( count++ ))\n      fi\n\
    \    done\n    if [[ \"$count\" -gt \"$max\" ]]; then\n      max=$count\n    \
    \  word=$i\n    fi\n  done\n  echo \"$word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local word\n    local count\n    for\
    \ word in $1; do\n        count=0\n        for char in $word; do\n           \
    \ ((count++))\n        done\n        if ((count > max)); then\n            max=count\n\
    \            echo $word\n        fi\n    done\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  for word in $words; do\n    count=0\n    for char in $word; do\n      ((count++))\n\
    \    done\n    if [ \"$count\" -gt \"$max\" ]; then\n      max=$count\n      echo\
    \ $word\n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for ((i=0; i<${#words[@]}; i++)); do\n   \
    \ word=${words[i]}\n    count=$(echo \"${word}\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -n | tail -n 1)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${words[i]}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo486ggjb.sh: line 19: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) {\n       \
    \     max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplydbkyrs.sh: line 17: syntax error near unexpected token `{''

    /tmp/tmplydbkyrs.sh: line 17: `        if ((count > max)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    local count\n    for word in $list; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo \"$word\"\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ word\n    local count\n    for word in $1; do\n        count=0\n        for\
    \ char in $word; do\n            ((count++))\n        done\n        if ((count\
    \ > max_count)) {\n            max_count=count\n            max_word=$word\n \
    \       }\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpszjhw1jb.sh: line 18: syntax error near unexpected token `{''

    /tmp/tmpszjhw1jb.sh: line 18: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    for (( i=0; i<${#words[@]};\
    \ i++ )); do\n        word=${words[i]}\n        count=$(echo $word | tr ' ' '\\\
    n' | sort | uniq -c | sort -n | tail -n 1)\n        if (( count > max )); then\n\
    \            max=count\n            word=${words[i]}\n        fi\n    done\n \
    \   echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpedceyoaa.sh: line 19: ((: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local count=0\n    local word\n    for word in\
    \ $words; do\n        count=$(echo $word | wc -c)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        \
    \    max_index=$count\n        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words count\n  words=( $1 )\n  count=0\n  for i\
    \ in \"${words[@]}\"; do\n    (( count++ ))\n  done\n  echo $(( ${#words[@]} -\
    \ 1 ))\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local max_word=\"\"\n\
    \  local count=0\n  local word\n  local i\n  for word in $words; do\n    count=0\n\
    \    for (( i=0; i<${#word}; i++ )); do\n      if [[ ${word:$i:1} == \"$\" ]];\
    \ then\n        count=$(( count+1 ))\n      else\n        count=$(( count+1 ))\n\
    \      fi\n    done\n    if [[ $count -gt $max ]]; then\n      max=$count\n  \
    \    max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ word\n    for word in $1; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ {\n            max_count=count\n            max_word=$word\n        }\n    done\n\
    \    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4ijdsor8.sh: line 17: syntax error near unexpected token `{''

    /tmp/tmp4ijdsor8.sh: line 17: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max=0\n  local word\n  local count\n  local i\n\
    \  local words=(\"$@\")\n  for word in \"${words[@]}\"; do\n    count=0\n    for\
    \ ((i=0; i<${#word}; i++)); do\n      ((count+=${#word:$i:1}))\n    done\n   \
    \ if (( count > max )); then\n      max=${count}\n      maxword=${word}\n    fi\n\
    \  done\n  echo \"${maxword}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoy127atp.sh: line 17: count+=${#word:$i:1}: bad substitution

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_char=0\n    local max_word=\"\"\n    local\
    \ word\n    for word in $1; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max_char)) ;\
    \ then\n            max_char=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  for word in $words; do\n    count=0\n    for char in $word; do\n      ((count++))\n\
    \    done\n    if [ \"$count\" -gt \"$max\" ]; then\n      max=$count\n      echo\
    \ $word\n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for (( i=0; i<${#words[@]}; i++ )); do\n \
    \   word=${words[i]}\n    count=$(echo \"${word}\" | tr -cd '[:alnum:]' | uniq\
    \ -c | wc -l)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n  \
    \    word=${word}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max=0\n  local word\n  for word in $1; do\n    [[\
    \ -z \"$max\" ]] || [[ \"$max\" -gt \"$word\" ]] || { max=\"$word\"; echo \"$max\"\
    ; }\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local count=0\n    local word=\"\"\n    local index=0\n\
    \    local chars=\"\"\n    local char_index=0\n    local char_count=0\n    local\
    \ char_index2=0\n    local char_count2=0\n    local char_index3=0\n    local char_count3=0\n\
    \    local char_index4=0\n    local char_count4=0\n    local char_index5=0\n \
    \   local char_count5=0\n    local char_index6=0\n    local char_count6=0\n  \
    \  local char_index7=0\n    local char_count7=0\n    local char_index8=0\n   \
    \ local char_count8=0\n    local char_index9=0\n    local char_count9=0\n    local\
    \ char_index10=0\n    local char_count10=0\n    local char_index11=0\n    local\
    \ char_count11=0\n    local char_index12=0\n    local char_count12=0\n    local\
    \ char_index13=0\n    local char_count13=0\n    local char_index14=0\n    local\
    \ char_count14=0\n    local char_index15=0\n    local char_count15=0\n    local\
    \ char_index16=0\n    local char_count16=0\n    local char_index17=0\n    local\
    \ char_count17=0\n    local char_index18=0\n    local char_count18=0\n    local\
    \ char_index19=0\n    local char_count19=0\n    local char_index20=0\n    local\
    \ char_count20=0\n    local char_index21=0\n    local char_count21=0\n    local\
    \ char_index22=0\n    local char_count22=0\n    local char_index23=0\n    local\
    \ char_count23=0\n    local char_index24=0\n    local char_count24=0\n    local\
    \ char_index25=0\n    local char_count25=0\n    local char_index26=0\n    local\
    \ char_count26=0\n    local char_index27=0\n    local char_count27=0\n    local\
    \ char_index28=0\n    local char_count28=0\n    local char_index29=0\n    local\
    \ char_count29=0\n    local char_index30=0\n    local char_count30=0\n    local\
    \ char_index31=0\n    local char_count31=0\n    local char_index32=0\n    local\
    \ char_count32=0\n    local char_index33=0\n    local char_count33=0\n    local\
    \ char_index34=0\n\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local tmp\n  local tmp2\n  local tmp3\n\
    \  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local\
    \ tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n\
    \  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n \
    \ local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local\
    \ tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n\
    \  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n \
    \ local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local\
    \ tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n\
    \  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n \
    \ local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local\
    \ tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n\
    \  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n \
    \ local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local\
    \ tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n\
    \  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n \
    \ local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local\
    \ tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local tmp94\n\
    \  local tmp95\n  local tmp96\n  local \n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max\n    local count\n\
    \    local word\n    local i\n    local j\n    local len\n    local maxlen\n \
    \   local maxword\n    local wordlen\n    local wordcount\n    local word\n  \
    \  local wordcount\n    local wordlen\n    local maxlen\n    local maxword\n \
    \   local maxcount\n    local maxwordlen\n    local maxwordcount\n    local maxwordlen\n\
    \    local maxcount\n    local maxwordcount\n    local maxwordlen\n    local maxcount\n\
    \    local maxwordcount\n    local maxwordlen\n    local maxcount\n    local maxwordcount\n\
    \    local maxwordlen\n    local maxcount\n    local maxwordcount\n    local maxwordlen\n\
    \    local maxcount\n    local maxwordcount\n    local maxwordlen\n    local maxcount\n\
    \    local maxwordcount\n    local maxwordlen\n    local maxcount\n    local maxwordcount\n\
    \    local maxwordlen\n    local maxcount\n    local maxwordcount\n    local maxwordlen\n\
    \    local maxcount\n    local maxwordcount\n    local maxwordlen\n    local maxcount\n\
    \    local maxwordcount\n    local maxwordlen\n    local maxcount\n    local maxwordcount\n\
    \    local maxwordlen\n    local maxcount\n    local maxwordcount\n    local maxwordlen\n\
    \    local maxcount\n    local maxwordcount\n    local maxwordlen\n    local maxcount\n\
    \    local maxwordcount\n    local maxwordlen\n    local maxcount\n    local maxwordcount\n\
    \    local maxwordlen\n    local maxcount\n    local maxwordcount\n    local maxwordlen\n\
    \    local maxcount\n    local maxwordcount\n    local maxwordlen\n    local maxcount\n\
    \    local maxwordcount\n    local maxwordlen\n    local maxcount\n    local maxwordcount\n\
    \    local maxwordlen\n    local maxcount\n    local maxwordcount\n    local maxwordlen\n\
    \    local maxcount\n    local maxwordcount\n    local maxwordlen\n    local maxcount\n\
    \    local maxwordcount\n    local maxwordlen\n    local maxcount\n    local maxwordcount\n\
    \    local maxwordlen\n    local maxcount\n    local maxwordcount\n    local maxwordlen\n\
    \    local maxcount\n    local \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words count\n  words=( $1 )\n  count=0\n  for i\
    \ in \"${words[@]}\"; do\n    (( count++ ))\n  done\n  echo $i\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  for word in $words; do\n    count=0\n    for char in $word; do\n      ((count++))\n\
    \    done\n    if [ \"$count\" -gt \"$max\" ]; then\n      max=$count\n      echo\
    \ $word\n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for word in $words; do\n    count=0\n    for ((i=0; i<${#word};\
    \ i++)); do\n      ((count++))\n      if ((count > max)); then\n        max=count\n\
    \        word=$word\n      fi\n    done\n  done\n  echo $word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for (( i=0; i<${#words[@]}; i++ )); do\n \
    \   word=${words[i]}\n    count=$(echo \"${word}\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -n | tail -n 1)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${words[i]}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwcbu58fm.sh: line 19: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max\n    local count\n\
    \    local word\n    local i\n    local j\n    local len\n    local maxlen\n \
    \   local maxword\n    local wordcount\n    local wordlen\n    local wordcount2\n\
    \    local wordlen2\n    local wordlen3\n    local wordlen4\n    local wordlen5\n\
    \    local wordlen6\n    local wordlen7\n    local wordlen8\n    local wordlen9\n\
    \    local wordlen10\n    local wordlen11\n    local wordlen12\n    local wordlen13\n\
    \    local wordlen14\n    local wordlen15\n    local wordlen16\n    local wordlen17\n\
    \    local wordlen18\n    local wordlen19\n    local wordlen20\n    local wordlen21\n\
    \    local wordlen22\n    local wordlen23\n    local wordlen24\n    local wordlen25\n\
    \    local wordlen26\n    local wordlen27\n    local wordlen28\n    local wordlen29\n\
    \    local wordlen30\n    local wordlen31\n    local wordlen32\n    local wordlen33\n\
    \    local wordlen34\n    local wordlen35\n    local wordlen36\n    local wordlen37\n\
    \    local wordlen38\n    local wordlen39\n    local wordlen40\n    local wordlen41\n\
    \    local wordlen42\n    local wordlen43\n    local wordlen44\n    local wordlen45\n\
    \    local wordlen46\n    local wordlen47\n    local wordlen48\n    local wordlen49\n\
    \    local wordlen50\n    local wordlen51\n    local wordlen52\n    local wordlen53\n\
    \    local wordlen54\n    local wordlen55\n    local wordlen56\n    local wordlen57\n\
    \    local wordlen58\n    local wordlen59\n    local wordlen60\n    local wordlen61\n\
    \    local wordlen62\n    local wordlen63\n    local wordlen64\n    local wordlen65\n\
    \    local wordlen66\n    local wordlen67\n    local wordlen68\n    local wordlen69\n\
    \    local wordlen70\n    local wordlen71\n    local wordlen72\n    local wordlen73\n\
    \    local wordlen74\n    local wordlen75\n    local wordlen76\n    local wordlen77\n\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for (( i=0; i<${#word}; i++ )); do\n            (( count++ ))\n        \
    \    if (( count > max )); then\n                max=$count\n                word=$word\n\
    \            fi\n        done\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    for word in $words; do\n        count=0\n        for\
    \ char in $word; do\n            ((count++))\n        done\n        if ((count\
    \ > max_count)); then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for (( i=0; i<${#words[@]}; i++ )); do\n \
    \   word=${words[i]}\n    count=$(echo \"${word}\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -nr | head -1)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${words[i]}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm50f9cjg.sh: line 19: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local maxlen=0\n    local maxword=\"\
    \"\n    local maxcount=0\n    local word\n    for word in $list; do\n        local\
    \ count=0\n        for char in $word; do\n            ((count++))\n        done\n\
    \        if ((count > maxcount)) ; then\n            maxcount=$count\n       \
    \     maxword=$word\n        fi\n    done\n    echo \"$maxword\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ word\n    local count\n    for word in $1; do\n        count=0\n        for\
    \ char in $word; do\n            ((count++))\n        done\n        if ((count\
    \ > max_count)) {\n            max_count=$count\n            max_word=$word\n\
    \        }\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2tsi_c28.sh: line 18: syntax error near unexpected token `{''

    /tmp/tmp2tsi_c28.sh: line 18: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=$(echo\
    \ $word | wc -c)\n        if [ $count -gt $max ]; then\n            max=$(echo\
    \ $count | bc)\n            max_word=$word\n        fi\n    done\n    echo \"\
    $max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max=0\n  local word\n  local count\n  local i\n\
    \  local words=(\"${@}\")\n  for word in \"${words[@]}\"; do\n    count=0\n  \
    \  for ((i=0; i<${#word}; i++)); do\n      ((count+=${#word:i:1}))\n    done\n\
    \    if (( count > max )); then\n      max=${count}\n      word=${word}\n    fi\n\
    \  done\n  echo \"${word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsw67052c.sh: line 17: count+=${#word:i:1}: bad substitution

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local count=0\n  local word=\"\"\n  local index=0\n\
    \  local words=$(echo $words | tr \" \" \"\\n\")\n  for word in $words; do\n \
    \   count=0\n    for index in $(seq 0 $((${#words[@]} - 1))); do\n      if [[\
    \ ${word:$index:1} == ${words[$index]} ]]; then\n        count=$((${count} + 1))\n\
    \      fi\n    done\n    if [[ ${count} -gt ${max_count} ]]; then\n      max_count=${count}\n\
    \      max_word=${word}\n      max_index=$index\n    fi\n  done\n  echo \"${max_word}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local count=0\n  local word=\"\"\n  local index=0\n\
    \  while read -r word; do\n    count=0\n    for word in $words; do\n      if [[\
    \ \"$word\" == \"$word\" ]]; then\n        count=$((count+1))\n      fi\n    done\n\
    \    if [[ \"$count\" -gt \"$max_count\" ]]; then\n      max_count=$count\n  \
    \    max_word=$word\n      max_index=$index\n    fi\n    ((index++))\n  done <\
    \ <(echo \"$words\")\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local max_count2=0\n    local max_count3=0\n  \
    \  local max_count4=0\n    local max_count5=0\n    local max_count6=0\n    local\
    \ max_count7=0\n    local max_count8=0\n    local max_count9=0\n    local max_count10=0\n\
    \    local max_count11=0\n    local max_count12=0\n    local max_count13=0\n \
    \   local max_count14=0\n    local max_count15=0\n    local max_count16=0\n  \
    \  local max_count17=0\n    local max_count18=0\n    local max_count19=0\n   \
    \ local max_count20=0\n    local max_count21=0\n    local max_count22=0\n    local\
    \ max_count23=0\n    local max_count24=0\n    local max_count25=0\n    local max_count26=0\n\
    \    local max_count27=0\n    local max_count28=0\n    local max_count29=0\n \
    \   local max_count30=0\n    local max_count31=0\n    local max_count32=0\n  \
    \  local max_count33=0\n    local max_count34=0\n    local max_count35=0\n   \
    \ local max_count36=0\n    local max_count37=0\n    local max_count38=0\n    local\
    \ max_count39=0\n    local max_count40=0\n    local max_count41=0\n    local max_count42=0\n\
    \    local max_count43=0\n    local max_count44=0\n    local max_count45=0\n \
    \   local max_count46=0\n    local max_count47=0\n    local max_count48=0\n  \
    \  local max_count49=0\n    local max_count50=0\n    local max_count51=0\n   \
    \ local max_count52=0\n    local max_count53=0\n    local max_count54=0\n    local\
    \ max_count55=0\n    local max_count56=0\n    local max_count57=0\n    local max_count58=0\n\
    \    local max_count59=0\n    local max_count60=0\n    local max_count61=0\n \
    \   local max_count62=0\n    local max_count63=0\n    local max_count64=0\n  \
    \  local max_count65=0\n    local max_count66=0\n    local max_count67=0\n   \
    \ local max_count68=0\n    local max_count69=0\n    local max_count70=0\n    local\
    \ max_count71=0\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local max_count_index=0\n  local count=0\n  local word\n\
    \  local index\n  for word in $words; do\n    count=0\n    for index in ${!words[@]};\
    \ do\n      if [[ ${words[$index]} != $word ]]; then\n        ((count++))\n  \
    \    fi\n    done\n    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n\
    \      max_word=$word\n      max_index=$index\n      max_count_index=$count\n\
    \    fi\n  done\n  echo \"$max_word $max_count $max_index $max_count_index\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  for word in $words; do\n    count=0\n    for (( i=0;\
    \ i<${#word}; i++ )); do\n      (( count++ ))\n      if (( count>max )); then\n\
    \        max=count\n        word=$word\n      fi\n    done\n  done\n  echo $word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local max_char=0\n    local max_char_pos=0\n  \
    \  local max_char_length=0\n    local max_char_length_index=0\n    local max_char_length_value=0\n\
    \    local max_char_length_value_index=0\n    local max_char_length_value_value=0\n\
    \    local max_char_length_value_value_index=0\n    local max_char_length_value_value_value=0\n\
    \    local max_char_length_value_value_value=0\n    local max_char_length_value_value_value_index=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_index=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value_value=0\n\
    \    local max_char_length_value_value_value_value=0\n    local max_char_length_value_value_value\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in \"${words[@]}\"; do\n    count=$(echo \"$i\" | wc -c)\n\
    \    if [ \"$count\" -gt \"$max\" ]; then\n      max=$count\n      word=$i\n \
    \   fi\n  done\n  echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word=\"\"\n    local i=0\n    while read -r word;\
    \ do\n        count=0\n        word=\"${word//[^a-zA-Z0-9_]}\"\n        for ((\
    \ i=0; i<${#word}; i++ )); do\n            (( count++ ))\n            if [[ ${word:$i:1}\
    \ == \"$word\" ]] && [[ ${word:$i:1} == \"$word\" ]]; then\n                ((\
    \ count++ ))\n            fi\n        done\n        if (( count > max_count ));\
    \ then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done <<< \"$words\"\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for (( i=0; i<${#words[@]}; i++ )); do\n \
    \   word=${words[i]}\n    count=${#word}\n    for (( j=0; j<${#words[@]}; j++\
    \ )); do\n      if [[ ${words[j]} == ${word} ]]; then\n        (( count--))\n\
    \      fi\n    done\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${word}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local counts\n  local maxcount\n  local wordcount\n \
    \ local wordcounts\n  local wordcount\n  local maxword\n  local maxwordcount\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcount\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max=$1\n  local word\n  local count\n  local i\n\
    \  local j\n  local len\n  local maxlen\n  local wordlen\n  local wordcount\n\
    \  local word\n  local wordcount\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local max\n  local count\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) {\n       \
    \     max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplydbkyrs.sh: line 17: syntax error near unexpected token `{''

    /tmp/tmplydbkyrs.sh: line 17: `        if ((count > max)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max\n    local count\n\
    \    local word\n    local i\n    local j\n    local len\n    local maxlen\n \
    \   local maxword\n    local maxcount\n    local wordcount\n    local word\n \
    \   local count\n    local maxlen\n    local maxword\n    local maxcount\n   \
    \ local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n \
    \   local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    \    local wordcount\n    local maxlen\n    local maxword\n    local maxcount\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_count=0\n  local max_string=\"\"\n  local strings=$1\n\
    \  local count=1\n  local string\n  for string in $strings; do\n    local count=$((count+1))\n\
    \    local count=$((count+1))\n    if [ $count -gt $max_count ]; then\n      max_count=$count\n\
    \      max_string=$string\n    fi\n  done\n  echo $max_string\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr '\
    \ ' '\\n' | sort | uniq -c | sort -n | tail -n 1)\n        if (( count > max ));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10tnpvrf.sh: line 15: ((: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmp10tnpvrf.sh: line 15: ((: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmp10tnpvrf.sh: line 15: ((: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  for word\
    \ in $words; do\n    local count=0\n    for char in $word; do\n      ((count++))\n\
    \    done\n    if [ \"$count\" -gt \"$max\" ]; then\n      max=$count\n      echo\
    \ $word\n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  for word\
    \ in $words; do\n    local count=0\n    for char in $word; do\n      ((count++))\n\
    \    done\n    if [ $count -gt $max ]; then\n      max=$count\n      echo $word\n\
    \    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    local count\n    for word in $list; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo \"$word\"\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local maxcountword\n  local maxcountwordcount\n  local maxcountwordcount2\n\
    \  local maxcountwordcount3\n  local maxcountwordcount4\n  local maxcountwordcount5\n\
    \  local maxcountwordcount6\n  local maxcountwordcount7\n  local maxcountwordcount8\n\
    \  local maxcountwordcount9\n  local maxcountwordcount10\n  local maxcountwordcount11\n\
    \  local maxcountwordcount12\n  local maxcountwordcount13\n  local maxcountwordcount14\n\
    \  local maxcountwordcount15\n  local maxcountwordcount16\n  local maxcountwordcount17\n\
    \  local maxcountwordcount18\n  local maxcountwordcount19\n  local maxcountwordcount20\n\
    \  local maxcountwordcount21\n  local maxcountwordcount22\n  local maxcountwordcount23\n\
    \  local maxcountwordcount24\n  local maxcountwordcount25\n  local maxcountwordcount26\n\
    \  local maxcountwordcount27\n  local maxcountwordcount28\n  local maxcountwordcount29\n\
    \  local maxcountwordcount30\n  local maxcountwordcount31\n  local maxcountwordcount32\n\
    \  local maxcountwordcount33\n  local maxcountwordcount34\n  local maxcountwordcount35\n\
    \  local maxcountwordcount36\n  local maxcountwordcount37\n  local maxcountwordcount38\n\
    \  local maxcountwordcount39\n  local maxcountwordcount40\n  local maxcountwordcount41\n\
    \  local maxcountwordcount42\n  local maxcountwordcount43\n  local maxcountwordcount44\n\
    \  local maxcountwordcount45\n  local maxcountwordcount46\n  local maxcountwordcount47\n\
    \  local maxcountwordcount48\n  local maxcountwordcount49\n  local maxcountwordcount50\n\
    \  local maxcountwordcount51\n  local maxcountwordcount52\n  local maxcountwordcount53\n\
    \  local maxcountwordcount54\n  local maxcountwordcount55\n  local maxcountwordcount56\n\
    \  local maxcountwordcount57\n  local maxcountword\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local max_word=\"\"\n\
    \  local max_count=0\n  local max_index=0\n  local i\n  local word\n  for (( i=0;\
    \ i < ${#words[@]}; i++ )); do\n    word=${words[i]}\n    count=$(echo \"${word}\"\
    \ | tr \" \" \"\\n\" | sort | uniq -c | wc -l)\n    if [[ ${count} -gt ${max}\
    \ ]]; then\n      max=${count}\n      max_word=${word}\n      max_index=${i}\n\
    \    fi\n  done\n  echo \"${max_word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for word in $words; do\n    count=0\n    for (( i=0; i<${#word};\
    \ i++ )); do\n      (( count++ ))\n      if (( count > max )); then\n        max=count\n\
    \        word=$word\n      fi\n    done\n  done\n  echo $word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max\n  local count\n  local\
    \ i\n  max=0\n  for i in $list; do\n    count=0\n    for j in $list; do\n    \
    \  if [ \"$i\" == \"$j\" ]; then\n        continue\n      fi\n      (( count++\
    \ ))\n      if [ \"$count\" -gt \"$max\" ]; then\n        max=\"$count\"\n   \
    \   fi\n    done\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words count\n  words=( $1 )\n  count=0\n  for i\
    \ in \"${words[@]}\"; do\n    (( count++ ))\n  done\n  echo $i\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=0\n\
    \        for c in $word; do\n            ((count++))\n        done\n        if\
    \ ((count > max)); then\n            max=count\n            max_word=$word\n \
    \       fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word=\"\"\n    local words=$(echo $words | sed\
    \ 's/ /\\n/g')\n    for word in $words; do\n        count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ {\n            max_word=$word\n            max_count=count\n        fi\n   \
    \ done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppvfppyac.sh: line 20: syntax error near unexpected token `{''

    /tmp/tmppvfppyac.sh: line 20: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for ((i=0; i<${#words[@]}; i++)); do\n   \
    \ word=${words[i]}\n    count=$(echo \"${word}\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -n | tail -1)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${words[i]}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2n8sjd20.sh: line 19: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for ((i=0; i<${#words[@]}; i++)); do\n   \
    \ word=${words[i]}\n    count=$(echo \"${word}\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -n | tail -n 1)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${word}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppkn_zeyx.sh: line 19: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local max_word=\"\"\n\
    \  local count=0\n  local word\n  for word in $words; do\n    count=0\n    for\
    \ char in $word; do\n      ((count++))\n    done\n    if [ \"$count\" -gt \"$max\"\
    \ ]; then\n      max=$count\n      max_word=$word\n    fi\n  done\n  echo $max_word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n  local maxlen\n  local wordlen\n\
    \  local maxwordlen\n  local maxcount\n  local maxword\n  local maxcount2\n  local\
    \ maxword2\n  local maxcount3\n  local maxword3\n  local maxcount4\n  local maxword4\n\
    \  local maxcount5\n  local maxword5\n  local maxcount6\n  local maxword6\n  local\
    \ maxcount7\n  local maxword7\n  local maxcount8\n  local maxword8\n  local maxcount9\n\
    \  local maxword9\n  local maxcount10\n  local maxword10\n  local maxcount11\n\
    \  local maxword11\n  local maxcount12\n  local maxword12\n  local maxcount13\n\
    \  local maxword13\n  local maxcount14\n  local maxword14\n  local maxcount15\n\
    \  local maxword15\n  local maxcount16\n  local maxword16\n  local maxcount17\n\
    \  local maxword17\n  local maxcount18\n  local maxword18\n  local maxcount19\n\
    \  local maxword19\n  local maxcount20\n  local maxword20\n  local maxcount21\n\
    \  local maxword21\n  local maxcount22\n  local maxword22\n  local maxcount23\n\
    \  local maxword23\n  local maxcount24\n  local maxword24\n  local maxcount25\n\
    \  local maxword25\n  local maxcount26\n  local maxword26\n  local maxcount27\n\
    \  local maxword27\n  local maxcount28\n  local maxword28\n  local maxcount29\n\
    \  local maxword29\n  local maxcount30\n  local maxword30\n  local maxcount31\n\
    \  local maxword31\n  local maxcount32\n  local maxword32\n  local maxcount33\n\
    \  local maxword33\n  local maxcount34\n  local maxword34\n  local maxcount35\n\
    \  local maxword35\n  local maxcount36\n  local maxword36\n  local maxcount37\n\
    \  local maxword37\n  local maxcount38\n  local maxword38\n  local maxcount39\n\
    \  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word=\"\"\n    for word in $words; do\n     \
    \   count=0\n        for char in $word; do\n            ((count++))\n        done\n\
    \        if ((count > max_count)) {\n            max_count=$count\n          \
    \  max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3bvg8bck.sh: line 19: syntax error near unexpected token `{''

    /tmp/tmp3bvg8bck.sh: line 19: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)) ; then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local count=0\n  local word\n  for word in $words;\
    \ do\n    count=0\n    for char in $word; do\n      ((count++))\n    done\n  \
    \  if [ \"$count\" -gt \"$max_count\" ]; then\n      max_count=$count\n      max_word=$word\n\
    \      max_index=$count\n    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)) ; then\n  \
    \          max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local count=0\n  local word=\"\"\n  local index=0\n\
    \  while read -r word; do\n    count=0\n    for word in $words; do\n      if [[\
    \ \"$word\" == \"$word\" ]]; then\n        count=$((count+1))\n      fi\n    done\n\
    \    if [[ \"$count\" -gt \"$max_count\" ]]; then\n      max_count=$count\n  \
    \    max_word=$word\n      max_index=$index\n    fi\n    count=0\n  done < <(echo\
    \ \"$words\")\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local count=0\n  local word=\"\"\n  local index=0\n\
    \  local chars=\"\"\n  while read -r word; do\n    chars=$((${#word} + ${#chars}))\n\
    \    ((count++))\n    if [[ \"${chars}\" -gt \"${max_count}\" ]]; then\n     \
    \ max_count=\"${chars}\"\n      max_word=\"${word}\"\n      max_index=\"${index}\"\
    \n    fi\n    ((index++))\n  done <<< \"$words\"\n  echo \"${max_word}\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local maxwordcount\n  local maxwordlength\n  local maxwordlengthcount\n  local\
    \ maxwordlengthcounts\n  local maxwordlengthcount\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in $words; do\n    word=${i%% *}\n    count=$(echo $i | tr\
    \ ' ' '\\n' | sort | uniq -c | sort -nr | head -1)\n    if [[ $count -gt $max\
    \ ]]; then\n      max=$count\n      word=$word\n    fi\n  done\n  echo $word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmog14_62.sh: line 17: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmpmog14_62.sh: line 17: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmpmog14_62.sh: line 17: [[: 1 string: syntax error in expression (error
    token is "string")

    /tmp/tmpmog14_62.sh: line 17: [[: 1 name: syntax error in expression (error token
    is "name")

    /tmp/tmpmog14_62.sh: line 17: [[: 1 enam: syntax error in expression (error token
    is "enam")

    /tmp/tmpmog14_62.sh: line 17: [[: 1 game: syntax error in expression (error token
    is "game")

    '
  stdout: ''
  timestamp: 1660037662
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037662
