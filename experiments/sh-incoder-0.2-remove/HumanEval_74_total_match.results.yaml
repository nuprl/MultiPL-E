language: sh
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 0))\n\
    \    len2=$((${#list_2} + 0))\n    if [ \"${len1}\" -eq \"${len2}\" ]; then\n\
    \        echo \"${list_1}\"\n    else\n        echo \"${list_2}\"\n    fi\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len\n    len=${#list_1}\n    len=${#list_2}\n    local\
    \ i\n    local j\n    local total\n    total=0\n    for i in $(seq 0 $((len-1)))\n\
    \    do\n        for j in $(seq 0 $((len-1)))\n        do\n            if [ $i\
    \ -eq $j ]\n            then\n                continue\n            fi\n     \
    \       if [ $i -le $j ]\n            then\n                if [ $list_1[i] -eq\
    \ $list_2[j] ]\n                then\n                    total=$((total+1))\n\
    \                fi\n            fi\n        done\n    done\n    echo $total\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    len=$((len1 < len2 ? len1 : len2))\n    local i=0\n    local total=0\n\
    \    while [ $i -lt $len ]; do\n        local j=0\n        local char\n      \
    \  char=${list1:$i:1}\n        while [ $j -lt $len ]; do\n            local k=0\n\
    \            local char2\n            char2=${list2:$j:1}\n            if [ \"\
    $char\" == \"$char2\" ]; then\n                let total+=1\n            fi\n\
    \            let j+=1\n        done\n        let i+=1\n    done\n    echo \"$total\"\
    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_match=0\n    local len1=$((${#list_1} + 1))\n    local len2=$((${#list_2}\
    \ + 1))\n    local i\n    local j\n    local k\n    local len\n    local len1\n\
    \    local len2\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<${#list1}; i++ )); do\n        local char=${list1:$i:1}\n\
    \        local char2=${list2:$i:1}\n        if [[ ${char} -le ${char2} ]]; then\n\
    \            total=$((${total} + ${char}))\n        fi\n    done\n    if [[ ${total}\
    \ -eq ${len1} ]]; then\n        echo ${list1}\n    else\n        echo ${list2}\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc84eck1h.sh: line 19: 1 +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo $list_1\n    else\n        echo\
    \ $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i\n    local j\n    local match\n    local len\n    \n    for (( i=0; i<${len1};\
    \ i++ )); do\n        match=0\n        for (( j=0; j<${len2}; j++ )); do\n   \
    \         if [[ ${list1:$i:1} == ${list2:$j:1} ]]; then\n                match=1\n\
    \                break\n            fi\n        done\n        if [[ ${match} ==\
    \ 0 ]]; then\n            total=$((total+1))\n        fi\n    done\n    \n   \
    \ if [[ ${total} == ${len1} ]]; then\n        echo \"${list1}\"\n    else\n  \
    \      echo \"${list2}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len=$((len1 < len2 ? len1 : len2))\n    local i=0\n    local total=0\n    while\
    \ [ $i -lt $len ]; do\n        local c=${list1:$i:1}\n        local c2=${list2:$i:1}\n\
    \        if [ \"$c\" == \"$c2\" ]; then\n            total=$((total + 1))\n  \
    \      fi\n        i=$((i + 1))\n    done\n    if [ $len -eq $total ]; then\n\
    \        echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i\n    \n    for i in $(seq 0 $((len1 - 1))); do\n        local j\n        for\
    \ j in $(seq 0 $((len2 - 1))); do\n            local k\n            for k in $(seq\
    \ 0 $((len1 - 1))); do\n                if [[ $list1[k] == $list2[j] ]]; then\n\
    \                    let total+=1 \n                fi\n            done\n   \
    \     done\n    done\n    echo $total\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local total_match\n    total_match=$(echo $list_1 | wc -w)\n\
    \    for element in $list_2; do\n        if [ \"$element\" == \"$total_match\"\
    \ ]; then\n            echo $list_1\n            break\n        fi\n    done\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local len1=$((${#list_1} + 1))\n    local len2=$((${#list_2} + 1))\n    local\
    \ len=$((len1 < len2 ? len1 : len2))\n    local i=0\n    local total=0\n    while\
    \ [ $i -lt $len ]; do\n        if [[ ${list_1:$i:1} == ${list_2:$i:1} ]]; then\n\
    \            (( total+=1 ))\n        fi\n        (( i++ ))\n    done\n    echo\
    \ $total\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n\
    \        while [ $j -lt $len2 ]; do\n            local char=${list1:$i:1}\n  \
    \          local char2=${list2:$j:1}\n            if [ \"$char\" == \"$char2\"\
    \ ]; then\n                let total=$total+1\n            fi\n            let\
    \ j=$j+1\n        done\n        let i=$i+1\n    done\n    if [ \"$total\" -eq\
    \ \"$len1\" ]; then\n        echo $list1\n    else\n        echo $list2\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    len=$((len1+len2))\n    if [ $len -gt 0 ]; then\n        local\
    \ i\n        local total\n        total=0\n        for (( i=0; i<$len; i++ ));\
    \ do\n            if [[ ${list_1:$i:1} == ${list_2:$i:1} ]]; then\n          \
    \      total=$((total+1))\n            fi\n        done\n        if [ $total -eq\
    \ $len1 ]; then\n            echo $list_1\n        else\n            echo $list_2\n\
    \        fi\n    else\n        echo $list_1\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i\n    local j\n    \n    for (( i=0; i<len1; i++ )); do\n        for (( j=0;\
    \ j<len2; j++ )); do\n            if [[ ${list1:$i:1} == ${list2:$j:1} ]]; then\n\
    \                let total+=1\n            fi\n        done\n    done\n    \n\
    \    if [[ ${total} -eq ${len1} ]]; then\n        echo \"$list1\"\n    else\n\
    \        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  local len2\n  len1=$((${#list_1[@]} + ${#list_2[@]}\
    \ - 1))\n  len2=$((${#list_1[@]} - ${#list_2[@]} - 1))\n  if [[ ${len1} -eq ${len2}\
    \ ]]; then\n    echo \"${list_1}\"\n  else\n    echo \"${list_2}\"\n  fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i\n    local j\n    \n    for (( i=0; i<${#list1}; i++ ));\
    \ do\n        for (( j=0; j<${#list2}; j++ )); do\n            (( total++ ))\n\
    \            if [[ ${list1:$i:1} == ${list2:$j:1} ]]; then\n                ((\
    \ total-- ))\n            fi\n        done\n    done\n    \n    if [[ ${total}\
    \ -eq ${len1} ]]; then\n        echo \"${list1}\"\n    else\n        echo \"${list2}\"\
    \n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 0))\n\
    \    len2=$((${#list_2} + 0))\n    if [[ $len1 -eq $len2 ]]; then\n        echo\
    \ \"$list_1\"\n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  len1=${#list_1}\n  local len2\n  len2=${#list_2}\n\
    \  local total\n  total=0\n  for i in $(seq 0 $((len1 - 1))); do\n    total=$((total\
    \ + ${list_1:$i:1}))\n  done\n  for i in $(seq 0 $((len2 - 1))); do\n    total=$((total\
    \ + ${list_2:$i:1}))\n  done\n  if ((total < len2)); then\n    echo $list_1\n\
    \  else\n    echo $list_2\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprjp420vz.sh: line 20: total +  : syntax error: operand expected
    (error token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    local count\n    local total\n    total=0\n    local i\n    local j\n   \
    \ local k\n    local l\n    local m\n    local n\n    local o\n    local p\n \
    \   local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    \n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo $list_1\n    else\n        echo\
    \ $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local char=${list1:$i:1}\n    \
    \    local j=0\n        while [ $j -lt $len2 ]; do\n            local char2=${list2:$j:1}\n\
    \            if [ \"$char\" == \"$char2\" ]; then\n                let total=$total+1\n\
    \            fi\n            let j=$j+1\n        done\n        let i=$i+1\n  \
    \  done\n    if [ $total -eq $len1 ]; then\n        echo $list1\n    else\n  \
    \      echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=${#list1}\n  local len2=${#list2}\n  local total=0\n  local i=0\n\
    \  while [ $i -lt $len1 ]; do\n    local char=${list1:$i:1}\n    local j=0\n \
    \   while [ $j -lt $len2 ]; do\n      local char2=${list2:$j:1}\n      if [ \"\
    $char\" == \"$char2\" ]; then\n        total=$((total + 1))\n      fi\n      j=$((j\
    \ + 1))\n    done\n    i=$((i + 1))\n  done\n  if [ \"$total\" -eq \"$len1\" ];\
    \ then\n    echo \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local char=${list1:$i:1}\n    \
    \    local j=0\n        while [ $j -lt $len2 ]; do\n            local char2=${list2:$j:1}\n\
    \            if [ \"$char\" == \"$char2\" ]; then\n                let total+=1\n\
    \            fi\n            let j+=1\n        done\n        let i+=1\n    done\n\
    \    if [ $total -eq $len1 ]; then\n        echo $list1\n    else\n        echo\
    \ $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total=0\n    local i\n    \n    for (( i=0; i<${len1}; i++ )); do\n        len=${#list1[$i]}\n\
    \        if (( len > len2 )); then\n            total=$(( total + len ))\n   \
    \     else\n            total=$(( total + len2 ))\n        fi\n    done\n    \n\
    \    for (( i=0; i<${len2}; i++ )); do\n        len=${#list2[$i]}\n        if\
    \ (( len > len1 )); then\n            total=$(( total + len ))\n        else\n\
    \            total=$(( total + len1 ))\n        fi\n    done\n    \n    echo $total\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local char=${list1:$i:1}\n            local char2=${list2:$j:1}\n\
    \            if [ \"$char\" == \"$char2\" ]; then\n                let total+=1\n\
    \            fi\n            let j+=1\n        done\n        let i+=1\n    done\n\
    \    if [ \"$total\" -eq \"$len1\" ]; then\n        echo $list1\n    else\n  \
    \      echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            if [ $list1[ $i ] == $list2[ $j ] ]; then\n       \
    \         let total=$total+1\n            fi\n            let j=$j+1\n       \
    \ done\n        let i=$i+1\n    done\n    if [ $total -eq $len1 ]; then\n    \
    \    echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh:'
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total\n    local i\n    total=0\n    for (( i=1; i<=${len1}; i++ )); do\n  \
    \      total=$((${total} + ${list1}[$i]))\n    done\n    for (( i=1; i<=${len2};\
    \ i++ )); do\n        total=$((${total} + ${list2}[$i]))\n    done\n    if [[\
    \ ${total} -le ${len1} ]]; then\n        echo \"${list1}\"\n    else\n       \
    \ echo \"${list2}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf9zgrgz1.sh: line 18: 0 + [1]: syntax error: operand expected (error
    token is "[1]")

    /tmp/tmpf9zgrgz1.sh: line 18: 0 + hi admin[1]: syntax error in expression (error
    token is "admin[1]")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local i\n    local j\n    local total\n    local match\n    local count\n\
    \    local match1\n    local match2\n    local match3\n    local match4\n    local\
    \ match5\n    local match6\n    local match7\n    local match8\n    local match9\n\
    \    local match10\n    local match11\n    local match12\n    local match13\n\
    \    local match14\n    local match15\n    local match16\n    local match17\n\
    \    local match18\n    local match19\n    local match20\n    local match21\n\
    \    local match22\n    local match23\n    local match24\n    local match25\n\
    \    local match26\n    local match27\n    local match28\n    local match29\n\
    \    local match30\n    local match31\n    local match32\n    local match33\n\
    \    local match34\n    local match35\n    local match36\n    local match37\n\
    \    local match38\n    local match39\n    local match40\n    local match41\n\
    \    local match42\n    local match43\n    local match44\n    local match45\n\
    \    local match46\n    local match47\n    local match48\n    local match49\n\
    \    local match50\n    local match51\n    local match52\n    local match53\n\
    \    local match54\n    local match55\n    local match56\n    local match57\n\
    \    local match58\n    local match59\n    local match60\n    local match61\n\
    \    local match62\n    local match63\n    local match64\n    local match65\n\
    \    local match66\n    local match67\n    local match68\n    local match69\n\
    \    local match70\n    local match71\n    local match72\n    local match73\n\
    \    local match74\n    local match75\n    local match76\n    local match77\n\
    \    local match78\n    local match79\n    local match80\n    local match81\n\
    \    local match82\n    local match83\n    local match84\n    local match85\n\
    \    local match86\n    local match87\n    local match88\n    local match89\n\
    \    local match\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=${#list1}\n  local len2=${#list2}\n  local total=0\n  local i\n\
    \  for i in $(seq 0 $((len1 - 1))); do\n    local j\n    for j in $(seq 0 $((len2\
    \ - 1))); do\n      if [[ $list1[$i] == $list2[$j] ]]; then\n        ((total++))\n\
    \      fi\n    done\n  done\n  if ((total < len2)); then\n    echo $list1\n  else\n\
    \    echo $list2\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<=$len1; i++ )); do\n        total=$((total + ${list1:$i:1}))\n\
    \    done\n    for (( i=1; i<=$len2; i++ )); do\n        total=$((total + ${list2:$i:1}))\n\
    \    done\n    if [ $total -le $len1 ]; then\n        echo \"$list1\"\n    elif\
    \ [ $total -le $len2 ]; then\n        echo \"$list2\"\n    else\n        echo\
    \ \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxhrsncx3.sh: line 16: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpxhrsncx3.sh: line 16: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<=$len1; i++ )); do\n        total=$((total + ${list1:$i:1}))\n\
    \    done\n    for (( i=1; i<=$len2; i++ )); do\n        total=$((total + ${list2:$i:1}))\n\
    \    done\n    if [ $total -le $len1 ]; then\n        echo $list1\n    else\n\
    \        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkji2bl6v.sh: line 16: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpkji2bl6v.sh: line 16: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local match=false\n            for (( i=0; i<${#list1[$i]};\
    \ i++ )); do\n                if [[ ${list1[$i]}[$i]=${list2[$j]}[$j] ]]; then\n\
    \                    match=true\n                    break\n                fi\n\
    \            done\n            if $match; then\n                total=$((total+1))\n\
    \            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n  \
    \  done\n    if [ $len1 -eq $len2 ]; then\n        echo $list1\n    else\n   \
    \     echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660034428
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo $list_1\n    else\n        echo\
    \ $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total\n    total=0\n    for (( i=1; i <= len1; i++ )); do\n        total=$((total\
    \ + ${list1:$i:1}))\n    done\n    for (( i=1; i <= len2; i++ )); do\n       \
    \ total=$((total + ${list2:$i:1}))\n    done\n    if [ $total -le $len1 ]; then\n\
    \        echo $list1\n    elif [ $total -le $len2 ]; then\n        echo $list2\n\
    \    else\n        echo $list1\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpauhhit0v.sh: line 17: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpauhhit0v.sh: line 17: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_match=0\n    local list_1_length=${#list_1}\n    local list_2_length=${#list_2}\n\
    \    local i=0\n    while [ $i -lt $list_1_length ]; do\n        local list_1_char=${list_1:$i:1}\n\
    \        local list_2_char=${list_2:$i:1}\n        if [ $list_1_char -gt $list_2_char\
    \ ]; then\n            local total_match=$((total_match+1))\n        fi\n    \
    \    i=$((i+1))\n    done\n    if [ $list_1_length -eq $list_2_length ]; then\n\
    \        echo $list_1\n    else\n        echo $list_2\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1suhsds5.sh: line 19: [: h: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: i: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: a: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: d: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: m: unary operator expected

    /tmp/tmp1suhsds5.sh: line 19: [: i: unary operator expected

    /tmp/tmp1suhsds5.sh: line 19: [: n: unary operator expected

    /tmp/tmp1suhsds5.sh: line 19: [: h: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: i: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: a: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: d: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: m: unary operator expected

    /tmp/tmp1suhsds5.sh: line 19: [: i: integer expression expected

    /tmp/tmp1suhsds5.sh: line 19: [: n: integer expression expected

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local string1=$1\n    local\
    \ string2=$2\n    local len1=$((${#string1} + 1))\n    local len2=$((${#string2}\
    \ + 1))\n    local len=$((len1 < len2 ? len1 : len2))\n    local result\n    local\
    \ i\n    local j\n    local k\n    local count\n    local count1\n    local count2\n\
    \    local count3\n    local count4\n    local count5\n    local count6\n    local\
    \ count7\n    local count8\n    local count9\n    local count10\n    local count11\n\
    \    local count12\n    local count13\n    local count14\n    local count15\n\
    \    local count16\n    local count17\n    local count18\n    local count19\n\
    \    local count20\n    local count21\n    local count22\n    local count23\n\
    \    local count24\n    local count25\n    local count26\n    local count27\n\
    \    local count28\n    local count29\n    local count30\n    local count31\n\
    \    local count32\n    local count33\n    local count34\n    local count35\n\
    \    local count36\n    local count37\n    local count38\n    local count39\n\
    \    local count40\n    local count41\n    local count42\n    local count43\n\
    \    local count44\n    local count45\n    local count46\n    local count47\n\
    \    local count48\n    local count49\n    local count50\n    local count51\n\
    \    local count52\n    local count53\n    local count54\n    local count55\n\
    \    local count56\n    local count57\n    local count58\n    local count59\n\
    \    local count60\n    local count61\n    local count62\n    local count63\n\
    \    local count64\n    local count65\n    local count66\n    local count67\n\
    \    local count68\n    local count69\n    local count70\n    local count71\n\
    \    local count72\n    local count73\n    local count74\n    local count75\n\
    \    local count76\n    local count77\n    local count78\n    local count79\n\
    \    local count80\n    local count81\n    local count82\n    local count83\n\
    \    local count84\n    local count85\n    local count86\n    local count87\n\
    \    local \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    local len\n    len=$((len1+len2))\n    if [ $len -gt 0 ]; then\n        local\
    \ i\n        local j\n        local total\n        total=0\n        for i in $(seq\
    \ 0 $len1); do\n            local j\n            for j in $(seq 0 $len2); do\n\
    \                if [ $i -eq $j ]; then\n                    total=$((total+1))\n\
    \                fi\n            done\n        done\n        echo $total\n   \
    \ else\n        echo $list_1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local i\n    local j\n    local total\n    local match\n    local chars\n\
    \    local len\n    local i\n    local j\n    local total\n    local match\n \
    \   local chars\n    local len\n    local i\n    local j\n    local total\n  \
    \  local match\n    local chars\n    local len\n    local i\n    local j\n   \
    \ local total\n    local match\n    local chars\n    local len\n    local i\n\
    \    local j\n    local total\n    local match\n    local chars\n    local len\n\
    \    local i\n    local j\n    local total\n    local match\n    local chars\n\
    \    local len\n    local i\n    local j\n    local total\n    local match\n \
    \   local chars\n    local len\n    local i\n    local j\n    local total\n  \
    \  local match\n    local chars\n    local len\n    local i\n    local j\n   \
    \ local total\n    local match\n    local chars\n    local len\n    local i\n\
    \    local j\n    local total\n    local match\n    local chars\n    local len\n\
    \    local i\n    local j\n    local total\n    local match\n    local chars\n\
    \    local len\n    local i\n    local j\n    local total\n    local match\n \
    \   local chars\n    local len\n    local i\n    local j\n    local total\n  \
    \  local match\n    local chars\n    local len\n    local i\n    local j\n   \
    \ local total\n    local match\n    local chars\n    local len\n    local i\n\
    \    local j\n    local total\n    local match\n    local chars\n    local len\n\
    \    local i\n    local j\n    local total\n    local match\n    local chars\n\
    \    local len\n    local i\n    local j\n    local total\n    local match\n \
    \   local chars\n    local len\n    local i\n    local j\n    local total\n  \
    \  local match\n    local chars\n    local len\n    local i\n    local j\n   \
    \ local total\n    local match\n    local \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    local j\n    local k\n    local l\n \
    \   local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n\n}\n\ncandidate() {\n  \
    \  total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [ $len1 -eq $len2 ]; then\n        echo \"$list1\"\n    else\n        echo\
    \ \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    len=$((len1 > len2 ? len1 : len2))\n    local i\n    local total=0\n\
    \    for (( i=1; i<=$len; i++ )); do\n        local j\n        for (( j=1; j<=$len;\
    \ j++ )); do\n            local k\n            for (( k=1; k<=$len; k++ )); do\n\
    \                local m\n                local n\n                local o\n \
    \               local p\n                local q\n                local r\n  \
    \              local s\n                local t\n                local u\n   \
    \             local v\n                local w\n                local x\n    \
    \            local y\n                local z\n                local a\n     \
    \           local b\n                local c\n                local d\n      \
    \          local e\n                local f\n                local g\n       \
    \         local h\n                local i\n                local j\n        \
    \        local k\n                local l\n                local m\n         \
    \       local n\n                local o\n                local p\n          \
    \      local q\n                local r\n                local s\n           \
    \     local t\n                local u\n                local v\n            \
    \    local w\n                local x\n                local y\n             \
    \   local z\n                local a\n                local b\n              \
    \  local c\n                local d\n                local e\n               \
    \ local f\n                local g\n                local h\n                local\
    \ i\n                local j\n                local k\n                local l\n\
    \                local m\n                local n\n                local o\n \
    \               local p\n                local q\n                local r\n  \
    \              local s\n                local t\n                local u\n   \
    \             local v\n                local w\n                local x\n    \
    \            local y\n                local z\n                local a\n     \
    \           local b\n                local c\n                local d\n      \
    \          local e\n                local f\n                local g\n       \
    \         local h\n                local i\n                local j\n        \
    \        local k\n                local l\n                local m\n         \
    \       local n\n                local o\n                local p\n          \
    \      local q\n                local r\n                local s\n           \
    \     local t\n                local u\n                local v\n            \
    \    local w\n                local x\n                local y\n             \
    \   local z\n                local a\n                local b\n              \
    \  local c\n                local d\n                local e\n               \
    \ local f\n\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpewt1g0kv.sh: line 122: syntax error near unexpected token `}''

    /tmp/tmpewt1g0kv.sh: line 122: `}''

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    len=$((len1 > len2 ? len1 : len2))\n    local result\n    result=$(echo\
    \ $list1 | sed 's/ /\\n/g' | sort -u | sed 's/^/0/' | sed 's/$/0/' | sort -n |\
    \ sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/'\
    \ | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/'\
    \ | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\\
    n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/'\
    \ | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/'\
    \ | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\\
    n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/'\
    \ | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/'\
    \ | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\\
    n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/'\
    \ | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/'\
    \ | sed 's/$/0/' | sed 's/0/\\n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/0/\\\
    n/g' | sed 's/^/0/' | sed 's/$/0/' | sed 's/\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr5dwyms5.sh: line 17: unexpected EOF while looking for matching
    `''''

    /tmp/tmpr5dwyms5.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=$((${#list1} + 1))\n  local len2=$((${#list2} + 1))\n  local total\n\
    \  total=0\n  for i in $(seq 0 $len1); do\n    total=$((total + ${list1:$i:1}))\n\
    \  done\n  for i in $(seq 0 $len2); do\n    total=$((total + ${list2:$i:1}))\n\
    \  done\n  if ((total < len1)); then\n    echo $list1\n  elif ((total < len2));\
    \ then\n    echo $list2\n  else\n    echo $list1\n  fi\n}\n\ncandidate() {\n \
    \   total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp238q7zt.sh: line 17: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpp238q7zt.sh: line 17: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  len1=$((${#list_1}))\n  local len2\n  len2=$((${#list_2}))\n\
    \  if [ \"${len1}\" -eq \"${len2}\" ]; then\n    echo \"${list_1}\"\n  else\n\
    \    echo \"${list_2}\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i <= len1; i++ )); do\n        local char=${list1:$i:1}\n\
    \        if [[ \"$char\" == \"$list2\" ]]; then\n            total=$((total +\
    \ 1))\n        fi\n    done\n    for (( i=1; i <= len2; i++ )); do\n        local\
    \ char=${list2:$i:1}\n        if [[ \"$char\" == \"$list1\" ]]; then\n       \
    \     total=$((total + 1))\n        fi\n    done\n    echo \"$total\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [[ $len1 -ne $len2 ]]; then\n        echo \"$list_1 has $len1 chars, while\
    \ $list_2 has $len2 chars\"\n        return 1\n    fi\n    local i\n    for ((\
    \ i=0; i<$len1; i++ )); do\n        if [[ ${list_1[i]} -gt ${list_2[i]} ]]; then\n\
    \            list_1[i]=${list_1[i]}\n        else\n            list_2[i]=${list_2[i]}\n\
    \        fi\n    done\n    list_1=$(IFS=' '; echo \"${list_1[*]}\")\n    list_2=$(IFS='\
    \ '; echo \"${list_2[*]}\")\n    echo \"$list_1 has $len1 chars, while $list_2\
    \ has $len2 chars\"\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_match=0\n    local i=0\n    local j=0\n    local list_1_length=${#list_1[@]}\n\
    \    local list_2_length=${#list_2[@]}\n    while [ $i -lt $list_1_length ]; do\n\
    \        local list_1_char=${list_1[i]}\n        local list_2_char=${list_2[j]}\n\
    \        if [ $list_1_char -gt $list_2_char ]; then\n            ((total_match+=1))\n\
    \        fi\n        ((i++))\n        ((j++))\n    done\n    if [ $i -eq $list_1_length\
    \ ]; then\n        echo $list_1\n    else\n        echo $list_2\n    fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpez7dvsjl.sh: line 20: [: too many arguments

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=$((${#list1} + 1))\n  local len2=$((${#list2} + 1))\n  local total=0\n\
    \  local i\n  for i in $(seq 0 $len1); do\n    total=$((total + ${list1:$i:1}))\n\
    \  done\n  for i in $(seq 0 $len2); do\n    total=$((total + ${list2:$i:1}))\n\
    \  done\n  if (( $total < $len1 )); then\n    echo $list1\n  elif (( $total <\
    \ $len2 )); then\n    echo $list2\n  else\n    echo $list1\n  fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe6txs8gt.sh: line 17: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpe6txs8gt.sh: line 17: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1\n    local len2\n    len1=${#list1}\n    len2=${#list2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo $list1\n    else\n        echo\
    \ $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    local j=0\n    while [ $i -lt $len1 ]; do\n        local char=${list1:$i:1}\n\
    \        local char2=${list2:$j:1}\n        if [ $char -gt $char2 ]; then\n  \
    \          total=$((total+1))\n        fi\n        i=$((i+1))\n        j=$((j+1))\n\
    \    done\n    if [ $len1 -eq $len2 ]; then\n        echo $list1\n    else\n \
    \       echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbwabp2pa.sh: line 20: [: h: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: i: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: a: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: d: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: m: unary operator expected

    /tmp/tmpbwabp2pa.sh: line 20: [: i: unary operator expected

    /tmp/tmpbwabp2pa.sh: line 20: [: n: unary operator expected

    /tmp/tmpbwabp2pa.sh: line 20: [: h: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: i: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: a: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: d: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: m: unary operator expected

    /tmp/tmpbwabp2pa.sh: line 20: [: i: integer expression expected

    /tmp/tmpbwabp2pa.sh: line 20: [: n: integer expression expected

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local char=${list1[i]}\n            local char2=${list2[j]}\n\
    \            if [ \"$char\" == \"$char2\" ]; then\n                let total+=1\n\
    \            fi\n            let j+=1\n        done\n        let i+=1\n    done\n\
    \    if [ \"$total\" -eq \"$len1\" ]; then\n        echo $list1\n    else\n  \
    \      echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    local total\n    total=0\n    for (( i=0; i<${#list_1}; i++ )); do\n    \
    \    if [[ ${list_1:$i:1} == \"$list_2\" ]]; then\n            (( total+=1 ))\n\
    \        fi\n    done\n    echo \"$total\"\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_chars=0\n    for (( i=0; i<${#list_1[@]}; i++ )); do\n      \
    \  local char=${list_1[i]}\n        if [[ \"${list_2[i]}\" == \"${char}\" ]];\
    \ then\n            total_chars=$((total_chars + 1))\n        fi\n    done\n \
    \   if [[ ${#list_1[@]} -eq ${#list_2[@]} ]]; then\n        echo \"${list_1}\"\
    \n    else\n        echo \"${list_1}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    len=$((len1 > len2 ? len1 : len2))\n    local i\n    local j\n    local\
    \ total\n    total=0\n    for ((i=1; i <= len; i++)); do\n        total=$((total\
    \ + ${list1[i]}))\n    done\n    for ((j=1; j <= len; j++)); do\n        total=$((total\
    \ + ${list2[j]}))\n    done\n    echo $total\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp47njeoby.sh: line 21: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmp47njeoby.sh: line 21: total + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_match=0\n    local list_1_length=${#list_1[@]}\n    local list_2_length=${#list_2[@]}\n\
    \    for (( i=0; i<${list_1_length}; i++ )); do\n        local list_1_char=${list_1[i]}\n\
    \        local list_2_char=${list_2[i]}\n        if [[ ${list_1_char} < ${list_2_char}\
    \ ]]; then\n            list_match=${list_1[$i]}\n        fi\n    done\n    for\
    \ (( i=0; i<${list_2_length}; i++ )); do\n        local list_1_char=${list_1[i]}\n\
    \        local list_2_char=${list_2[i]}\n        if [[ ${list_1_char} < ${list_2_char}\
    \ ]]; then\n            list_match=${list_2[$i]}\n        fi\n    done\n    echo\
    \ ${list_match}\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local total\n    total=0\n    for (( i=0; i<${#list_1[@]};\
    \ i++ )); do\n        total=$(( total+${list_1[i]}+${list_2[i]} ))\n    done\n\
    \    if [[ ${total} == ${#list_1[@]} ]]; then\n        echo \"${list_1}\"\n  \
    \  else\n        echo \"${list_2}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp56jsppus.sh: line 16: total+hi admin+hi hi : syntax error in expression
    (error token is "admin+hi hi ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    local i\n    \n    total=0\n    for (( i=0; i<len1; i++ )); do\n\
    \        len=${#list1[$i]}\n        if (( len < len2 )); then\n            total=$((\
    \ total + len ))\n        fi\n    done\n    \n    for (( i=0; i<len2; i++ ));\
    \ do\n        len=${#list2[$i]}\n        if (( len < len1 )); then\n         \
    \   total=$(( total + len ))\n        fi\n    done\n    \n    if (( total < len1\
    \ )); then\n        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n\
    \        while [ $j -lt $len2 ]; do\n            local char=${list1:$i:1}\n  \
    \          local char2=${list2:$j:1}\n            if [ \"$char\" == \"$char2\"\
    \ ]; then\n                let total=$total+1\n            fi\n            let\
    \ j=$j+1\n        done\n        let i=$i+1\n    done\n    if [ \"$total\" -eq\
    \ \"$len1\" ]; then\n        echo $list1\n    else\n        echo $list2\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    local i\n    local j\n    local match\n    \n    if [[ $len1 -ne\
    \ $len2 ]]; then\n        echo \"$list1 has $len1 chars, $list2 has $len2 chars\"\
    \n        return 1\n    fi\n    \n    total=0\n    for i in $list1; do\n     \
    \   match=0\n        for j in $list2; do\n            if [[ \"$i\" == \"$j\" ]];\
    \ then\n                match=1\n                break\n            fi\n     \
    \   done\n        if [[ $match == 0 ]]; then\n            total=$((total+1))\n\
    \        fi\n    done\n    \n    if [[ $total == $len1 ]]; then\n        echo\
    \ \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1[*]}))\n    local len2=$((${#list_2[*]}))\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]\n    then\n        echo \"$list_1\"\n    else\n  \
    \      echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    \n    if [[ $len1 -eq $len2 ]]; then\n        total=$len1\n    else\n\
    \        total=$len1\n    fi\n    \n    for (( i=1; i<=$len1; i++ )); do\n   \
    \     len=${#list1}\n        len=$((len-1))\n        len=$((len-i))\n        len=$((len+1))\n\
    \        if [[ $len -gt $len2 ]]; then\n            len=$((len+1))\n        fi\n\
    \        total=$((total+len))\n    done\n    \n    echo $total\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<=$len1; i++ )); do\n        total=$((total + ${list1:$i:1}))\n\
    \    done\n    for (( i=1; i<=$len2; i++ )); do\n        total=$((total + ${list2:$i:1}))\n\
    \    done\n    if [ $len1 -eq $len2 ]; then\n        echo $list1\n    else\n \
    \       echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr14g59h3.sh: line 16: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpr14g59h3.sh: line 16: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local total_match\n    total_match=$(echo \"$list_1 | $list_2\"\
    \ | wc -c)\n    if [ $total_match = \"$list_1\" ]; then\n        echo \"$list_1\"\
    \n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    local j\n    local match\n    \n    total=0\n\
    \    \n    for (( i=0; i<${len1}; i++ )); do\n        match=0\n        for ((\
    \ j=0; j<${len2}; j++ )); do\n            if [[ ${list1:$i:1} == ${list2:$j:1}\
    \ ]]; then\n                match=1\n            fi\n        done\n        if\
    \ [[ ${match} == 0 ]]; then\n            total=$((total + 1))\n        fi\n  \
    \  done\n    \n    if [[ ${total} == ${len1} ]]; then\n        echo \"${list1}\"\
    \n    else\n        echo \"${list2}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_match=0\n    for (( i=0; i<${#list_1[@]}; i++ )); do\n      \
    \  local char=${list_1[i]}\n        local count=0\n        for (( j=0; j<${#list_2[@]};\
    \ j++ )); do\n            local char2=${list_2[j]}\n            if [[ ${char}\
    \ -eq ${char2} ]]; then\n                (( count++ ))\n            fi\n     \
    \   done\n        if [[ ${count} -gt ${#list_1[@]} ]]; then\n            list_1=$(echo\
    \ \"${list_1}${char}\" | sed 's/ //g')\n        else\n            list_2=$(echo\
    \ \"${list_2}${char}\" | sed 's/ //g')\n        fi\n    done\n    echo \"${list_1}\"\
    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy0rmctbj.sh: line 18: [[: hi admin: syntax error in expression
    (error token is "admin")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    local j\n    local match\n    local len\n\
    \    local len1\n    local len2\n    local len\n    local total\n    local i\n\
    \    local j\n    local match\n    local len\n    local len1\n    local len2\n\
    \    local len\n    local total\n    local i\n    local j\n    local match\n \
    \   local len\n    local len1\n    local len2\n    local len\n    local total\n\
    \    local i\n    local j\n    local match\n    local len\n    local len1\n  \
    \  local len2\n    local len\n    local total\n    local i\n    local j\n    local\
    \ match\n    local len\n    local len1\n    local len2\n    local len\n    local\
    \ total\n    local i\n    local j\n    local match\n    local len\n    local len1\n\
    \    local len2\n    local len\n    local total\n    local i\n    local j\n  \
    \  local match\n    local len\n    local len1\n    local len2\n    local len\n\
    \    local total\n    local i\n    local j\n    local match\n    local len\n \
    \   local len1\n    local len2\n    local len\n    local total\n    local i\n\
    \    local j\n    local match\n    local len\n    local len1\n    local len2\n\
    \    local len\n    local total\n    local i\n    local j\n    local match\n \
    \   local len\n    local len1\n    local len2\n    local len\n    local total\n\
    \    local i\n    local j\n    local match\n    local len\n    local len1\n  \
    \  local len2\n    local len\n    local total\n    local i\n    local j\n    local\
    \ match\n    local len\n    local len1\n    local len2\n    local len\n    local\
    \ total\n    local i\n    local j\n    local match\n    local len\n    local len1\n\
    \    local len2\n    local len\n    local total\n    local i\n    local j\n  \
    \  local match\n    local len\n    local len1\n    \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  local len2\n  len1=${#list_1[@]}\n  len2=${#list_2[@]}\n\
    \  if [[ $len1 -ne $len2 ]]; then\n    echo \"Error: lists have different lengths\"\
    \n    return 1\n  fi\n  local i\n  for i in $(seq 0 $((len1 - 1))); do\n    local\
    \ j\n    for j in $(seq 0 $((len2 - 1))); do\n      if [[ ${list_1[i]} < ${list_2[j]}\
    \ ]]; then\n        list_1[i]=${list_2[j]}\n      fi\n    done\n  done\n  list_1\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphy81exqc.sh: line 30: list_1: command not found

    /tmp/tmphy81exqc.sh: line 30: list_1: command not found

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n\
    \        while [ $j -lt $len2 ]; do\n            if [[ $list1[i] -eq $list2[j]\
    \ ]]; then\n                let total+=1\n            fi\n            let j+=1\n\
    \        done\n        let i+=1\n    done\n    if [ $total -eq $len1 ]; then\n\
    \        echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp28k23osu.sh: line 19: [[: [i]: syntax error: operand expected (error
    token is "[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.sh: line 19: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp28k23osu.'
  stdout: ''
  timestamp: 1660034423
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=${#list1}\n  local len2=${#list2}\n  local len\n  local total\n\
    \  \n  total=0\n  \n  for i in $(seq 0 $((len1-1)); do\n    total=$((total + ${#list1}[i]))\n\
    \  done\n  \n  for i in $(seq 0 $((len2-1)); do\n    total=$((total + ${#list2}[i]))\n\
    \  done\n  \n  if [ $total -le $len1 ]; then\n    echo $list1\n  else\n    echo\
    \ $list2\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv2pvtloz.sh: line 23: unexpected EOF while looking for matching
    `)''

    /tmp/tmpv2pvtloz.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local string1 string2\n    string1=$1\n\
    \    string2=$2\n    local len1\n    len1=${#string1}\n    local len2\n    len2=${#string2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$string1\"\n    else\n     \
    \   echo \"$string2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 -eq $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1[@]} + 0))\n\
    \    len2=$((${#list_2[@]} + 0))\n    if [[ $len1 -gt $len2 ]]; then\n       \
    \ echo \"$list_1\"\n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    \n    if [[ $len1 -eq $len2 ]]; then\n        total=$len1\n    else\n\
    \        total=$len2\n    fi\n    \n    for (( i=0; i<$total; i++ )); do\n   \
    \     if [[ ${list1:$i:1} == ${list2:$i:1} ]]; then\n            (( total-- ))\n\
    \        fi\n    done\n    \n    echo $list1\n    echo $list2\n    echo $total\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local total=0\n    local len1=0\n    local len2=0\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    \n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=$((${#list1} + 1))\n  local len2=$((${#list2} + 1))\n  local total\n\
    \  total=0\n  for i in $(seq 0 $len1); do\n    total=$((total + ${list1:$i:1}))\n\
    \  done\n  for i in $(seq 0 $len2); do\n    total=$((total + ${list2:$i:1}))\n\
    \  done\n  if [ $total -le $len1 ]; then\n    echo $list1\n  else\n    echo $list2\n\
    \  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx5vu1q91.sh: line 17: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpx5vu1q91.sh: line 17: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local char=${list1:$i:1}\n            local char2=${list2:$j:1}\n\
    \            if [ \"$char\" == \"$char2\" ]; then\n                let total=$total+1\n\
    \            fi\n            let j=$j+1\n        done\n        let i=$i+1\n  \
    \  done\n    if [ \"$total\" -eq \"$len1\" ]; then\n        echo $list1\n    else\n\
    \        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=$(echo $list_1 | sed 's/ /\\\
    n/g')\n        list_2=$(echo $list_2 | sed 's/ /\\n/g')\n        len1=${#list_1}\n\
    \        len2=${#list_2}\n    fi\n    local total\n    total=0\n    for (( i=1;\
    \ i<=$len1; i++ )); do\n        local i\n        i=$(echo $list_1 | cut -d \"\
    \ \" -f $i)\n        local j\n        j=$(echo $list_2 | cut -d \" \" -f $i)\n\
    \        local len\n        len=$(echo $i | wc -c)\n        local k\n        k=$(echo\
    \ $j | wc -c)\n        if [[ $len -gt $k ]]; then\n            total=$(( $total\
    \ + $k ))\n        fi\n    done\n    echo \"$list_1\"\n    echo \"$list_2\"\n\
    \    echo \"$total\"\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len\n    len=${#list_1}\n    len2=${#list_2}\n    if\
    \ [ $len -gt $len2 ]; then\n        list_1=$list_2\n        list_2=$list_1\n \
    \       len=${#list_1}\n        len2=${#list_2}\n    fi\n    local i\n    for\
    \ (( i=0; i<$len; i++ )); do\n        if [[ ${list_1:$i:1} == ${list_2:$i:1} ]];\
    \ then\n            (( match++ ))\n        fi\n    done\n    echo \"$match\"\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            if [[ $list1[$i] == $list2[$j] ]]; then\n         \
    \       let total+=1\n            fi\n            let j+=1\n        done\n   \
    \     let i+=1\n    done\n    if [ $total -eq $len1 ]; then\n        echo $list1\n\
    \    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i=0\n    local j=0\n    while [ $i -lt $len1 ]; do\n    \
    \    local char1=\"${list1}$i\"\n        local char2=\"${list2}$j\"\n        local\
    \ char1len=$((${#char1}))\n        local char2len=$((${#char2}))\n        if [\
    \ $char1len -gt $char2len ]; then\n            local char1=\"${list1}$i\"\n  \
    \          local char2=\"${list2}$j\"\n            local char1len=$((${#char1}))\n\
    \            local char2len=$((${#char2}))\n            local total=$((${total}\
    \ + $char1len))\n            i=$((i+1))\n        else\n            local char1=\"\
    ${list1}$i\"\n            local char2=\"${list2}$j\"\n            local char1len=$((${#char1}))\n\
    \            local char2len=$((${#char2}))\n            local total=$((${total}\
    \ + $char2len))\n            j=$((j+1))\n        fi\n    done\n    if [ $i -eq\
    \ $len1 ]; then\n        local char1=\"${list1}$i\"\n        local char2=\"${list2}$j\"\
    \n        local char1len=$((${#char1}))\n        local char2len=$((${#char2}))\n\
    \        local total=$((${total} + $char1len))\n        i=$((i+1))\n    fi\n \
    \   if [ $j -eq $len2 ]; then\n        local char1=\"${list1}$i\"\n        local\
    \ char2=\"${list2}$j\"\n        local char1len=$((${#char1}))\n        local char2len=$((${#char2}))\n\
    \        local total=$((${total} + $char2len))\n        j=$((j+1))\n    fi\n \
    \   local total=$((${total} + $len1))\n    local total=$((${total} + $len2))\n\
    \    echo $total\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=8 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660034428
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i\n    \n    for i in $(seq 0 $len1); do\n        local j\n\
    \        for j in $(seq 0 $len2); do\n            if [[ ${list1:$i:1} == ${list2:$j:1}\
    \ ]]; then\n                let total+=1\n            fi\n        done\n    done\n\
    \    \n    if [[ $total -eq $len1 ]]; then\n        echo \"$list1\"\n    else\n\
    \        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    \n    len=$((len1 > len2 ? len1 : len2))\n    total=0\n\
    \    \n    for (( i=0; i<len; i++ )); do\n        total=$((total + ${list1:$i:1}))\n\
    \        total=$((total + ${list2:$i:1}))\n    done\n    \n    echo $total\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgzd6af7w.sh: line 21: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpgzd6af7w.sh: line 21: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=0; i<${#list1}; i++ )); do\n        local c=${list1:$i:1}\n\
    \        local j=${list2:$i:1}\n        local k=${#c}\n        local l=${#j}\n\
    \        local m=${#k}\n        local n=${#l}\n        local o=${#m}\n       \
    \ local p=${#n}\n        local q=${#o}\n        local r=${#p}\n        local s=${#q}\n\
    \        local t=${#r}\n        local u=${#s}\n        local v=${#t}\n       \
    \ local w=${#u}\n        local x=${#v}\n        local y=${#w}\n        local z=${#x}\n\
    \        local A=${#y}\n        local B=${#z}\n        local C=${#A}\n       \
    \ local D=${#B}\n        local E=${#C}\n        local F=${#D}\n        local G=${#E}\n\
    \        local H=${#F}\n        local I=${#G}\n        local J=${#H}\n       \
    \ local K=${#I}\n        local L=${#J}\n        local M=${#K}\n        local N=${#L}\n\
    \        local O=${#M}\n        local P=${#N}\n        local Q=${#O}\n       \
    \ local R=${#P}\n        local S=${#Q}\n        local T=${#R}\n        local U=${#S}\n\
    \        local V=${#T}\n        local W=${#U}\n        local X=${#V}\n       \
    \ local Y=${#W}\n        local Z=${#X}\n        local A=${#Y}\n        local B=${#Z}\n\
    \        local C=${#A}\n        local D=${#B}\n        local E=${#C}\n       \
    \ local F=${#D}\n        local G=${#E}\n        local H=${#F}\n        local I=${#G}\n\
    \        local J=${#H}\n        local K=${#I}\n        local L=${#J}\n       \
    \ local M\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7nlrxdg5.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmp7nlrxdg5.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=$((${#list1} + 1))\n  local len2=$((${#list2} + 1))\n  local len\n\
    \  local total\n  local i\n  local j\n  local match\n  \n  total=0\n  for i in\
    \ \"${!list1[@]}\"; do\n    match=0\n    for j in \"${!list2[@]}\"; do\n     \
    \ if [[ ${list1[i]} == ${list2[j]} ]]; then\n        match=`expr $match + 1`\n\
    \      fi\n    done\n    total=`expr $total + $match`\n  done\n  \n  if [[ $total\
    \ -eq $len1 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    \n    if [[ $len1 -ne $len2 ]]; then\n        echo \"Error: lists\
    \ must have same length\"\n        return 1\n    fi\n    \n    total=0\n    for\
    \ (( i=0; i<$len1; i++ )); do\n        total=$((total + ${list1:$i:1}))\n    done\n\
    \    \n    for (( i=0; i<$len2; i++ )); do\n        total=$((total + ${list2:$i:1}))\n\
    \    done\n    \n    len=$((total - len1))\n    \n    if [[ $len -gt 0 ]]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len=$((len1 < len2 ? len1 : len2))\n    local i=0\n    local total=0\n    while\
    \ (( i < len )) ; do\n        total=$((total + ${list1[i]}))\n        i=$((i +\
    \ 1))\n    done\n    echo $total\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp61yy6o2b.sh: line 18: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmp61yy6o2b.sh: line 18: total + hi admin: syntax error in expression (error
    token is "admin")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo $list_1\n    else\n        echo\
    \ $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local i\n    local j\n    local total\n    local match\n    \n    total=0\n\
    \    \n    for ((i=0; i<${len1}; i++)); do\n        match=0\n        for ((j=0;\
    \ j<${len2}; j++)); do\n            if [[ ${list1:$i:1} == ${list2:$j:1} ]]; then\n\
    \                match=$((match+1))\n            fi\n        done\n        if\
    \ [[ ${match} < ${len2} ]]; then\n            total=$((total+1))\n        fi\n\
    \    done\n    \n    if [[ ${total} -eq ${len1} ]]; then\n        echo \"${list1}\"\
    \n    else\n        echo \"${list2}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len=$((len1 < len2 ? len1 : len2))\n    local i=0\n    local j=0\n    local\
    \ total=0\n    while [ $i -lt $len ]; do\n        if [ $i -eq 0 ]; then\n    \
    \        total=$((${list1[$i]} + ${list2[$i]}))\n        else\n            total=$((total\
    \ + ${list1[$i]} + ${list2[$i]}))\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $total\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uk88vfn.sh: line 20: + : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmp8uk88vfn.sh: line 20: hi admin + hi hi: syntax error in expression (error
    token is "admin + hi hi")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i\n    for (( i=0; i<${len1}; i++ )); do\n        if [[ ${list1:$i:1} == ${list2:$i:1}\
    \ ]]; then\n            (( total+=1 ))\n        fi\n    done\n    if [[ ${len1}\
    \ == ${len2} ]]; then\n        echo \"${list1}\"\n    else\n        echo \"${list1}\"\
    \n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<${#list1}; i++ )); do\n        local char=${list1:$i:1}\n\
    \        local char2=${list2:$i:1}\n        if [[ ${char} -le ${char2} ]]; then\n\
    \            total=$((${total} + ${char}))\n        fi\n    done\n    for (( i=1;\
    \ i<${#list2}; i++ )); do\n        local char=${list2:$i:1}\n        local char2=${list1:$i:1}\n\
    \        if [[ ${char} -le ${char2} ]]; then\n            total=$((${total} +\
    \ ${char}))\n        fi\n    done\n    if [[ ${total} -eq ${len1} ]]; then\n \
    \       echo \"${list1}\"\n    elif [[ ${total} -eq ${len2} ]]; then\n       \
    \ echo \"${list2}\"\n    else\n        echo \"${list1}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnycgz61e.sh: line 19: 1 +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1[@]}))\n    local len2=$((${#list_2[@]}))\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<=$len1; i++ )); do\n        total=$((total + ${list1}[$i]))\n\
    \    done\n    for (( i=1; i<=$len2; i++ )); do\n        total=$((total + ${list2}[$i]))\n\
    \    done\n    echo $total\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsc2bvgkl.sh: line 16: total + [1]: syntax error: operand expected
    (error token is "[1]")

    /tmp/tmpsc2bvgkl.sh: line 16: total + hi admin[1]: syntax error in expression
    (error token is "admin[1]")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local match=false\n            if [ $list1[i] -eq $list2[j]\
    \ ]; then\n                match=true\n            fi\n            (( total+=1\
    \ ))\n            (( j+=1 ))\n        done\n        (( i+=1 ))\n    done\n   \
    \ if [ $len1 -eq $len2 ]; then\n        echo $list1\n    else\n        echo $list2\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh: line 20: [: too many arguments

    /tmp/tmprnq0indg.sh:'
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            if [ $list1[ $i ] == $list2[ $j ] ]; then\n       \
    \         let total=$total+1\n            fi\n            let j=$j+1\n       \
    \ done\n        let i=$i+1\n    done\n    if [ $total -eq $len1 ]; then\n    \
    \    echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh:'
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    len=$((len1+len2))\n    if [ $len -gt 0 ]; then\n        local\
    \ i\n        local j\n        local match\n        local total\n        total=0\n\
    \        for ((i=0; i<$len; i++)); do\n            match=0\n            for ((j=0;\
    \ j<$len; j++)); do\n                if [ $i -eq $j ]; then\n                \
    \    match=$((match+1))\n                fi\n            done\n            if\
    \ [ $match -eq $len2 ]; then\n                total=$((total+1))\n           \
    \ fi\n        done\n        if [ $total -eq $len1 ]; then\n            echo $list_1\n\
    \        fi\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local string1=$1\n    local\
    \ string2=$2\n    local len1=$((${#string1} + 1))\n    local len2=$((${#string2}\
    \ + 1))\n    local len\n    local result\n    \n    if [ $len1 -eq $len2 ]; then\n\
    \        result=$string1\n    else\n        result=$string2\n    fi\n    \n  \
    \  len=$((${#result} + 1))\n    \n    for (( i=1; i<=$len; i++ )); do\n      \
    \  if [[ ${result:$i:1} == ${string1:$i:1} ]]; then\n            result=${result:0:$i}\n\
    \            break\n        fi\n    done\n    \n    for (( i=1; i<=$len; i++ ));\
    \ do\n        if [[ ${result:$i:1} == ${string2:$i:1} ]]; then\n            result=${result:0:$i}\n\
    \            break\n        fi\n    done\n    \n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034422
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    \n    if [[ $len1 -eq $len2 ]]; then\n        total=$len1\n    else\n\
    \        total=$len1\n    fi\n    \n    for (( i=1; i<=$len1; i++ )); do\n   \
    \     len=${#list1[$i]}\n        if (( len < $len2 )); then\n            total=$((\
    \ total + len ))\n        fi\n    done\n    \n    echo $total\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  len1=${#list_1}\n  local len2\n  len2=${#list_2}\n\
    \  if [[ $len1 == $len2 ]]; then\n    echo \"$list_1\"\n  else\n    echo \"$list_2\"\
    \n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_match\n    total_match=$(echo $list_1 | wc -c)\n    if [ $total_match\
    \ -eq 0 ]; then\n        total_match=$(echo $list_2 | wc -c)\n    fi\n    if [\
    \ $total_match -eq 0 ]; then\n        echo \"$list_1\"\n    else\n        echo\
    \ \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    while [ $i -lt $len1 ]; do\n        local\
    \ char=${list1:$i:1}\n        if [ $char -lt $len2 ]; then\n            local\
    \ char2=${list2:$j:1}\n            local char3=`echo $char2 | tr -d [:digit:]`\n\
    \            local char4=`echo $char3 | tr -d [:digit:]`\n            local char5=`echo\
    \ $char4 | tr -d [:digit:]`\n            local char6=`echo $char5 | tr -d [:digit:]`\n\
    \            local char7=`echo $char6 | tr -d [:digit:]`\n            local char8=`echo\
    \ $char7 | tr -d [:digit:]`\n            local char9=`echo $char8 | tr -d [:digit:]`\n\
    \            local char10=`echo $char9 | tr -d [:digit:]`\n            local char11=`echo\
    \ $char10 | tr -d [:digit:]`\n            local char12=`echo $char11 | tr -d [:digit:]`\n\
    \            local char13=`echo $char12 | tr -d [:digit:]`\n            local\
    \ char14=`echo $char13 | tr -d [:digit:]`\n            local char15=`echo $char14\
    \ | tr -d [:digit:]`\n            local char16=`echo $char15 | tr -d [:digit:]`\n\
    \            local char17=`echo $char16 | tr -d [:digit:]`\n            local\
    \ char18=`echo $char17 | tr -d [:digit:]`\n            local char19=`echo $char18\
    \ | tr -d [:digit:]`\n            local char20=`echo $char19 | tr -d [:digit:]`\n\
    \            local char21=`echo $char20 | tr -d [:digit:]`\n            local\
    \ char22=`echo $char21 | tr -d [:digit:]`\n            local char23=`echo $char22\
    \ | tr -d [:digit:]`\n            local char24=`echo $char23 | tr -d [:digit:]`\n\
    \            local char25=`echo $char24 | tr -d [:digit:]`\n            local\
    \ char26=\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3bbopuut.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmp3bbopuut.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total\n    local i\n    total=0\n    for (( i=1; i<${#list1}; i++ )); do\n \
    \       (( total += ${#list1}[i] ))\n    done\n    for (( i=1; i<${#list2}; i++\
    \ )); do\n        (( total += ${#list2}[i] ))\n    done\n    if [[ ${total} -le\
    \ ${len1} ]]; then\n        echo \"${list1}\"\n    elif [[ ${total} -le ${len2}\
    \ ]]; then\n        echo \"${list2}\"\n    else\n        echo \"${list1}\"\n \
    \   fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfwtz70zq.sh: line 18: ((: total += 8[i] : syntax error: invalid
    arithmetic operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 18: ((: total += 8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 18: ((: total += 8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 18: ((: total += 8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 18: ((: total += 8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 18: ((: total += 8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 18: ((: total += 8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 21: ((: total += 5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 21: ((: total += 5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 21: ((: total += 5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpfwtz70zq.sh: line 21: ((: total += 5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local total=0\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    \n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=$((${#list1} + 1))\n  local len2=$((${#list2} + 1))\n  local len\n\
    \  local total\n  total=0\n  for (( i = 0; i < ${#list1}; i++ )); do\n    len=${#list1[$i]}\n\
    \    if (( len > 0 )); then\n      total=$((total + len))\n    fi\n  done\n  for\
    \ (( i = 0; i < ${#list2}; i++ )); do\n    len=${#list2[$i]}\n    if (( len >\
    \ 0 )); then\n      total=$((total + len))\n    fi\n  done\n  if (( total < len2\
    \ )); then\n    list1=$list2\n  fi\n  echo $list1\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local total_len=$((${len1}+${len2}))\n    local total_match\n    if [[ ${total_len}\
    \ -gt 0 ]]; then\n        total_match=$(echo \"${list_1}\" | grep -Eo \"^${list_2}$\"\
    )\n    else\n        total_match=$(echo \"${list_1}\" | grep -Eo \"^${list_2}$\"\
    )\n    fi\n    echo $total_match\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    \n    total=0\n    for ((i=1; i<=$len1;\
    \ i++)); do\n        total=$((total + ${list1:$i:1}))\n    done\n    for ((i=1;\
    \ i<=$len2; i++)); do\n        total=$((total + ${list2:$i:1}))\n    done\n  \
    \  \n    if [ $total -le $len1 ]; then\n        echo \"$list1\"\n    elif [ $total\
    \ -le $len2 ]; then\n        echo \"$list2\"\n    else\n        echo \"$list1\"\
    \n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxb5q2yzt.sh: line 20: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpxb5q2yzt.sh: line 20: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total\n    local i\n    total=0\n    for (( i=0; i<${#list1}; i++ )); do\n \
    \       (( total+=${#list1}[i] ))\n    done\n    for (( i=0; i<${#list2}; i++\
    \ )); do\n        (( total+=${#list2}[i] ))\n    done\n    if [ ${total} -le ${len1}\
    \ ]; then\n        echo \"${list1}\"\n    elif [ ${total} -le ${len2} ]; then\n\
    \        echo \"${list2}\"\n    else\n        echo \"${list1}\"\n    fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 18: ((: total+=8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 21: ((: total+=5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 21: ((: total+=5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 21: ((: total+=5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 21: ((: total+=5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    /tmp/tmpk7xjcdyp.sh: line 21: ((: total+=5[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local len1=$((${#list_1} + 1))\n    local len2=$((${#list_2} + 1))\n    local\
    \ len=$((len1 < len2 ? len1 : len2))\n    local i=0\n    local total=0\n    while\
    \ [ $i -lt $len ]; do\n        local j=0\n        local char=0\n        while\
    \ [ $j -lt $len1 ]; do\n            local k=0\n            while [ $k -lt $len2\
    \ ]; do\n                if [[ ${list_1[i]} == ${list_2[j]} ]]; then\n       \
    \             char=$((char + 1))\n                fi\n                k=$((k +\
    \ 1))\n            done\n            j=$((j + 1))\n        done\n        i=$((i\
    \ + 1))\n        total=$((total + char))\n    done\n    if [ $len == $len1 ];\
    \ then\n        echo $list_1\n    elif [ $len == $len2 ]; then\n        echo $list_2\n\
    \    else\n        echo $list_1\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    local j\n    local match\n    local len\n\
    \    local len1\n    local len2\n    local len\n    local total\n    local i\n\
    \    local j\n    local match\n    len1=$((${#list1} + 1))\n    len2=$((${#list2}\
    \ + 1))\n    len=$((len1 < len2 ? len1 : len2))\n    total=0\n    for ((i = 0;\
    \ i <= len; i++)); do\n        match=0\n        for ((j = 0; j <= len; j++));\
    \ do\n            if [[ ${list1:$i:1} == ${list2:$j:1} ]]; then\n            \
    \    match=$((match+1))\n            fi\n        done\n        total=$((total+match))\n\
    \    done\n    if [[ ${total} -eq ${len} ]]; then\n        echo \"${list1}\"\n\
    \    else\n        echo \"${list2}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [ $len1 -eq $len2 ]\n    then\n        echo \"$list1\"\n    else\n    \
    \    echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total\n    total=0\n    for (( i=1; i<=$len1; i++ )); do\n        total=$((total\
    \ + ${list1}[i]))\n    done\n    for (( i=1; i<=$len2; i++ )); do\n        total=$((total\
    \ + ${list2}[i]))\n    done\n    if [ $total -le $len1 ]; then\n        echo \"\
    $list1\"\n    elif [ $total -le $len2 ]; then\n        echo \"$list2\"\n    else\n\
    \        echo \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ftrt5wa.sh: line 17: total + [i]: syntax error: operand expected
    (error token is "[i]")

    /tmp/tmp0ftrt5wa.sh: line 17: total + hi admin[i]: syntax error in expression
    (error token is "admin[i]")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    \n    if [[ $len1 -eq $len2 ]]; then\n        total=$len1\n    else\n\
    \        total=$len1\n    fi\n    \n    for (( i=1; i<=$len1; i++ )); do\n   \
    \     len=${#list1}\n        len=$((len-1))\n        len=$((len-i))\n        len=$((len+1))\n\
    \        len=$((len+1))\n        if [[ $len -gt $len2 ]]; then\n            len=$((len+1))\n\
    \        fi\n        total=$((total+len))\n    done\n    \n    echo \"$total\"\
    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    \n    if [[ $len1 -eq $len2 ]]; then\n        total=$len1\n    else\n\
    \        total=$len1\n    fi\n    \n    for (( i=1; i<=$len1; i++ )); do\n   \
    \     len=${#list1[$i]}\n        if [[ $len -gt $len2 ]]; then\n            total=$((total-len))\n\
    \        else\n            total=$((total+len))\n        fi\n    done\n    \n\
    \    echo $total\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=${#list1}\n  local len2=${#list2}\n  local i=0\n  local total=0\n\
    \  while [ $i -lt $len1 ]; do\n    local j=0\n    while [ $j -lt $len2 ]; do\n\
    \      if [ $list1[ $i ] == $list2[ $j ] ]; then\n        total=$(( $total + 1\
    \ ))\n      fi\n      j=$(( $j + 1 ))\n    done\n    i=$(( $i + 1 ))\n  done\n\
    \  if [ $total -eq $len1 ]; then\n    echo $list1\n  else\n    echo $list2\n \
    \ fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh: line 19: [: too many arguments

    /tmp/tmp8qfrd549.sh:'
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo $list_1\n    else\n        echo\
    \ $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  local len2\n  len1=${#list_1[@]}\n  len2=${#list_2[@]}\n\
    \  if [[ $len1 -eq $len2 ]]; then\n    echo $list_1\n  else\n    echo $list_2\n\
    \  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo $list_1\n    else\n        echo\
    \ $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    local j\n    local match\n    \n    total=0\n\
    \    \n    for (( i=0; i<${len1}; i++ )); do\n        match=0\n        for ((\
    \ j=0; j<${len2}; j++ )); do\n            if [[ ${list1:$i:1} == ${list2:$j:1}\
    \ ]]; then\n                match=$((match+1))\n            fi\n        done\n\
    \        total=$((total+match))\n    done\n    \n    if [[ ${total} -le ${len2}\
    \ ]]; then\n        echo \"${list1}\"\n    else\n        echo \"${list2}\"\n \
    \   fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local char=${list1:$i:1}\n            local char2=${list2:$j:1}\n\
    \            if [ \"$char\" -eq \"$char2\" ]; then\n                let total=$total+1\n\
    \            fi\n            let j=$j+1\n        done\n        let i=$i+1\n  \
    \  done\n    if [ \"$total\" -eq \"$len1\" ]; then\n        echo $list1\n    else\n\
    \        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4fxswax0.sh: line 21: [: h: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: h: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: h: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: h: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: h: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: i: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: i: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: i: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: i: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: i: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [:  : integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [:  : integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [:  : integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [:  : integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [:  : integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: a: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: a: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: a: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: a: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: a: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: d: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: d: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: d: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: d: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: d: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: m: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: m: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: m: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: m: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: m: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: i: integer expression expected

    /tmp/tmp4fxswax0.sh: line 21: [: i: integer expression expected

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            if [ $list1[ $i ] == $list2[ $j ] ]; then\n       \
    \         let total=$total+1\n            fi\n            let j=$j+1\n       \
    \ done\n        let i=$i+1\n    done\n    if [ $total -eq $len1 ]; then\n    \
    \    echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh: line 19: [: too many arguments

    /tmp/tmpr2rzvjp7.sh:'
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n\
    \        while [ $j -lt $len2 ]; do\n            if [[ ${list1:$i:1} == ${list2:$j:1}\
    \ ]]; then\n                let total+=1\n            fi\n            let j+=1\n\
    \        done\n        let i+=1\n    done\n    if [[ $total -eq $len1 ]]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=${list_1[@]:0:$len2}\n   \
    \ elif [[ $len1 -lt $len2 ]]; then\n        list_2=${list_2[@]:0:$len1}\n    fi\n\
    \    echo \"${list_1[@]} has ${#list_1[@]} chars\"\n    echo \"${list_2[@]} has\
    \ ${#list_2[@]} chars\"\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            if [ \"${list1:$i:1}\" == \"${list2:$j:1}\" ]; then\n\
    \                let total+=1\n            fi\n            let j+=1\n        done\n\
    \        let i+=1\n    done\n    if [ $len1 -eq $len2 ]; then\n        echo \"\
    $list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=0; i<${#list1}; i++ )); do\n        (( total += ${list1:$i:1}\
    \ == ${list2:$i:1} ))\n    done\n    if [[ ${total} -eq ${len1} ]]; then\n   \
    \     echo \"${list1}\"\n    else\n        echo \"${list2}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb1_jtca8.sh: line 16: ((: total +=   ==   : syntax error: operand
    expected (error token is "==   ")

    /tmp/tmpb1_jtca8.sh: line 16: ((: total += m ==  : syntax error: operand expected
    (error token is "==  ")

    /tmp/tmpb1_jtca8.sh: line 16: ((: total += i ==  : syntax error: operand expected
    (error token is "==  ")

    /tmp/tmpb1_jtca8.sh: line 16: ((: total += n ==  : syntax error: operand expected
    (error token is "==  ")

    /tmp/tmpb1_jtca8.sh: line 16: ((: total +=   ==   : syntax error: operand expected
    (error token is "==   ")

    /tmp/tmpb1_jtca8.sh: line 16: ((: total += m ==   : syntax error: operand expected
    (error token is "==   ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\
    \n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [ $len1 -eq $len2 ]; then\n        echo $list1\n    else\n        echo\
    \ $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local c=${list1[i]}\n            local c2=${list2[j]}\n\
    \            if [ \"$c\" -eq \"$c2\" ]; then\n                let total=$total+1\n\
    \            fi\n            let j=$j+1\n        done\n        let i=$i+1\n  \
    \  done\n    if [ \"$total\" -eq \"$len1\" ]; then\n        echo \"$list1\"\n\
    \    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo8u7a50s.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression expected

    /tmp/tmpo8u7a50s.sh: line 21: [: : integer expression e'
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  len1=${#list_1}\n  local len2\n  len2=${#list_2}\n\
    \  if [ $len1 -eq $len2 ]; then\n    echo $list_1\n  else\n    echo $list_2\n\
    \  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n\
    \        while [ $j -lt $len2 ]; do\n            local char=${list1[i]}\n    \
    \        local char2=${list2[j]}\n            if [ \"$char\" == \"$char2\" ];\
    \ then\n                (( total++ ))\n            fi\n            (( j++ ))\n\
    \        done\n        (( i++ ))\n    done\n    if [ $len1 -eq $len2 ]; then\n\
    \        echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local total_len\n    total_len=0\n    for (( i=0; i<${#list_1[@]};\
    \ i++ )); do\n        if [[ ${list_1[i]} < ${list_2[i]} ]]; then\n           \
    \ total_len=$((total_len+${#list_1[i]}))\n        fi\n    done\n    if [[ ${#list_1[@]}\
    \ -eq ${#list_2[@]} ]]; then\n        echo \"${list_1[@]}\"\n    else\n      \
    \  echo \"${list_1[@]:0:${#list_1[@]}-${#list_2[@]}}\" \n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    local i\n    \n    if [[ $len1 -ne $len2 ]]; then\n        echo \"\
    $list1 has $len1 chars, $list2 has $len2 chars\"\n        return 1\n    fi\n \
    \   \n    total=0\n    for (( i=0; i<$len1; i++ )); do\n        total=$((total\
    \ + ${list1:$i:1}))\n    done\n    \n    for (( i=0; i<$len2; i++ )); do\n   \
    \     total=$((total + ${list2:$i:1}))\n    done\n    \n    len=$((total - len1))\n\
    \    \n    if [[ $len -gt 0 ]]; then\n        echo \"$list1 has $len chars, $list2\
    \ has $len1 chars\"\n        return 1\n    fi\n    \n    echo \"$list1 has $len1\
    \ chars, $list2 has $len2 chars\"\n    return 0\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    local i\n    local j\n    local match\n    local match1\n    local\
    \ match2\n    local match3\n    local match4\n    local match5\n    local match6\n\
    \    local match7\n    local match8\n    local match9\n    local match10\n   \
    \ local match11\n    local match12\n    local match13\n    local match14\n   \
    \ local match15\n    local match16\n    local match17\n    local match18\n   \
    \ local match19\n    local match20\n    local match21\n    local match22\n   \
    \ local match23\n    local match24\n    local match25\n    local match26\n   \
    \ local match27\n    local match28\n    local match29\n    local match30\n   \
    \ local match31\n    local match32\n    local match33\n    local match34\n   \
    \ local match35\n    local match36\n    local match37\n    local match38\n   \
    \ local match39\n    local match40\n    local match41\n    local match42\n   \
    \ local match43\n    local match44\n    local match45\n    local match46\n   \
    \ local match47\n    local match48\n    local match49\n    local match50\n   \
    \ local match51\n    local match52\n    local match53\n    local match54\n   \
    \ local match55\n    local match56\n    local match57\n    local match58\n   \
    \ local match59\n    local match60\n    local match61\n    local match62\n   \
    \ local match63\n    local match64\n    local match65\n    local match66\n   \
    \ local match67\n    local match68\n    local match69\n    local match70\n   \
    \ local match71\n    local match72\n    local match73\n    local match74\n   \
    \ local match75\n    local match76\n    local match77\n    local match78\n   \
    \ local match79\n    local match80\n    local match81\n    local match82\n   \
    \ local match83\n    local match84\n    local match85\n    local match86\n   \
    \ local match87\n    local match88\n    local match89\n    local match90\n   \
    \ local match91\n    local match92\n\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1}))\n    len2=$((${#list_2}))\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local char=${list1[i]}\n            local char2=${list2[j]}\n\
    \            if [ \"$char\" -eq \"$char2\" ]; then\n                let total+=1\n\
    \            fi\n            let j+=1\n        done\n        let i+=1\n    done\n\
    \    if [ \"$total\" -eq \"$len1\" ]; then\n        echo \"$list1\"\n    else\n\
    \        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptagillx1.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: hi admin: integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression expected

    /tmp/tmptagillx1.sh: line 21: [: : integer expression e'
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local total_match\n    total_match=$(echo \"$list_1 $list_2\"\
    \ | wc -c)\n    if [ \"$total_match\" -eq \"$list_1\" ]; then\n        echo \"\
    $list_1\"\n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n  \
    \  total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1_d5vxye.sh: line 15: [: : integer expression expected

    /tmp/tmp1_d5vxye.sh: line 15: [: hi admin: integer expression expected

    /tmp/tmp1_d5vxye.sh: line 15: [: hi admin: integer expression expected

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local char=${list1:$i:1}\n    \
    \    local j=0\n        while [ $j -lt $len2 ]; do\n            local char2=${list2:$j:1}\n\
    \            if [ \"$char\" == \"$char2\" ]; then\n                let total=$total+1\n\
    \            fi\n            let j=$j+1\n        done\n        let i=$i+1\n  \
    \  done\n    if [ \"$total\" -eq \"$len1\" ]; then\n        echo $list1\n    else\n\
    \        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]\n    then\n        echo \"$list_1\"\n    else\n  \
    \      echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n\
    \        while [ $j -lt $len2 ]; do\n            local c=${list1[i]}\n       \
    \     local d=${list2[j]}\n            if [ \"$c\" == \"$d\" ]; then\n       \
    \         ((total++))\n            else\n                break\n            fi\n\
    \            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    if\
    \ [ $total -eq $len1 ]; then\n        echo \"$list1\"\n    else\n        echo\
    \ \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local total=0\n    local i\n    local j\n    local match\n    for (( i=0;\
    \ i<${#list_1}; i++ )); do\n        match=0\n        for (( j=0; j<${#list_2};\
    \ j++ )); do\n            if [[ ${list_1:$i:1} == ${list_2:$j:1} ]]; then\n  \
    \              match=1\n            fi\n        done\n        if [[ $match -eq\
    \ 0 ]]; then\n            total=$((total+1))\n        fi\n    done\n    if [[\
    \ ${total} -eq ${len1} ]]; then\n        echo \"${list_1}\"\n    elif [[ ${total}\
    \ -eq ${len2} ]]; then\n        echo \"${list_2}\"\n    else\n        echo \"\
    ${list_1}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<=$len1; i++ )); do\n        total=$((total + ${list1}[i]))\n\
    \    done\n    for (( i=1; i<=$len2; i++ )); do\n        total=$((total + ${list2}[i]))\n\
    \    done\n    if [ $total -gt $len1 ]; then\n        echo \"$list1\"\n    else\n\
    \        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmn0p_rm2.sh: line 16: total + [i]: syntax error: operand expected
    (error token is "[i]")

    /tmp/tmpmn0p_rm2.sh: line 16: total + hi admin[i]: syntax error in expression
    (error token is "admin[i]")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local len1=${#list_1}\n    local len2=${#list_2}\n    local total=0\n   \
    \ local i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while\
    \ [ $j -lt $len2 ]; do\n            local char=${list_1:$i:1}\n            local\
    \ char2=${list_2:$j:1}\n            if [ \"$char\" -eq \"$char2\" ]; then\n  \
    \              let total=$total+1\n            fi\n            let j=$j+1\n  \
    \      done\n        let i=$i+1\n    done\n    if [ $total -eq $len1 ]; then\n\
    \        echo $list_1\n    else\n        echo $list_2\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzt86yk79.sh: line 21: [: h: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: h: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: h: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: h: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: h: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: i: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: i: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: i: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: i: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: i: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [:  : integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [:  : integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [:  : integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [:  : integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [:  : integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: a: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: a: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: a: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: a: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: a: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: d: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: d: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: d: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: d: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: d: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: m: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: m: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: m: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: m: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: m: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: i: integer expression expected

    /tmp/tmpzt86yk79.sh: line 21: [: i: integer expression expected

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    \n    total=0\n    for (( i=0; i<${#list1}; i++ ));\
    \ do\n        len=${#list1[$i]}\n        if (( len < len2 )); then\n         \
    \   total=$((total + len))\n        fi\n    done\n    \n    for (( i=0; i<${#list2};\
    \ i++ )); do\n        len=${#list2[$i]}\n        if (( len < len1 )); then\n \
    \           total=$((total + len))\n        fi\n    done\n    \n    if [[ $total\
    \ -eq ${#list1} ]]; then\n        echo $list1\n    else\n        echo $list2\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    local j=0\n    while [ $i -lt $len1 ]; do\n        local char=${list1:$i:1}\n\
    \        local char2=${list2:$j:1}\n        if [ \"$char\" -eq \"$char2\" ]; then\n\
    \            ((total+=1))\n        fi\n        ((i++))\n        ((j++))\n    done\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo $list1\n    else\n        echo\
    \ $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpci7ismqk.sh: line 20: [: h: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: i: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [:  : integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: a: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: d: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: m: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: i: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: n: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: h: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: i: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [:  : integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: a: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: d: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: m: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: i: integer expression expected

    /tmp/tmpci7ismqk.sh: line 20: [: n: integer expression expected

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1 len2\n  len1=${#list_1}\n  len2=${#list_2}\n  if [[\
    \ $len1 -eq $len2 ]]; then\n    echo \"$list_1\"\n  else\n    echo \"$list_2\"\
    \n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list_1 list_2\n  list_1=$1\n\
    \  list_2=$2\n  local len1\n  len1=${#list_1}\n  local len2\n  len2=${#list_2}\n\
    \  local len\n  len=$((len1+len2))\n  if [[ $len -gt 0 ]]; then\n    for i in\
    \ $(seq 0 $((len-1))); do\n      if [[ ${list_1:$i:1} == ${list_2:$i:1} ]]; then\n\
    \        len=$((len-1))\n        break\n      fi\n    done\n  fi\n  echo $len\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<=$len1; i++ )); do\n        total=$((total + ${list1:$i:1}))\n\
    \    done\n    for (( i=1; i<=$len2; i++ )); do\n        total=$((total + ${list2:$i:1}))\n\
    \    done\n    if [ $total -le $len1 ]; then\n        echo $list1\n    elif [\
    \ $total -le $len2 ]; then\n        echo $list2\n    else\n        echo $list1\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeof66xh2.sh: line 16: total + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpeof66xh2.sh: line 16: total +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]\n    then\n        echo \"$list_1\"\n    else\n  \
    \      echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo $list_1\n    else\n        echo\
    \ $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local total=0\n    for (( i=0; i<${#list_1[@]}; i++ )); do\n\
    \        if [[ ${list_1[i]} < ${list_2[i]} ]]; then\n            total=$((total+${list_1[i]}))\n\
    \        fi\n    done\n    if [[ ${total} -gt ${#list_1[@]} ]]; then\n       \
    \ total=${#list_1[@]}\n    fi\n    echo \"${list_1[@]}\"\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7rcvq63n.sh: line 16: total+hi admin: syntax error in expression
    (error token is "admin")

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=${#list1}\n  local len2=${#list2}\n  local len\n  local total\n\
    \  \n  if [[ $len1 -eq $len2 ]]; then\n    total=$len1\n  else\n    total=$len1\n\
    \  fi\n  \n  for (( i=1; i<=$total; i++ )); do\n    len=${#list1[$i]}\n    len=${#list2[$i]}\n\
    \    \n    if [[ $len -gt $len ]]; then\n      list1=$list1\n      break\n   \
    \ fi\n  done\n  \n  echo $list1\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local string1=$1\n    local\
    \ string2=$2\n    local len1=$((${#string1} + 1))\n    local len2=$((${#string2}\
    \ + 1))\n    local len\n    len=$((len1 < len2 ? len1 : len2))\n    local result\n\
    \    result=$(echo $string1 | sed 's/ /\\n/g' | sort | uniq -c | sort -nr | head\
    \ -n $len)\n    echo $result\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local j=0\n        while [ $j -lt\
    \ $len2 ]; do\n            local match=false\n            local char1=${list1:$i:1}\n\
    \            local char2=${list2:$j:1}\n            if [ \"$char1\" = \"$char2\"\
    \ ]; then\n                match=true\n            fi\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n        if [ $match ]; then\n            total=$((total+1))\n\
    \        fi\n    done\n    if [ $len1 -eq $len2 ]; then\n        echo $list1\n\
    \    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    local j\n    local match\n    local match1\n\
    \    local match2\n    local match3\n    local match4\n    local match5\n    local\
    \ match6\n    local match7\n    local match8\n    local match9\n    local match10\n\
    \    local match11\n    local match12\n    local match13\n    local match14\n\
    \    local match15\n    local match16\n    local match17\n    local match18\n\
    \    local match19\n    local match20\n    local match21\n    local match22\n\
    \    local match23\n    local match24\n    local match25\n    local match26\n\
    \    local match27\n    local match28\n    local match29\n    local match30\n\
    \    local match31\n    local match32\n    local match33\n    local match34\n\
    \    local match35\n    local match36\n    local match37\n    local match38\n\
    \    local match39\n    local match40\n    local match41\n    local match42\n\
    \    local match43\n    local match44\n    local match45\n    local match46\n\
    \    local match47\n    local match48\n    local match49\n    local match50\n\
    \    local match51\n    local match52\n    local match53\n    local match54\n\
    \    local match55\n    local match56\n    local match57\n    local match58\n\
    \    local match59\n    local match60\n    local match61\n    local match62\n\
    \    local match63\n    local match64\n    local match65\n    local match66\n\
    \    local match67\n    local match68\n    local match69\n    local match70\n\
    \    local match71\n    local match72\n    local match73\n    local match74\n\
    \    local match75\n    local match76\n    local match77\n    local match78\n\
    \    local match79\n    local match80\n    local match81\n    local match82\n\
    \    local match83\n    local match84\n    local match85\n    local match86\n\
    \    local match87\n    local match88\n    local match89\n    local match90\n\
    \    local \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local total=0\n    local\
    \ i=0\n    while [ $i -lt $len1 ]; do\n        local char=${list1:$i:1}\n    \
    \    local j=0\n        while [ $j -lt $len2 ]; do\n            local char2=${list2:$j:1}\n\
    \            if [ \"$char\" == \"$char2\" ]; then\n                let total+=1\n\
    \            fi\n            let j+=1\n        done\n        let i+=1\n    done\n\
    \    if [ $total -eq $len1 ]; then\n        echo $list1\n    else\n        echo\
    \ $list2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_match=0\n    local i=0\n    local j=0\n    while [ $i -lt ${#list_1}\
    \ ]; do\n        local char=${list_1:$i:1}\n        if [[ $char == $list_2:$j\
    \ ]]; then\n            ((total_match+=1))\n        fi\n        ((i++))\n    \
    \    ((j++))\n    done\n    if [[ $i -eq ${#list_1} ]]; then\n        echo $list_1\n\
    \    else\n        echo $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=${#list1}\n  local len2=${#list2}\n  local len\n  local total\n\
    \  total=0\n  for i in $(seq 0 $((len1 - 1))); do\n    local j\n    for j in $(seq\
    \ 0 $((len2 - 1))); do\n      if [[ ${list1:$i:1} == ${list2:$j:1} ]]; then\n\
    \        total=$((total + 1))\n      fi\n    done\n  done\n  if [[ $total -eq\
    \ $len1 ]]; then\n    echo \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    \n    total=0\n    for (( i=0; i<${#list1};\
    \ i++ )); do\n        len=${#list1[$i]}\n        if (( len > len2 )); then\n \
    \           len=${len2}\n        fi\n        total=$((total + len))\n    done\n\
    \    \n    for (( i=0; i<${#list2}; i++ )); do\n        len=${#list2[$i]}\n  \
    \      if (( len > len1 )); then\n            len=${len1}\n        fi\n      \
    \  total=$((total + len))\n    done\n    \n    if [[ ${total} == ${len1} ]]; then\n\
    \        echo \"${list1}\"\n    else\n        echo \"${list2}\"\n    fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i\n    local j\n    \n    for (( i=0; i<${len1}; i++ ));\
    \ do\n        for (( j=0; j<${len2}; j++ )); do\n            if [[ ${list1:$i:1}\
    \ == ${list2:$j:1} ]]; then\n                total=$((total + 1))\n          \
    \  fi\n        done\n    done\n    \n    if [[ ${total} -eq ${len1} ]]; then\n\
    \        echo \"${list1}\"\n    else\n        echo \"${list2}\"\n    fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1=$1\n    local list_2=$2\n\
    \    local total_chars=0\n    local i=0\n    local j=0\n    local list_1_length=${#list_1[@]}\n\
    \    local list_2_length=${#list_2[@]}\n    local list_1_chars=${#list_1[@]}\n\
    \    local list_2_chars=${#list_2[@]}\n    while [ $i -lt $list_1_length ]; do\n\
    \        (( total_chars += list_1_chars[$i] ))\n        (( i++ ))\n    done\n\
    \    while [ $j -lt $list_2_length ]; do\n        (( total_chars += list_2_chars[j]\
    \ ))\n        (( j++ ))\n    done\n    if [ $total_chars -eq $list_1_length ];\
    \ then\n        echo $list_1\n    elif [ $total_chars -eq $list_2_length ]; then\n\
    \        echo $list_2\n    else\n        echo \"$list_1 has $total_chars chars\
    \ and $list_2 has $list_2_length chars\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local len1=$((${#list1} + 1))\n  local len2=$((${#list2} + 1))\n  local total=0\n\
    \  local i=0\n  while [ $i -lt $len1 ]; do\n    local j=0\n    while [ $j -lt\
    \ $len2 ]; do\n      if [[ ${list1:$i:1} == ${list2:$j:1} ]]; then\n        total=$((total\
    \ + 1))\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  if\
    \ [[ ${total} -eq ${len1} ]]; then\n    echo $list1\n  else\n    echo $list2\n\
    \  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len\n    local total\n    local i\n    local j\n    local match\n    local len\n\
    \    local len1\n    local len2\n    local len\n    local total\n    local i\n\
    \    local j\n    local match\n    local len\n    local len1\n    local len2\n\
    \    local len\n    local total\n    local i\n    local j\n    local match\n \
    \   local len\n    local len1\n    local len2\n    local len\n    local total\n\
    \    local i\n    local j\n    local match\n    local len\n    local len1\n  \
    \  local len2\n    local len\n    local total\n    local i\n    local j\n    local\
    \ match\n    local len\n    local len1\n    local len2\n    local len\n    local\
    \ total\n    local i\n    local j\n    local match\n    local len\n    local len1\n\
    \    local len2\n    local len\n    local total\n    local i\n    local j\n  \
    \  local match\n    local len\n    local len1\n    local len2\n    local len\n\
    \    local total\n    local i\n    local j\n    local match\n    local len\n \
    \   local len1\n    local len2\n    local len\n    local total\n    local i\n\
    \    local j\n    local match\n    local len\n    local len1\n    local len2\n\
    \    local len\n    local total\n    local i\n    local j\n    local match\n \
    \   local len\n    local len1\n    local len2\n    local len\n    local total\n\
    \    local i\n    local j\n    local match\n    local len\n    local len1\n  \
    \  local len2\n    local len\n    local total\n    local i\n    local j\n    local\
    \ match\n    local len\n    local len1\n    local len2\n    local len\n    local\
    \ total\n    local i\n    local j\n    local match\n    local len\n    local len1\n\
    \    local len2\n    local len\n    local total\n    local i\n    local j\n  \
    \  local match\n    local len\n    local len1\n    \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local total_match\n    total_match=0\n    for i in $list_1\n\
    \    do\n        ((total_match+=${#i}))\n    done\n    for i in $list_2\n    do\n\
    \        ((total_match+=${#i}))\n    done\n    if [ $total_match -gt $list_2 ]\n\
    \    then\n        echo $list_1\n    else\n        echo $list_2\n    fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9ww10nio.sh: line 23: [: 0: unary operator expected

    /tmp/tmp9ww10nio.sh: line 23: [: hi: integer expression expected

    /tmp/tmp9ww10nio.sh: line 23: [: hi: integer expression expected

    '
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1} + 1))\n    local len2=$((${#list_2}\
    \ + 1))\n    local total=0\n    for (( i=0; i<${#list_1}; i++ )); do\n       \
    \ local char=${list_1:$i:1}\n        local char2=${list_2:$i:1}\n        if [[\
    \ ${char} < ${char2} ]]; then\n            total=$((total + ${#char}))\n     \
    \   fi\n    done\n    for (( i=0; i<${#list_2}; i++ )); do\n        local char=${list_2:$i:1}\n\
    \        local char2=${list_1:$i:1}\n        if [[ ${char} < ${char2} ]]; then\n\
    \            total=$((total + ${#char}))\n        fi\n    done\n    if [[ ${total}\
    \ == ${len1} ]]; then\n        echo \"${list_1}\"\n    elif [[ ${total} == ${len2}\
    \ ]]; then\n        echo \"${list_2}\"\n    else\n        echo \"${list_1}\"\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local string1=$1\n    local\
    \ string2=$2\n    local len1=$((${#string1} + 1))\n    local len2=$((${#string2}\
    \ + 1))\n    local total=0\n    local i=0\n    while [ $i -lt $len1 ]; do\n  \
    \      local j=0\n        while [ $j -lt $len2 ]; do\n            local char=${string1:$i:1}\n\
    \            local char2=${string2:$j:1}\n            if [ \"$char\" == \"$char2\"\
    \ ]; then\n                let total=$total + 1\n            fi\n            let\
    \ j=$j + 1\n        done\n        let i=$i + 1\n    done\n    if [ \"$total\"\
    \ -eq \"$len1\" ]; then\n        echo $string1\n    else\n        echo $string2\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=54 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=49 encoding='utf-8'>
  timestamp: 1660034428
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    for (( i=1; i<${#list1}; i++ )); do\n        local i1=${list1:$i:1}\n\
    \        local i2=${list2:$i:1}\n        local i1len=$((${#i1} + 1))\n       \
    \ local i2len=$((${#i2} + 1))\n        if (( i1len < i2len )) ; then\n       \
    \     local j=1\n            while (( ${#i1} > ${#i2} )); do\n               \
    \ local i1j=${i1:$j:1}\n                local i2j=${i2:$j:1}\n               \
    \ local i1jlen=$((${#i1j} + 1))\n                local i2jlen=$((${#i2j} + 1))\n\
    \                if (( i1jlen > i2jlen )) ; then\n                    local j=$((\
    \ j + 1 ))\n                else\n                    local j=$(( j + 1 ))\n \
    \                   break\n                fi\n            done\n            local\
    \ j=$(( j + 1 ))\n            local total=$(( total + ${#i1} ))\n        fi\n\
    \    done\n    echo $total\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len\n    len=${#list_1}\n    len=${#list_2}\n    local\
    \ i\n    local j\n    local total\n    total=0\n    for i in $(seq 0 $((len-1)));\
    \ do\n        for j in $(seq 0 $((len-1))); do\n            if [ $i -eq $j ];\
    \ then\n                total=$((total+1))\n            fi\n        done\n   \
    \ done\n    if [ $total -eq $len ]; then\n        echo $list_1\n    else\n   \
    \     echo $list_2\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]\n    then\n        echo \"$list_1\"\n    else\n  \
    \      echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n#\n# $1 is a space-separated list\n# $2\
    \ is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i\n    local j\n    \n    for (( i=0; i<${#list1}; i++ ));\
    \ do\n        for (( j=0; j<${#list2}; j++ )); do\n            if [[ ${list1:$i:1}\
    \ == ${list2:$j:1} ]]; then\n                (( total+=1 ))\n            fi\n\
    \        done\n    done\n    \n    if [[ ${total} == ${len1} ]]; then\n      \
    \  echo \"${list1}\"\n    else\n        echo \"${list2}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034423
