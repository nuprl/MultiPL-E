name: HumanEval_44_change_base
language: sh
prompt: "#!/bin/bash\n# Change numerical base of input number x to base.\n# return\
  \ string representation after the conversion.\n# base numbers are less than 10.\n\
  #\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n"
tests: "}\n\ncandidate() {\n    change_base \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"8\" \"3\") = \"22\" ]]\n    [[ $(candidate \"9\" \"3\") = \"\
  100\" ]]\n    [[ $(candidate \"234\" \"2\") = \"11101010\" ]]\n    [[ $(candidate\
  \ \"16\" \"2\") = \"10000\" ]]\n    [[ $(candidate \"8\" \"2\") = \"1000\" ]]\n\
  \    [[ $(candidate \"7\" \"2\") = \"111\" ]]\n    [[ $(candidate \"2\" \"3\") =\
  \ \"2\" ]]\n    [[ $(candidate \"3\" \"4\") = \"3\" ]]\n    [[ $(candidate \"4\"\
  \ \"5\") = \"4\" ]]\n    [[ $(candidate \"5\" \"6\") = \"5\" ]]\n    [[ $(candidate\
  \ \"6\" \"7\") = \"6\" ]]\n    [[ $(candidate \"7\" \"8\") = \"7\" ]]\n}\n\nrun_test"
completions: ["    local x base\n    x=$1\n    base=$2\n    local str\n    local i\n\
    \    local j\n    local k\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c", "  local x base\n  x=$1\n  base=$2\n\
    \  local str\n  str=$(( x / base ))\n  str=$(( str * base ))\n  str=$(( str +\
    \ x % base ))\n  echo $str", "  local x base\n  x=$1\n  base=$2\n  local ret\n\
    \  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x % base ))\n\
    \  echo $ret", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(( x /\
    \ base ))\n  ret=$(( ret * base ))\n  ret=$(( ret / base ))\n  ret=$(( ret % base\
    \ ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret * base ))\n  ret=$(( ret / base ))\n\
    \  ret=$(( ret % base ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret * base ))\n  ret=$((\
    \ ret / base ))\n  ret=$(( ret % base ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret\
    \ * base ))\n  ret=$(( ret / base ))\n  ret=$(( ret % base ))\n  ret=$(( ret +\
    \ 1 ))\n  ret=$(( ret * base ))\n  ret=$(( ret / base ))\n  ret=$(( ret % base\
    \ ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret * base ))\n  ret=$(( ret / base ))\n\
    \  ret=$(( ret % base ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret * base ))\n  ret=$((\
    \ ret / base ))\n  ret=$(( ret % base ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret\
    \ * base ))\n  ret=$(( ret / base ))\n  ret=$(( ret % base ))\n  ret=$(( ret +\
    \ 1 ))\n  ret=$(( ret * base ))\n  ret=$(( ret / base ))\n  ret=$(( ret % base\
    \ ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret * base ))\n  ret=$(( ret / base ))\n\
    \  ret=$(( ret % base ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret * base ))\n  ret=$((\
    \ ret / base ))\n  ret=$(( ret % base ))\n  ret=$(( ret + 1 ))\n  ret=$(( ret\
    \ * base ))\n  ret=$(( ret / base ))\n  ret=$(( ret % base ))\n  ret=$(( ret +\
    \ 1 ))\n  ret=$(( ", "    local x base result\n    x=\"$1\"\n    base=\"$2\"\n\
    \    if [ \"$base\" -lt 10 ]; then\n        echo \"$base is not an integer.\"\n\
    \        return 1\n    fi\n    if [ \"$base\" -gt 2 ]; then\n        echo \"$base\
    \ is too large.\"\n        return 1\n    fi\n    if [ \"$x\" -lt 0 ]; then\n \
    \       echo \"$x is negative.\"\n        return 1\n    fi\n    if [ \"$x\" -gt\
    \ \"10#$base\" ]; then\n        echo \"$x is too large.\"\n        return 1\n\
    \    fi\n    result=\"$(( x / $base ))\"\n    if [ \"$result\" -eq 0 ]; then\n\
    \        echo \"$x is zero.\"\n        return 1\n    fi\n    if [ \"$result\"\
    \ -lt \"10#$base\" ]; then\n        echo \"$x is too small.\"\n        return\
    \ 1\n    fi\n    echo \"$result\"", "    local x=\"$1\"\n    local base=\"$2\"\
    \n    local ret\n    local i\n    local j\n    local k\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n", "  local\
    \ x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" | sed\
    \ -e 's/\\(.*\\)$/\\10\\1/g')\n  echo \"$result\"", "    local x base\n    x=$1\n\
    \    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"$x is not a base $base\
    \ number\"\n        return 1\n    fi\n    if [ $base -gt 2 ]; then\n        echo\
    \ \"$x is not a base $base number\"\n        return 1\n    fi\n    if [ $base\
    \ -eq 2 ]; then\n        echo \"$x is base 2\"\n        echo \"$(( $x / $base\
    \ ))\"\n    else\n        echo \"$x is base $base\"\n        echo \"$(( $x / $base\
    \ ))\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo\
    \ \"$x\" | bc -l | awk '{print $'$base'}')\n  echo \"$ret\"", "    local x base\n\
    \    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo\
    \ \"$base: base must be less than 10\"\n        return 1\n    fi\n    if [ \"\
    $base\" -gt 36 ]; then\n        echo \"$base: base must be less than 36\"\n  \
    \      return 1\n    fi\n    if [ \"$x\" -lt 0 ]; then\n        echo \"$x: must\
    \ be positive\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"$base\" ]; then\n\
    \        echo \"$x: must be less than $base\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -eq \"$x\" ]; then\n        echo \"$x: must be different from zero\"\
    \n        return 1\n    fi\n    local ret\n    ret=\"$(( x / $base ))\"\n    if\
    \ [ \"$ret\" -lt \"$x\" ]; then\n        ret=\"$(( $x - $ret * $base ))\"\n  \
    \  fi\n    echo \"$ret\"", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "  local x base\n  x=$1\n  base=$2\n  local digit\n\
    \  digit=$(( ${x} / ${base} ))\n  (( ${digit} > 9 )) && digit=$(( ${digit} - 9\
    \ ))\n  echo ${digit}", "  local x=\"$1\"\n  local base=\"$2\"\n  local ret\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n", "  local x base\n \
    \ x=$1\n  base=$2\n  local result\n  result=0\n  while [ $x -gt 0 ]; do\n    result=$((result*base))\n\
    \    x=$((x/base))\n  done\n  echo $result", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base $base is too small.\"\n  \
    \      return 1\n    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base $base\
    \ is too large.\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n     \
    \   echo \"$x is negative.\"\n        return 1\n    fi\n    if [ $x -gt $((10#$base))\
    \ ]; then\n        echo \"$x is too large.\"\n        return 1\n    fi\n    local\
    \ ret\n    ret=$(echo \"$x\" | bc)\n    echo $ret", "  local x=\"$1\"\n  local\
    \ base=\"$2\"\n  local output\n  output=$(( x / base ))\n  output=$(( output *\
    \ base ))\n  output=$(( output + x ))\n  echo \"$output\"", "    local x base\n\
    \    x=$1\n    base=$2\n    local ret\n    ret=$(echo \"$x\" | bc -l | awk '{print\
    \ $1*$2}')\n    echo \"$ret\"", "    local x base\n    x=$1\n    base=$2\n   \
    \ local result\n    result=$(( x / base ))\n    local remainder\n    remainder=$((\
    \ x % base ))\n    if [ $remainder -eq 0 ]; then\n        echo \"$result\"\n \
    \   else\n        echo \"$result$base\"\n    fi", "    local x=\"$1\"\n    local\
    \ base=\"$2\"\n    local result\n    local i\n    local j\n    local k\n    local\
    \ digit\n    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local\
    \ tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local\
    \ tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n\
    \    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local\
    \ tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n\
    \    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local\
    \ tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n\
    \    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local\
    \ tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n\
    \    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local\
    \ tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n\
    \    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local\
    \ tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n\
    \    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local\
    \ tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n\
    \    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local\
    \ tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n\
    \    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local\
    \ tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n\
    \    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local\
    \ tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n\
    \    local tmp96\n    ", "    local x base\n    x=$1\n    base=$2\n    local str\n\
    \    str=$(echo \"$x\" | bc)\n    local i\n    i=0\n    while [ $i -lt $base ];\
    \ do\n        str=$(echo \"$str * $base\" | bc)\n        i=$((i+1))\n    done\n\
    \    echo \"$str\"", "    local x=\"$1\"\n    local base=\"$2\"\n    local result\n\
    \    local i\n    local j\n    local k\n    local digit\n    local digits\n  \
    \  local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n", "    local x=\"$1\"\n    local base=\"\
    $2\"\n    local result\n    if [ $base -lt 10 ]; then\n        result=$(echo \"\
    $x\" | bc)\n    else\n        result=$(echo \"$x\" | bc -l)\n    fi\n    echo\
    \ \"$result\"", "  local x=\"$1\"\n  local base=\"$2\"\n  local ret=\"$x\"\n \
    \ while [ \"$ret\" -ge 10 ]; do\n    ret=\"$(rem \"$ret\" \"$base\")\"\n  done\n\
    \  echo \"$ret\"", "    local x=\"$1\"\n    local base=\"$2\"\n    local output\n\
    \    output=$(echo \"$x\" | sed \"s/\\([0-9]*\\)$base/\\10/g\")\n    echo \"$output\"",
  "    local x base\n    x=$1\n    base=$2\n    local result\n    result=$(( x / base\
    \ ))\n    local remainder\n    remainder=$(( x % base ))\n    local i\n    for\
    \ (( i=1; i<=remainder; i++ )); do\n        result=$(( result * base ))\n    done\n\
    \    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base $base is not supported\"\n\
    \        return 1\n    fi\n    if [ $base -eq 2 ]; then\n        result=$((10#$x))\n\
    \    elif [ $base -eq 8 ]; then\n        result=$((10#$x))\n    elif [ $base -eq\
    \ 10 ]; then\n        result=$((10#$x))\n    elif [ $base -eq 16 ]; then\n   \
    \     result=$((10#$x))\n    elif [ $base -eq 20 ]; then\n        result=$((10#$x))\n\
    \    elif [ $base -eq 24 ]; then\n        result=$((10#$x))\n    elif [ $base\
    \ -eq 28 ]; then\n        result=$((10#$x))\n    elif [ $base -eq 32 ]; then\n\
    \        result=$((10#$x))\n    elif [ $base -eq 36 ]; then\n        result=$((10#$x))\n\
    \    elif [ $base -eq 40 ]; then\n        result=$((10#$x))\n    elif [ $base\
    \ -eq 48 ]; then\n        result=$((10#$x))\n    elif [ $base -eq 56 ]; then\n\
    \        result=$((10#$x))\n    elif [ $base -eq 64 ]; then\n        result=$((10#$x))\n\
    \    elif [ $base -eq 72 ]; then\n        result=$((10#$x))\n    elif [ $base\
    \ -eq 80 ]; then\n        result=$((10#$x))\n    elif [ $base -eq 88 ]; then\n\
    \        result=$((10#$x))\n    elif [ $base -eq 96 ]; then\n        result=$((10#$x))\n\
    \    elif [ $base -eq 104 ]; then\n        result=$((10#$x))\n    elif [ $base\
    \ -eq 112 ]; then\n        result=$((10#$x))\n    elif [ $base -eq 120 ]; then\n\
    \        result=$((10#$x))\n    elif [ $base -eq 128 ]; then\n        result=$((10#$x))\n\
    \    elif [ $base -eq 136 ]; then\n        result=$((10#$x))\n    elif [ $base\
    \ -eq 144 ]; then\n        result=$((10#$x))\n    elif [ $base -eq 152 ]; then\n\
    \        result=$((10#$x))\n    elif [ $base -eq 160 ]; then\n        result=$((10#$x))\n\
    \    elif [ $base -eq 168 ]; then\n        result=$((10#$x))\n    elif [ $base\
    \ -eq 176 ]; then\n        result=$((10#$x))\n    elif [ $base -eq 184 ]; then\n\
    \        result=$((10#$x))\n    elif [ $base -eq 192 ]; then\n        result",
  "  local x=\"$1\"\n  local base=\"$2\"\n  local output\n  output=$(( x / base ))\n\
    \  output=$(( output * base ))\n  output=$(( output + x % base ))\n  echo \"$output\"",
  "    local x=\"$1\"\n    local base=\"$2\"\n    local result\n    if [ \"$base\"\
    \ -lt 10 ]; then\n        echo \"$base is too small to change base of $x\"\n \
    \       return 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n        echo \"$base\
    \ is too big to change base of $x\"\n        return 1\n    fi\n    result=$((\
    \ x / $base ))\n    echo $result", "  local x=\"$1\"\n  local base=\"$2\"\n  local\
    \ output\n  output=$(echo \"$x\" | bc -l)\n  echo \"$output\" | awk -v b=\"$base\"\
    \ 'BEGIN{printf \"%0*d\", b, $0}'", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"$x is not a base $base number\"\
    \n        return 1\n    fi\n    if [ $base -gt 2 ]; then\n        echo \"$x is\
    \ not a base $base number\"\n        return 1\n    fi\n    if [ $base -eq 0 ];\
    \ then\n        echo \"$x is not a base $base number\"\n        return 1\n   \
    \ fi\n    local res\n    res=$(echo \"$x\" | bc)\n    if [ $res -gt $x ]; then\n\
    \        echo \"$x is not a base $base number\"\n        return 1\n    fi\n  \
    \  res=$(echo \"$res/$base\" | bc)\n    res=$(echo \"$res%$base\" | bc)\n    res=$(echo\
    \ \"$res\" | bc)\n    echo \"$res\"", "    local x base\n    x=$1\n    base=$2\n\
    \    local i\n    local output\n    local digit\n    local remainder\n    local\
    \ quotient\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remainder_str\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remainder_str\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remainder_str\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remainder_str\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remainder_str\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remainder_str\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remainder_str\n    local quotient_str\n    local remainder_str\n    local quotient_str\n\
    \    local remainder_str\n    local quotient_str\n    local remainder_str\n  \
    \  local quotient_str\n    local remainder_str\n    local quotient_str\n    local\
    \ remain", "    local x=\"$1\"\n    local base=\"$2\"\n    local output\n    output=$(echo\
    \ \"$x\" | bc -l)\n    local i\n    for (( i=1; i<$(( $base-$output )); i++ ));\
    \ do\n        output=$(echo \"$output\" | bc -l)\n    done\n    echo $output",
  "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n      \
    \  echo \"$base\"\n    elif [ $base -eq 10 ]; then\n        echo \"0\"\n    else\n\
    \        echo \"$base\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  echo \"\
    $(( x / base ))\"", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "  local x base\n  x=$1\n  base=$2\n  local n\n  n=$(echo $x | sed\
    \ -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\\
    )/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo\
    \ $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\\
    )\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n\
    \  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e\
    \ 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\\
    1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo\
    \ $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\\
    )\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n\
    \  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e\
    \ 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\\
    1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo\
    \ $n | sed -e 's/\\(.\\)\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\\
    )\\(.\\)/\\1\\l\\2/g')\n  n=$(echo $n | sed -e 's/\\(.\\)\\(.\\)/\\1", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"\
    $x is not a base $base\"\n        return 1\n    fi\n    local result\n    result=0\n\
    \    while [ $x -gt 0 ]; do\n        ((result+=base))\n        ((x-=1))\n    done\n\
    \    echo \"$result\"", "    local x=\"$1\"\n    local base=\"$2\"\n    local\
    \ ret\n    local i\n    local j\n    local k\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n", "    local x base\n\
    \    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"$base\"\n\
    \    else\n        echo \"$base\"\n    fi", "    local x base\n    x=$1\n    base=$2\n\
    \    local result\n    result=$(echo $x | bc -l | awk '{printf \"%0${base}d\"\
    , $0}')\n    echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local n\n\
    \  n=$(echo $x | bc)\n  echo $(( ${n} * ${base} ))", "    local x base\n    x=$1\n\
    \    base=$2\n    local ret\n    ret=$(echo \"$x\" | bc -l | awk '{printf \"%0${base}d\\\
    n\", $0}')\n    echo \"$ret\"", "    local x base\n    x=$1\n    base=$2\n   \
    \ local result\n    result=$(( x / base ))\n    result=$(( result * base ))\n\
    \    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result % base ))\n    result", "    local x=\"$1\"\n    local base=\"$2\"\n\
    \    local result\n    if [ $base -lt 10 ]; then\n        echo \"Base $base is\
    \ too small\"\n        return 1\n    fi\n    if [ $base -gt 36 ]; then\n     \
    \   echo \"Base $base is too large\"\n        return 1\n    fi\n    if [ $x -lt\
    \ 0 ]; then\n        echo \"Base $base is too small\"\n        return 1\n    fi\n\
    \    if [ $x -gt $((10#$base)) ]; then\n        echo \"Base $base is too large\"\
    \n        return 1\n    fi\n    result=$((10#$x))\n    while [ $result -gt 0 ];\
    \ do\n        result=$((result/$base))\n    done\n    echo $result", "    local\
    \ x=\"$1\"\n    local base=\"$2\"\n    local result\n    if [ \"$base\" -lt 10\
    \ ]; then\n        echo \"$base is too small for base conversion\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -lt 1 ]; then\n        echo \"$x is too small for\
    \ base conversion\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"10\" ]; then\n\
    \        echo \"$x is too large for base conversion\"\n        return 1\n    fi\n\
    \    if [ \"$base\" -eq 2 ]; then\n        result=$((10#$x))\n    elif [ \"$base\"\
    \ -eq 8 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 16 ]; then\n\
    \        result=$((10#$x))\n    elif [ \"$base\" -eq 10 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 16 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 2 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 8 ];\
    \ then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 16 ]; then\n     \
    \   result=$((10#$x))\n    elif [ \"$base\" -eq 10 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 2 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 8 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 16\
    \ ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 10 ]; then\n  \
    \      result=$((10#$x))\n    elif [ \"$base\" -eq 2 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 8 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 16 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 10\
    \ ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 2 ]; then\n   \
    \     result=$((10#$x))\n    elif [ \"$base\" -eq 8 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 16 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 10 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 2\
    \ ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 8 ]; then\n   \
    \     result=$((10#$x))\n    elif [ \"$base\" -eq 16 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 10 ]; then\n        result=$", "  local x=\"$1\"\n \
    \ local base=\"$2\"\n  local output\n  output=\"$(echo \"$x\" | bc | sed -e \"\
    s/\\(.*\\)\\(.*\\)/\\1$base\\2/\")\"\n  echo \"$output\"", "    local x base\n\
    \    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo\
    \ \"$base is not a valid base for $x\"\n        exit 1\n    fi\n    local result\n\
    \    result=0\n    while [ \"$x\" -gt 0 ]; do\n        result=$(( $result * $base\
    \ ))\n        x=$(( $x / $base ))\n    done\n    echo \"$result\"", "    local\
    \ x=\"$1\"\n    local base=\"$2\"\n    local result=\"\"\n    local digit\n  \
    \  local i\n    local j\n    local k\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b", "    local x base\n    x=$1\n    base=$2\n\
    \    local res\n    res=$(echo $x | bc | sed -e 's/^0*//' -e 's/^'$base'$//')\n\
    \    echo $res", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    if [ $base -gt 10 ]; then\n        echo \"\
    $result\" | bc | awk '{print $1*$2}'\n    else\n        echo \"$result\"\n   \
    \ fi", "    local x base\n    x=$1\n    base=$2\n    local result\n    result=$(echo\
    \ $x | bc)\n    if [ $base -eq 10 ]; then\n        echo $result\n    else\n  \
    \      echo $result | awk -v b=$base '{print b * $1}'\n    fi", "    local x base\n\
    \    x=$1\n    base=$2\n    local ret\n    if [ $base -lt 10 ]; then\n       \
    \ echo \"Base $base is too small\"\n        return 1\n    fi\n    if [ $base -gt\
    \ 36 ]; then\n        echo \"Base $base is too large\"\n        return 1\n   \
    \ fi\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q", "    local\
    \ x base\n    x=$1\n    base=$2\n    local i\n    local result\n    local digit\n\
    \    local j\n    local k\n    local digit\n    local k\n    local digit\n   \
    \ local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k", "    local x base\n    x=$1\n    base=$2\n\
    \    local result\n    result=0\n    while [ $x -gt 0 ]; do\n        result=$((result\
    \ * base))\n        result=$((result + x))\n        x=$((x / base))\n    done\n\
    \    echo $result", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    echo \"$result\"", "    local x base\n  \
    \  x=$1\n    base=$2\n    local result\n    result=$(echo \"$x\" | bc)\n    if\
    \ [ $base -gt 0 ]; then\n        echo \"$result\" | bc -l | awk '{printf(\"%'$base'i\\\
    n\", $1)}'\n    else\n        echo \"$result\" | bc -l | awk '{printf(\"%'$base'd\\\
    n\", $1)}'\n    fi", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if\
    \ [ \"$base\" -lt 10 ]; then\n        echo \"$x is not a base $base\"\n      \
    \  return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc)\n    if\
    \ [ \"$base\" -eq 10 ]; then\n        echo \"$result\"\n    else\n        echo\
    \ \"$result $base\"\n    fi", "    local x base\n    x=\"$1\"\n    base=\"$2\"\
    \n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base: not a valid base number\"\
    \n        return 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n        echo \"\
    $base: not a valid base number\"\n        return 1\n    fi\n    if [ \"$x\" -eq\
    \ 0 ]; then\n        echo \"$base: zero\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -eq 1 ]; then\n        echo \"$base: one\"\n        return 1\n    fi\n\
    \    if [ \"$x\" -eq 2 ]; then\n        echo \"$base: two\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -eq 3 ]; then\n        echo \"$base: three\"\n      \
    \  return 1\n    fi\n    if [ \"$x\" -eq 4 ]; then\n        echo \"$base: four\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq 5 ]; then\n        echo \"$base:\
    \ five\"\n        return 1\n    fi\n    if [ \"$x\" -eq 6 ]; then\n        echo\
    \ \"$base: six\"\n        return 1\n    fi\n    if [ \"$x\" -eq 7 ]; then\n  \
    \      echo \"$base: seven\"\n        return 1\n    fi\n    if [ \"$x\" -eq 8\
    \ ]; then\n        echo \"$base: eight\"\n        return 1\n    fi\n    if [ \"\
    $x\" -eq 9 ]; then\n        echo \"$base: nine\"\n        return 1\n    fi\n \
    \   if [ \"$x\" -eq 10 ]; then\n        echo \"$base: ten\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -eq 11 ]; then\n        echo \"$base: eleven\"\n    \
    \    return 1\n    fi\n    if [ \"$x\" -eq 12 ]; then\n        echo \"$base: twelve\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq 13 ]; then\n        echo \"$base:\
    \ thirteen\"\n        return 1\n    fi\n    if [ \"$x\" -eq 14 ]; then\n     \
    \   echo \"$base: fourteen\"\n        return 1\n    fi\n    if [ \"$x\" -eq 15\
    \ ]; then\n        echo \"$base: fifteen\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -eq 16 ]; then\n        echo \"$base: sixteen\"\n        return 1\n \
    \   fi\n    if [ \"$x\" -eq 17 ]; then\n        echo \"$base: seventeen\"\n  \
    \      return 1\n    fi\n    if [ \"$x\" -eq 18 ]; then\n        echo \"$base:\
    \ eighteen\"\n        return 1\n    fi\n    if [ \"$x\" -eq 19 ]; then\n     \
    \   echo \"$base: nineteen", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n\
    \  result=$(echo \"$x\" | bc)\n  echo \"$result\"", "    local x base\n    x=$1\n\
    \    base=$2\n    local result\n    result=$(echo $x | sed -e 's/\\([0-9]*\\)$base/\\\
    1/g')\n    echo \"$result\"", "  local x=\"$1\"\n  local base=\"$2\"\n  local\
    \ ret\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n", "    local x=\"\
    $1\"\n    local base=\"$2\"\n    local result\n    if [ \"$base\" -lt 10 ]; then\n\
    \        echo \"Base must be less than 10\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -eq 0 ]; then\n        echo \"Cannot change base of 0\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -lt \"$base\" ]; then\n        echo \"Base must be\
    \ greater than or equal to $base\"\n        return 1\n    fi\n    if [ \"$x\"\
    \ -gt \"$base\" ]; then\n        result=$(( $x / $base ))\n        echo \"$result\"\
    \n    else\n        result=$x\n    fi\n    echo $result", "    local x=\"$1\"\n\
    \    local base=\"$2\"\n    local result\n    if [ \"$base\" -lt 10 ]; then\n\
    \        echo \"$base is not supported\"\n        return 1\n    fi\n    if [ \"\
    $base\" -eq 2 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 8 ];\
    \ then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 16 ]; then\n     \
    \   result=$((10#$x))\n    elif [ \"$base\" -eq 10 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 16 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 2 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 8 ];\
    \ then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 16 ]; then\n     \
    \   result=$((10#$x))\n    elif [ \"$base\" -eq 10 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 2 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 8 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 16\
    \ ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 10 ]; then\n  \
    \      result=$((10#$x))\n    elif [ \"$base\" -eq 2 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 8 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 16 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 10\
    \ ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 2 ]; then\n   \
    \     result=$((10#$x))\n    elif [ \"$base\" -eq 8 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 16 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 10 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 2\
    \ ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 8 ]; then\n   \
    \     result=$((10#$x))\n    elif [ \"$base\" -eq 16 ]; then\n        result=$((10#$x))\n\
    \    elif [ \"$base\" -eq 10 ]; then\n        result=$((10#$x))\n    elif [ \"\
    $base\" -eq 2 ]; then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 8 ];\
    \ then\n        result=$((10#$x))\n    elif [ \"$base\" -eq 16 ]; then\n     \
    \   result=$((10#$x))", "    local x=\"$1\"\n    local base=\"$2\"\n    local\
    \ result\n    if [ $base -lt 10 ]; then\n        result=$((10#$x))\n    else\n\
    \        result=$((x#$base))\n    fi\n    echo \"$result\"", "    local x=\"$1\"\
    \n    local base=\"$2\"\n    local result\n    local i\n    local digit\n    local\
    \ j\n    local k\n    local digit\n    local k\n    local digit\n    local k\n\
    \    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n    local digit\n    local k\n    local digit\n  \
    \  local k\n    local digit\n    local k\n    local digit\n    local k\n    local\
    \ digit\n    local k\n    local digit\n    local k\n    local digit\n    local\
    \ k\n    local digit\n    local k\n    local digit\n    local k\n    local digit\n\
    \    local k\n    local digit\n    local k\n    local digit\n    local k\n   \
    \ local digit\n    local k\n", "    local x base\n    x=\"$1\"\n    base=\"$2\"\
    \n    if [ $base -lt 10 ]; then\n        echo \"$x is not a base $base\"\n   \
    \     return 1\n    fi\n    if [ $base -gt 2 ]; then\n        echo \"$x is not\
    \ a base $base\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n      \
    \  echo \"$x is not a base $base\"\n        return 1\n    fi\n    if [ $x -gt\
    \ $((10#$base)) ]; then\n        echo \"$x is not a base $base\"\n        return\
    \ 1\n    fi\n    local ret\n    if [ $base == 10 ]; then\n        local ret\n\
    \        ret=$((10#$x))\n    elif [ $base == 2 ]; then\n        local ret\n  \
    \      ret=$((2#$x))\n    else\n        local ret\n        ret=$((10#$x))\n  \
    \      local i\n        for i in $(seq 0 $((${#ret}-1))); do\n            ret=$((ret*$base))\n\
    \        done\n    fi\n    echo \"$ret\"", "    local x=\"$1\"\n    local base=\"\
    $2\"\n    local result\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base\
    \ must be less than 10.\"\n        return 1\n    fi\n    if [ \"$x\" -lt 0 ];\
    \ then\n        echo \"Input must be positive.\"\n        return 1\n    fi\n \
    \   if [ \"$x\" -gt \"10\" ];then\n        echo \"Input must be less than 10.\"\
    \n        return 1\n    fi\n    if [ \"$base\" -eq 2 ]; then\n        result=$(echo\
    \ \"$x\" | bc)\n    else\n        result=$(echo \"$x\" | bc -l)\n    fi\n    echo\
    \ \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo\
    \ \"$x\" | bc | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed\
    \ 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"\
    $result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed\
    \ 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"\
    $result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed\
    \ 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"\
    $result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed\
    \ 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo \"\
    $result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed 's/^0*//')\n  result=$(echo \"$result\" | sed 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed 's/^", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo $result", "    local x base\n    x=$1\n    base=$2\n \
    \   local result\n    result=$(echo \"$x\" | bc | awk '{print $1*$2}')\n    if\
    \ [ $base -gt 10 ]; then\n        result=$(echo \"$result\" | bc | awk '{print\
    \ $1*$2}')\n    fi\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    local output\n    output=$(echo \"$x\" | bc)\n    if [ \"$base\" -lt 10 ];\
    \ then\n        echo \"$output\"\n    else\n        echo \"$output/$base\"\n \
    \   fi", "  local x base\n  x=$1\n  base=$2\n  local i\n  for i in $(seq 0 $((${#x}-1)));\
    \ do\n    local digit=${x:$i:1}\n    local digit2\n    digit2=$(echo \"$digit\"\
    \ | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo \"$digit2\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    digit2=$(echo \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n\
    \    digit2=$(echo \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo\
    \ \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo \"$digit2\"\
    \ | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo \"$digit2\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    digit2=$(echo \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n\
    \    digit2=$(echo \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo\
    \ \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo \"$digit2\"\
    \ | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo \"$digit2\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    digit2=$(echo \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n\
    \    digit2=$(echo \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo\
    \ \"$digit2\" | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo \"$digit2\"\
    \ | sed -e 's/^0*//' -e 's/^0*//')\n    digit2=$(echo \"$digit2\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    digit2=$(echo \"$digit", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x=\"$1\"\n    local base=\"$2\"\
    \n    local result=\"\"\n    while (( x != 0 )); do\n        result=\"$result${x%$base}\"\
    \n        x=\"$(( x / $base ))\"\n    done\n    echo \"$result\"", "    local\
    \ x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n \
    \       echo \"$base is not a base 10 number\"\n        return 1\n    fi\n   \
    \ local result\n    result=0\n    while [ \"$x\" -gt 0 ]; do\n        (( result\
    \ = result * base + x % base ))\n        x=\"$(( x / base ))\"\n    done\n   \
    \ echo \"$result\"", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n\
    \  result=$(echo \"$x\" | bc)\n  echo \"$result\" | bc | awk '{print $1*$2}'",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo \"$x\" | bc)\n\
    \  echo \"$result\" | bc | awk '{printf(\"%'$base'i\\n\", $1)}'", "    local x\
    \ base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n   \
    \     echo \"$base: invalid base $base\"\n        return 1\n    fi\n    if [ \"\
    $base\" -gt 36 ]; then\n        echo \"$base: invalid base $base\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc | sed -e 's/^0*//')\n\
    \    if [ \"$result\" -eq \"$x\" ]; then\n        echo \"$base: base $base is\
    \ equal to $x\"\n        return 1\n    fi\n    if [ \"$result\" -le \"$x\" ];\
    \ then\n        echo \"$base: base $base is less than $x\"\n        return 1\n\
    \    fi\n    if [ \"$result\" -gt \"$x\" ]; then\n        echo \"$base: base $base\
    \ is greater than $x\"\n        return 1\n    fi\n    echo \"$base: base $base\
    \ is equal to $x\"\n    return 0", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=$(echo \"$x\" | bc)\n  echo \"$result\" | sed -e \"s/^0*//\"\
    \ -e \"s/^$base//\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"$x is not a base $base\"\n        return 1\n\
    \    fi\n    if [ $base -gt 36 ]; then\n        echo \"$x is not a base $base\"\
    \n        return 1\n    fi\n    local result\n    result=$(( $x / $base ))\n \
    \   local remainder\n    remainder=$(( $x % $base ))\n    if [ $remainder -eq\
    \ 0 ]; then\n        echo \"$result $base\"\n    else\n        echo \"$result\
    \ $base\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  echo \"$result\"", "    local x=\"$1\"\n    local base=\"$2\"\
    \n    local ret\n    local i\n    local j\n    local k\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n", "   \
    \ local x=\"$1\"\n    local base=\"$2\"\n    local output\n    output=$(echo \"\
    $x\" | bc)\n    local output2\n    output2=$(echo \"$output\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output3\n    output3=$(echo \"$output2\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output4\n    output4=$(echo \"$output3\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output5\n    output5=$(echo \"$output4\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output6\n    output6=$(echo \"$output5\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output7\n    output7=$(echo \"$output6\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output8\n    output8=$(echo \"$output7\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output9\n    output9=$(echo \"$output8\" | sed -e 's/^0*//'\
    \ -e 's/^0*//')\n    local output10\n    output10=$(echo \"$output9\" | sed -e\
    \ 's/^0*//' -e 's/^0*//')\n    local output11\n    output11=$(echo \"$output10\"\
    \ | sed -e 's/^0*//' -e 's/^0*//')\n    local output12\n    output12=$(echo \"\
    $output11\" | sed -e 's/^0*//' -e 's/^0*//')\n    local output13\n    output13=$(echo\
    \ \"$output12\" | sed -e 's/^0*//' -e 's/^0*//')\n    local output14\n    output14=$(echo\
    \ \"$output13\" | sed -e 's/^0*//' -e 's/^0*//')\n    local output15\n    output15=$(echo\
    \ \"$output14\" | sed -e 's/^0*//' -e 's/^0*//')\n    local output16\n    output16=$(echo\
    \ \"$output15\" | sed -e 's/^0*//' -e 's/^0*//')\n    local output17\n    output17=$(echo\
    \ \"$output16\" | sed -e 's/^0*//' -e ", "    local x base\n    x=$1\n    base=$2\n\
    \    local output\n    output=$(echo \"$x\" | bc)\n    local i\n    for i in $(seq\
    \ 0 $((${#output} - 1))); do\n        local digit\n        digit=$(echo \"${output}\"\
    \ | cut -d \".\" -f $i)\n        digit=$(echo \"${digit}\" | bc)\n        digit=$(echo\
    \ \"${digit} * $base\" | bc)\n        output=$(echo \"${output} + $digit\" | bc)\n\
    \    done\n    echo \"$output\"", "    local x=\"$1\"\n    local base=\"$2\"\n\
    \    local output\n    local i\n    local j\n    local k\n    local digit\n  \
    \  local digit2\n    local digit3\n    local digit4\n    local digit5\n    local\
    \ digit6\n    local digit7\n    local digit8\n    local digit9\n    local digit10\n\
    \    local digit11\n    local digit12\n    local digit13\n    local digit14\n\
    \    local digit15\n    local digit16\n    local digit17\n    local digit18\n\
    \    local digit19\n    local digit20\n    local digit21\n    local digit22\n\
    \    local digit23\n    local digit24\n    local digit25\n    local digit26\n\
    \    local digit27\n    local digit28\n    local digit29\n    local digit30\n\
    \    local digit31\n    local digit32\n    local digit33\n    local digit34\n\
    \    local digit35\n    local digit36\n    local digit37\n    local digit38\n\
    \    local digit39\n    local digit40\n    local digit41\n    local digit42\n\
    \    local digit43\n    local digit44\n    local digit45\n    local digit46\n\
    \    local digit47\n    local digit48\n    local digit49\n    local digit50\n\
    \    local digit51\n    local digit52\n    local digit53\n    local digit54\n\
    \    local digit55\n    local digit56\n    local digit57\n    local digit58\n\
    \    local digit59\n    local digit60\n    local digit61\n    local digit62\n\
    \    local digit63\n    local digit64\n    local digit65\n    local digit66\n\
    \    local digit67\n    local digit68\n    local digit69\n    local digit70\n\
    \    local digit71\n    local digit72\n    local digit73\n    local digit74\n\
    \    local digit75\n    local digit76\n    local digit77\n    local digit78\n\
    \    local digit79\n    local digit80\n    local digit81\n    local digit82\n\
    \    local digit83\n    local digit84\n    local digit85\n    local digit86\n\
    \    local digit87\n    local digit88\n    local digit89\n    local digit90\n\
    \    local digit91\n    local digit92\n    local digit93\n    local digit94\n\
    \    local digit95\n    local digit96\n    local digit97\n", "    local x base\n\
    \    x=$1\n    base=$2\n    local ret\n    if [ $base -eq 10 ]; then\n       \
    \ echo \"$x\"\n    elif [ $base -eq 2 ]; then\n        echo \"$((10#$x))\"\n \
    \   elif [ $base -eq 8 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base\
    \ -eq 16 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base -eq 32 ]; then\n\
    \        echo \"$((10#$x))\"\n    elif [ $base -eq 64 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ $base -eq 128 ]; then\n        echo \"$((10#$x))\"\n\
    \    elif [ $base -eq 256 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base\
    \ -eq 512 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base -eq 1024 ]; then\n\
    \        echo \"$((10#$x))\"\n    elif [ $base -eq 2048 ]; then\n        echo\
    \ \"$((10#$x))\"\n    elif [ $base -eq 4096 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ $base -eq 8192 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base\
    \ -eq 16384 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base -eq 32768 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ $base -eq 65536 ]; then\n    \
    \    echo \"$((10#$x))\"\n    elif [ $base -eq 131072 ]; then\n        echo \"\
    $((10#$x))\"\n    elif [ $base -eq 262144 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ $base -eq 524288 ]; then\n        echo \"$((10#$x))\"\n    elif [\
    \ $base -eq 1048576 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base -eq\
    \ 2097152 ]; then\n        echo \"$((10#$x))\"\n    elif [ $base -eq 4194304 ];\
    \ then\n        echo \"$((10#$x))\"\n    elif [ $base -eq 8388608 ]; then\n  \
    \      echo \"$((10#$x))\"\n    elif [ $base -eq 16777216 ]; then\n        echo\
    \ \"$((10#$x))\"\n    elif [ $base -eq 33554432 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ $base -eq 67108864 ]; then\n        echo \"$((", "    local x base\n\
    \    x=$1\n    base=$2\n    local result\n    result=$(echo \"$x\" | bc)\n   \
    \ if [ $base -gt 10 ]; then\n        echo \"$result\" | bc | awk '{printf \"%0.${base}f\\\
    n\", $0}'\n    else\n        echo \"$result\"\n    fi", "    local x base\n  \
    \  x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo\
    \ \"$base\"\n    elif [ \"$base\" -gt 10 ]; then\n        echo \"$base\"\n   \
    \ else\n        echo \"$base\"\n    fi", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(echo \"$x\" | bc)\n  result=$(echo \"$result\" | sed\
    \ -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed ", "    local\
    \ x base\n    x=$1\n    base=$2\n    local result\n    result=$(( x / base ))\n\
    \    local remainder\n    remainder=$(( x % base ))\n    local i\n    for (( i=1;\
    \ i<=remainder; i++ )); do\n        result=$(( result * base ))\n    done\n  \
    \  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result / base ))\n    result=$(( result % base ))\n \
    \   result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result % base\
    \ ))\n    result", "    local x=\"$1\"\n    local base=\"$2\"\n    local result=\"\
    \"\n    while [ \"$x\" -gt 0 ]; do\n        (( x /= base ))\n        result=\"\
    $result$(( x % base + 1 ))\"\n    done\n    echo \"$result\"", "    local x base\n\
    \    x=$1\n    base=$2\n    local result\n    result=$(( x / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result % base\
    \ ))\n    echo \"$result\"", "    local x=\"$1\"\n    local base=\"$2\"\n    local\
    \ result=\"\"\n    local digit\n    local i\n    for (( i=1; i<=x; i++ )); do\n\
    \        digit=$(( x % base ))\n        result=\"$digit$result\"\n        x=$((\
    \ x / base ))\n    done\n    echo \"$result\"", "    local x base\n    x=$1\n\
    \    base=$2\n    local result\n    result=$(( x / base ))\n    if [ $result -eq\
    \ 0 ]\n    then\n        echo \"0\"\n    else\n        echo \"$result\"\n    fi",
  "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" |\
    \ bc -l | awk '{print $1*$2}')\n  echo \"$result\"", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(echo \"$x\" | bc -l | awk '{print $1*$2}')\n\
    \  echo $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"\
    $base\" -lt 10 ]; then\n        echo \"$base\" > /tmp/base.txt\n        echo \"\
    $base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\"\
    \ > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" >\
    \ /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n\
    \        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n  \
    \      echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n    \
    \    echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n      \
    \  echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo\
    \ \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"\
    $base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\"\
    \ > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" >\
    \ /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n\
    \        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n  \
    \      echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n    \
    \    echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n      \
    \  echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo\
    \ \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"\
    $base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\"\
    \ > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" >\
    \ /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n\
    \        echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n  \
    \      echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n    \
    \    echo \"$base\" > /tmp/x.txt\n        echo \"$base\" > /tmp/x.txt\n      \
    \  echo \"$base\" > /tmp/x.txt\n", "    local x=\"$1\"\n    local base=\"$2\"\n\
    \    local result\n    local i\n    local digit\n    local digit2\n    local digit3\n\
    \    local digit4\n    local digit5\n    local digit6\n    local digit7\n    local\
    \ digit8\n    local digit9\n    local digit10\n    local digit11\n    local digit12\n\
    \    local digit13\n    local digit14\n    local digit15\n    local digit16\n\
    \    local digit17\n    local digit18\n    local digit19\n    local digit20\n\
    \    local digit21\n    local digit22\n    local digit23\n    local digit24\n\
    \    local digit25\n    local digit26\n    local digit27\n    local digit28\n\
    \    local digit29\n    local digit30\n    local digit31\n    local digit32\n\
    \    local digit33\n    local digit34\n    local digit35\n    local digit36\n\
    \    local digit37\n    local digit38\n    local digit39\n    local digit40\n\
    \    local digit41\n    local digit42\n    local digit43\n    local digit44\n\
    \    local digit45\n    local digit46\n    local digit47\n    local digit48\n\
    \    local digit49\n    local digit50\n    local digit51\n    local digit52\n\
    \    local digit53\n    local digit54\n    local digit55\n    local digit56\n\
    \    local digit57\n    local digit58\n    local digit59\n    local digit60\n\
    \    local digit61\n    local digit62\n    local digit63\n    local digit64\n\
    \    local digit65\n    local digit66\n    local digit67\n    local digit68\n\
    \    local digit69\n    local digit70\n    local digit71\n    local digit72\n\
    \    local digit73\n    local digit74\n    local digit75\n    local digit76\n\
    \    local digit77\n    local digit78\n    local digit79\n    local digit80\n\
    \    local digit81\n    local digit82\n    local digit83\n    local digit84\n\
    \    local digit85\n    local digit86\n    local digit87\n    local digit88\n\
    \    local digit89\n    local digit90\n    local digit91\n    local digit92\n\
    \    local digit93\n    local digit94\n    local digit95\n    local digit96\n\
    \    local digit97\n    local digit98\n    local digit", "  local x=\"$1\"\n \
    \ local base=\"$2\"\n  local result\n  result=$(echo \"$x\" | bc)\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e '", "    local x=\"$1\"\n    local base=\"$2\"\n    local ret\n   \
    \ local i\n    local j\n    local k\n    local l\n    local m\n    local n\n \
    \   local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n", "    local x base\n  \
    \  x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"$base\"\n\
    \    else\n        echo \"$base\"\n    fi", "    local x base\n    x=$1\n    base=$2\n\
    \    local ret\n    ret=$(echo \"$x\" | bc)\n    local i\n    i=$((${#ret}-1))\n\
    \    while [ $i -ge 0 ]; do\n        local j\n        j=$((${#ret}-1))\n     \
    \   local tmp\n        tmp=$(echo \"$ret\" | bc)\n        local tmp2\n       \
    \ tmp2=$(echo \"$tmp\" | bc)\n        local tmp3\n        tmp3=$(echo \"$tmp2\"\
    \ | bc)\n        local tmp4\n        tmp4=$(echo \"$tmp3\" | bc)\n        local\
    \ tmp5\n        tmp5=$(echo \"$tmp4\" | bc)\n        local tmp6\n        tmp6=$(echo\
    \ \"$tmp5\" | bc)\n        local tmp7\n        tmp7=$(echo \"$tmp6\" | bc)\n \
    \       local tmp8\n        tmp8=$(echo \"$tmp7\" | bc)\n        local tmp9\n\
    \        tmp9=$(echo \"$tmp8\" | bc)\n        local tmp10\n        tmp10=$(echo\
    \ \"$tmp9\" | bc)\n        local tmp11\n        tmp11=$(echo \"$tmp10\" | bc)\n\
    \        local tmp12\n        tmp12=$(echo \"$tmp11\" | bc)\n        local tmp13\n\
    \        tmp13=$(echo \"$tmp12\" | bc)\n        local tmp14\n        tmp14=$(echo\
    \ \"$tmp13\" | bc)\n        local tmp15\n        tmp15=$(echo \"$tmp14\" | bc)\n\
    \        local tmp16\n        tmp16=$(echo \"$tmp15\" | bc)\n        local tmp17\n\
    \        tmp17=$(echo \"$tmp16\" | bc)\n        local tmp18\n        tmp18=$(echo\
    \ \"$tmp17\" | bc)\n        local tmp19\n        tmp19=$(echo \"$tmp18\" | bc)\n\
    \        local tmp20\n        tmp20=$(echo \"$tmp19\" | bc)\n        local tmp21\n\
    \        tmp21=$(echo \"$tmp20\" | bc)\n        local tmp22\n        tmp22=$(echo\
    \ \"$tmp21\" | bc)\n        local tmp23\n        tmp23=$(echo \"$tmp22\" | bc)\n\
    \        local tmp24\n        tmp24=$(echo \"$tmp23\" | bc)\n        local tmp25\n\
    \        tmp25=$(echo \"$tmp24\" | bc)\n        local tmp26\n        tmp26=$(echo\
    \ \"$tmp25\" | bc)\n        local tmp27\n        tmp27=$(echo \"$tmp26\" | bc)\n\
    \        local tmp28\n        tmp28=$(echo \"$tmp27\" | bc)\n        local tmp29\n",
  "    local x base result\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n\
    \        echo \"Base $base is too small.\"\n        exit 1\n    fi\n    result=0\n\
    \    while [ $x -gt 0 ]; do\n        result=$((result * base))\n        x=$((x\
    \ / base))\n    done\n    echo $result", "    local x=\"$1\"\n    local base=\"\
    $2\"\n    local result\n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base\
    \ is not supported\"\n        return 1\n    fi\n    if [ \"$x\" -eq 0 ]; then\n\
    \        echo \"0 is not supported\"\n        return 1\n    fi\n    if [ \"$x\"\
    \ -lt 0 ]; then\n        echo \"negative numbers are not supported\"\n       \
    \ return 1\n    fi\n    if [ \"$base\" -eq 2 ]; then\n        result=$((10#$x))\n\
    \    else\n        result=$((10#$x)$base)\n    fi\n    echo $result", "    local\
    \ x=\"$1\"\n    local base=\"$2\"\n    local result\n    if [ \"$base\" -lt 10\
    \ ]; then\n        result=$(( x / base ))\n    else\n        result=$(( x % base\
    \ ))\n    fi\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    local ret\n    ret=$(( x / base ))\n    ret=$(( ret * base ))\n    ret=$((\
    \ ret + x % base ))\n    echo \"$ret\"", "    local x base\n    x=\"$1\"\n   \
    \ base=\"$2\"\n    if [ $base -lt 10 ]; then\n        echo \"$base\"\n    elif\
    \ [ $base -eq 10 ]; then\n        echo \"0\"\n    else\n        echo \"$base\"\
    \n    fi", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo\
    \ \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e\
    \ \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n\
    \  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\"\
    )\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"\
    $result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"\
    s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo\
    \ \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e\
    \ \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n\
    \  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\"\
    )\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"\
    $result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"\
    s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo\
    \ \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e\
    \ \"s/^0*$base//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n\
    \  result=$(echo \"$result\" | sed -e \"s/^0*$base//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt\
    \ 10 ]; then\n        echo \"$x is not a base $base\"\n        return 1\n    fi\n\
    \    if [ $base -gt 2 ]; then\n        echo \"$x is not a base $base\"\n     \
    \   return 1\n    fi\n    if [ $base -eq 2 ]; then\n        echo \"$x is base\
    \ 2\"\n        echo \"$(( x / 2 ))\"\n    elif [ $base -eq 10 ]; then\n      \
    \  echo \"$x is base 10\"\n        echo \"$(( x / 10 ))\"\n    elif [ $base -eq\
    \ 16 ]; then\n        echo \"$x is base 16\"\n        echo \"$(( x / 16 ))\"\n\
    \    elif [ $base -eq 2 ]; then\n        echo \"$x is base 2\"\n        echo \"\
    $(( x / 2 ))\"\n    elif [ $base -eq 8 ]; then\n        echo \"$x is base 8\"\n\
    \        echo \"$(( x / 8 ))\"\n    elif [ $base -eq 4 ]; then\n        echo \"\
    $x is base 4\"\n        echo \"$(( x / 4 ))\"\n    elif [ $base -eq 2 ]; then\n\
    \        echo \"$x is base 2\"\n        echo \"$(( x / 2 ))\"\n    elif [ $base\
    \ -eq 1 ]; then\n        echo \"$x is base 1\"\n        echo \"$(( x / 1 ))\"\n\
    \    elif [ $base -eq 0 ]; then\n        echo \"$x is base 0\"\n        echo \"\
    $(( x / 0 ))\"\n    else\n        echo \"$x is not a base $base\"\n        return\
    \ 1\n    fi", "    local x base\n    x=$1\n    base=$2\n    local result\n   \
    \ result=$(echo $x | bc)\n    if [ $base -eq 10 ]; then\n        echo $result\n\
    \    else\n        echo $result | awk '{print ('$base' * '$x')}'\n    fi", " \
    \   local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ];\
    \ then\n        echo \"$base\"\n    elif [ \"$base\" -eq 10 ]; then\n        echo\
    \ \"$x\"\n    else\n        echo \"$x\" | bc -l | awk '{printf \"%d\\n\", $0}'\n\
    \    fi", "    local x base result\n    x=$1\n    base=$2\n    if [ $base -lt\
    \ 10 ]; then\n        result=$base\n    else\n        result=0\n        while\
    \ [ $x -gt 0 ]; do\n            result=$(( $x % $base ))\n            x=$(( $x\
    \ / $base ))\n        done\n    fi\n    echo \"$result\"", "    local x base\n\
    \    x=$1\n    base=$2\n    local result\n    result=0\n    while [ $x -gt 0 ];\
    \ do\n        result=$((result * base))\n        x=$((x / base))\n    done\n \
    \   echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    local output\n\
    \    output=$(echo \"$x\" | bc -l | awk '{printf \"%0${base}i\", $0}')\n    echo\
    \ \"$output\"", "    local x base\n    x=$1\n    base=$2\n    local result\n \
    \   result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result / base ))\n    result=$(( result % base ))\n \
    \   echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"Invalid base $base\"\n        return 1\n    fi\n\
    \    if [ $base -gt 36 ]; then\n        echo \"Invalid base $base\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(( x / $base ))\n    echo $result",
  "    local x base\n    x=$1\n    base=$2\n    local n\n    local result\n    n=$((\
    \ x / base ))\n    result=$(( x % base ))\n    echo $(( result + base * n ))",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n\
    \        echo \"$base: base must be greater than or equal to 10\"\n        return\
    \ 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n        echo \"$base: base must\
    \ be less than or equal to 36\"\n        return 1\n    fi\n    local ret\n   \
    \ ret=$(echo \"$x\" | bc -l | awk '{printf \"%0${base}d\\n\", $0}')\n    echo\
    \ \"$ret\"", "    local x=\"$1\"\n    local base=\"$2\"\n    local output\n  \
    \  local i\n    output=$(echo \"$x\" | sed -e 's/\\([0-9]*\\)$/\\10/')\n    for\
    \ (( i=1; i<=10; i++ )); do\n        if [ \"$output\" == \"$x\" ]; then\n    \
    \        break\n        fi\n        output=$(echo \"$output\" | sed -e \"s/\\\
    10$i/\\$base$i/\")\n    done\n    echo \"$output\"", "    local x base\n    x=$1\n\
    \    base=$2\n    local result\n    result=$(echo \"$x\" | bc)\n    if [ \"$result\"\
    \ -eq \"$x\" ]; then\n        echo \"$x\"\n    else\n        echo \"$result\"\n\
    \    fi", "    local x=\"$1\"\n    local base=\"$2\"\n    local result\n    if\
    \ [ \"$base\" -lt 10 ]; then\n        echo \"Invalid base $base\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -lt 0 ]; then\n        echo \"Invalid number $x\"\
    \n        return 1\n    fi\n    if [ \"$x\" -gt \"$base\" ]; then\n        echo\
    \ \"Invalid number $x\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\"\
    \ ]; then\n        echo \"Invalid number $x\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -eq \"$x\" -a \"$x\" -ge 0 ]; then\n        echo \"Invalid number $x\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\" -a \"$x\" -le \"$base\"\
    \ ]; then\n        echo \"Invalid number $x\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -eq \"$x\" -a \"$x\" -le \"$base\" ]; then\n        echo \"Invalid\
    \ number $x\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\" -a \"$x\"\
    \ -ge \"$base\" ]; then\n        echo \"Invalid number $x\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -eq \"$x\" -a \"$x\" -le \"$base\" ]; then\n        echo\
    \ \"Invalid number $x\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\"\
    \ -a \"$x\" -ge \"$base\" ]; then\n        echo \"Invalid number $x\"\n      \
    \  return 1\n    fi\n    if [ \"$x\" -eq \"$x\" -a \"$x\" -le \"$base\" ]; then\n\
    \        echo \"Invalid number $x\"\n        return 1\n    fi\n    if [ \"$x\"\
    \ -eq \"$x\" -a \"$x\" -ge \"$base\" ]; then\n        echo \"Invalid number $x\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\" -a \"$x\" -le \"$base\"\
    \ ]; then\n        echo \"Invalid number $x\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -eq \"$x\" -a \"$x\" -ge \"$base\" ]; then\n        echo \"Invalid\
    \ number $x\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\" -a \"$x\"\
    \ -le \"$base\" ]; then\n        echo \"Invalid number $x\"\n        return 1\n\
    \    fi\n    if [ \"$x\" -eq \"$x\" -a \"$x\" -ge \"$base\" ]; then\n        echo\
    \ \"Invalid number $x\"\n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\"\
    \ -a \"$x\" -le \"$base\" ]; then\n        echo \"Invalid number $x\"", "    local\
    \ x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n \
    \       echo \"$base: not a valid base\"\n        return\n    fi\n    if [ \"\
    $base\" -eq 2 ]; then\n        echo \"$x: $(( x / 2 ))\"\n        return\n   \
    \ fi\n    if [ \"$base\" -eq 8 ]; then\n        echo \"$x: $(( x / 8 ))\"\n  \
    \      return\n    fi\n    if [ \"$base\" -eq 16 ]; then\n        echo \"$x: $((\
    \ x / 16 ))\"\n        return\n    fi\n    if [ \"$base\" -eq 10 ]; then\n   \
    \     echo \"$x: $(( x / 10 ))\"\n        return\n    fi\n    if [ \"$base\" -eq\
    \ 2 ]; then\n        echo \"$x: $(( x / 2 ))\"\n        return\n    fi\n    if\
    \ [ \"$base\" -eq 8 ]; then\n        echo \"$x: $(( x / 8 ))\"\n        return\n\
    \    fi\n    if [ \"$base\" -eq 16 ]; then\n        echo \"$x: $(( x / 16 ))\"\
    \n        return\n    fi\n    if [ \"$base\" -eq 10 ]; then\n        echo \"$x:\
    \ $(( x / 10 ))\"\n        return\n    fi\n    if [ \"$base\" -eq 2 ]; then\n\
    \        echo \"$x: $(( x / 2 ))\"\n        return\n    fi\n    if [ \"$base\"\
    \ -eq 8 ]; then\n        echo \"$x: $(( x / 8 ))\"\n        return\n    fi\n \
    \   if [ \"$base\" -eq 16 ]; then\n        echo \"$x: $(( x / 16 ))\"\n      \
    \  return\n    fi\n    if [ \"$base\" -eq 10 ]; then\n        echo \"$x: $(( x\
    \ / 10 ))\"\n        return\n    fi\n    if [ \"$base\" -eq 2 ]; then\n      \
    \  echo \"$x: $(( x / 2 ))\"\n        return\n    fi\n    if [ \"$base\" -eq 8\
    \ ]; then\n        echo \"$x: $(( x / 8 ))\"\n        return\n    fi\n    if [\
    \ \"$base\" -eq 16 ]; then\n        echo \"$x: $(( x / 16 ))\"\n        return\n\
    \    fi\n    if [ \"$base\" -eq 10 ]; then\n        echo \"$x: $(( x / 10 ))\"\
    \n        return\n    fi\n    if [ \"$base\" -eq 2 ]; then\n        echo \"$x:\
    \ $(( x / 2 ))\"\n        return\n    fi\n    if [ \"$base\" -eq 8 ]; then\n \
    \       echo \"$x: $(( x / 8 ))\"\n        return\n    fi\n    if [ \"$base\"\
    \ -eq 16 ", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x\
    \ / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "    local x=\"$1\"\n    local base=\"$2\"\n    local result\n   \
    \ local i\n    local j\n    local k\n    local m\n    local n\n    local o\n \
    \   local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n", "    local x=\"$1\"\n\
    \    local base=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local digit\n    local digits\n    local digits\n    local digits\n \
    \   local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n\
    \    local digits\n    local digits\n    local digits\n    local digits\n    local\
    \ digits\n    local digits\n    local digits\n    local digits\n    local digits\n",
  "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo \"$x\" | bc -l | awk\
    \ '{printf \"%0${base}d\", $1}')\n  echo \"$ret\"", "    local x=\"$1\"\n    local\
    \ base=\"$2\"\n    local ret\n    local i\n    local j\n    local k\n    local\
    \ m\n    local n\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    local res\n    res=$(echo\
    \ \"$x\" | bc | awk '{print $1*$2}')\n    echo \"$res\"", "  local x base\n  x=$1\n\
    \  base=$2\n  local ret\n  ret=$(echo \"$x\" | bc)\n  echo \"$ret\"", "    local\
    \ x=\"$1\"\n    local base=\"$2\"\n    local result\n    if [ \"$base\" -lt 10\
    \ ]; then\n        echo \"Base $base is too small\"\n        return 1\n    fi\n\
    \    if [ \"$x\" -lt 0 ]; then\n        echo \"Base $base is too small\"\n   \
    \     return 1\n    fi\n    if [ \"$x\" -gt \"$base\" ]; then\n        echo \"\
    Base $base is too small\"\n        return 1\n    fi\n    result=$(( x / $base\
    \ ))\n    echo $result", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"$x is not a base $base number\"\n        return\
    \ 1\n    fi\n    local res\n    res=$(echo \"$x\" | bc -l | awk '{print $print\
    \ $base}')\n    echo \"$res\"", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(echo \"$x\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/^0*//\"\
    )\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed ", "    local x base\n    x=$1\n    base=$2\n\
    \    local result\n    result=$(echo \"$x\" | bc)\n    if [ $base -gt 10 ]; then\n\
    \        echo \"$result\"\n    else\n        echo \"$result\" | bc | awk '{printf\
    \ \"%d\",$0}'\n    fi", "  local x base\n  x=$1\n  base=$2\n  local result\n \
    \ result=$(echo \"$x\" | bc)\n  result=$(echo \"$result\" | sed -e \"s/^0*//\"\
    )\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed -e \"s/^0*//\")\n  result=$(echo \"$result\"\
    \ | sed -e \"s/^0*//\")\n  result=$(echo \"$result\" | sed -e \"s/^0*//\")\n \
    \ result=$(echo \"$result\" | sed ", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base $base is too small.\"\n  \
    \      return 1\n    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base $base\
    \ is too large.\"\n        return 1\n    fi\n    local result\n    result=$((\
    \ x / $base ))\n    if [ $result -eq 0 ]; then\n        echo \"Base $base is too\
    \ small.\"\n        return 1\n    fi\n    if [ $result -gt $x ]; then\n      \
    \  echo \"Base $base is too large.\"\n        return 1\n    fi\n    echo $(( $result\
    \ * $base ))", "  local x base\n  x=$1\n  base=$2\n  local str\n  str=$((10#$x))\n\
    \  str=$((str%$base))\n  str=$((str+$base))\n  echo $str", "    local x base\n\
    \    x=$1\n    base=$2\n    local result\n    result=0\n    while [ $x -gt 0 ];\
    \ do\n        result=$((result*base))\n        result=$((result+x))\n        x=$((x-1))\n\
    \    done\n    echo $result", "    local x=\"$1\"\n    local base=\"$2\"\n   \
    \ local result\n    local digit\n    local i\n    local j\n    local k\n    local\
    \ digit\n    local tmp\n    local digit\n    local digit\n    local digit\n  \
    \  local digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n", "    local x base\n    x=$1\n    base=$2\n\
    \    local ret\n    ret=$(echo \"$x\" | bc)\n    if [ $ret -eq 0 ]; then\n   \
    \     echo \"0\"\n    else\n        echo \"$ret\"\n    fi", "  local x=\"$1\"\n\
    \  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" | bc)\n  echo \"\
    $result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\"\
    \ -lt 10 ]; then\n        echo \"$base: not a valid base number\"\n        return\
    \ 1\n    fi\n    if [ \"$base\" -eq 2 ]; then\n        echo \"$x: $(( x / 2 ))\"\
    \n    elif [ \"$base\" -eq 8 ]; then\n        echo \"$x: $(( x / 8 ))\"\n    elif\
    \ [ \"$base\" -eq 10 ]; then\n        echo \"$x: $(( x / 10 ))\"\n    elif [ \"\
    $base\" -eq 16 ]; then\n        echo \"$x: $(( x / 16 ))\"\n    elif [ \"$base\"\
    \ -eq 20 ]; then\n        echo \"$x: $(( x / 20 ))\"\n    elif [ \"$base\" -eq\
    \ 32 ]; then\n        echo \"$x: $(( x / 32 ))\"\n    elif [ \"$base\" -eq 64\
    \ ]; then\n        echo \"$x: $(( x / 64 ))\"\n    elif [ \"$base\" -eq 128 ];\
    \ then\n        echo \"$x: $(( x / 128 ))\"\n    elif [ \"$base\" -eq 256 ]; then\n\
    \        echo \"$x: $(( x / 256 ))\"\n    elif [ \"$base\" -eq 512 ]; then\n \
    \       echo \"$x: $(( x / 512 ))\"\n    elif [ \"$base\" -eq 1024 ]; then\n \
    \       echo \"$x: $(( x / 1024 ))\"\n    elif [ \"$base\" -eq 2048 ]; then\n\
    \        echo \"$x: $(( x / 2048 ))\"\n    elif [ \"$base\" -eq 4096 ]; then\n\
    \        echo \"$x: $(( x / 4096 ))\"\n    elif [ \"$base\" -eq 8192 ]; then\n\
    \        echo \"$x: $(( x / 8192 ))\"\n    elif [ \"$base\" -eq 16384 ]; then\n\
    \        echo \"$x: $(( x / 16384 ))\"\n    elif [ \"$base\" -eq 32768 ]; then\n\
    \        echo \"$x: $(( x / 32768 ))\"\n    elif [ \"$base\" -eq 65536 ]; then\n\
    \        echo \"$x: $(( x / 65536 ))\"\n    elif [ \"$base\" -eq 131072 ]; then\n\
    \        echo \"$x: $(( x / 131072 ))\"\n    elif [ \"$base\" -eq 262144 ]; then\n\
    \        echo \"$x: $(( x / 262144 ))\"\n    elif [ \"$base\" -eq 524288 ]; then\n\
    \        echo \"$x: $(( x / 524288 ))\"\n    elif [ \"$", "  local x=\"$1\"\n\
    \  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" | bc)\n  echo \"\
    $result\"", "    local x base\n    x=$1\n    base=$2\n    local result\n    result=0\n\
    \    while [ $x -gt 0 ]; do\n        result=$((result*base))\n        x=$((x/base))\n\
    \    done\n    echo $result", "  local x=\"$1\"\n  local base=\"$2\"\n  local\
    \ ret\n  local i\n  local j\n  local k\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n", "    local x=\"\
    $1\"\n    local base=\"$2\"\n    local result=\"\"\n    while [ $x -gt 0 ]; do\n\
    \        result=\"$result$((x % base))\"\n        x=\"$((x / base))\"\n    done\n\
    \    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=0\n    while [ $x -gt 0 ]; do\n        result=$(( $result * $base\
    \ ))\n        x=$(( $x / $base ))\n    done\n    echo $result", "    local x base\n\
    \    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"$x is not\
    \ a base $base number\"\n        return 1\n    fi\n    if [ $base -gt 2 ]; then\n\
    \        echo \"$x is not a base $base number\"\n        return 1\n    fi\n  \
    \  if [ $base -eq 2 ]; then\n        echo \"$x is base 2\"\n        echo $(( x\
    \ / 2 ))\n    elif [ $base -eq 10 ]; then\n        echo \"$x is base 10\"\n  \
    \      echo $(( x / 10 ))\n    else\n        echo \"$x is not a base $base number\"\
    \n        return 1\n    fi", "    local x=\"$1\"\n    local base=\"$2\"\n    local\
    \ result\n    if [ \"$base\" -eq 2 ]; then\n        result=$(( x / 10 ))\n   \
    \     echo \"$result\"\n    elif [ \"$base\" -eq 8 ]; then\n        result=$((\
    \ x / 100 ))\n        echo \"$result\"\n    elif [ \"$base\" -eq 16 ]; then\n\
    \        result=$(( x / 1000 ))\n        echo \"$result\"\n    elif [ \"$base\"\
    \ -eq 32 ]; then\n        result=$(( x / 10000 ))\n        echo \"$result\"\n\
    \    elif [ \"$base\" -eq 64 ]; then\n        result=$(( x / 100000 ))\n     \
    \   echo \"$result\"\n    elif [ \"$base\" -eq 128 ]; then\n        result=$((\
    \ x / 1000000 ))\n        echo \"$result\"\n    elif [ \"$base\" -eq 256 ]; then\n\
    \        result=$(( x / 10000000 ))\n        echo \"$result\"\n    elif [ \"$base\"\
    \ -eq 512 ]; then\n        result=$(( x / 100000000 ))\n        echo \"$result\"\
    \n    elif [ \"$base\" -eq 1024 ]; then\n        result=$(( x / 1000000000 ))\n\
    \        echo \"$result\"\n    elif [ \"$base\" -eq 2048 ]; then\n        result=$((\
    \ x / 10000000000 ))\n        echo \"$result\"\n    elif [ \"$base\" -eq 4096\
    \ ]; then\n        result=$(( x / 100000000000 ))\n        echo \"$result\"\n\
    \    elif [ \"$base\" -eq 8192 ]; then\n        result=$(( x / 1000000000000 ))\n\
    \        echo \"$result\"\n    elif [ \"$base\" -eq 16384 ]; then\n        result=$((\
    \ x / 10000000000000 ))\n        echo \"$result\"\n    elif [ \"$base\" -eq 32768\
    \ ]; then\n        result=$(( x / 100000000000000 ))\n        echo \"$result\"\
    \n    elif [ \"$base\" -eq 65536 ]; then\n        result=$(( x / 1000000000000000\
    \ ))\n        echo \"$result\"\n    elif [ \"$base\" -eq 131072 ]; then\n    \
    \    result=$(( x / 10000000000000000 ))\n        echo \"$result\"\n    elif [\
    \ \"$base\" -eq 262144 ]; then\n        result=$(( x / 100000000000000000 ))\n\
    \        echo \"$result\"\n    elif [ \"$base\" -eq 524288 ]; then\n        result=$((\
    \ x / 1000000000000000000 ))\n        echo \"$result\"\n    elif [ \"$base\" -eq\
    \ 1048576 ]; then\n        result=$(( x / 100", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(echo \"$x\" | bc)\n  result=$(echo \"$result\" | sed\
    \ -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed\
    \ -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"\
    '//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed\
    \ -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"\
    '//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed\
    \ -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"\
    '//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed\
    \ -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"\
    '//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed\
    \ -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"\
    '//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed\
    \ -e 's/^'\"$base\"'//')\n  result=$(echo \"$result\" | sed -e 's/^'\"$base\"\
    '//')\n  result=$(echo \"$result\" | sed -e 's/", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(echo \"$x\" | bc | awk '{print $1*$2}')\n  echo \"\
    $result\"", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo \"$x\"\
    \ | bc)\n  echo \"$ret\"", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(echo \"$x\" | bc)\n  echo \"$result\"", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo $result", "    local x base\n    x=$1\n\
    \    base=$2\n    local res\n    res=$(echo \"$x\" | bc -l | awk '{print $1*$2}')\n\
    \    echo \"$res\"", "    local x base result\n    x=$1\n    base=$2\n    result=$((\
    \ x / base ))\n    [ $result -eq 0 ] && result=$(( 10 + result ))\n    [ $result\
    \ -eq 10 ] && result=0\n    echo $result", "    local x base result\n    x=$1\n\
    \    base=$2\n    result=$(echo \"$x\" | bc)\n    echo $result", "    local x\
    \ base\n    x=$1\n    base=$2\n    local result\n    result=$(echo \"$x\" | bc)\n\
    \    if [ $base -gt 10 ]; then\n        echo \"$result\"\n    else\n        echo\
    \ \"$result\" | bc | awk '{printf \"%d\",$0}'\n    fi", "    local x base\n  \
    \  x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo\
    \ \"$base\" > /tmp/base\n        echo \"$base\" > /tmp/base2\n        echo \"\
    $base\" > /tmp/base3\n        echo \"$base\" > /tmp/base4\n        echo \"$base\"\
    \ > /tmp/base5\n        echo \"$base\" > /tmp/base6\n        echo \"$base\" >\
    \ /tmp/base7\n        echo \"$base\" > /tmp/base8\n        echo \"$base\" > /tmp/base9\n\
    \        echo \"$base\" > /tmp/base10\n        echo \"$base\" > /tmp/base11\n\
    \        echo \"$base\" > /tmp/base12\n        echo \"$base\" > /tmp/base13\n\
    \        echo \"$base\" > /tmp/base14\n        echo \"$base\" > /tmp/base15\n\
    \        echo \"$base\" > /tmp/base16\n        echo \"$base\" > /tmp/base17\n\
    \        echo \"$base\" > /tmp/base18\n        echo \"$base\" > /tmp/base19\n\
    \        echo \"$base\" > /tmp/base20\n        echo \"$base\" > /tmp/base21\n\
    \        echo \"$base\" > /tmp/base22\n        echo \"$base\" > /tmp/base23\n\
    \        echo \"$base\" > /tmp/base24\n        echo \"$base\" > /tmp/base25\n\
    \        echo \"$base\" > /tmp/base26\n        echo \"$base\" > /tmp/base27\n\
    \        echo \"$base\" > /tmp/base28\n        echo \"$base\" > /tmp/base29\n\
    \        echo \"$base\" > /tmp/base30\n        echo \"$base\" > /tmp/base31\n\
    \        echo \"$base\" > /tmp/base32\n        echo \"$base\" > /tmp/base33\n\
    \        echo \"$base\" > /tmp/base34\n        echo \"$base\" > /tmp/base35\n\
    \        echo \"$base\" > /tmp/base36\n        echo \"$base\" > /tmp/base37\n\
    \        echo \"$base\" > /tmp/base38\n        echo \"$base\" > /tmp/base39\n\
    \        echo \"$base\" > /tmp/base40\n        echo \"$base\" > /tmp/base41\n\
    \        echo \"$base\" > /tmp/base42\n        echo \"$base\" > /tmp/base43\n\
    \        echo \"$base\" > /tmp/base44\n        echo \"$base\" > /tmp/base45\n\
    \        echo \"$base\" > /tmp/base46\n        echo \"$base\" > /tmp/base47\n\
    \        echo \"$base\" > /tmp/base48\n        echo \"$base\" > /tmp/base49\n\
    \        ", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ];\
    \ then\n        echo \"$x is not a base $base\"\n        return 1\n    fi\n  \
    \  if [ $base -gt 36 ]; then\n        echo \"$x is not a base $base\"\n      \
    \  return 1\n    fi\n    local result\n    result=$(( $x / $base ))\n    local\
    \ remainder\n    remainder=$(( $x % $base ))\n    if [ $remainder -eq 0 ]; then\n\
    \        echo \"$x is $result\"\n    else\n        echo \"$x is $result $remainder\"\
    \n    fi", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x\
    \ / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ];\
    \ then\n        echo \"Base $base is not supported\"\n        return 1\n    fi\n\
    \    if [ $base -eq 2 ]; then\n        echo \"$x\"\n    elif [ $base -eq 10 ];\
    \ then\n        echo \"$x\"\n    elif [ $base -eq 16 ]; then\n        echo \"\
    $x\"\n    elif [ $base -eq 8 ]; then\n        echo \"$x\"\n    elif [ $base -eq\
    \ 4 ]; then\n        echo \"$x\"\n    elif [ $base -eq 2 ]; then\n        echo\
    \ \"$x\"\n    elif [ $base -eq 1 ]; then\n        echo \"$x\"\n    elif [ $base\
    \ -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"Base $base is not\
    \ supported\"\n        return 1\n    fi", "  local x base\n  x=$1\n  base=$2\n\
    \  local ret\n  ret=$(echo \"$x\" | bc)\n  echo \"$ret\" | bc -l | awk '{printf\
    \ \"%0${base}d\\n\", $0}'", "    local x=\"$1\"\n    local base=\"$2\"\n    local\
    \ output\n    output=$(echo \"$x\" | sed -e \"s/\\([0-9]*\\)$base\\([0-9]*\\)/\\\
    1$base\\2/\")\n    echo \"$output\"", "    local x=\"$1\"\n    local base=\"$2\"\
    \n    local result\n    if [ \"$base\" -eq 10 ]; then\n        result=\"$x\"\n\
    \    else\n        result=$(echo \"$x\" | bc)\n    fi\n    echo \"$result\"",
  "    local x=\"$1\"\n    local base=\"$2\"\n    local result\n    local i\n    local\
    \ digit\n    local digit2\n    local digit3\n    local digit4\n    local digit5\n\
    \    local digit6\n    local digit7\n    local digit8\n    local digit9\n    local\
    \ digit10\n    local digit11\n    local digit12\n    local digit13\n    local\
    \ digit14\n    local digit15\n    local digit16\n    local digit17\n    local\
    \ digit18\n    local digit19\n    local digit20\n    local digit21\n    local\
    \ digit22\n    local digit23\n    local digit24\n    local digit25\n    local\
    \ digit26\n    local digit27\n    local digit28\n    local digit29\n    local\
    \ digit30\n    local digit31\n    local digit32\n    local digit33\n    local\
    \ digit34\n    local digit35\n    local digit36\n    local digit37\n    local\
    \ digit38\n    local digit39\n    local digit40\n    local digit41\n    local\
    \ digit42\n    local digit43\n    local digit44\n    local digit45\n    local\
    \ digit46\n    local digit47\n    local digit48\n    local digit49\n    local\
    \ digit50\n    local digit51\n    local digit52\n    local digit53\n    local\
    \ digit54\n    local digit55\n    local digit56\n    local digit57\n    local\
    \ digit58\n    local digit59\n    local digit60\n    local digit61\n    local\
    \ digit62\n    local digit63\n    local digit64\n    local digit65\n    local\
    \ digit66\n    local digit67\n    local digit68\n    local digit69\n    local\
    \ digit70\n    local digit71\n    local digit72\n    local digit73\n    local\
    \ digit74\n    local digit75\n    local digit76\n    local digit77\n    local\
    \ digit78\n    local digit79\n    local digit80\n    local digit81\n    local\
    \ digit82\n    local digit83\n    local digit84\n    local digit85\n    local\
    \ digit86\n    local digit87\n    local digit88\n    local digit89\n    local\
    \ digit90\n    local digit91\n    local digit92\n    local digit93\n    local\
    \ digit94\n    local digit95\n    local digit96\n    local digit97\n    local\
    \ digit98\n    local digit", "  local x base\n  x=$1\n  base=$2\n  local res\n\
    \  res=$(echo \"$x\" | bc | awk '{print $1*$2}')\n  echo \"$res\"", "    local\
    \ x base\n    x=$1\n    base=$2\n    local result\n    result=$(( x / base ))\n\
    \    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result % base ))\n    echo \"$result\"", " \
    \ local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo \"$x\" | bc)\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed ", "    local x base\n    x=$1\n    base=$2\n    local ret\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Invalid base: $base\"\n       \
    \ return 1\n    fi\n    if [ $base -gt 36 ]; then\n        echo \"Invalid base:\
    \ $base\"\n        return 1\n    fi\n    if [ $x -eq 0 ]; then\n        echo \"\
    Invalid number: $x\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n  \
    \      echo \"Invalid number: $x\"\n        return 1\n    fi\n    if [ $x -gt\
    \ $(( 10#$base )) ]; then\n        echo \"Invalid number: $x\"\n        return\
    \ 1\n    fi\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n", "    local x base\n    x=$1\n    base=$2\n    if\
    \ [ $base -lt 10 ]; then\n        echo \"Invalid base $base\"\n        return\
    \ 1\n    fi\n    if [ $base -gt 36 ]; then\n        echo \"Invalid base $base\"\
    \n        return 1\n    fi\n    local result\n    result=0\n    while [ $x -gt\
    \ 0 ]; do\n        result=$((result*base+$((x%base))))\n        x=$((x/base))\n\
    \    done\n    echo $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\
    \n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base: base must be greater\
    \ than or equal to 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt 36 ];\
    \ then\n        echo \"$base: base must be less than or equal to 36\"\n      \
    \  return 1\n    fi\n    if [ \"$x\" -lt 0 ]; then\n        echo \"$x: input number\
    \ must be greater than 0\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"$base\"\
    \ ]; then\n        echo \"$x: input number must be less than or equal to $base\"\
    \n        return 1\n    fi\n    if [ \"$x\" -eq \"$x\" ]; then\n        echo \"\
    $x: input number must be different from 0\"\n        return 1\n    fi\n    if\
    \ [ \"$x\" -le \"$base\" ]; then\n        echo \"$x: input number must be greater\
    \ than or equal to $base\"\n        return 1\n    fi\n    if [ \"$x\" -ge \"$base\"\
    \ ]; then\n        echo \"$x: input number must be less than or equal to $base\"\
    \n        return 1\n    fi\n    if [ \"$x\" -le \"$(( 10#$base ))\" ]; then\n\
    \        echo \"$x: input number must be greater than or equal to $base\"\n  \
    \      return 1\n    fi\n    if [ \"$x\" -ge \"$(( 10#$base ))\" ]; then\n   \
    \     echo \"$x: input number must be less than or equal to $base\"\n        return\
    \ 1\n    fi\n    local y\n    y=\"$(( 10#$x ))\"\n    if [ \"$y\" -eq \"$x\" ];\
    \ then\n        echo \"$x: input number must be different from 0\"\n        return\
    \ 1\n    fi\n    if [ \"$y\" -le \"$base\" ]; then\n        echo \"$x: input number\
    \ must be greater than or equal to $base\"\n        return 1\n    fi\n    if [\
    \ \"$y\" -ge \"$base\" ]; then\n        echo \"$x: input number must be less than\
    \ or equal to $base\"\n        return 1\n    fi\n    if [ \"$y\" -le \"$(( 10#$base\
    \ ))\" ]; then\n        echo \"$x: input number must be greater than or equal\
    \ to $base\"\n        return 1\n    fi\n    if [ \"$y\" -ge \"$(( 10#$base ))\"\
    \ ]; then\n        echo \"$x: input number must be less than or equal to $base\"\
    \n        return 1\n    fi\n    local z\n    z=\"$(( 10#$y ))\"\n    if [ \"$z\"\
    \ -eq \"$y\" ]; then\n        echo \"$x: input number must be different from 0\"\
    \n        return 1\n    fi\n    if [ \"$z\" -le \"$base\" ]; then\n        echo\
    \ \"$x: input number must be greater than or equal to $base\"\n        return\
    \ 1\n    fi\n    if [ \"$z\" -ge \"$base\" ]; then\n        echo \"$x: input number\
    \ must be less than or equal to $", "    local x base\n    x=\"$1\"\n    base=\"\
    $2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base: not a valid base\"\
    \n        return 1\n    fi\n    if [ \"$base\" -eq 2 ]; then\n        echo \"\
    $x: $(( x / 2 ))\"\n    elif [ \"$base\" -eq 8 ]; then\n        echo \"$x: $((\
    \ x / 8 ))\"\n    elif [ \"$base\" -eq 16 ]; then\n        echo \"$x: $(( x /\
    \ 16 ))\"\n    elif [ \"$base\" -eq 10 ]; then\n        echo \"$x: $(( x / 10\
    \ ))\"\n    elif [ \"$base\" -eq 2 ]; then\n        echo \"$x: $(( x / 2 ))\"\n\
    \    elif [ \"$base\" -eq 8 ]; then\n        echo \"$x: $(( x / 8 ))\"\n    elif\
    \ [ \"$base\" -eq 16 ]; then\n        echo \"$x: $(( x / 16 ))\"\n    elif [ \"\
    $base\" -eq 10 ]; then\n        echo \"$x: $(( x / 10 ))\"\n    elif [ \"$base\"\
    \ -eq 2 ]; then\n        echo \"$x: $(( x / 2 ))\"\n    elif [ \"$base\" -eq 8\
    \ ]; then\n        echo \"$x: $(( x / 8 ))\"\n    elif [ \"$base\" -eq 16 ]; then\n\
    \        echo \"$x: $(( x / 16 ))\"\n    elif [ \"$base\" -eq 10 ]; then\n   \
    \     echo \"$x: $(( x / 10 ))\"\n    elif [ \"$base\" -eq 2 ]; then\n       \
    \ echo \"$x: $(( x / 2 ))\"\n    elif [ \"$base\" -eq 8 ]; then\n        echo\
    \ \"$x: $(( x / 8 ))\"\n    elif [ \"$base\" -eq 16 ]; then\n        echo \"$x:\
    \ $(( x / 16 ))\"\n    elif [ \"$base\" -eq 10 ]; then\n        echo \"$x: $((\
    \ x / 10 ))\"\n    elif [ \"$base\" -eq 2 ]; then\n        echo \"$x: $(( x /\
    \ 2 ))\"\n    elif [ \"$base\" -eq 8 ]; then\n        echo \"$x: $(( x / 8 ))\"\
    \n    elif [ \"$base\" -eq 16 ]; then\n        echo \"$x: $(( x / 16 ))\"\n  \
    \  elif [ \"$base\" -eq 10 ]; then\n        echo \"$x: $(( x / 10 ))\"\n    elif\
    \ [ \"$base\" -eq 2 ]; then\n        echo \"$x: $(( x / 2 ))\"\n    elif [ \"\
    $base\" -eq 8 ]; then\n        echo \"$x: ", "    local x base\n    x=\"$1\"\n\
    \    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base must\
    \ be greater than or equal to 10.\"\n        return 1\n    fi\n    if [ \"$base\"\
    \ -gt 36 ]; then\n        echo \"Base must be less than or equal to 36.\"\n  \
    \      return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc)\n  \
    \  if [ \"$result\" -eq \"$x\" ]; then\n        echo \"$x\"\n    else\n      \
    \  echo \"$result\"\n    fi", "    local x base\n    x=\"$1\"\n    base=\"$2\"\
    \n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base: not a valid base number\"\
    \n        return 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n        echo \"\
    $base: not a valid base number\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    if [ \"$result\" -eq 0 ]; then\n        echo\
    \ \"$base: not a valid base number\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc -l)\n    if [ \"$result\" -eq 0 ]; then\n     \
    \   echo \"$base: not a valid base number\"\n        return 1\n    fi\n    local\
    \ result\n    result=$(echo \"$x\" | bc -l | bc)\n    if [ \"$result\" -eq 0 ];\
    \ then\n        echo \"$base: not a valid base number\"\n        return 1\n  \
    \  fi\n    local result\n    result=$(echo \"$x\" | bc -l | bc -l)\n    if [ \"\
    $result\" -eq 0 ]; then\n        echo \"$base: not a valid base number\"\n   \
    \     return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l | bc\
    \ -l | bc)\n    if [ \"$result\" -eq 0 ]; then\n        echo \"$base: not a valid\
    \ base number\"\n        return 1\n    fi\n    local result\n    result=$(echo\
    \ \"$x\" | bc -l | bc -l | bc -l)\n    if [ \"$result\" -eq 0 ]; then\n      \
    \  echo \"$base: not a valid base number\"\n        return 1\n    fi\n    local\
    \ result\n    result=$(echo \"$x\" | bc -l | bc -l | bc -l | bc)\n    if [ \"\
    $result\" -eq 0 ]; then\n        echo \"$base: not a valid base number\"\n   \
    \     return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l | bc\
    \ -l | bc -l | bc -l)\n    if [ \"$result\" -eq 0 ]; then\n        echo \"$base:\
    \ not a valid base number\"\n        return 1\n    fi\n    local result\n    result=$(echo\
    \ \"$x\" | bc -l | bc -l | bc -l | bc -l | bc)\n    if [ \"$result\" -eq 0 ];\
    \ then\n        echo \"$base: not a valid base number\"\n        return 1\n  \
    \  fi\n    local result\n    result=$(echo \"$x\" | bc -l | bc -l | b", "    local\
    \ x base result\n    x=$1\n    base=$2\n    result=$(echo \"$x\" | bc)\n    if\
    \ [ $base -gt 10 ]; then\n        result=$(echo \"$result\" | sed -e 's/^0//'\
    \ -e 's/^1//' -e 's/^2//' -e 's/^3//' -e 's/^4//' -e 's/^5//' -e 's/^6//' -e 's/^7//'\
    \ -e 's/^8//' -e 's/^9//')\n        result=$(echo \"$result\" | sed -e 's/^0//'\
    \ -e 's/^1//' -e 's/^2//' -e 's/^3//' -e 's/^4//' -e 's/^5//' -e 's/^6//' -e 's/^7//'\
    \ -e 's/^8//' -e 's/^9//')\n        result=$(echo \"$result\" | sed -e 's/^0//'\
    \ -e 's/^1//' -e 's/^2//' -e 's/^3//' -e 's/^4//' -e 's/^5//' -e 's/^6//' -e 's/^7//'\
    \ -e 's/^8//' -e 's/^9//')\n        result=$(echo \"$result\" | sed -e 's/^0//'\
    \ -e 's/^1//' -e 's/^2//' -e 's/^3//' -e 's/^4//' -e 's/^5//' -e 's/^6//' -e 's/^7//'\
    \ -e 's/^8//' -e 's/^9//')\n        result=$(echo \"$result\" | sed -e 's/^0//'\
    \ -e 's/^1//' -e 's/^2//' -e 's/^3//' -e 's/^4//' -e 's/^5//' -e 's/^6//' -e 's/^7//'\
    \ -e 's/^8//' -e 's/^9//')\n        result=$(echo \"$result\" | sed -e 's/^0//'\
    \ -e 's/^1//' -e 's/^2//' -e 's/^3//' -e 's/^4//' -e 's/^5//' -e 's/^6//' -e 's/^7//'\
    \ -e 's/^8//' -e 's/^9//')\n        result=$(echo \"$result\" | sed -e 's/^0//",
  "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n\
    \        echo \"Invalid base $base\"\n        return 1\n    fi\n    if [ \"$base\"\
    \ -gt 36 ]; then\n        echo \"Invalid base $base\"\n        return 1\n    fi\n\
    \    local result\n    result=$(echo \"$x\" | bc | awk '{print $1 / $base}')\n\
    \    if [ \"$result\" -eq 0 ]; then\n        echo \"Invalid base $base\"\n   \
    \     return 1\n    fi\n    echo \"$result\"", "    local x base\n    x=$1\n \
    \   base=$2\n    local str\n    str=$(( x / base ))\n    local remainder\n   \
    \ remainder=$(( x % base ))\n    local i\n    i=$(( str - 1 ))\n    while [ $i\
    \ -ge 0 ]; do\n        str=$(( str * base ))\n        i=$(( i - 1 ))\n    done\n\
    \    echo $(( str + remainder ))", "    local x=\"$1\"\n    local base=\"$2\"\n\
    \    local result\n    if [ \"$base\" -eq 2 ]; then\n        result=$(echo \"\
    $x\" | bc)\n    elif [ \"$base\" -eq 8 ]; then\n        result=$(echo \"$x\" |\
    \ bc -l)\n    elif [ \"$base\" -eq 10 ]; then\n        result=$(echo \"$x\" |\
    \ bc -l | tr -d '\\n')\n    else\n        echo \"Invalid base $base\"\n      \
    \  return 1\n    fi\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"$x is not a base $base\"\n    \
    \    return 1\n    fi\n    if [ $base -gt 2 ]; then\n        echo \"$x is not\
    \ a base $base\"\n        return 1\n    fi\n    local result\n    result=$(( x\
    \ / base ))\n    if [ $result -eq 0 ]; then\n        echo \"$x is 0\"\n      \
    \  return 1\n    fi\n    if [ $result -eq 1 ]; then\n        echo \"$x is 1\"\n\
    \        return 1\n    fi\n    if [ $result -eq 2 ]; then\n        echo \"$x is\
    \ 2\"\n        return 1\n    fi\n    if [ $result -eq 3 ]; then\n        echo\
    \ \"$x is 3\"\n        return 1\n    fi\n    if [ $result -eq 4 ]; then\n    \
    \    echo \"$x is 4\"\n        return 1\n    fi\n    if [ $result -eq 5 ]; then\n\
    \        echo \"$x is 5\"\n        return 1\n    fi\n    if [ $result -eq 6 ];\
    \ then\n        echo \"$x is 6\"\n        return 1\n    fi\n    if [ $result -eq\
    \ 7 ]; then\n        echo \"$x is 7\"\n        return 1\n    fi\n    if [ $result\
    \ -eq 8 ]; then\n        echo \"$x is 8\"\n        return 1\n    fi\n    if [\
    \ $result -eq 9 ]; then\n        echo \"$x is 9\"\n        return 1\n    fi\n\
    \    if [ $result -eq 10 ]; then\n        echo \"$x is 10\"\n        return 1\n\
    \    fi\n    if [ $result -eq 11 ]; then\n        echo \"$x is 11\"\n        return\
    \ 1\n    fi\n    if [ $result -eq 12 ]; then\n        echo \"$x is 12\"\n    \
    \    return 1\n    fi\n    if [ $result -eq 13 ]; then\n        echo \"$x is 13\"\
    \n        return 1\n    fi\n    if [ $result -eq 14 ]; then\n        echo \"$x\
    \ is 14\"\n        return 1\n    fi\n    if [ $result -eq 15 ]; then\n       \
    \ echo \"$x is 15\"\n        return 1\n    fi\n    if [ $result -eq 16 ]; then\n\
    \        echo \"$x is 16\"\n        return 1\n    fi\n    if [ $result -eq 17\
    \ ]; then\n        echo \"$x is 17\"\n        return 1\n    fi\n    if [ $result\
    \ -eq 18 ]; then\n        echo \"$x is 18\"\n        return 1\n    fi\n    if\
    \ [ $result -eq 19 ]; then\n        echo \"$x is 19\"\n        return 1\n    fi\n\
    \    if [ $result -eq 20 ]; then\n        echo \"$x is 20\"\n        return 1\n\
    \    fi\n    if [ $result -eq 21 ]; then", "    local x base\n    x=$1\n    base=$2\n\
    \    local result\n    result=$(( x / base ))\n    local remainder\n    remainder=$((\
    \ x % base ))\n    local i\n    for (( i=1; i<=remainder; i++ )); do\n       \
    \ result=$(( result * base ))\n    done\n    result=$(( result + 1 ))\n    result=$((\
    \ result * base ))\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    local ret\n    if [ $base -lt 10 ]; then\n        echo \"$x is not a base\
    \ $base\"\n        return 1\n    fi\n    local i\n    local j\n    local k\n \
    \   local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    ", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ \"$result\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10\
    \ ]; then\n        echo \"Base must be less than 10\"\n        return 1\n    fi\n\
    \    local res\n    res=$(echo \"$x\" | bc)\n    res=$(echo \"$res\" | sed -e\
    \ \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//\")\n    res=$(echo\
    \ \"$res", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    echo \"$result\" | bc | awk '{printf \"%0${base}d\\\
    n\", $0}'", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $base -lt 10 ]; then\n        echo \"Base $base is too small\"\n   \
    \     exit 1\n    fi\n    local y\n    y=$(( x / base ))\n    local z\n    z=$((\
    \ x % base ))\n    echo $y$z", "    local x base\n    x=$1\n    base=$2\n    local\
    \ result\n    result=$(echo \"$x\" | bc)\n    if [ $base -gt 10 ]; then\n    \
    \    echo \"$result\" | bc -l | awk '{printf \"%0.${base}f\\n\", $0}'\n    else\n\
    \        echo \"$result\"\n    fi", "  local x=\"$1\"\n  local base=\"$2\"\n \
    \ local output\n  output=\"$(echo \"$x\" | bc -l | sed -e \"s/^0*//\" -e \"s/^$base//\"\
    )\"\n  echo \"$output\"", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"Base $base is too small\"\n        return 1\n\
    \    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base $base is too large\"\
    \n        return 1\n    fi\n    local result\n    result=$(( x / $base ))\n  \
    \  echo $result", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    if [ $base -gt 10 ]; then\n        echo \"\
    $result\" | bc -l | awk '{printf \"%d\",$1}'\n    else\n        echo \"$result\"\
    \n    fi", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\"\
    \ | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n  result=$(echo\
    \ \"$result\" | sed -e 's/^0*//')\n  result=$(echo \"$result\" | sed -e 's/^0*//')\n\
    \  result=$(echo \"$result\" | sed ", "  local x=\"$1\"\n  local base=\"$2\"\n\
    \  local result\n  result=$(echo \"$x\" | bc)\n  echo \"$result\"", "    local\
    \ x=\"$1\"\n    local base=\"$2\"\n    local result\n    local digit\n    local\
    \ i\n    local j\n    local k\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n", "    local x base\n    x=$1\n    base=$2\n \
    \   local tmp\n    tmp=$((10#$x))\n    if [ $base -gt 0 ]; then\n        echo\
    \ \"$((10#$tmp))\"\n    else\n        echo \"$((10#$tmp))\"\n    fi", "    local\
    \ x base\n    x=$1\n    base=$2\n    local result\n    result=0\n    while [ $x\
    \ -gt 0 ]; do\n        result=$(( $result * $base ))\n        x=$(( $x / $base\
    \ ))\n    done\n    echo $result", "    local x base\n    x=$1\n    base=$2\n\
    \    local res\n    res=$(echo \"$x\" | bc)\n    if [ $base -lt 10 ]; then\n \
    \       echo \"$res\"\n    else\n        echo \"$res\" | bc | awk -v b=$base 'BEGIN{print\
    \ b}'\n    fi", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo\
    \ \"$x\" | bc)\n  echo \"$ret\" | bc -l | awk '{printf(\"%0${base}d\\n\", $1)}'",
  "    local x base\n    x=$1\n    base=$2\n    local res\n    res=$(echo $x | bc\
    \ -l | awk '{printf \"%0${base}d\", $0}')\n    echo \"$res\""]
stop_tokens:
- "\n}"
