language: sh
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local lower=$2\n    local upper=$3\n    local dict=$4\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local found\n  \
    \  local found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local key1\n  local value1\n  local key2\n  local value2\n \
    \ local key3\n  local value3\n  local key4\n  local value4\n  local key5\n  local\
    \ value5\n  local key6\n  local value6\n  local key7\n  local value7\n  local\
    \ key8\n  local value8\n  local key9\n  local value9\n  local key10\n  local value10\n\
    \  local key11\n  local value11\n  local key12\n  local value12\n  local key13\n\
    \  local value13\n  local key14\n  local value14\n  local key15\n  local value15\n\
    \  local key16\n  local value16\n  local key17\n  local value17\n  local key18\n\
    \  local value18\n  local key19\n  local value19\n  local key20\n  local value20\n\
    \  local key21\n  local value21\n  local key22\n  local value22\n  local key23\n\
    \  local value23\n  local key24\n  local value24\n  local key25\n  local value25\n\
    \  local key26\n  local value26\n  local key27\n  local value27\n  local key28\n\
    \  local value28\n  local key29\n  local value29\n  local key30\n  local value30\n\
    \  local key31\n  local value31\n  local key32\n  local value32\n  local key33\n\
    \  local value33\n  local key34\n  local value34\n  local key35\n  local value35\n\
    \  local key36\n  local value36\n  local key37\n  local value37\n  local key38\n\
    \  local value38\n  local key39\n  local value39\n  local key40\n  local value40\n\
    \  local key41\n  local value41\n  local key42\n  local value42\n  local key43\n\
    \  local value43\n  local key44\n  local value44\n  local key45\n  local value45\n\
    \  local key46\n  local value46\n  local key47\n  local value47\n  local key48\n\
    \  local value48\n  local key49\n  local value49\n  local key50\n  local value50\n\
    \  local key51\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict_case\n    dict_case=$1\n    \n    if [\
    \ -z \"$dict_case\" ]\n    then\n        echo \"Empty dictionary\"\n        exit\
    \ 1\n    fi\n    \n    for key in $dict_case\n    do\n        value=$dict_case[$key]\n\
    \        if [[ $key =~ ^[a-z]$ ]]\n        then\n            if [[ $value =~ ^[a-z]$\
    \ ]]\n            then\n                echo \"$key is in lower case\"\n     \
    \       else\n                echo \"$key is not in lower case\"\n           \
    \ fi\n        elif [[ $key =~ ^[A-Z]$ ]]\n        then\n            if [[ $value\
    \ =~ ^[A-Z]$ ]]\n            then\n                echo \"$key is in upper case\"\
    \n            else\n                echo \"$key is not in upper case\"\n     \
    \       fi\n        else\n            echo \"$key is not in lower or upper case\"\
    \n        fi\n    done\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=\"$1\"\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    \n    lower=0\n    upper=0\n    \n    for key in \"${!dict}\"\
    ; do\n        value=\"${dict[$key]}\"\n        lower=$((lower + ${#key}))\n  \
    \      upper=$((upper + ${#value}))\n    done\n    \n    if [[ $lower -eq 0 &&\
    \ $upper -eq 0 ]]; then\n        return 0\n    fi\n    \n    if [[ $lower -eq\
    \ 0 ]]; then\n        result=1\n    elif [[ $upper -eq 0 ]]; then\n        result=0\n\
    \    else\n        result=$(echo \"${dict}\" | awk '{print tolower($0)}')\n  \
    \  fi\n    \n    return $result\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdm83a7s4.sh: line 19: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_case_inverted=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_inverted=$7\n\
    \    local dict_case_upper_inverted=$8\n    local dict_case_lower_all=$9\n   \
    \ local dict_case_upper_all=${10}\n    local dict_case_lower_inverted_all=${11}\n\
    \    local dict_case_upper_inverted_all=${12}\n    local dict_case_lower_all_lower=${13}\n\
    \    local dict_case_upper_all_upper=${14}\n    local dict_case_lower_inverted_all_lower=${15}\n\
    \    local dict_case_upper_inverted_all_upper=${16}\n    local dict_case_lower_all_lower_upper=${17}\n\
    \    local dict_case_upper_all_upper_lower=${18}\n    local dict_case_lower_inverted_all_lower_upper=${19}\n\
    \    local dict_case_upper_inverted_all_upper_lower=${20}\n    local dict_case_lower_all_lower_upper_lower=${21}\n\
    \    local dict_case_upper_all_upper_lower_upper=${22}\n    local dict_case_lower_inverted_all_lower_upper_lower=${23}\n\
    \    local dict_case_upper_inverted_all_upper_lower_upper=${24}\n    local dict_case_lower_all_lower_upper_lower_upper=${25}\n\
    \    local dict_case_upper_all_upper_lower_upper_lower=${26}\n    local dict_case_lower_inverted_all_lower_upper_lower_upper=${27}\n\
    \    local dict_case_upper_inverted_all_upper_lower_upper_lower=${28}\n    local\
    \ dict_case_lower_all_lower_upper_lower_upper_lower=${29}\n    local dict_case_upper_all_upper_lower_upper_lower_upper=${30}\n\
    \    local dict_case_lower_inverted_all_lower_upper_lower_upper_lower=${31}\n\
    \    local dict_case_upper_inverted_all_upper_lower_upper_lower_upper=${32}\n\
    \    local dict_case_lower_all_lower_upper_lower_upper_lower_upper=${33}\n   \
    \ local dict_case_upper_all_upper_lower_upper_lower_upper_lower=${34}\n    local\
    \ dict_case_lower_inverted_all_lower_upper_lower_upper_lower_upper=${35}\n   \
    \ local dict_case_upper_inverted_all_upper_lower_upper_lower_upper_lower=${36}\n\
    \    local dict_case_lower_all_lower_upper_lower_upper_lower_upper_lower=${37}\n\
    \    local dict_case_upper_all_upper_lower_upper_lower_upper_lower_upper=${38}\n\
    \    local dict_case_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=\"$1\"\n    local dict_lines=$(wc -l < \"$dict_file\")\n    local\
    \ dict_line\n    local dict_key\n    local dict_value\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4rhg1i7d.sh: line 10: p,pineapple\nb,banana: No such file or directory

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=\"$1\"\n    local dict_lines=$(wc -l < \"$dict_file\")\n    local\
    \ dict_cols=$(( $dict_lines - 1 ))\n    local dict_keys=$(head -n 1 \"$dict_file\"\
    \ | cut -d, -f1)\n    local dict_values=$(head -n 1 \"$dict_file\" | cut -d, -f2)\n\
    \    local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_values_lower=$(echo \"$dict_values\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_values_upper=$(echo \"$dict_values\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_values_lower=$(echo \"$dict_values\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_values_upper=$(echo \"$dict_values\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_values_lower=$(echo \"$dict_values\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_values_upper=$(echo \"$dict_values\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_values_lower=$(echo \"$dict_values\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_values_upper=$(echo \"$dict_values\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \    local dict_values_lower=$(echo \"$dict_values\" | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_values_upper=$(echo \"$dict_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy4ku6jyf.sh: line 48: unexpected EOF while looking for matching
    `"''

    /tmp/tmpy4ku6jyf.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    lower=$(echo $dict | awk -F, '{print $1}')\n    upper=$(echo\
    \ $dict | awk -F, '{print $2}')\n    if [ -z \"$lower\" -o -z \"$upper\" ]; then\n\
    \        result=0\n    else\n        result=1\n        for (( i=0; i<${#lower};\
    \ i++ )); do\n            key=${lower:$i:1}\n            value=${lower:$i:2}\n\
    \            if [[ $key =~ ^[[:upper:]]+$ ]]; then\n                if [[ $value\
    \ =~ ^[[:upper:]]+$ ]]; then\n                    result=0\n                 \
    \   break\n                else\n                    result=1\n              \
    \      break\n                fi\n            else\n                if [[ $value\
    \ =~ ^[[:upper:]]+$ ]]; then\n                    result=0\n                 \
    \   break\n                else\n                    result=1\n              \
    \      break\n                fi\n            fi\n        done\n    fi\n    return\
    \ $result\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local keycase\n    local valuecase\n\
    \    local keystring\n    local valuestring\n    local keyupper\n    local valueupper\n\
    \    local keylower\n    local valuelower\n    local keycount\n    local valuecount\n\
    \    local keycountupper\n    local valuecountupper\n    local keycountlower\n\
    \    local valuecountlower\n    local keycountstring\n    local valuecountstring\n\
    \    local keycountupperstring\n    local valuecountupperstring\n    local keycountlowerstring\n\
    \    local valuecountlowerstring\n    local keycountstringupper\n    local valuecountstringupper\n\
    \    local keycountstringlower\n    local valuecountstringlower\n    local keycountupperstringupper\n\
    \    local valuecountupperstringupper\n    local keycountupperstringlower\n  \
    \  local valuecountupperstringlower\n    local keycountlowerstringupper\n    local\
    \ valuecountlowerstringupper\n    local keycountlowerstringlower\n    local valuecountlowerstringlower\n\
    \    local keycountstringstringupper\n    local valuecountstringstringupper\n\
    \    local keycountstringstringlower\n    local valuecountstringstringlower\n\
    \    local keycountupperstringstringupper\n    local valuecountupperstringstringupper\n\
    \    local keycountupperstringstringlower\n    local valuecountupperstringstringlower\n\
    \    local keycountlowerstringstringupper\n    local valuecountlowerstringstringupper\n\
    \    local keycountlowerstringstringlower\n    local valuecountlowerstringstringlower\n\
    \    local keycountstringstringstringupper\n    local valuecountstringstringstringupper\n\
    \    local keycountstringstringstringlower\n    local valuecountstringstringstringlower\n\
    \    local keycountupperstringstringstringupper\n    local valuecountupperstringstringstringupper\n\
    \    local keycountupperstringstringstringlower\n    local valuecountupperstringstringstringlower\n\
    \    local keycountlowerstringstringstringupper\n    local valuecountlowerstringstringstringupper\n\
    \    local keycountlowerstringstringstringlower\n    local valuecountlowerstringstringstringlower\n\
    \    local keycountstringstringstringstringupper\n    local valuecountstringstringstringstringupper\n\
    \    local keycountstringstringstringstringlower\n    local valuecountstringstringstringstringlower\n\
    \    local keycountupperstringstringstringstringupper\n    local valuecountupperstringstringstringstringupper\n\
    \    local keycountupperstringstringstringstringlower\n    \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local key2\n  local value2\n  local key3\n  local value3\n \
    \ local key4\n  local value4\n  local key5\n  local value5\n  local key6\n  local\
    \ value6\n  local key7\n  local value7\n  local key8\n  local value8\n  local\
    \ key9\n  local value9\n  local key10\n  local value10\n  local key11\n  local\
    \ value11\n  local key12\n  local value12\n  local key13\n  local value13\n  local\
    \ key14\n  local value14\n  local key15\n  local value15\n  local key16\n  local\
    \ value16\n  local key17\n  local value17\n  local key18\n  local value18\n  local\
    \ key19\n  local value19\n  local key20\n  local value20\n  local key21\n  local\
    \ value21\n  local key22\n  local value22\n  local key23\n  local value23\n  local\
    \ key24\n  local value24\n  local key25\n  local value25\n  local key26\n  local\
    \ value26\n  local key27\n  local value27\n  local key28\n  local value28\n  local\
    \ key29\n  local value29\n  local key30\n  local value30\n  local key31\n  local\
    \ value31\n  local key32\n  local value32\n  local key33\n  local value33\n  local\
    \ key34\n  local value34\n  local key35\n  local value35\n  local key36\n  local\
    \ value36\n  local key37\n  local value37\n  local key38\n  local value38\n  local\
    \ key39\n  local value39\n  local key40\n  local value40\n  local key41\n  local\
    \ value41\n  local key42\n  local value42\n  local key43\n  local value43\n  local\
    \ key44\n  local value44\n  local key45\n  local value45\n  local key46\n  local\
    \ value46\n  local key47\n  local value47\n  local key48\n  local value48\n  local\
    \ key49\n  local value49\n  local key50\n  local value50\n  local key51\n  local\
    \ value51\n  local key52\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    \n    lower=$(echo $dictionary | awk -F, '{print $1}')\n\
    \    upper=$(echo $dictionary | awk -F, '{print $2}')\n    \n    if [ -z \"$lower\"\
    \ ] || [ -z \"$upper\" ]; then\n        echo \"ERROR: dictionary is empty\"\n\
    \        exit 1\n    fi\n    \n    for key in $lower; do\n        if [ -z \"$key\"\
    \ ]; then\n            echo \"ERROR: dictionary is empty\"\n            exit 1\n\
    \        fi\n    done\n    \n    for key in $upper; do\n        if [ -z \"$key\"\
    \ ]; then\n            echo \"ERROR: dictionary is empty\"\n            exit 1\n\
    \        fi\n    done\n    \n    for value in $dictionary; do\n        if [ -z\
    \ \"$value\" ]; then\n            echo \"ERROR: dictionary is empty\"\n      \
    \      exit 1\n        fi\n    done\n    \n    result=$(echo $lower | tr [a-z]\
    \ [A-Z])\n    if [ \"$result\" != \"$lower\" ]; then\n        echo \"ERROR: dictionary\
    \ is empty\"\n        exit 1\n    fi\n    \n    result=$(echo $upper | tr [A-Z]\
    \ [a-z])\n    if [ \"$result\" != \"$upper\" ]; then\n        echo \"ERROR: dictionary\
    \ is empty\"\n        exit 1\n    fi\n    \n    echo \"OK\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for k\
    \ in \"${!dict[@]}\"; do\n        key=\"${k}\"\n        value=\"${dict[k]:-}\"\
    \n        if [[ \"$key\" =~ ^[a-z]$ ]]; then\n            lower=true\n       \
    \ elif [[ \"$key\" =~ ^[A-Z]$ ]]; then\n            upper=true\n        fi\n \
    \       if [[ \"$lower\" == \"true\" && \"$upper\" == \"true\" ]]; then\n    \
    \        found=true\n        fi\n    done\n    if [[ \"$found\" == \"false\" ]];\
    \ then\n        echo \"$dict is missing keys in lower case or upper case\"\n \
    \       false\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_not_empty=$7\n\
    \    local dict_not_empty_keys=$8\n    local dict_not_empty_values=$9\n    local\
    \ dict_not_empty_lines=$10\n    local dict_not_empty_lines_keys=$11\n    local\
    \ dict_not_empty_lines_values=$12\n    local dict_not_empty_lines_lines_keys=$13\n\
    \    local dict_not_empty_lines_lines_values=$14\n    local dict_not_empty_lines_lines_lines_keys=$15\n\
    \    local dict_not_empty_lines_lines_lines_values=$16\n    local dict_not_empty_lines_lines_lines_lines_keys=$17\n\
    \    local dict_not_empty_lines_lines_lines_lines_values=$18\n    local dict_not_empty_lines_lines_lines_lines_lines_keys=$19\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_values=$20\n    local\
    \ dict_not_empty_lines_lines_lines_lines_lines_lines_keys=$21\n    local dict_not_empty_lines_lines_lines_lines_lines_lines_values=$22\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_keys=$23\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_values=$24\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_keys=$25\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_values=$26\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$27\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$28\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$29\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$30\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$31\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$32\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$33\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$34\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$35\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_not_empty=$7\n\
    \    local dict_keys=$8\n    local dict_values=$9\n    local dict_lower=$dict_lower\n\
    \    local dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local dict_empty=$dict_empty\n\
    \    local dict_not_empty=$dict_not_empty\n    local dict_keys=$dict_keys\n  \
    \  local dict_values=$dict_values\n    local dict_lower=$dict_lower\n    local\
    \ dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local dict_empty=$dict_empty\n\
    \    local dict_not_empty=$dict_not_empty\n    local dict_keys=$dict_keys\n  \
    \  local dict_values=$dict_values\n    local dict_lower=$dict_lower\n    local\
    \ dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local dict_empty=$dict_empty\n\
    \    local dict_not_empty=$dict_not_empty\n    local dict_keys=$dict_keys\n  \
    \  local dict_values=$dict_values\n    local dict_lower=$dict_lower\n    local\
    \ dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local dict_empty=$dict_empty\n\
    \    local dict_not_empty=$dict_not_empty\n    local dict_keys=$dict_keys\n  \
    \  local dict_values=$dict_values\n    local dict_lower=$dict_lower\n    local\
    \ dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local dict_empty=$dict_empty\n\
    \    local dict_not_empty=$dict_not_empty\n    local dict_keys=$dict_keys\n  \
    \  local dict_values=$dict_values\n    local dict_lower=$dict_lower\n    local\
    \ dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local dict_empty=$dict_empty\n\
    \    local dict_not_empty=$dict_not_empty\n    local dict_keys=$dict_keys\n  \
    \  local dict_values=$dict_values\n    local dict_lower=$dict_lower\n    local\
    \ dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local dict_empty=$dict_empty\n\
    \    local dict_not_empty=$dict_not_empty\n    local dict_keys=$dict_keys\n  \
    \  local dict_values=$dict_values\n    local dict_lower=$dict_lower\n    local\
    \ dict_upper=$dict_upper\n    local dict_case=$dict_case\n    local \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n\n    if [ -z \"$dictionary\" ]\n    then\n       \
    \ return 0\n    fi\n\n    for key in \"${!dictionary[@]}\"\n    do\n        value=${dictionary[$key]}\n\
    \        lower=${value,,}\n        upper=${value,,}\n        if [ \"$lower\" !=\
    \ \"$value\" ] && [ \"$upper\" != \"$value\" ]\n        then\n            return\
    \ 0\n        fi\n    done\n\n    return 1\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    dict=$1\n    if [ -z \"$dict\" ];\
    \ then\n        return 0\n    fi\n    for key in ${!dict}; do\n        value=${dict[$key]}\n\
    \        if [ -z \"$value\" ]; then\n            return 0\n        fi\n      \
    \  if [ \"$key\" == \"$key\" ]; then\n            if [ \"$value\" == \"$value\"\
    \ ]; then\n                continue\n            else\n                return\
    \ 0\n            fi\n        fi\n        if [ \"$key\" == ${key^^} ]; then\n \
    \           if [ \"$value\" == ${value^^} ]; then\n                continue\n\
    \            else\n                return 0\n            fi\n        fi\n    \
    \    if [ \"$key\" == ${key^^i} ]; then\n            if [ \"$value\" == ${value^^i}\
    \ ]; then\n                continue\n            else\n                return\
    \ 0\n            fi\n        fi\n        if [ \"$key\" == ${key^^j} ]; then\n\
    \            if [ \"$value\" == ${value^^j} ]; then\n                continue\n\
    \            else\n                return 0\n            fi\n        fi\n    \
    \    if [ \"$key\" == ${key^^k} ]; then\n            if [ \"$value\" == ${value^^k}\
    \ ]; then\n                continue\n            else\n                return\
    \ 0\n            fi\n        fi\n        if [ \"$key\" == ${key^^l} ]; then\n\
    \            if [ \"$value\" == ${value^^l} ]; then\n                continue\n\
    \            else\n                return 0\n            fi\n        fi\n    \
    \    if [ \"$key\" == ${key^^m} ]; then\n            if [ \"$value\" == ${value^^m}\
    \ ]; then\n                continue\n            else\n                return\
    \ 0\n            fi\n        fi\n        if [ \"$key\" == ${key^^n} ]; then\n\
    \            if [ \"$value\" == ${value^^n} ]; then\n                continue\n\
    \            else\n                return 0\n            fi\n        fi\n    \
    \    if [ \"$key\" == ${key^^o} ]; then\n            if [ \"$value\" == ${value^^o}\
    \ ]; then\n                continue\n            else\n                return\
    \ 0\n            fi\n        fi\n        if [ \"$key\" == ${key^^p} ]; then\n\
    \            if [ \"$value\" == ${value^^p} ]; then\n                continue\n\
    \            else\n                return 0\n            fi\n        fi\n    \
    \    if [ \"$key\" == ${key^^q} ]; then\n            if [ \"$value\" == ${value^^q}\
    \ ]; then\n                continue\n            else\n                return\
    \ 0\n            fi\n        fi\n        if [ \"$key\" == ${key^^r} ]; then\n\
    \            if [ \"$value\" == ${value^^r} ]; then\n                continue\n\
    \            else\n                return 0\n            fi\n        fi\n    \
    \    if [ \"$key\" == \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp7r32tftx.sh: line 106: syntax error near unexpected token `}''

    /tmp/tmp7r32tftx.sh: line 106: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    dict=$1\n    for key in \"${!dict[@]}\"\
    ; do\n        value=${dict[$key]}\n        if [[ ${value} == *[[:upper:]]* ]];\
    \ then\n            echo \"${key} is upper case\"\n        elif [[ ${value} ==\
    \ *[[:lower:]]* ]]; then\n            echo \"${key} is lower case\"\n        else\n\
    \            echo \"${key} is neither upper or lower case\"\n            return\
    \ 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    \n    # Return False if dictionary is empty\n    if [ -z\
    \ \"$dictionary\" ]\n    then\n        echo \"check_dict_case: dictionary is empty\"\
    \n        false\n    fi\n\n    # Return False if dictionary has only one column\n\
    \    if [ ${#dictionary[@]} -eq 1 ]\n    then\n        echo \"check_dict_case:\
    \ dictionary has only one column\"\n        false\n    fi\n\n    # Return False\
    \ if dictionary has more than one column\n    if [ ${#dictionary[@]} -gt 1 ]\n\
    \    then\n        echo \"check_dict_case: dictionary has more than one column\"\
    \n        false\n    fi\n\n    # Return False if dictionary has empty keys\n \
    \   for key in \"${!dictionary[@]}\"\n    do\n        if [ -z \"$key\" ]\n   \
    \     then\n            echo \"check_dict_case: dictionary has empty key\"\n \
    \           false\n        fi\n    done\n\n    # Return False if dictionary has\
    \ empty values\n    for value in \"${!dictionary[@]}\"\n    do\n        if [ -z\
    \ \"$value\" ]\n        then\n            echo \"check_dict_case: dictionary has\
    \ empty value\"\n            false\n        fi\n    done\n\n    # Return False\
    \ if dictionary has keys that are not strings\n    for key in \"${!dictionary[@]}\"\
    \n    do\n        if [ -z \"$key\" ]\n        then\n            echo \"check_dict_case:\
    \ dictionary has non-string key\"\n            false\n        fi\n    done\n\n\
    \    # Return False if dictionary has values that are not strings\n    for value\
    \ in \"${!dictionary[@]}\"\n    do\n        if [ -z \"$value\" ]\n        then\n\
    \            echo \"check_dict_case: dictionary has non-string value\"\n     \
    \       false\n        fi\n    done\n\n    # Return False if dictionary has keys\
    \ that are not lower case\n    lower=false\n    for key in \"${!dictionary[@]}\"\
    \n    do\n        lower=true\n        value=${dictionary[$key]}\n        if [\
    \ -z \"$value\" ]\n        then\n            echo \"check_dict_case: dictionary\
    \ has non-lowercase key\"\n            false\n        fi\n    done\n\n    # Return\
    \ False if dictionary has values that are not lower case\n    upper=false\n  \
    \  for value in \"${!dictionary[@]}\"\n    do\n        upper=true\n        key=${dictionary[$value]}\n\
    \        if [ -z \"$key\" ]\n        then\n            echo \"check_dict_case:\
    \ dictionary has non-lowercase value\"\n            false\n        fi\n    done\n\
    \n    # Return False \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_not_empty=$7\n\
    \    local dict_keys=$8\n    local dict_values=$9\n    local dict_keys_in_lower=$10\n\
    \    local dict_keys_in_upper=$11\n    local dict_keys_not_in_lower=$12\n    local\
    \ dict_keys_not_in_upper=$13\n    local dict_keys_empty=$14\n    local dict_keys_not_empty=$15\n\
    \    local dict_keys_not_in_lower=$16\n    local dict_keys_not_in_upper=$17\n\
    \    local dict_keys_not_empty=$18\n    local dict_keys_not_in_lower=$19\n   \
    \ local dict_keys_not_in_upper=$20\n    local dict_keys_not_empty=$21\n    local\
    \ dict_keys_not_in_lower=$22\n    local dict_keys_not_in_upper=$23\n    local\
    \ dict_keys_not_empty=$24\n    local dict_keys_not_in_lower=$25\n    local dict_keys_not_in_upper=$26\n\
    \    local dict_keys_not_empty=$27\n    local dict_keys_not_in_lower=$28\n   \
    \ local dict_keys_not_in_upper=$29\n    local dict_keys_not_empty=$30\n    local\
    \ dict_keys_not_in_lower=$31\n    local dict_keys_not_in_upper=$32\n    local\
    \ dict_keys_not_empty=$33\n    local dict_keys_not_in_lower=$34\n    local dict_keys_not_in_upper=$35\n\
    \    local dict_keys_not_empty=$36\n    local dict_keys_not_in_lower=$37\n   \
    \ local dict_keys_not_in_upper=$38\n    local dict_keys_not_empty=$39\n    local\
    \ dict_keys_not_in_lower=$40\n    local dict_keys_not_in_upper=$41\n    local\
    \ dict_keys_not_empty=$42\n    local dict_keys_not_in_lower=$43\n    local dict_keys_not_in_upper=$44\n\
    \    local dict_keys_not_empty=$45\n    local dict_keys_not_in_lower=$46\n   \
    \ local dict_keys_not_in_upper=$47\n    local dict_keys_not_empty=$48\n    local\
    \ dict_keys_not_in_lower=$49\n    local dict_keys_not_in_upper=$50\n    local\
    \ dict_keys_not_empty=$51\n    local dict_keys_not_in_lower=$52\n    local dict_keys_not_in_upper=$53\n\
    \    local dict_keys_not_empty=$54\n    local dict_keys_not_in_lower=$55\n   \
    \ local dict_keys_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local key1\n    local value1\n    local key2\n   \
    \ local value2\n    local key3\n    local value3\n    local key4\n    local value4\n\
    \    local key5\n    local value5\n    local key6\n    local value6\n    local\
    \ key7\n    local value7\n    local key8\n    local value8\n    local key9\n \
    \   local value9\n    local key10\n    local value10\n    local key11\n    local\
    \ value11\n    local key12\n    local value12\n    local key13\n    local value13\n\
    \    local key14\n    local value14\n    local key15\n    local value15\n    local\
    \ key16\n    local value16\n    local key17\n    local value17\n    local key18\n\
    \    local value18\n    local key19\n    local value19\n    local key20\n    local\
    \ value20\n    local key21\n    local value21\n    local key22\n    local value22\n\
    \    local key23\n    local value23\n    local key24\n    local value24\n    local\
    \ key25\n    local value25\n    local key26\n    local value26\n    local key27\n\
    \    local value27\n    local key28\n    local value28\n    local key29\n    local\
    \ value29\n    local key30\n    local value30\n    local key31\n    local value31\n\
    \    local key32\n    local value32\n    local key33\n    local value33\n    local\
    \ key34\n    local value34\n    local key35\n    local value35\n    local key36\n\
    \    local value36\n    local key37\n    local value37\n    local key38\n    local\
    \ value38\n    local key39\n    local value39\n    local key40\n    local value40\n\
    \    local key41\n    local value41\n    local key42\n    local value42\n    local\
    \ key43\n    local value43\n    local key44\n    local value44\n    local key45\n\
    \    local value45\n    local key46\n    local value46\n    local key47\n    local\
    \ value47\n    local key48\n    local value48\n    local key49\n    local value49\n\
    \    local key50\n    local value50\n    local key51\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n\n    # Make sure the dictionary is not empty\n   \
    \ if [ -z \"$dictionary\" ]; then\n        echo \"check_dict_case: dictionary\
    \ is empty\"\n        exit 0\n    fi\n\n    # Make sure the dictionary is comma\
    \ delimited\n    if [ ${#dictionary} != 2 ]; then\n        echo \"check_dict_case:\
    \ dictionary is not comma delimited\"\n        exit 0\n    fi\n\n    # Make sure\
    \ the dictionary is comma delimited\n    if [ ${#dictionary} != 2 ]; then\n  \
    \      echo \"check_dict_case: dictionary is not comma delimited\"\n        exit\
    \ 0\n    fi\n\n    # Make sure the dictionary is comma delimited\n    if [ ${#dictionary}\
    \ != 2 ]; then\n        echo \"check_dict_case: dictionary is not comma delimited\"\
    \n        exit 0\n    fi\n\n    # Make sure the dictionary is comma delimited\n\
    \    if [ ${#dictionary} != 2 ]; then\n        echo \"check_dict_case: dictionary\
    \ is not comma delimited\"\n        exit 0\n    fi\n\n    # Make sure the dictionary\
    \ is comma delimited\n    if [ ${#dictionary} != 2 ]; then\n        echo \"check_dict_case:\
    \ dictionary is not comma delimited\"\n        exit 0\n    fi\n\n    # Make sure\
    \ the dictionary is comma delimited\n    if [ ${#dictionary} != 2 ]; then\n  \
    \      echo \"check_dict_case: dictionary is not comma delimited\"\n        exit\
    \ 0\n    fi\n\n    # Make sure the dictionary is comma delimited\n    if [ ${#dictionary}\
    \ != 2 ]; then\n        echo \"check_dict_case: dictionary is not comma delimited\"\
    \n        exit 0\n    fi\n\n    # Make sure the dictionary is comma delimited\n\
    \    if [ ${#dictionary} != 2 ]; then\n        echo \"check_dict_case: dictionary\
    \ is not comma delimited\"\n        exit 0\n    fi\n\n    # Make sure the dictionary\
    \ is comma delimited\n    if [ ${#dictionary} != 2 ]; then\n        echo \"check_dict_case:\
    \ dictionary is not comma delimited\"\n        exit 0\n    fi\n\n    # Make sure\
    \ the dictionary is comma delimited\n    if [ ${#dictionary} != 2 ]; then\n  \
    \      echo \"check_dict_case: dictionary is not comma delimited\"\n        exit\
    \ 0\n    fi\n\n    # Make sure the dictionary is comma delimited\n    if [ ${#dictionary}\
    \ != 2 ]; then\n        echo \"check_dict_case: dictionary is not comma delimited\"\
    \n        exit 0\n    fi\n\n    # Make sure the dictionary is comma delimited\n\
    \    if [ ${#dictionary} != 2 ]; then\n        echo \"check_dict_case: dictionary\
    \ is not comma delimited\"\n        exit 0\n\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9hgvyvu7.sh: line 93: syntax error near unexpected token `}''

    /tmp/tmp9hgvyvu7.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local lower=false\n    local upper=false\n    local count=0\n \
    \   local key\n    local value\n    \n    for k in $keys; do\n        key=$(echo\
    \ $k | cut -d ',' -f 1)\n        value=$(echo $k | cut -d ',' -f 2)\n        if\
    \ [[ $lower == false ]]; then\n            if [[ $key =~ ^[a-z]$ ]]; then\n  \
    \              lower=true\n            fi\n        else\n            if [[ $key\
    \ =~ ^[A-Z]$ ]]; then\n                upper=true\n            fi\n        fi\n\
    \    done\n    \n    if [[ $lower == true && $upper == true ]]; then\n       \
    \ count=$(echo $keys | wc -l)\n        if [[ $count -eq 0 ]]; then\n         \
    \   echo \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n            echo\
    \ \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n            echo \"\
    $keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n            echo \"$keys\"\
    \ | awk -F, '{print $2}' | sort | uniq | wc -l\n            echo \"$keys\" | awk\
    \ -F, '{print $2}' | sort | uniq | wc -l\n            echo \"$keys\" | awk -F,\
    \ '{print $2}' | sort | uniq | wc -l\n            echo \"$keys\" | awk -F, '{print\
    \ $2}' | sort | uniq | wc -l\n            echo \"$keys\" | awk -F, '{print $2}'\
    \ | sort | uniq | wc -l\n            echo \"$keys\" | awk -F, '{print $2}' | sort\
    \ | uniq | wc -l\n            echo \"$keys\" | awk -F, '{print $2}' | sort | uniq\
    \ | wc -l\n            echo \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc\
    \ -l\n            echo \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n\
    \            echo \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n   \
    \         echo \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n      \
    \      echo \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n         \
    \   echo \"$keys\" | awk -F, '{print $2}' | sort | uniq | wc -l\n            echo\
    \ \"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3sgm9_88.sh: line 64: unexpected EOF while looking for matching
    `"''

    /tmp/tmp3sgm9_88.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n    \n    if [ -z \"$dictionary\" ]\n    then\n   \
    \     echo \"check_dict_case: dictionary is empty\"\n        exit 1\n    fi\n\
    \    \n    for key; do\n        lower=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n\
    \        upper=$(echo \"$key\" | tr '[:lower:]' '[:upper:]')\n        value=$(echo\
    \ \"$dictionary\" | cut -d',' -f$key)\n        \n        if [ \"$lower\" != \"\
    $key\" ] && [ \"$upper\" != \"$key\" ]\n        then\n            echo \"check_dict_case:\
    \ dictionary key '$key' has mixed case\"\n            exit 1\n        fi\n   \
    \     \n        if [ \"$lower\" != \"$key\" ] && [ \"$value\" != \"$value\" ]\n\
    \        then\n            echo \"check_dict_case: dictionary key '$key' has mixed\
    \ case\"\n            exit 1\n        fi\n    done\n    \n    for key; do\n  \
    \      lower=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n        upper=$(echo\
    \ \"$key\" | tr '[:lower:]' '[:upper:]')\n        value=$(echo \"$dictionary\"\
    \ | cut -d',' -f$key)\n        \n        if [ \"$lower\" != \"$key\" ] && [ \"\
    $upper\" != \"$key\" ]\n        then\n            echo \"check_dict_case: dictionary\
    \ key '$key' has mixed case\"\n            exit 1\n        fi\n    done\n    \n\
    \    true\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "cut: invalid field value \u2018p,pineapple\\\\nb,banana\u2019\nTry 'cut\
    \ --help' for more information.\ncut: invalid field value \u2018p,pineapple\\\\\
    nb,banana\u2019\nTry 'cut --help' for more information.\n"
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dictionary=\"\
    $1\"\n  local key\n  local value\n  local result\n\n  if [ -z \"$dictionary\"\
    \ ]\n  then\n    return 1\n  fi\n\n  for key in \"${!dictionary[@]}\"\n  do\n\
    \    value=${dictionary[$key]}\n    if [ -z \"$value\" ]\n    then\n      return\
    \ 1\n    fi\n    if [ \"$key\" != \"${key^^}\" ]\n    then\n      result=false\n\
    \    else\n      result=true\n    fi\n    if [ \"$result\" != true ]\n    then\n\
    \      return 0\n    fi\n  done\n\n  return 1\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dict=$1\n\
    \  local key\n  local value\n  local lower\n  local upper\n  local found\n  \n\
    \  lower=false\n  upper=false\n  found=false\n  \n  for key in \"${!dict[@]}\"\
    ; do\n    value=${dict[$key]}\n    lower=false\n    upper=false\n    \n    # Convert\
    \ all keys to lower case\n    if [[ ${key} =~ ^[a-z]$ ]]; then\n      lower=true\n\
    \      key=${key^^}\n    fi\n    \n    # Convert all keys to upper case\n    if\
    \ [[ ${key} =~ ^[A-Z]$ ]]; then\n      upper=true\n      key=${key^^}\n    fi\n\
    \    \n    if [[ ${lower} == true && ${upper} == true ]]; then\n      found=true\n\
    \      break\n    fi\n  done\n  \n  if [[ ${found} == false ]]; then\n    return\
    \ 1\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local count\n    local keycount\n    local keycount2\n \
    \   local keycount3\n    local keycount4\n    local keycount5\n    local keycount6\n\
    \    local keycount7\n    local keycount8\n    local keycount9\n    local keycount10\n\
    \    local keycount11\n    local keycount12\n    local keycount13\n    local keycount14\n\
    \    local keycount15\n    local keycount16\n    local keycount17\n    local keycount18\n\
    \    local keycount19\n    local keycount20\n    local keycount21\n    local keycount22\n\
    \    local keycount23\n    local keycount24\n    local keycount25\n    local keycount26\n\
    \    local keycount27\n    local keycount28\n    local keycount29\n    local keycount30\n\
    \    local keycount31\n    local keycount32\n    local keycount33\n    local keycount34\n\
    \    local keycount35\n    local keycount36\n    local keycount37\n    local keycount38\n\
    \    local keycount39\n    local keycount40\n    local keycount41\n    local keycount42\n\
    \    local keycount43\n    local keycount44\n    local keycount45\n    local keycount46\n\
    \    local keycount47\n    local keycount48\n    local keycount49\n    local keycount50\n\
    \    local keycount51\n    local keycount52\n    local keycount53\n    local keycount54\n\
    \    local keycount55\n    local keycount56\n    local keycount57\n    local keycount58\n\
    \    local keycount59\n    local keycount60\n    local keycount61\n    local keycount62\n\
    \    local keycount63\n    local keycount64\n    local keycount65\n    local keycount66\n\
    \    local keycount67\n    local keycount68\n    local keycount69\n    local keycount70\n\
    \    local keycount71\n    local keycount72\n    local keycount73\n    local keycount74\n\
    \    local keycount75\n    local keycount76\n    local keycount77\n    local keycount78\n\
    \    local keycount79\n    local keycount80\n    local key\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local keys=\"$2\"\n    local values=\"$3\"\n    local\
    \ lowercase=0\n    local uppercase=0\n    local length=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
    \    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n \
    \   local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n   \
    \ local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=\"0\"\n\
    \    local j=\"0\"\n    local k=\"0\"\n    local l=\"0\"\n    local m=\"0\"\n\
    \    local n=\"0\"\n    local o=\"0\"\n    local p=\"0\"\n    local q=\"0\"\n\
    \    local r=\"0\"\n    local s=\"0\"\n    local t=\"0\"\n    local u=\"0\"\n\
    \    local v=\"0\"\n    local w=\"0\"\n    local x=\"0\"\n    local y=\"0\"\n\
    \    local z=\"0\"\n    local a=\"0\"\n    local b=\"0\"\n    local c=\"0\"\n\
    \    local d=\"0\"\n    local e=\"0\"\n    local f=\"0\"\n    local g=\"0\"\n\
    \    local h=\"0\"\n    local i=\"0\"\n    local j=\"0\"\n    local k=\"0\"\n\
    \    local l=\"0\"\n    local m=\"0\"\n    local n=\"0\"\n    local o=\"0\"\n\
    \    local p=\"0\"\n    local q=\"0\"\n    local r=\"0\"\n    local s=\"0\"\n\
    \    local t=\"0\"\n    local u=\"0\"\n    local v=\"0\"\n    local w=\"0\"\n\
    \    local x=\"0\"\n    local y=\"0\"\n    local z=\"0\"\n    local a=\"0\"\n\
    \    local b=\"0\"\n    local c=\"0\"\n    local d=\"0\"\n    local e=\"0\"\n\
    \    local f=\"0\"\n    local g=\"0\"\n    local h=\"0\"\n    local i=\"0\"\n\
    \    local j=\"0\"\n    local k=\"0\"\n    local l=\"0\"\n    local m=\"0\"\n\
    \    local n=\"0\"\n    local o\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1 \n    local lower=$2\n    local upper=$3\n    local dict=$4\n    local\
    \ result=0\n    local key\n    local value\n    local lower\n    local upper\n\
    \    \n    if [ -z \"$dict\" ]; then\n        return 0\n    fi\n    \n    for\
    \ key in $keys; do\n        value=${dict[$key]}\n        lower=${value%?}\n  \
    \      upper=${value#?}\n        if [ \"$lower\" != \"$lower\" ]; then\n     \
    \       result=1\n        fi\n        if [ \"$upper\" != \"$upper\" ]; then\n\
    \            result=1\n        fi\n    done\n    \n    return $result\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_keys=$7\n  \
    \  local dict_values=$8\n    local dict_key_count=$9\n    local dict_value_count=$10\n\
    \    local dict_key_count2=$11\n    local dict_value_count2=$12\n    local dict_key_count3=$13\n\
    \    local dict_value_count3=$14\n    local dict_key_count4=$15\n    local dict_value_count4=$16\n\
    \    local dict_key_count5=$17\n    local dict_value_count5=$18\n    local dict_key_count6=$19\n\
    \    local dict_value_count6=$20\n    local dict_key_count7=$21\n    local dict_value_count7=$22\n\
    \    local dict_key_count8=$23\n    local dict_value_count8=$24\n    local dict_key_count9=$25\n\
    \    local dict_value_count9=$26\n    local dict_key_count10=$27\n    local dict_value_count10=$28\n\
    \    local dict_key_count11=$29\n    local dict_value_count11=$30\n    local dict_key_count12=$31\n\
    \    local dict_value_count12=$32\n    local dict_key_count13=$33\n    local dict_value_count13=$34\n\
    \    local dict_key_count14=$35\n    local dict_value_count14=$36\n    local dict_key_count15=$37\n\
    \    local dict_value_count15=$38\n    local dict_key_count16=$39\n    local dict_value_count16=$40\n\
    \    local dict_key_count17=$41\n    local dict_value_count17=$42\n    local dict_key_count18=$43\n\
    \    local dict_value_count18=$44\n    local dict_key_count19=$45\n    local dict_value_count19=$46\n\
    \    local dict_key_count20=$47\n    local dict_value_count20=$48\n    local dict_key_count21=$49\n\
    \    local dict_value_count21=$50\n    local dict_key_count22=$51\n    local dict_value_count22=$52\n\
    \    local dict_key_count23=$53\n    local dict_value_count23=$54\n    local dict_key_count24=$55\n\
    \    local dict_value_count24=$56\n    local dict_key_count25=$57\n    local dict_value_count25=$58\n\
    \    local dict_key_count26=$\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local result\n\n\
    \    lower=0\n    upper=0\n    for (( i=0; i<${#1[@]}; i++ )); do\n        key=${1[$i]}\n\
    \        value=${1[$(($i+1))]}\n        if [[ ${key} == *[[:upper:]]* ]]; then\n\
    \            upper=$((upper+1))\n        else\n            lower=$((lower+1))\n\
    \        fi\n    done\n\n    if [[ ${lower} -eq 0 && ${upper} -eq 0 ]]; then\n\
    \        result=1\n    else\n        result=0\n    fi\n    \n    exit ${result}\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7c7v5gg0.sh: line 17: i<${#1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dict_name=$1\n\
    \  local dict_lines=$2\n  local dict_headers=$3\n  local dict_case=$4\n  local\
    \ dict_headers_case=$5\n  local dict_case_inverted=$6\n  local dict_headers_case_inverted=$7\n\
    \  local dict_case_lower=$8\n  local dict_headers_case_lower=$9\n  local dict_case_upper=$10\n\
    \  local dict_headers_case_upper=$11\n  local dict_case_lower_inverted=$12\n \
    \ local dict_headers_case_lower_inverted=$13\n  local dict_case_upper_inverted=$14\n\
    \  local dict_headers_case_upper_inverted=$15\n  local dict_case_lower_lower=$16\n\
    \  local dict_headers_case_lower_lower=$17\n  local dict_case_lower_upper=$18\n\
    \  local dict_headers_case_lower_upper=$19\n  local dict_case_upper_upper=$20\n\
    \  local dict_headers_case_upper_upper=$21\n  local dict_case_lower_inverted_lower=$22\n\
    \  local dict_headers_case_lower_inverted_lower=$23\n  local dict_case_upper_inverted_lower=$24\n\
    \  local dict_headers_case_upper_inverted_lower=$25\n  local dict_case_lower_inverted_upper=$26\n\
    \  local dict_headers_case_lower_inverted_upper=$27\n  local dict_case_upper_inverted_upper=$28\n\
    \  local dict_headers_case_upper_inverted_upper=$29\n  local dict_case_lower_lower_lower=$30\n\
    \  local dict_headers_case_lower_lower_lower=$31\n  local dict_case_lower_lower_upper=$32\n\
    \  local dict_headers_case_lower_lower_upper=$33\n  local dict_case_lower_upper_upper=$34\n\
    \  local dict_headers_case_lower_upper_upper=$35\n  local dict_case_upper_upper_upper=$36\n\
    \  local dict_headers_case_upper_upper_upper=$37\n  local dict_case_lower_inverted_lower_lower=$38\n\
    \  local dict_headers_case_lower_inverted_lower_lower=$39\n  local dict_case_upper_inverted_lower_lower=$40\n\
    \  local dict_headers_case_upper_inverted_lower_lower=$41\n  local dict_case_lower_inverted_upper_lower=$42\n\
    \  local dict_headers_case_lower_inverted_upper_lower=$43\n  local dict_case_upper_inverted_upper_lower=$44\n\
    \  local dict_headers_case_upper_inverted_upper_lower=$45\n  local dict_case_lower\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_lower=$5\n    local dict_upper=$6\n    local dict_empty=$7\n \
    \   local dict_keys=$8\n    local dict_values=$9\n    local dict_cases=$10\n \
    \   local dict_lowers=$11\n    local dict_uppers=$12\n    local dict_emptys=$13\n\
    \    local dict_keysss=$14\n    local dict_valuess=$15\n    local dict_casess=$16\n\
    \    local dict_lowersss=$17\n    local dict_uppersss=$18\n    local dict_emptysss=$19\n\
    \    local dict_keyssss=$20\n    local dict_valuessss=$21\n    local dict_casessss=$22\n\
    \    local dict_lowerssss=$23\n    local dict_upperssss=$24\n    local dict_emptyssss=$25\n\
    \    local dict_keysssss=$26\n    local dict_valuessssss=$27\n    local dict_casessssss=$28\n\
    \    local dict_lowersssss=$29\n    local dict_uppersssss=$30\n    local dict_emptysssss=$31\n\
    \    local dict_keyssssss=$32\n    local dict_valuesssssss=$33\n    local dict_casesssssss=$34\n\
    \    local dict_lowerssssss=$35\n    local dict_upperssssss=$36\n    local dict_emptyssssss=$37\n\
    \    local dict_keysssssss=$38\n    local dict_valuessssssss=$39\n    local dict_casessssssss=$40\n\
    \    local dict_lowersssssss=$41\n    local dict_uppersssssss=$42\n    local dict_emptysssssss=$43\n\
    \    local dict_keyssssssss=$44\n    local dict_valuessssssssss=$45\n    local\
    \ dict_casessssssssss=$46\n    local dict_lowersssssssss=$47\n    local dict_uppersssssssss=$48\n\
    \    local dict_emptysssssssss=$49\n    local dict_keysssssssss=$50\n    local\
    \ dict_valuesssssssssss=$51\n    local dict_casessssssssssss=$52\n    local dict_lower\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_name=$2\n    local dict_case=$3\n    local dict_case_inverse=$4\n\
    \    local dict_case_map=$5\n    local dict_case_map_reverse=$6\n    local dict_case_map_reverse_inverse=$7\n\
    \    local dict_case_map_reverse_map=$8\n    local dict_case_map_reverse_map_reverse=$9\n\
    \    local dict_case_map_reverse_map_reverse_inverse=${10}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${11}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${12}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${13}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${14}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${15}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${16}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${17}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${18}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${19}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${20}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${21}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${22}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${23}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${24}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${25}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${26}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${27}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${28}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${29}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${30}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${31}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${32}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${33}\n    local\
    \ dict_case_map_reverse_map_reverse_inverse_inverse=${34}\n    local dict_case_map_reverse_map_reverse_inverse_inverse=${35}\n\
    \    local dict_case_map_reverse_map_reverse_inverse_inverse=${36}\n    local\
    \ dict_case_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local dict\n   \
    \ dict=$1\n    lower=$(echo $dict | awk -F, '{print $1}')\n    upper=$(echo $dict\
    \ | awk -F, '{print $2}')\n    if [ -z \"$dict\" ]; then\n        echo \"$dict\
    \ is empty\"\n        exit 1\n    fi\n    for key in $lower; do\n        if [\
    \ -z \"$key\" ]; then\n            echo \"$dict is empty\"\n            exit 1\n\
    \        fi\n    done\n    for key in $upper; do\n        if [ -z \"$key\" ];\
    \ then\n            echo \"$dict is empty\"\n            exit 1\n        fi\n\
    \    done\n    true\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_name=$2\n    local dict_case=$3\n    local dict_case_in=$4\n\
    \    local dict_case_out=$5\n    local dict_case_in_list=$6\n    local dict_case_out_list=$7\n\
    \    local dict_case_in_list_regex=$8\n    local dict_case_out_list_regex=$9\n\
    \    local dict_case_in_list_regex_case=$10\n    local dict_case_out_list_regex_case=$11\n\
    \    local dict_case_in_list_regex_case_in=$12\n    local dict_case_out_list_regex_case_out=$13\n\
    \    local dict_case_in_list_regex_case_out_in=$14\n    local dict_case_out_list_regex_case_out_out=$15\n\
    \    local dict_case_in_list_regex_case_out_out_in=$16\n    local dict_case_out_list_regex_case_out_out_out=$17\n\
    \    local dict_case_in_list_regex_case_out_out_out_in=$18\n    local dict_case_out_list_regex_case_out_out_out_out=$19\n\
    \    local dict_case_in_list_regex_case_out_out_out_out_in=$20\n    local dict_case_out_list_regex_case_out_out_out_out_out=$21\n\
    \    local dict_case_in_list_regex_case_out_out_out_out_out_in=$22\n    local\
    \ dict_case_out_list_regex_case_out_out_out_out_out_out=$23\n    local dict_case_in_list_regex_case_out_out_out_out_out_out_in=$24\n\
    \    local dict_case_out_list_regex_case_out_out_out_out_out_out_out=$25\n   \
    \ local dict_case_in_list_regex_case_out_out_out_out_out_out_out_in=$26\n    local\
    \ dict_case_out_list_regex_case_out_out_out_out_out_out_out_out=$27\n    local\
    \ dict_case_in_list_regex_case_out_out_out_out_out_out_out_out_in=$28\n    local\
    \ dict_case_out_list_regex_case_out_out_out_out_out_out_out_out_out=$29\n    local\
    \ dict_case_in_list_regex_case_out_out_out_out_out_out_out_out_out_in=$30\n  \
    \  local dict_case_out_list_regex_case_out_out_out_out_out_out_out_out_out_out=$31\n\
    \    local dict_case_in_list_regex_case_out_out_out_out_out_out_out_out_out_out_in=$32\n\
    \    local dict_case_out_list_regex_case_out_out_out_out_out_out_out_out_out_out_out=$33\n\
    \    local dict_case_in_list_regex_case_out_out_out_out_out_out_out_out_out_out_out_in=$34\n\
    \    local dict_case_out_list_regex_case_out_out_out_out_out_out_out_out_out_out_out_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local lower=$2\n    local upper=$3\n    local dict=$4\n    local\
    \ result=0\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local result\n\n    lower=0\n    upper=0\n    dict=$1\n    shift\n    shift\n\
    \    for (( i=0; i<${#dict}; i++ )); do\n        key=${dict[$i,0]}\n        value=${dict[$i,1]}\n\
    \        if [ -z \"$key\" ]; then\n            echo \"ERROR: key $key not found\
    \ in dictionary\"\n            return 1\n        fi\n        if [ -z \"$value\"\
    \ ]; then\n            echo \"ERROR: value $value not found in dictionary\"\n\
    \            return 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n\
    \            echo \"ERROR: key $key has same value as value $value\"\n       \
    \     return 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n    \
    \        echo \"ERROR: key $key has same value as value $value\"\n           \
    \ return 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n        \
    \    echo \"ERROR: key $key has same value as value $value\"\n            return\
    \ 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n            echo\
    \ \"ERROR: key $key has same value as value $value\"\n            return 1\n \
    \       fi\n        if [ \"$key\" == \"$value\" ]; then\n            echo \"ERROR:\
    \ key $key has same value as value $value\"\n            return 1\n        fi\n\
    \        if [ \"$key\" == \"$value\" ]; then\n            echo \"ERROR: key $key\
    \ has same value as value $value\"\n            return 1\n        fi\n       \
    \ if [ \"$key\" == \"$value\" ]; then\n            echo \"ERROR: key $key has\
    \ same value as value $value\"\n            return 1\n        fi\n        if [\
    \ \"$key\" == \"$value\" ]; then\n            echo \"ERROR: key $key has same\
    \ value as value $value\"\n            return 1\n        fi\n        if [ \"$key\"\
    \ == \"$value\" ]; then\n            echo \"ERROR: key $key has same value as\
    \ value $value\"\n            return 1\n        fi\n        if [ \"$key\" == \"\
    $value\" ]; then\n            echo \"ERROR: key $key has same value as value $value\"\
    \n            return 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n\
    \            echo \"ERROR: key $key has same value as value $value\"\n       \
    \     return 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n    \
    \        echo \"ERROR: key $key has same value as value $value\"\n           \
    \ return 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n        \
    \    echo \"ERROR: key $key has same value as value $value\"\n            return\
    \ 1\n        fi\n        if [ \"$key\" == \"$value\" ]; then\n            echo\
    \ \"ERROR: key $key has same value as value $value\"\n            return 1\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpro7dldqo.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmpro7dldqo.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower_case_key\n  \
    \  local upper_case_key\n    local lower_case_value\n    local upper_case_value\n\
    \    local result\n    local count\n    local i\n    local j\n    local k\n  \
    \  local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local \n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local dict\n    local dictUpper\n    local dictLower\n\
    \    local result\n    dict=$1\n    if [ -z \"$dict\" ]\n    then\n        return\
    \ 0\n    fi\n    dictUpper=$(echo \"$dict\" | tr A-Z A-Z)\n    dictLower=$(echo\
    \ \"$dict\" | tr a-z a-z)\n    for key in $dict\n    do\n        keyUpper=$(echo\
    \ \"$key\" | tr A-Z A-Z)\n        keyLower=$(echo \"$key\" | tr a-z a-z)\n   \
    \     value=$(echo \"$dict\" | cut -d',' -f$key)\n        valueUpper=$(echo \"\
    $value\" | tr A-Z A-Z)\n        valueLower=$(echo \"$value\" | tr a-z a-z)\n \
    \       if [ \"$keyUpper\" != \"$keyLower\" ] || [ \"$valueUpper\" != \"$valueLower\"\
    \ ]\n        then\n            return 0\n        fi\n    done\n    return 1\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "cut: invalid field value \u2018p,pineapple\\\\nb,banana\u2019\nTry 'cut\
    \ --help' for more information.\n"
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    \n    lower=$(echo $dictionary | awk -F, '{print $1}')\n\
    \    upper=$(echo $dictionary | awk -F, '{print $2}')\n    \n    if [ -z \"$lower\"\
    \ ] || [ -z \"$upper\" ]; then\n        echo \"dictionary is empty\"\n       \
    \ exit 0\n    fi\n    \n    for key in $lower; do\n        if [ -z \"$key\" ];\
    \ then\n            echo \"dictionary is empty\"\n            exit 0\n       \
    \ fi\n    done\n    \n    for key in $upper; do\n        if [ -z \"$key\" ]; then\n\
    \            echo \"dictionary is empty\"\n            exit 0\n        fi\n  \
    \  done\n    \n    result=$(echo $lower | tr [a-z] [A-Z])\n    if [ \"$result\"\
    \ != \"$lower\" ]; then\n        echo \"dictionary has keys in lower case\"\n\
    \        exit 0\n    fi\n    \n    result=$(echo $upper | tr [A-Z] [a-z])\n  \
    \  if [ \"$result\" != \"$upper\" ]; then\n        echo \"dictionary has keys\
    \ in upper case\"\n        exit 0\n    fi\n    \n    return 0\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for key\
    \ in ${!dict}; do\n        value=${dict[$key]}\n        if [[ \"$key\" =~ ^[a-z]$\
    \ ]]; then\n            lower=true\n        elif [[ \"$key\" =~ ^[A-Z]$ ]]; then\n\
    \            upper=true\n        fi\n        if [[ \"$lower\" == \"true\" && \"\
    $upper\" == \"true\" ]]; then\n            found=true\n        fi\n    done\n\
    \    if [[ \"$found\" == \"false\" ]]; then\n        echo \"$dict is missing keys\
    \ in lower case or upper case\"\n        false\n    else\n        echo \"$dict\
    \ is OK\"\n        true\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgx53x9lu.sh: line 18: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=\"$1\"\n    local dict_name=\"$2\"\n    local dict_case=\"$3\"\n \
    \   local dict_lower=\"$4\"\n    local dict_upper=\"$5\"\n    local dict_empty=\"\
    $6\"\n    local dict_not_empty=\"$7\"\n    local dict_not_empty2=\"$8\"\n    local\
    \ dict_not_empty3=\"$9\"\n    local dict_not_empty4=\"$10\"\n    local dict_not_empty5=\"\
    $11\"\n    local dict_not_empty6=\"$12\"\n    local dict_not_empty7=\"$13\"\n\
    \    local dict_not_empty8=\"$14\"\n    local dict_not_empty9=\"$15\"\n    local\
    \ dict_not_empty10=\"$16\"\n    local dict_not_empty11=\"$17\"\n    local dict_not_empty12=\"\
    $18\"\n    local dict_not_empty13=\"$19\"\n    local dict_not_empty14=\"$20\"\n\
    \    local dict_not_empty15=\"$21\"\n    local dict_not_empty16=\"$22\"\n    local\
    \ dict_not_empty17=\"$23\"\n    local dict_not_empty18=\"$24\"\n    local dict_not_empty19=\"\
    $25\"\n    local dict_not_empty20=\"$26\"\n    local dict_not_empty21=\"$27\"\n\
    \    local dict_not_empty22=\"$28\"\n    local dict_not_empty23=\"$29\"\n    local\
    \ dict_not_empty24=\"$30\"\n    local dict_not_empty25=\"$31\"\n    local dict_not_empty26=\"\
    $32\"\n    local dict_not_empty27=\"$33\"\n    local dict_not_empty28=\"$34\"\n\
    \    local dict_not_empty29=\"$35\"\n    local dict_not_empty30=\"$36\"\n    local\
    \ dict_not_empty31=\"$37\"\n    local dict_not_empty32=\"$38\"\n    local dict_not_empty33=\"\
    $39\"\n    local dict_not_empty34=\"$40\"\n    local dict_not_empty35=\"$41\"\n\
    \    local dict_not_empty36=\"$42\"\n    local dict_not_empty37=\"$43\"\n    local\
    \ dict_not_empty38=\"$44\"\n    local dict_not_empty39=\"$45\"\n    local dict_not_empty40=\"\
    $46\"\n    local dict_not_empty41=\"$47\"\n    local dict_not_empty42=\"$48\"\n\
    \    local dict_not_empty43=\"$49\"\n    local dict_not_empty44=\"$50\"\n    local\
    \ dict_not_empty45=\"$51\"\n    local dict_not_empty46=\"$52\"\n    local dict_not_empty47=\"\
    $53\"\n    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_keys=$4\n\
    \    local dict_values=$5\n    local dict_case_insensitive=$6\n    local dict_keys_insensitive=$7\n\
    \    local dict_values_insensitive=$8\n    local dict_case_insensitive_keys=$9\n\
    \    local dict_values_insensitive_values=$10\n    local dict_case_insensitive_value_keys=$11\n\
    \    local dict_values_insensitive_value_keys=$12\n    local dict_case_insensitive_keys_values=$13\n\
    \    local dict_values_insensitive_keys_values=$14\n    local dict_case_insensitive_values_keys=$15\n\
    \    local dict_values_insensitive_values_keys=$16\n    local dict_case_insensitive_keys_values_values=$17\n\
    \    local dict_values_insensitive_keys_values_values=$18\n    local dict_case_insensitive_values_values_keys=$19\n\
    \    local dict_values_insensitive_values_values_keys=$20\n    local dict_case_insensitive_keys_values_values_values=$21\n\
    \    local dict_values_insensitive_keys_values_values_values=$22\n    local dict_case_insensitive_values_values_values_keys=$23\n\
    \    local dict_values_insensitive_values_values_values_keys=$24\n    local dict_case_insensitive_keys_values_values_values_values=$25\n\
    \    local dict_values_insensitive_keys_values_values_values_values=$26\n    local\
    \ dict_case_insensitive_values_values_values_values_keys=$27\n    local dict_values_insensitive_values_values_values_values_keys=$28\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values=$29\n\
    \    local dict_values_insensitive_keys_values_values_values_values_values=$30\n\
    \    local dict_case_insensitive_values_values_values_values_values_keys=$31\n\
    \    local dict_values_insensitive_values_values_values_values_values_keys=$32\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values_values=$33\n\
    \    local dict_values_insensitive_keys_values_values_values_values_values_values=$34\n\
    \    local dict_case_insensitive_values_values_values_values_values_values_keys=$35\n\
    \    local dict_values_insensitive_values_values_values_values_values_values_keys=$36\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values_values_values=$37\n\
    \    local dict_values_insensitive_keys_values_values_values_\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    dict=$1\n    for key; do\n       \
    \ value=$(echo $key | awk -F, '{print $2}')\n        if [[ $value =~ ^[[:lower:]]+$\
    \ ]]; then\n            echo \"$key is a lower case string\"\n        elif [[\
    \ $value =~ ^[[:upper:]]+$ ]]; then\n            echo \"$key is an upper case\
    \ string\"\n        else\n            echo \"$key is not a string\"\n        fi\n\
    \    done\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local dict\n    local count\n    local i\n    local\
    \ j\n    local k\n    local l\n    local result\n    dict=$1\n    count=0\n  \
    \  for k in $(echo $dict | tr \",\" \"\\n\"); do\n        key=$(echo $k | cut\
    \ -d \",\" -f 1)\n        value=$(echo $k | cut -d \",\" -f 2)\n        keyUpper=$(echo\
    \ $key | tr \"[:upper:]\" \"[:lower:]\")\n        valueUpper=$(echo $value | tr\
    \ \"[:upper:]\" \"[:lower:]\")\n        keyLower=$(echo $key | tr \"[:lower:]\"\
    \ \"[:upper:]\")\n        valueLower=$(echo $value | tr \"[:lower:]\" \"[:upper:]\"\
    )\n        if [ -z \"$key\" ]; then\n            echo \"$keyUpper,$valueUpper\"\
    \ >> /tmp/dict\n            ((count++))\n        elif [ -z \"$value\" ]; then\n\
    \            echo \"$keyUpper,$valueUpper\" >> /tmp/dict\n            ((count++))\n\
    \        elif [ \"$keyUpper\" == \"$keyLower\" ] || [ \"$valueUpper\" == \"$valueLower\"\
    \ ]; then\n            echo \"$keyUpper,$valueUpper\" >> /tmp/dict\n         \
    \   ((count++))\n        else\n            echo \"$keyUpper,$valueUpper\" >> /tmp/dict\n\
    \            echo \"$keyLower,$valueLower\" >> /tmp/dict\n            ((count++))\n\
    \        fi\n    done\n    if [ $count -eq 0 ]; then\n        result=0\n    else\n\
    \        result=1\n    fi\n    echo $result\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local keyval\n    local keyval2\n    local keyval3\n    local keyval4\n \
    \   local keyval5\n    local keyval6\n    local keyval7\n    local keyval8\n \
    \   local keyval9\n    local keyval10\n    local keyval11\n    local keyval12\n\
    \    local keyval13\n    local keyval14\n    local keyval15\n    local keyval16\n\
    \    local keyval17\n    local keyval18\n    local keyval19\n    local keyval20\n\
    \    local keyval21\n    local keyval22\n    local keyval23\n    local keyval24\n\
    \    local keyval25\n    local keyval26\n    local keyval27\n    local keyval28\n\
    \    local keyval29\n    local keyval30\n    local keyval31\n    local keyval32\n\
    \    local keyval33\n    local keyval34\n    local keyval35\n    local keyval36\n\
    \    local keyval37\n    local keyval38\n    local keyval39\n    local keyval40\n\
    \    local keyval41\n    local keyval42\n    local keyval43\n    local keyval44\n\
    \    local keyval45\n    local keyval46\n    local keyval47\n    local keyval48\n\
    \    local keyval49\n    local keyval50\n    local keyval51\n    local keyval52\n\
    \    local keyval53\n    local keyval54\n    local keyval55\n    local keyval56\n\
    \    local keyval57\n    local keyval58\n    local keyval59\n    local keyval60\n\
    \    local keyval61\n    local keyval62\n    local keyval63\n    local keyval64\n\
    \    local keyval65\n    local keyval66\n    local keyval67\n    local keyval68\n\
    \    local keyval69\n    local keyval70\n    local keyval71\n    local keyval72\n\
    \    local keyval73\n    local keyval74\n    local keyval75\n    local keyval76\n\
    \    local keyval77\n    local keyval78\n    local keyval79\n    local keyval80\n\
    \    local keyval81\n    local keyval82\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_inverted=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_inverted=$7\n\
    \    local dict_case_upper_inverted=$8\n    local dict_case_lower_inverted_inverted=$9\n\
    \    local dict_case_upper_inverted_inverted=$10\n    local dict_case_lower_inverted_inverted_inverted=$11\n\
    \    local dict_case_upper_inverted_inverted_inverted=$12\n    local dict_case_lower_inverted_inverted_inverted_inverted=$13\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted=$14\n    local\
    \ dict_case_lower_inverted_inverted_inverted_inverted_inverted=$15\n    local\
    \ dict_case_upper_inverted_inverted_inverted_inverted_inverted=$16\n    local\
    \ dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted=$17\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted=$18\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$19\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$20\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$21\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$22\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$23\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$24\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$25\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$26\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$27\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$28\n\
    \    local dict_case_lower_inverted_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local dict\n    local dictKeys\n    local dictValues\n\
    \    local dictKeysUpper\n    local dictValuesUpper\n    local dictKeysLower\n\
    \    local dictValuesLower\n    local dictKeysUpper\n    local dictValuesUpper\n\
    \    local dictKeysLower\n    local dictValuesLower\n    local dictKeys\n    local\
    \ dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n \
    \   local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    local dictKeys\n\
    \    local dictValues\n    local dictKeys\n    local dictValues\n    \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local result\n\n    lower=$1\n    upper=$2\n    dict=$3\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n    shift\n\
    \    shift\n    shift\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local lower\n    local upper\n    local key\n    lower=false\n\
    \    upper=false\n    for key in $keys; do\n        if [[ \"$key\" =~ ^[a-z]$\
    \ ]]; then\n            lower=true\n        elif [[ \"$key\" =~ ^[A-Z]$ ]]; then\n\
    \            upper=true\n        else\n            return false\n        fi\n\
    \    done\n    if [[ \"$lower\" == \"true\" && \"$upper\" == \"true\" ]]; then\n\
    \        return true\n    else\n        return false\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsmmq1236.sh: line 21: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local key1\n    local key2\n    local\
    \ key3\n    local key4\n    local key5\n    local key6\n    local key7\n    local\
    \ key8\n    local key9\n    local key10\n    local key11\n    local key12\n  \
    \  local key13\n    local key14\n    local key15\n    local key16\n    local key17\n\
    \    local key18\n    local key19\n    local key20\n    local key21\n    local\
    \ key22\n    local key23\n    local key24\n    local key25\n    local key26\n\
    \    local key27\n    local key28\n    local key29\n    local key30\n    local\
    \ key31\n    local key32\n    local key33\n    local key34\n    local key35\n\
    \    local key36\n    local key37\n    local key38\n    local key39\n    local\
    \ key40\n    local key41\n    local key42\n    local key43\n    local key44\n\
    \    local key45\n    local key46\n    local key47\n    local key48\n    local\
    \ key49\n    local key50\n    local key51\n    local key52\n    local key53\n\
    \    local key54\n    local key55\n    local key56\n    local key57\n    local\
    \ key58\n    local key59\n    local key60\n    local key61\n    local key62\n\
    \    local key63\n    local key64\n    local key65\n    local key66\n    local\
    \ key67\n    local key68\n    local key69\n    local key70\n    local key71\n\
    \    local key72\n    local key73\n    local key74\n    local key75\n    local\
    \ key76\n    local key77\n    local key78\n    local key79\n    local key80\n\
    \    local key81\n    local key82\n    local key83\n    local key84\n    local\
    \ key85\n    local key86\n    local key87\n    local key88\n    local key89\n\
    \    local key90\n    local key91\n    local key92\n    local key93\n    local\
    \ key94\n    local key95\n    local key96\n    local key97\n    local key98\n\
    \    local key99\n    local key100\n\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for k\
    \ in \"${!dict[@]}\"; do\n        key=\"${k}\"\n        value=\"${dict[k]}\"\n\
    \        if [[ \"$key\" =~ [a-z] ]]; then\n            lower=true\n        elif\
    \ [[ \"$key\" =~ [A-Z] ]]; then\n            upper=true\n        fi\n        if\
    \ [[ \"$value\" =~ [a-z] ]]; then\n            lower=true\n        elif [[ \"\
    $value\" =~ [A-Z] ]]; then\n            upper=true\n        fi\n        if [[\
    \ \"$lower\" == \"true\" && \"$upper\" == \"true\" ]]; then\n            found=true\n\
    \        fi\n    done\n    if [[ \"$found\" == \"false\" ]]; then\n        echo\
    \ \"$dict is all lower case\"\n    else\n        echo \"$dict is all upper case\"\
    \n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict_case\n    local dict_case_lower\n    local\
    \ dict_case_upper\n    local dict_case_lower_inverse\n    local dict_case_upper_inverse\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_case_lower_inverse_false\n    local dict_case_upper_inverse_false\n\
    \    local dict_case_lower_inverse_true\n    local dict_case_upper_inverse_true\n\
    \    local dict_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_not_empty=$7\n\
    \    local dict_not_empty_keys=$8\n    local dict_not_empty_values=$9\n    local\
    \ dict_not_empty_lines=$10\n    local dict_not_empty_line_keys=$11\n    local\
    \ dict_not_empty_line_values=$12\n    local dict_not_empty_line_line_keys=$13\n\
    \    local dict_not_empty_line_line_values=$14\n    local dict_not_empty_line_line_line_keys=$15\n\
    \    local dict_not_empty_line_line_line_values=$16\n    local dict_not_empty_line_line_line_line_keys=$17\n\
    \    local dict_not_empty_line_line_line_line_values=$18\n    local dict_not_empty_line_line_line_line_line_keys=$19\n\
    \    local dict_not_empty_line_line_line_line_line_values=$20\n    local dict_not_empty_line_line_line_line_line_line_keys=$21\n\
    \    local dict_not_empty_line_line_line_line_line_line_values=$22\n    local\
    \ dict_not_empty_line_line_line_line_line_line_line_keys=$23\n    local dict_not_empty_line_line_line_line_line_line_line_values=$24\n\
    \    local dict_not_empty_line_line_line_line_line_line_line_line_keys=$25\n \
    \   local dict_not_empty_line_line_line_line_line_line_line_values=$26\n    local\
    \ dict_not_empty_line_line_line_line_line_line_line_line_line_keys=$27\n    local\
    \ dict_not_empty_line_line_line_line_line_line_line_line_values=$28\n    local\
    \ dict_not_empty_line_line_line_line_line_line_line_line_line_keys=$29\n    local\
    \ dict_not_empty_line_line_line_line_line_line_line_line_values=$30\n    local\
    \ dict_not_empty_line_line_line_line_line_line_line_line_line_line_keys=$31\n\
    \    local dict_not_empty_line_line_line_line_line_line_line_line_values=$32\n\
    \    local dict_not_empty_line_line_line_line_line_line_line_line_line_line_keys=$33\n\
    \    local dict_not_empty_line_line_line_line_line_line_line_line_values=$34\n\
    \    local dict_not_empty_line_line_line_line_line_line_line_line_line_line_keys=$35\n\
    \    local dict_not_empty_line_line_line_line_line_line_line_line_line_values=$36\n\
    \    local dict_not_empty_line_line_line_line_line_line_line_\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local key1\n    local value1\n   \
    \ local key2\n    local value2\n    local key3\n    local value3\n    local key4\n\
    \    local value4\n    local key5\n    local value5\n    local key6\n    local\
    \ value6\n    local key7\n    local value7\n    local key8\n    local value8\n\
    \    local key9\n    local value9\n    local key10\n    local value10\n    local\
    \ key11\n    local value11\n    local key12\n    local value12\n    local key13\n\
    \    local value13\n    local key14\n    local value14\n    local key15\n    local\
    \ value15\n    local key16\n    local value16\n    local key17\n    local value17\n\
    \    local key18\n    local value18\n    local key19\n    local value19\n    local\
    \ key20\n    local value20\n    local key21\n    local value21\n    local key22\n\
    \    local value22\n    local key23\n    local value23\n    local key24\n    local\
    \ value24\n    local key25\n    local value25\n    local key26\n    local value26\n\
    \    local key27\n    local value27\n    local key28\n    local value28\n    local\
    \ key29\n    local value29\n    local key30\n    local value30\n    local key31\n\
    \    local value31\n    local key32\n    local value32\n    local key33\n    local\
    \ value33\n    local key34\n    local value34\n    local key35\n    local value35\n\
    \    local key36\n    local value36\n    local key37\n    local value37\n    local\
    \ key38\n    local value38\n    local key39\n    local value39\n    local key40\n\
    \    local value40\n    local key41\n    local value41\n    local key42\n    local\
    \ value42\n    local key43\n    local value43\n    local key44\n    local value44\n\
    \    local key45\n    local value45\n    local key46\n    local value46\n    local\
    \ key47\n    local value47\n    local key48\n    local value48\n    local key49\n\
    \    local value49\n    local key50\n    local value50\n\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local dict\n   \
    \ dict=$1\n    lower=false\n    upper=false\n    for k in $(echo $dict | cut -d\
    \ ',' -f 1 ); do\n        key=$(echo $k | cut -d ':' -f 1)\n        value=$(echo\
    \ $k | cut -d ':' -f 2)\n        if [ \"$key\" == \"lower\" ]; then\n        \
    \    lower=true\n        elif [ \"$key\" == \"upper\" ]; then\n            upper=true\n\
    \        else\n            if [ \"$lower\" == \"true\" ]; then\n             \
    \   if [ \"$value\" == \"$value\" ]; then\n                    lower=false\n \
    \               else\n                    lower=true\n                fi\n   \
    \         else\n                if [ \"$upper\" == \"true\" ]; then\n        \
    \            if [ \"$value\" == \"$value\" ]; then\n                        upper=false\n\
    \                    else\n                        upper=true\n              \
    \      fi\n                else\n                    if [ \"$value\" == \"$value\"\
    \ ]; then\n                        upper=false\n                    else\n   \
    \                     upper=true\n                    fi\n                fi\n\
    \            fi\n        fi\n    done\n    if [ \"$lower\" == \"true\" ]; then\n\
    \        echo \"$dict is all lower case\"\n    else\n        echo \"$dict is all\
    \ upper case\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_inverse=$4\n\
    \    local dict_case_map=$5\n    local dict_case_map_reverse=$6\n    local dict_case_map_reverse_inverse=$7\n\
    \    local dict_case_map_reverse_inverse_inverse=$8\n    local dict_case_map_reverse_inverse_inverse_inverse=$9\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse=$10\n    local\
    \ dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse=$11\n    local\
    \ dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse=$12\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse=$13\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse=$14\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$15\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$16\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$17\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$18\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$19\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$20\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$21\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$22\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$23\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$24\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$25\n\
    \    local dict_case_map_reverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse_inverse=$26\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local dict\n   \
    \ local count\n    dict=$1\n    lower=$(echo $dict | awk -F, '{print $1}')\n \
    \   upper=$(echo $dict | awk -F, '{print $2}')\n    count=0\n    for key in $lower;\
    \ do\n        if [[ $key =~ ^[[:upper:]]+$ ]]; then\n            count=$((count+1))\n\
    \        fi\n    done\n    for key in $upper; do\n        if [[ $key =~ ^[[:lower:]]+$\
    \ ]]; then\n            count=$((count+1))\n        fi\n    done\n    if [[ $count\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local dict\n  local key2\n  local value2\n  local key3\n  local\
    \ value3\n  local key4\n  local value4\n  local key5\n  local value5\n  local\
    \ key6\n  local value6\n  local key7\n  local value7\n  local key8\n  local value8\n\
    \  local key9\n  local value9\n  local key10\n  local value10\n  local key11\n\
    \  local value11\n  local key12\n  local value12\n  local key13\n  local value13\n\
    \  local key14\n  local value14\n  local key15\n  local value15\n  local key16\n\
    \  local value16\n  local key17\n  local value17\n  local key18\n  local value18\n\
    \  local key19\n  local value19\n  local key20\n  local value20\n  local key21\n\
    \  local value21\n  local key22\n  local value22\n  local key23\n  local value23\n\
    \  local key24\n  local value24\n  local key25\n  local value25\n  local key26\n\
    \  local value26\n  local key27\n  local value27\n  local key28\n  local value28\n\
    \  local key29\n  local value29\n  local key30\n  local value30\n  local key31\n\
    \  local value31\n  local key32\n  local value32\n  local key33\n  local value33\n\
    \  local key34\n  local value34\n  local key35\n  local value35\n  local key36\n\
    \  local value36\n  local key37\n  local value37\n  local key38\n  local value38\n\
    \  local key39\n  local value39\n  local key40\n  local value40\n  local key41\n\
    \  local value41\n  local key42\n  local value42\n  local key43\n  local value43\n\
    \  local key44\n  local value44\n  local key45\n  local value45\n  local key46\n\
    \  local value46\n  local key47\n  local value47\n  local key48\n  local value48\n\
    \  local key49\n  local value49\n  local key50\n  local value50\n  local key51\n\
    \  local value51\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local dict\n  local count\n  local keyCount\n  local valueCount\n\
    \  local keyUpperCount\n  local valueUpperCount\n  local keyLowerCount\n  local\
    \ valueLowerCount\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local result\n  \n  dict=$1\n  \n  if [ -z \"$dict\" ]; then\n\
    \    return 0\n  fi\n  \n  count=0\n  keyCount=0\n  valueCount=0\n  keyUpperCount=0\n\
    \  valueUpperCount=0\n  keyLowerCount=0\n  valueLowerCount=0\n  \n  for key in\
    \ $dict; do\n    value=$dict[key]\n    keyUpper=$(echo $key | tr '[:upper:]' '[:lower:]')\n\
    \    keyLower=$(echo $key | tr '[:lower:]' '[:upper:]')\n    valueUpper=$(echo\
    \ $value | tr '[:upper:]' '[:lower:]')\n    valueLower=$(echo $value | tr '[:lower:]'\
    \ '[:upper:]')\n    \n    if [ \"$keyUpper\" == \"$keyLower\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyUpper\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyLower\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyUpper\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyLower\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyUpper\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyLower\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyUpper\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyLower\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyUpper\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyLower\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"$keyUpper\" ]; then\n      keyUpperCount=$((keyUpperCount+1))\n\
    \    elif [ \"$keyUpper\" == \"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa0wl7ed2.sh: line 89: unexpected EOF while looking for matching
    `"''

    /tmp/tmpa0wl7ed2.sh: line 93: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local ok\n    dict=$1\n    lower=false\n    upper=false\n    ok=true\n    for\
    \ key in $dict; do\n        value=$dict[key]\n        if [[ $key =~ ^[a-z]$ ]];\
    \ then\n            if [[ $value =~ ^[a-z]$ ]]; then\n                lower=true\n\
    \            else\n                ok=false\n            fi\n        else\n  \
    \          if [[ $value =~ ^[A-Z]$ ]]; then\n                upper=true\n    \
    \        else\n                ok=false\n            fi\n        fi\n    done\n\
    \    if [[ $lower == false && $upper == false ]]; then\n        ok=false\n   \
    \ fi\n    return $ok\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpfic89139.sh: line 38: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local dict\n    local dictUpper\n    local dictLower\n\
    \    local result\n    local keyCount\n    local valueCount\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n\n    # Check if dictionary is empty\n    if [ -z \"\
    $dictionary\" ]; then\n        echo \"Dictionary is empty\"\n        exit 1\n\
    \    fi\n\n    # Loop through each key in the dictionary\n    for key in \"${!dictionary[@]}\"\
    ; do\n        # Check if the key is lower case\n        lower=$(echo \"$key\"\
    \ | tr '[:upper:]' '[:lower:]')\n        if [ -z \"$lower\" ]; then\n        \
    \    # Check if the key is upper case\n            upper=$(echo \"$key\" | tr\
    \ '[:lower:]' '[:upper:]')\n            if [ -z \"$upper\" ]; then\n         \
    \       # Key is neither lower nor upper case\n                echo \"$key is\
    \ not in lower or upper case\"\n                exit 1\n            fi\n     \
    \   fi\n    done\n\n    # All keys are either lower or upper case\n    result=1\n\
    \    return $result\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dict_file=\"\
    $1\"\n  local dict_name=\"$2\"\n  local dict_case=\"$3\"\n  local dict_lower=\"\
    $4\"\n  local dict_upper=\"$5\"\n  local dict_lower_in=\"$6\"\n  local dict_upper_in=\"\
    $7\"\n  local dict_lower_in_file=\"$8\"\n  local dict_upper_in_file=\"$9\"\n \
    \ local dict_lower_out=\"$10\"\n  local dict_upper_out=\"$11\"\n  local dict_lower_out_file=\"\
    $12\"\n  local dict_upper_out_file=\"$13\"\n  local dict_lower_out_file2=\"$14\"\
    \n  local dict_upper_out_file2=\"$15\"\n  local dict_lower_out_file3=\"$16\"\n\
    \  local dict_upper_out_file3=\"$17\"\n  local dict_lower_out_file4=\"$18\"\n\
    \  local dict_upper_out_file4=\"$19\"\n  local dict_lower_out_file5=\"$20\"\n\
    \  local dict_upper_out_file5=\"$21\"\n  local dict_lower_out_file6=\"$22\"\n\
    \  local dict_upper_out_file6=\"$23\"\n  local dict_lower_out_file7=\"$24\"\n\
    \  local dict_upper_out_file7=\"$25\"\n  local dict_lower_out_file8=\"$26\"\n\
    \  local dict_upper_out_file8=\"$27\"\n  local dict_lower_out_file9=\"$28\"\n\
    \  local dict_upper_out_file9=\"$29\"\n  local dict_lower_out_file10=\"$30\"\n\
    \  local dict_upper_out_file10=\"$31\"\n  local dict_lower_out_file11=\"$32\"\n\
    \  local dict_upper_out_file11=\"$33\"\n  local dict_lower_out_file12=\"$34\"\n\
    \  local dict_upper_out_file12=\"$35\"\n  local dict_lower_out_file13=\"$36\"\n\
    \  local dict_upper_out_file13=\"$37\"\n  local dict_lower_out_file14=\"$38\"\n\
    \  local dict_upper_out_file14=\"$39\"\n  local dict_lower_out_file15=\"$40\"\n\
    \  local dict_upper_out_file15=\"$41\"\n  local dict_lower_out_file16=\"$42\"\n\
    \  local dict_upper_out_file16=\"$43\"\n  local dict_lower_out_file17=\"$44\"\n\
    \  local dict_upper_out_file17=\"$45\"\n  local dict_lower_out_file18=\"$46\"\n\
    \  local dict_upper_out_file18=\"$47\"\n  local dict_lower_out_file19=\"$48\"\n\
    \  local dict_upper_out_file19=\"$49\"\n  local dict_lower_out_file20\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_empty_value=$7\n\
    \    local dict_empty_key=$8\n    local dict_empty_key_value=$9\n    local dict_empty_key_value_lower=$10\n\
    \    local dict_empty_key_value_upper=$11\n    local dict_empty_key_value_empty=$12\n\
    \    local dict_empty_key_value_empty_value=$13\n    local dict_empty_key_value_empty_key=$14\n\
    \    local dict_empty_key_value_empty_key_value=$15\n    local dict_empty_key_value_empty_key_value_lower=$16\n\
    \    local dict_empty_key_value_empty_key_value_upper=$17\n    local dict_empty_key_value_empty_key_value_empty=$18\n\
    \    local dict_empty_key_value_empty_key_value_empty_value=$19\n    local dict_empty_key_value_empty_key_value_empty_key=$20\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value=$21\n    local\
    \ dict_empty_key_value_empty_key_value_empty_key_value_lower=$22\n    local dict_empty_key_value_empty_key_value_empty_key_value_upper=$23\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty=$24\n  \
    \  local dict_empty_key_value_empty_key_value_empty_key_value_empty_value=$25\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key=$26\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value=$27\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_lower=$28\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_upper=$29\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty=$30\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_value=$31\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key=$32\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value=$33\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value_lower=$34\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value_upper=$35\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty=$36\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=\"$1\"\n    local dict_name=\"$2\"\n    local dict_case=\"$3\"\n \
    \   local dict_case_insensitive=\"$(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\
    \n    local dict_case_sensitive=\"$(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\
    \n    local dict_case_sensitive_insensitive=\"$(echo \"$dict_case\" | tr '[:upper:]'\
    \ '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"$(echo \"$dict_case\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_case=$2\n    local dict_file=$3\n    local dict_case_file=$4\n\
    \    local dict_keys=$5\n    local dict_values=$6\n    local dict_keys_case=$7\n\
    \    local dict_values_case=$8\n    local dict_keys_case_file=$9\n    local dict_values_case_file=${10}\n\
    \    local dict_keys_case_file=${11}\n    local dict_values_case_file=${12}\n\
    \    local dict_keys_case_file=${13}\n    local dict_values_case_file=${14}\n\
    \    local dict_keys_case_file=${15}\n    local dict_values_case_file=${16}\n\
    \    local dict_keys_case_file=${17}\n    local dict_values_case_file=${18}\n\
    \    local dict_keys_case_file=${19}\n    local dict_values_case_file=${20}\n\
    \    local dict_keys_case_file=${21}\n    local dict_values_case_file=${22}\n\
    \    local dict_keys_case_file=${23}\n    local dict_values_case_file=${24}\n\
    \    local dict_keys_case_file=${25}\n    local dict_values_case_file=${26}\n\
    \    local dict_keys_case_file=${27}\n    local dict_values_case_file=${28}\n\
    \    local dict_keys_case_file=${29}\n    local dict_values_case_file=${30}\n\
    \    local dict_keys_case_file=${31}\n    local dict_values_case_file=${32}\n\
    \    local dict_keys_case_file=${33}\n    local dict_values_case_file=${34}\n\
    \    local dict_keys_case_file=${35}\n    local dict_values_case_file=${36}\n\
    \    local dict_keys_case_file=${37}\n    local dict_values_case_file=${38}\n\
    \    local dict_keys_case_file=${39}\n    local dict_values_case_file=${40}\n\
    \    local dict_keys_case_file=${41}\n    local dict_values_case_file=${42}\n\
    \    local dict_keys_case_file=${43}\n    local dict_values_case_file=${44}\n\
    \    local dict_keys_case_file=${45}\n    local dict_values_case_file=${46}\n\
    \    local dict_keys_case_file=${47}\n    local dict_values_case_file=${48}\n\
    \    local dict_keys_case_file=${49}\n    local dict_values_case_file=${50}\n\
    \    local dict_keys_case_file=${51}\n    local dict_values_case_file=${52}\n\
    \    local dict_keys_case_file=${53}\n    local dict_\n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local keycase\n    local valuecase\n\
    \    local result\n    dict=$1\n    if [ -z \"$dict\" ]\n    then\n        return\
    \ 0\n    fi\n    keycase=`echo $dict | awk -F, '{print $1}'`\n    valuecase=`echo\
    \ $dict | awk -F, '{print $2}'`\n    for key in $keycase\n    do\n        if [\
    \ \"$key\" == \"$keycase\" ]\n        then\n            if [ \"$value\" == \"\
    $valuecase\" ]\n            then\n                echo \"$key\"\n            else\n\
    \                return 0\n            fi\n        fi\n    done\n    return 1\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local keyIsString\n    local valueIsString\n\
    \    local keyIsUpper\n    local valueIsUpper\n    local keyIsLower\n    local\
    \ valueIsLower\n    local keyIsStringOrUpper\n    local valueIsStringOrUpper\n\
    \    local keyIsStringOrLower\n    local valueIsStringOrLower\n    local keyIsStringOrStringOrUpper\n\
    \    local valueIsStringOrStringOrUpper\n    local keyIsStringOrStringOrLower\n\
    \    local valueIsStringOrStringOrLower\n    local keyIsStringOrStringOrStringOrUpper\n\
    \    local valueIsStringOrStringOrStringOrUpper\n    local keyIsStringOrStringOrStringOrLower\n\
    \    local valueIsStringOrStringOrStringOrLower\n    local keyIsStringOrStringOrStringOrStringOrUpper\n\
    \    local valueIsStringOrStringOrStringOrStringOrUpper\n    local keyIsStringOrStringOrStringOrStringOrLower\n\
    \    local valueIsStringOrStringOrStringOrStringOrLower\n    local keyIsStringOrStringOrStringOrStringOrStringOrUpper\n\
    \    local valueIsStringOrStringOrStringOrStringOrStringOrUpper\n    local keyIsStringOrStringOrStringOrStringOrStringOrLower\n\
    \    local valueIsStringOrStringOrStringOrStringOrStringOrLower\n    local keyIsStringOrStringOrStringOrStringOrStringOrStringOrUpper\n\
    \    local valueIsStringOrStringOrStringOrStringOrStringOrStringOrUpper\n    local\
    \ keyIsStringOrStringOrStringOrStringOrStringOrStringOrLower\n    local valueIsStringOrStringOrStringOrStringOrStringOrStringOrLower\n\
    \    local keyIsStringOrStringOrStringOrStringOrStringOrStringOrStringOrUpper\n\
    \    local valueIsStringOrStringOrStringOrStringOrStringOrStringOrStringOrUpper\n\
    \    local keyIsStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrLower\n\
    \    local valueIsStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrLower\n\
    \    local keyIsStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrUpper\n\
    \    local valueIsStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrUpper\n\
    \    local keyIsStringOrStringOrStringOrStringOrStringOrStringOr\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_keys=$4\n\
    \    local dict_vals=$5\n    local dict_key\n    local dict_val\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_val_upper\n    local dict_key_lower\n\
    \    local dict_val_lower\n    local dict_key_upper\n    local dict_val_upper\n\
    \    local dict_key_lower\n    local dict_val_lower\n    local dict_key_upper\n\
    \    local dict_val_upper\n    local dict_key_lower\n    local dict_val_lower\n\
    \    local dict_key_upper\n    local dict_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local dict\n  local lower\n  local upper\n  local found\n  dict=$1\n\
    \  lower=$(echo $dict | awk -F, '{print $1}')\n  upper=$(echo $dict | awk -F,\
    \ '{print $2}')\n  if [ -z \"$dict\" ]; then\n    return 0\n  fi\n  found=0\n\
    \  for key in $lower; do\n    if [ -z \"$key\" ]; then\n      continue\n    fi\n\
    \    value=$(echo $dict | awk -F, '{print $2}')\n    if [ -z \"$value\" ]; then\n\
    \      continue\n    fi\n    if [ \"$key\" == \"$value\" ]; then\n      found=1\n\
    \      break\n    fi\n  done\n  for key in $upper; do\n    if [ -z \"$key\" ];\
    \ then\n      continue\n    fi\n    value=$(echo $dict | awk -F, '{print $2}')\n\
    \    if [ -z \"$value\" ]; then\n      continue\n    fi\n    if [ \"$key\" ==\
    \ \"$value\" ]; then\n      found=1\n      break\n    fi\n  done\n  if [ \"$found\"\
    \ -eq 0 ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: -1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_keys=$(head\
    \ -n 1 $dict_file)\n    local dict_values=$(tail -n +2 $dict_file)\n    local\
    \ dict_keys_lower=$(echo $dict_keys | awk -F, '{print $1}')\n    local dict_keys_upper=$(echo\
    \ $dict_keys | awk -F, '{print $2}')\n    local dict_values_lower=$(echo $dict_values\
    \ | awk -F, '{print $1}')\n    local dict_values_upper=$(echo $dict_values | awk\
    \ -F, '{print $2}')\n    local dict_case_insensitive=$(echo $dict_case | awk '{print\
    \ $1}')\n    local dict_case_sensitive=$(echo $dict_case | awk '{print $2}')\n\
    \    local dict_case_lower=$(echo $dict_case | awk '{print $3}')\n    local dict_case_upper=$(echo\
    \ $dict_case | awk '{print $4}')\n    local dict_case_equal=$(echo $dict_case\
    \ | awk '{print $5}')\n    local dict_case_not_equal=$(echo $dict_case | awk '{print\
    \ $6}')\n    local dict_case_case_sensitive=$(echo $dict_case | awk '{print $7}')\n\
    \    local dict_case_case_not_sensitive=$(echo $dict_case | awk '{print $8}')\n\
    \    local dict_case_case_equal=$(echo $dict_case | awk '{print $9}')\n    local\
    \ dict_case_case_not_equal=$(echo $dict_case | awk '{print $10}')\n    local dict_case_case_equal=$(echo\
    \ $dict_case | awk '{print $11}')\n    local dict_case_case_not_equal=$(echo $dict_case\
    \ | awk '{print $12}')\n    local dict_case_case_equal=$(echo $dict_case | awk\
    \ '{print $13}')\n    local dict_case_case_not_equal=$(echo $dict_case | awk '{print\
    \ $14}')\n    local dict_case_case_equal=$(echo $dict_case | awk '{print $15}')\n\
    \    local dict_case_case_not_equal=$(echo $dict_case | awk '{print $16}')\n \
    \   local dict_case_case_equal=$(echo $dict_case | awk '{print $17}')\n    local\
    \ dict_case_case_not_equal=$(echo $dict_case | awk '{print $18}')\n    local dict_case_case_equal=$(echo\
    \ $dict_case | awk '{print $19}')\n    local dict_case_case_not_equal=$(echo $dict_case\
    \ | awk '{print $20}')\n    local dict_case_case_equal=$(echo $dict_case | awk\
    \ '{print $21}')\n    local dict_case_case_not_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=33 encoding='utf-8'>
  timestamp: 1660035790
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_lower=$4\n\
    \    local dict_case_upper=$5\n    local dict_case_lower_count=$6\n    local dict_case_upper_count=$7\n\
    \    local dict_case_lower_count=$8\n    local dict_case_upper_count=$9\n    local\
    \ dict_case_lower_count=$10\n    local dict_case_upper_count=$11\n    local dict_case_lower_count=$12\n\
    \    local dict_case_upper_count=$13\n    local dict_case_lower_count=$14\n  \
    \  local dict_case_upper_count=$15\n    local dict_case_lower_count=$16\n    local\
    \ dict_case_upper_count=$17\n    local dict_case_lower_count=$18\n    local dict_case_upper_count=$19\n\
    \    local dict_case_lower_count=$20\n    local dict_case_upper_count=$21\n  \
    \  local dict_case_lower_count=$22\n    local dict_case_upper_count=$23\n    local\
    \ dict_case_lower_count=$24\n    local dict_case_upper_count=$25\n    local dict_case_lower_count=$26\n\
    \    local dict_case_upper_count=$27\n    local dict_case_lower_count=$28\n  \
    \  local dict_case_upper_count=$29\n    local dict_case_lower_count=$30\n    local\
    \ dict_case_upper_count=$31\n    local dict_case_lower_count=$32\n    local dict_case_upper_count=$33\n\
    \    local dict_case_lower_count=$34\n    local dict_case_upper_count=$35\n  \
    \  local dict_case_lower_count=$36\n    local dict_case_upper_count=$37\n    local\
    \ dict_case_lower_count=$38\n    local dict_case_upper_count=$39\n    local dict_case_lower_count=$40\n\
    \    local dict_case_upper_count=$41\n    local dict_case_lower_count=$42\n  \
    \  local dict_case_upper_count=$43\n    local dict_case_lower_count=$44\n    local\
    \ dict_case_upper_count=$45\n    local dict_case_lower_count=$46\n    local dict_case_upper_count=$47\n\
    \    local dict_case_lower_count=$48\n    local dict_case_upper_count=$49\n  \
    \  local dict_case_lower_count=$50\n    local dict_case_upper_count=$51\n    local\
    \ dict_case_lower_count=$52\n    local dict_case_upper_count=$53\n    local dict_case_lower_count=$54\n\
    \    local dict_case_upper_count=$55\n    local dict_case_lower_count=$56\n  \
    \  local dict_case_upper_count=$57\n    local dict_case_lower_count=$58\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dictionary=\"\
    $1\"\n  local key\n  local value\n  local lower\n  local upper\n  local found\n\
    \  \n  lower=false\n  upper=false\n  found=false\n  \n  for key in \"${!dictionary[@]}\"\
    ; do\n    value=\"${dictionary[$key]}\"\n    \n    if [[ \"$key\" =~ ^[a-z]$ ]];\
    \ then\n      lower=true\n    fi\n    \n    if [[ \"$key\" =~ ^[A-Z]$ ]]; then\n\
    \      upper=true\n    fi\n    \n    if [[ \"$lower\" == \"true\" ]]; then\n \
    \     if [[ \"$upper\" == \"true\" ]]; then\n        found=true\n        break\n\
    \      fi\n    fi\n  done\n  \n  if [[ \"$found\" == \"false\" ]]; then\n    return\
    \ 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local values=$2\n    local lower\n    local upper\n    local result\n\
    \    lower=$(echo $keys | tr \",\" \"\\n\")\n    upper=$(echo $keys | tr \",\"\
    \ \"\\n\" | tr \" \" \"\\n\")\n    if [ -z \"$lower\" ] || [ -z \"$upper\" ];\
    \ then\n        result=false\n    else\n        result=$(echo $lower | tr [a-z]\
    \ [A-Z] | tr [A-Z] [a-z] | wc -l | xargs)\n        if [ \"$result\" -eq \"0\"\
    \ ]; then\n            result=false\n        fi\n    fi\n    echo $result\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_lower=$5\n    local dict_upper=$6\n    local dict_empty=$7\n \
    \   local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local dict_value=$(echo\
    \ $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_case=$(echo $dict_case\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_lower=$(echo $dict_lower | tr\
    \ '[:upper:]' '[:lower:]')\n    local dict_upper=$(echo $dict_upper | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_empty=$(echo $dict_empty | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local dict_case=$(echo\
    \ $dict_case | tr '[:upper:]' '[:lower:]')\n    local dict_lower=$(echo $dict_lower\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_upper=$(echo $dict_upper | tr\
    \ '[:upper:]' '[:lower:]')\n    local dict_empty=$(echo $dict_empty | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_case=$(echo $dict_case | tr '[:upper:]' '[:lower:]')\n    local dict_lower=$(echo\
    \ $dict_lower | tr '[:upper:]' '[:lower:]')\n    local dict_upper=$(echo $dict_upper\
    \ | tr '[:upper:]' '[:lower:]')\n    local dict_empty=$(echo $dict_empty | tr\
    \ '[:upper:]' '[:lower:]')\n    local dict_key=$(echo $dict_key | tr '[:upper:]'\
    \ '[:lower:]')\n    local dict_value=$(echo $dict_value | tr '[:upper:]' '[:lower:]')\n\
    \    local dict_case=$(echo $dict_case | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_lower=$(echo $dict_lower | tr '[:upper:]' '[:lower:]')\n    local dict_upper=$(echo\
    \ $dict_upper | tr '[:upper:]' '[:lower:]')\n    local dict_empty\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local keylen\n    local valuelen\n    local keylen2\n  \
    \  local valuelen2\n    local keylen3\n    local valuelen3\n    local keylen4\n\
    \    local valuelen4\n    local keylen5\n    local valuelen5\n    local keylen6\n\
    \    local valuelen6\n    local keylen7\n    local valuelen7\n    local keylen8\n\
    \    local valuelen8\n    local keylen9\n    local valuelen9\n    local keylen10\n\
    \    local valuelen10\n    local keylen11\n    local valuelen11\n    local keylen12\n\
    \    local valuelen12\n    local keylen13\n    local valuelen13\n    local keylen14\n\
    \    local valuelen14\n    local keylen15\n    local valuelen15\n    local keylen16\n\
    \    local valuelen16\n    local keylen17\n    local valuelen17\n    local keylen18\n\
    \    local valuelen18\n    local keylen19\n    local valuelen19\n    local keylen20\n\
    \    local valuelen20\n    local keylen21\n    local valuelen21\n    local keylen22\n\
    \    local valuelen22\n    local keylen23\n    local valuelen23\n    local keylen24\n\
    \    local valuelen24\n    local keylen25\n    local valuelen25\n    local keylen26\n\
    \    local valuelen26\n    local keylen27\n    local valuelen27\n    local keylen28\n\
    \    local valuelen28\n    local keylen29\n    local valuelen29\n    local keylen30\n\
    \    local valuelen30\n    local keylen31\n    local valuelen31\n    local keylen32\n\
    \    local valuelen32\n    local keylen33\n    local valuelen33\n    local keylen34\n\
    \    local valuelen34\n    local keylen35\n    local valuelen35\n    local keylen36\n\
    \    local valuelen36\n    local keylen37\n    local valuelen37\n    local keylen38\n\
    \    local valuelen38\n    local keylen39\n    local valuelen39\n    local keylen40\n\
    \    local valuelen40\n    local keylen41\n    local \n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local foundUpper\n    local foundLower\n    local foundKey\n\
    \    local foundValue\n    local foundKeys\n    local foundValues\n    local foundKeysUpper\n\
    \    local foundKeysLower\n    local foundValuesUpper\n    local foundValuesLower\n\
    \    local foundKeysUpper\n    local foundKeysLower\n    local foundValuesUpper\n\
    \    local foundValuesLower\n    local foundKeysUpper\n    local foundKeysLower\n\
    \    local foundValuesUpper\n    local foundValuesLower\n    local foundKeysUpper\n\
    \    local foundKeysLower\n    local foundValuesUpper\n    local foundValuesLower\n\
    \    local foundKeysUpper\n    local foundKeysLower\n    local foundValuesUpper\n\
    \    local foundValuesLower\n    local foundKeysUpper\n    local foundKeysLower\n\
    \    local foundValuesUpper\n    local foundValuesLower\n    local foundKeysUpper\n\
    \    local foundKeysLower\n    local foundValuesUpper\n    local foundValuesLower\n\
    \    local foundKeysUpper\n    local foundKeysLower\n    local foundValuesUpper\n\
    \    local foundValuesLower\n    local foundKeysUpper\n    local foundKeysLower\n\
    \    local foundValuesUpper\n    local foundValuesLower\n    local foundKeysUpper\n\
    \    local foundKeysLower\n    local foundValuesUpper\n    local foundValuesLower\n\
    \    local foundKeysUpper\n    local foundKeysLower\n    local foundValuesUpper\n\
    \    local foundValuesLower\n    local foundKeysUpper\n    local foundKeysLower\n\
    \    local foundValuesUpper\n    local foundValuesLower\n    local foundKeysUpper\n\
    \    local foundKeysLower\n    local foundValuesUpper\n    local foundValuesLower\n\
    \    local foundKeysUpper\n    local foundKeysLower\n    local foundValuesUpper\n\
    \    local foundValuesLower\n    local foundKeysUpper\n    local foundKeysLower\n\
    \    local foundValuesUpper\n    local foundValuesLower\n    local foundKeysUpper\n\
    \    local foundKeysLower\n    local foundValuesUpper\n    local foundValuesLower\n\
    \    local foundKeysUpper\n    local foundKeysLower\n    local foundValuesUpper\n\
    \    local foundValuesLower\n    local foundKeysUpper\n    local foundKeysLower\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local lower_in\n    local upper_in\n    local lower_in_value\n    local upper_in_value\n\
    \    local lower_out\n    local upper_out\n    local lower_in_key\n    local upper_in_key\n\
    \    local lower_out_key\n    local upper_out_key\n    local lower_out_value\n\
    \    local upper_out_value\n    local lower_out_key\n    local upper_out_key\n\
    \    local lower_out_value\n    local upper_out_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n    local upper_out_key_value\n\
    \    local lower_out_key_value\n    local upper_out_key_value\n    local lower_out_key_value\n\
    \    local upper_out_key_value\n    local lower_out_key_value\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local key\n    local value\n    local\
    \ dict_case\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local dict_upper\n    local dict_lower\n\
    \    local dict_upper\n    local dict_lower\n    local \n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_not_empty=$7\n\
    \    local dict_not_string=$8\n    local dict_not_int=$9\n    local dict_not_float=$10\n\
    \    local dict_not_bool=$11\n    local dict_not_list=$12\n    local dict_not_dict=$13\n\
    \    local dict_not_empty_list=$14\n    local dict_not_empty_dict=$15\n    local\
    \ dict_not_empty_int_list=$16\n    local dict_not_empty_int_dict=$17\n    local\
    \ dict_not_empty_float_list=$18\n    local dict_not_empty_float_dict=$19\n   \
    \ local dict_not_empty_bool_list=$20\n    local dict_not_empty_bool_dict=$21\n\
    \    local dict_not_empty_string_list=$22\n    local dict_not_empty_string_dict=$23\n\
    \    local dict_not_empty_int_list_int=$24\n    local dict_not_empty_int_dict_int=$25\n\
    \    local dict_not_empty_float_list_float=$26\n    local dict_not_empty_float_dict_float=$27\n\
    \    local dict_not_empty_bool_list_bool=$28\n    local dict_not_empty_bool_dict_bool=$29\n\
    \    local dict_not_empty_string_list_string=$30\n    local dict_not_empty_string_dict_string=$31\n\
    \    local dict_not_empty_int_list_int_int=$32\n    local dict_not_empty_int_dict_int_int=$33\n\
    \    local dict_not_empty_float_list_float_float=$34\n    local dict_not_empty_float_dict_float_float=$35\n\
    \    local dict_not_empty_bool_list_bool_bool=$36\n    local dict_not_empty_bool_dict_bool_bool=$37\n\
    \    local dict_not_empty_string_list_string_string=$38\n    local dict_not_empty_string_dict_string_string=$39\n\
    \    local dict_not_empty_int_list_int_int_int=$40\n    local dict_not_empty_int_dict_int_int_int=$41\n\
    \    local dict_not_empty_float_list_float_float_float=$42\n    local dict_not_empty_float_dict_float_float_float=$43\n\
    \    local dict_not_empty_bool_list_bool_bool_bool=$44\n    local dict_not_empty_bool_dict_bool_bool_bool=$45\n\
    \    local dict_not_empty_string_list_string_string_bool=$46\n    local dict_not_empty_string_dict_string_string_bool=$47\n\
    \    local dict_not_empty_int_list_int_int_int_int=$48\n    local dict_not_empty_int_dict_int_int_int_int=$49\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local lower_in\n    local upper_in\n    local lower_out\n    local upper_out\n\
    \    local found\n    local found_in\n    local found_out\n    local found\n \
    \   local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n    local found\n    local found\n    local found\n    local found\n\
    \    local found\n    local found\n    local found\n    local found\n    local\
    \ found\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for ((\
    \ i=0; i<${#dict[@]}; i++ )); do\n        key=${dict[$i,0]}\n        value=${dict[$i,1]}\n\
    \        if [[ ${key} == *\"-\"* ]]; then\n            lower=true\n          \
    \  key=${key#*-}\n        fi\n        if [[ ${key} == *\"-\"* ]]; then\n     \
    \       upper=true\n            key=${key#*-}\n        fi\n        if [[ ${key}\
    \ =~ ^[[:alpha:]]+$ ]]; then\n            if [[ ${value} =~ ^[[:alpha:]]+$ ]];\
    \ then\n                if [[ ${lower} == true ]]; then\n                    if\
    \ [[ ${upper} == true ]]; then\n                        found=true\n         \
    \           fi\n                fi\n            fi\n        fi\n    done\n   \
    \ if [[ ${found} == false ]]; then\n        echo \"ERROR: dictionary contains\
    \ non-string keys\"\n        exit 1\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_keys=$3\n    local dict_case=$4\n\
    \    local dict_case_in=$5\n    local dict_case_out=$6\n    local dict_case_out_in=$7\n\
    \    local dict_case_out_out=$8\n    local dict_case_out_out_in=$9\n    local\
    \ dict_case_out_out_out=$10\n    local dict_case_out_out_out_in=$11\n    local\
    \ dict_case_out_out_out_out=$12\n    local dict_case_out_out_out_out_in=$13\n\
    \    local dict_case_out_out_out_out_out=$14\n    local dict_case_out_out_out_out_out_in=$15\n\
    \    local dict_case_out_out_out_out_out_out=$16\n    local dict_case_out_out_out_out_out_out_in=$17\n\
    \    local dict_case_out_out_out_out_out_out_out=$18\n    local dict_case_out_out_out_out_out_out_out_in=$19\n\
    \    local dict_case_out_out_out_out_out_out_out_out=$20\n    local dict_case_out_out_out_out_out_out_out_out_in=$21\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out=$22\n    local dict_case_out_out_out_out_out_out_out_out_out_in=$23\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out_out=$24\n    local dict_case_out_out_out_out_out_out_out_out_out_in=$25\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out_out=$26\n    local dict_case_out_out_out_out_out_out_out_out_out_out_in=$27\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out_out_out=$28\n    local\
    \ dict_case_out_out_out_out_out_out_out_out_out_out_in=$29\n    local dict_case_out_out_out_out_out_out_out_out_out_out_out=$30\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out_out_out_in=$31\n    local\
    \ dict_case_out_out_out_out_out_out_out_out_out_out_out_out=$32\n    local dict_case_out_out_out_out_out_out_out_out_out_out_out_out_in=$33\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out_out_out_out_out=$34\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out_out_out_out_in=$35\n\
    \    local dict_case_out_out_out_out_out_out_out_out_out_out_out_out_out=$36\n\
    \    local dict_case_out_out_out_out_out_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local key1\n    local value1\n    local key2\n   \
    \ local value2\n    local key3\n    local value3\n    local key4\n    local value4\n\
    \    local key5\n    local value5\n    local key6\n    local value6\n    local\
    \ key7\n    local value7\n    local key8\n    local value8\n    local key9\n \
    \   local value9\n    local key10\n    local value10\n    local key11\n    local\
    \ value11\n    local key12\n    local value12\n    local key13\n    local value13\n\
    \    local key14\n    local value14\n    local key15\n    local value15\n    local\
    \ key16\n    local value16\n    local key17\n    local value17\n    local key18\n\
    \    local value18\n    local key19\n    local value19\n    local key20\n    local\
    \ value20\n    local key21\n    local value21\n    local key22\n    local value22\n\
    \    local key23\n    local value23\n    local key24\n    local value24\n    local\
    \ key25\n    local value25\n    local key26\n    local value26\n    local key27\n\
    \    local value27\n    local key28\n    local value28\n    local key29\n    local\
    \ value29\n    local key30\n    local value30\n    local key31\n    local value31\n\
    \    local key32\n    local value32\n    local key33\n    local value33\n    local\
    \ key34\n    local value34\n    local key35\n    local value35\n    local key36\n\
    \    local value36\n    local key37\n    local value37\n    local key38\n    local\
    \ value38\n    local key39\n    local value39\n    local key40\n    local value40\n\
    \    local key41\n    local value41\n    local key42\n    local value42\n    local\
    \ key43\n    local value43\n    local key44\n    local value44\n    local key45\n\
    \    local value45\n    local key46\n    local value46\n    local key47\n    local\
    \ value47\n    local key48\n    local value48\n    local key49\n    local value49\n\
    \    local key50\n    local value50\n    local key51\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_inverted=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_inverted=$7\n\
    \    local dict_case_upper_inverted=$8\n    local dict_case_lower_inverted_comma=$9\n\
    \    local dict_case_upper_inverted_comma=${10}\n    local dict_case_lower_inverted_comma_inverted=${11}\n\
    \    local dict_case_upper_inverted_comma_inverted=${12}\n    local dict_case_lower_inverted_comma_inverted_inverted=${13}\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted=${14}\n    local dict_case_lower_inverted_comma_inverted_inverted_comma=${15}\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_comma=${16}\n    local\
    \ dict_case_lower_inverted_comma_inverted_inverted_comma_inverted=${17}\n    local\
    \ dict_case_upper_inverted_comma_inverted_inverted_comma_inverted=${18}\n    local\
    \ dict_case_lower_inverted_comma_inverted_inverted_comma_inverted_inverted=${19}\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_comma_inverted_inverted=${20}\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_comma_inverted_inverted_comma=${21}\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_comma_inverted_inverted_comma=${22}\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_comma_inverted_inverted_comma_inverted=${23}\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_comma_inverted_inverted_comma_inverted=${24}\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_comma_inverted_inverted_comma_inverted_inverted=${25}\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_comma_inverted_inverted_comma_inverted_inverted=${26}\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_comma_inverted_inverted_comma_inverted_inverted_comma=${27}\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_comma_inverted_inverted_comma_inverted_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower_case_key\n  \
    \  local upper_case_key\n    local lower_case_value\n    local upper_case_value\n\
    \    local result\n\n    # Check that dictionary is not empty\n    if [ -z \"\
    $dictionary\" ]; then\n        echo \"check_dict_case: dictionary is empty\"\n\
    \        exit 1\n    fi\n\n    # Check that dictionary has two columns\n    if\
    \ [ ${#dictionary[@]} -ne 2 ]; then\n        echo \"check_dict_case: dictionary\
    \ must have two columns\"\n        exit 1\n    fi\n\n    # Check that dictionary\
    \ has two columns\n    if [ ${#dictionary[@]} -ne 2 ]; then\n        echo \"check_dict_case:\
    \ dictionary must have two columns\"\n        exit 1\n    fi\n\n    # Check that\
    \ dictionary has two columns\n    if [ ${#dictionary[@]} -ne 2 ]; then\n     \
    \   echo \"check_dict_case: dictionary must have two columns\"\n        exit 1\n\
    \    fi\n\n    # Check that dictionary has two columns\n    if [ ${#dictionary[@]}\
    \ -ne 2 ]; then\n        echo \"check_dict_case: dictionary must have two columns\"\
    \n        exit 1\n    fi\n\n    # Check that dictionary has two columns\n    if\
    \ [ ${#dictionary[@]} -ne 2 ]; then\n        echo \"check_dict_case: dictionary\
    \ must have two columns\"\n        exit 1\n    fi\n\n    # Check that dictionary\
    \ has two columns\n    if [ ${#dictionary[@]} -ne 2 ]; then\n        echo \"check_dict_case:\
    \ dictionary must have two columns\"\n        exit 1\n    fi\n\n    # Check that\
    \ dictionary has two columns\n    if [ ${#dictionary[@]} -ne 2 ]; then\n     \
    \   echo \"check_dict_case: dictionary must have two columns\"\n        exit 1\n\
    \    fi\n\n    # Check that dictionary has two columns\n    if [ ${#dictionary[@]}\
    \ -ne 2 ]; then\n        echo \"check_dict_case: dictionary must have two columns\"\
    \n        exit 1\n    fi\n\n    # Check that dictionary has two columns\n    if\
    \ [ ${#dictionary[@]} -ne 2 ]; then\n        echo \"check_dict_case: dictionary\
    \ must have two columns\"\n        exit 1\n    fi\n\n    # Check that dictionary\
    \ has two columns\n    if [ ${#dictionary[@]} -ne 2 ]; then\n        echo \"check_dict_case:\
    \ dictionary must have two columns\"\n        exit 1\n    fi\n\n    # Check that\
    \ dictionary has two columns\n    if [ ${#dictionary[@]} -ne 2 ]; then\n     \
    \   echo \"check_dict_case: dictionary must have two columns\"\n        exit 1\n\
    \    fi\n\n    # Check that dictionary has two columns\n    if [ ${#dictionary[@]}\
    \ -ne 2 ]; then\n        echo \"check_dict_case: dictionary must have two columns\"\
    \n        \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp81cqh2yr.sh: line 94: syntax error near unexpected token `}''

    /tmp/tmp81cqh2yr.sh: line 94: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local keycase\n    local valuecase\n\
    \    local result\n    dict=$1\n    if [ -z \"$dict\" ]; then\n        return\
    \ 0\n    fi\n    keycase=`echo $dict | awk -F, '{print $1}'`\n    valuecase=`echo\
    \ $dict | awk -F, '{print $2}'`\n    for key in $keycase; do\n        if [ -z\
    \ \"$key\" ]; then\n            return 0\n        fi\n    done\n    for value\
    \ in $valuecase; do\n        if [ -z \"$value\" ]; then\n            return 0\n\
    \        fi\n    done\n    result=1\n    for key in $keycase; do\n        if [\
    \ \"$key\" != \"$key\" ]; then\n            result=0\n            break\n    \
    \    fi\n    done\n    for value in $valuecase; do\n        if [ \"$value\" !=\
    \ \"$value\" ]; then\n            result=0\n            break\n        fi\n  \
    \  done\n    return $result\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_lower=$5\n    local dict_upper=$6\n    local dict_empty=$7\n \
    \   local dict_keys=$8\n    local dict_values=$9\n    local dict_cases=$10\n \
    \   local dict_lowers=$11\n    local dict_uppers=$12\n    local dict_emptys=$13\n\
    \    local dict_keys_lower=$14\n    local dict_keys_upper=$15\n    local dict_values_lower=$16\n\
    \    local dict_values_upper=$17\n    local dict_cases_lower=$18\n    local dict_cases_upper=$19\n\
    \    local dict_lowers_lower=$20\n    local dict_lowers_upper=$21\n    local dict_uppers_lower=$22\n\
    \    local dict_uppers_upper=$23\n    local dict_emptys_lower=$24\n    local dict_emptys_upper=$25\n\
    \    local dict_keys_lowers=$26\n    local dict_keys_uppers=$27\n    local dict_values_lowers=$28\n\
    \    local dict_values_uppers=$29\n    local dict_cases_lowers=$30\n    local\
    \ dict_cases_uppers=$31\n    local dict_lowers_lowers=$32\n    local dict_lowers_uppers=$33\n\
    \    local dict_uppers_lowers=$34\n    local dict_uppers_uppers=$35\n    local\
    \ dict_emptys_lowers=$36\n    local dict_emptys_uppers=$37\n    local dict_keys_lowers_lower=$38\n\
    \    local dict_keys_lowers_upper=$39\n    local dict_keys_uppers_lower=$40\n\
    \    local dict_keys_uppers_upper=$41\n    local dict_values_lowers_lower=$42\n\
    \    local dict_values_lowers_upper=$43\n    local dict_values_uppers_lower=$44\n\
    \    local dict_values_uppers_upper=$45\n    local dict_cases_lowers_lower=$46\n\
    \    local dict_cases_lowers_upper=$47\n    local dict_cases_uppers_lower=$48\n\
    \    local dict_cases_uppers_upper=$49\n    local dict_lowers_lowers_lower=$50\n\
    \    local dict_lowers_lowers_upper=$51\n    local dict_lowers_uppers_lower=$52\n\
    \    local dict_lowers_uppers_upper=$53\n    local dict_uppers_lowers_lower=$54\n\
    \    local dict_uppers_lowers_upper=$55\n    local dict_uppers_upper\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dictionary=$1\n\
    \  local key\n  local value\n  local key2\n  local value2\n  local result\n  local\
    \ count\n  local key3\n  local value3\n  local key4\n  local value4\n  local key5\n\
    \  local value5\n  local key6\n  local value6\n  local key7\n  local value7\n\
    \  local key8\n  local value8\n  local key9\n  local value9\n  local key10\n \
    \ local value10\n  local key11\n  local value11\n  local key12\n  local value12\n\
    \  local key13\n  local value13\n  local key14\n  local value14\n  local key15\n\
    \  local value15\n  local key16\n  local value16\n  local key17\n  local value17\n\
    \  local key18\n  local value18\n  local key19\n  local value19\n  local key20\n\
    \  local value20\n  local key21\n  local value21\n  local key22\n  local value22\n\
    \  local key23\n  local value23\n  local key24\n  local value24\n  local key25\n\
    \  local value25\n  local key26\n  local value26\n  local key27\n  local value27\n\
    \  local key28\n  local value28\n  local key29\n  local value29\n  local key30\n\
    \  local value30\n  local key31\n  local value31\n  local key32\n  local value32\n\
    \  local key33\n  local value33\n  local key34\n  local value34\n  local key35\n\
    \  local value35\n  local key36\n  local value36\n  local key37\n  local value37\n\
    \  local key38\n  local value38\n  local key39\n  local value39\n  local key40\n\
    \  local value40\n  local key41\n  local value41\n  local key42\n  local value42\n\
    \  local key43\n  local value43\n  local key44\n  local value44\n  local key45\n\
    \  local value45\n  local key46\n  local value46\n  local key47\n  local value47\n\
    \  local key48\n  local value48\n  local key49\n  local value49\n  local key50\n\
    \  local value50\n\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    \n    # Check if dictionary is empty\n    if [ -z \"$dict\"\
    \ ]; then\n        echo \"check_dict_case: dictionary is empty\"\n        return\
    \ false\n    fi\n\n    # Loop through all keys and values\n    for key in $dict;\
    \ do\n        value=${dict[$key]}\n        lower=${key,,}\n        upper=${lower,,}\n\
    \        \n        # Check if key is all lower case\n        if [ \"$lower\" ==\
    \ \"$lower\" ]; then\n            echo \"check_dict_case: key $key is all lower\
    \ case\"\n            return false\n        fi\n\n        # Check if key is all\
    \ upper case\n        if [ \"$upper\" == \"$upper\" ]; then\n            echo\
    \ \"check_dict_case: key $key is all upper case\"\n            return false\n\
    \        fi\n    done\n\n    # All keys are either all lower case or all upper\
    \ case\n    echo \"check_dict_case: all keys are either all lower case or all\
    \ upper case\"\n    return true\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgzcf8n0j.sh: line 24: p,pineapple\nb,banana: syntax error: invalid
    arithmetic operator (error token is "\nb,banana")

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_in=$7\n\
    \    local dict_case_upper_in=$8\n    local dict_case_lower_out=$9\n    local\
    \ dict_case_upper_out=${10}\n    local dict_case_lower_in=${11}\n    local dict_case_upper_in=${12}\n\
    \    local dict_case_lower_out=${13}\n    local dict_case_upper_out=${14}\n  \
    \  local dict_case_lower_in=${15}\n    local dict_case_upper_in=${16}\n    local\
    \ dict_case_lower_out=${17}\n    local dict_case_upper_out=${18}\n    local dict_case_lower_in=${19}\n\
    \    local dict_case_upper_in=${20}\n    local dict_case_lower_out=${21}\n   \
    \ local dict_case_upper_out=${22}\n    local dict_case_lower_in=${23}\n    local\
    \ dict_case_upper_in=${24}\n    local dict_case_lower_out=${25}\n    local dict_case_upper_out=${26}\n\
    \    local dict_case_lower_in=${27}\n    local dict_case_upper_in=${28}\n    local\
    \ dict_case_lower_out=${29}\n    local dict_case_upper_out=${30}\n    local dict_case_lower_in=${31}\n\
    \    local dict_case_upper_in=${32}\n    local dict_case_lower_out=${33}\n   \
    \ local dict_case_upper_out=${34}\n    local dict_case_lower_in=${35}\n    local\
    \ dict_case_upper_in=${36}\n    local dict_case_lower_out=${37}\n    local dict_case_upper_out=${38}\n\
    \    local dict_case_lower_in=${39}\n    local dict_case_upper_in=${40}\n    local\
    \ dict_case_lower_out=${41}\n    local dict_case_upper_out=${42}\n    local dict_case_lower_in=${43}\n\
    \    local dict_case_upper_in=${44}\n    local dict_case_lower_out=${45}\n   \
    \ local dict_case_upper_out=${46}\n    local dict_case_lower_in=${47}\n    local\
    \ dict_case_upper_in=${48}\n    local dict_case_lower_out=${49}\n    local dict_case_upper_out=${50}\n\
    \    local dict_case_lower_in=${51}\n    local dict_case_upper_in=${52}\n    local\
    \ dict_case_lower_out=${53}\n    local \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local values=$2\n    local lower=false\n    local upper=false\n\
    \    local found=false\n    local i=0\n    while [ $i -lt ${#keys[@]} ]; do\n\
    \        lower=false\n        upper=false\n        found=false\n        lower=${keys[$i]}\n\
    \        upper=${values[$i]}\n        if [ \"$lower\" == \"$upper\" ]; then\n\
    \            found=true\n        fi\n        if [ \"$found\" == \"false\" ]; then\n\
    \            return false\n        fi\n        i=$((i+1))\n    done\n    return\
    \ true\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdxumn_j0.sh: line 25: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local keylen\n    local valuelen\n    local keylen2\n  \
    \  local valuelen2\n    local keylen3\n    local valuelen3\n    local keylen4\n\
    \    local valuelen4\n    local keylen5\n    local valuelen5\n    local keylen6\n\
    \    local valuelen6\n    local keylen7\n    local valuelen7\n    local keylen8\n\
    \    local valuelen8\n    local keylen9\n    local valuelen9\n    local keylen10\n\
    \    local valuelen10\n    local keylen11\n    local valuelen11\n    local keylen12\n\
    \    local valuelen12\n    local keylen13\n    local valuelen13\n    local keylen14\n\
    \    local valuelen14\n    local keylen15\n    local valuelen15\n    local keylen16\n\
    \    local valuelen16\n    local keylen17\n    local valuelen17\n    local keylen18\n\
    \    local valuelen18\n    local keylen19\n    local valuelen19\n    local keylen20\n\
    \    local valuelen20\n    local keylen21\n    local valuelen21\n    local keylen22\n\
    \    local valuelen22\n    local keylen23\n    local valuelen23\n    local keylen24\n\
    \    local valuelen24\n    local keylen25\n    local valuelen25\n    local keylen26\n\
    \    local valuelen26\n    local keylen27\n    local valuelen27\n    local keylen28\n\
    \    local valuelen28\n    local keylen29\n    local valuelen29\n    local keylen30\n\
    \    local valuelen30\n    local keylen31\n    local valuelen31\n    local keylen32\n\
    \    local valuelen32\n    local keylen33\n    local valuelen33\n    local keylen34\n\
    \    local valuelen34\n    local keylen35\n    local valuelen35\n    local keylen36\n\
    \    local valuelen36\n    local keylen37\n    local valuelen37\n    local keylen38\n\
    \    local valuelen38\n    local keylen39\n    local valuelen39\n    local keylen40\n\
    \    local valuelen40\n    local keylen41\n    local \n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower_case_key\n  \
    \  local upper_case_key\n    local lower_case_value\n    local upper_case_value\n\
    \    local keys_in_lower\n    local keys_in_upper\n    local values_in_lower\n\
    \    local values_in_upper\n    local key_in_lower\n    local key_in_upper\n \
    \   local value_in_lower\n    local value_in_upper\n    local key_in_lower\n \
    \   local key_in_upper\n    local value_in_lower\n    local value_in_upper\n \
    \   local key_in_lower\n    local key_in_upper\n    local value_in_lower\n   \
    \ local value_in_upper\n    local key_in_lower\n    local key_in_upper\n    local\
    \ value_in_lower\n    local value_in_upper\n    local key_in_lower\n    local\
    \ key_in_upper\n    local value_in_lower\n    local value_in_upper\n    local\
    \ key_in_lower\n    local key_in_upper\n    local value_in_lower\n    local value_in_upper\n\
    \    local key_in_lower\n    local key_in_upper\n    local value_in_lower\n  \
    \  local value_in_upper\n    local key_in_lower\n    local key_in_upper\n    local\
    \ value_in_lower\n    local value_in_upper\n    local key_in_lower\n    local\
    \ key_in_upper\n    local value_in_lower\n    local value_in_upper\n    local\
    \ key_in_lower\n    local key_in_upper\n    local value_in_lower\n    local value_in_upper\n\
    \    local key_in_lower\n    local key_in_upper\n    local value_in_lower\n  \
    \  local value_in_upper\n    local key_in_lower\n    local key_in_upper\n    local\
    \ value_in_lower\n    local value_in_upper\n    local key_in_lower\n    local\
    \ key_in_upper\n    local value_in_lower\n    local value_in_upper\n    local\
    \ key_in_lower\n    local key_in_upper\n    local value_in_lower\n    local value_in_upper\n\
    \    local key_in_lower\n    local key_in_upper\n    local value_in_lower\n  \
    \  local value_in_upper\n    local key_in_lower\n    local key_in_upper\n    local\
    \ value_in_lower\n    local value_in_upper\n    local key_in_lower\n    local\
    \ key_in_upper\n    local value_in_lower\n    local value_in_upper\n    local\
    \ key_in_lower\n    local key_in_upper\n    local value_in_lower\n    local value_in_upper\n\
    \    local key_in_lower\n    local key_in_upper\n    local value_in_lower\n\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_in=$7\n\
    \    local dict_case_upper_in=$8\n    local dict_case_lower_out=$9\n    local\
    \ dict_case_upper_out=${10}\n    local dict_case_lower_in=${11}\n    local dict_case_upper_in=${12}\n\
    \    local dict_case_lower_out=${13}\n    local dict_case_upper_out=${14}\n  \
    \  local dict_case_lower_in=${15}\n    local dict_case_upper_in=${16}\n    local\
    \ dict_case_lower_out=${17}\n    local dict_case_upper_out=${18}\n    local dict_case_lower_in=${19}\n\
    \    local dict_case_upper_in=${20}\n    local dict_case_lower_out=${21}\n   \
    \ local dict_case_upper_out=${22}\n    local dict_case_lower_in=${23}\n    local\
    \ dict_case_upper_in=${24}\n    local dict_case_lower_out=${25}\n    local dict_case_upper_out=${26}\n\
    \    local dict_case_lower_in=${27}\n    local dict_case_upper_in=${28}\n    local\
    \ dict_case_lower_out=${29}\n    local dict_case_upper_out=${30}\n    local dict_case_lower_in=${31}\n\
    \    local dict_case_upper_in=${32}\n    local dict_case_lower_out=${33}\n   \
    \ local dict_case_upper_out=${34}\n    local dict_case_lower_in=${35}\n    local\
    \ dict_case_upper_in=${36}\n    local dict_case_lower_out=${37}\n    local dict_case_upper_out=${38}\n\
    \    local dict_case_lower_in=${39}\n    local dict_case_upper_in=${40}\n    local\
    \ dict_case_lower_out=${41}\n    local dict_case_upper_out=${42}\n    local dict_case_lower_in=${43}\n\
    \    local dict_case_upper_in=${44}\n    local dict_case_lower_out=${45}\n   \
    \ local dict_case_upper_out=${46}\n    local dict_case_lower_in=${47}\n    local\
    \ dict_case_upper_in=${48}\n    local dict_case_lower_out=${49}\n    local dict_case_upper_out=${50}\n\
    \    local dict_case_lower_in=${51}\n    local dict_case_upper_in=${52}\n    local\
    \ dict_case_lower_out=${53}\n    local \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_case_lower=$4\n\
    \    local dict_case_upper=$5\n    local dict_case_lower_in=$6\n    local dict_case_upper_in=$7\n\
    \    local dict_case_lower_out=$8\n    local dict_case_upper_out=$9\n    local\
    \ dict_case_lower_out=$10\n    local dict_case_upper_out=$11\n    local dict_case_lower_out=$12\n\
    \    local dict_case_upper_out=$13\n    local dict_case_lower_out=$14\n    local\
    \ dict_case_upper_out=$15\n    local dict_case_lower_out=$16\n    local dict_case_upper_out=$17\n\
    \    local dict_case_lower_out=$18\n    local dict_case_upper_out=$19\n    local\
    \ dict_case_lower_out=$20\n    local dict_case_upper_out=$21\n    local dict_case_lower_out=$22\n\
    \    local dict_case_upper_out=$23\n    local dict_case_lower_out=$24\n    local\
    \ dict_case_upper_out=$25\n    local dict_case_lower_out=$26\n    local dict_case_upper_out=$27\n\
    \    local dict_case_lower_out=$28\n    local dict_case_upper_out=$29\n    local\
    \ dict_case_lower_out=$30\n    local dict_case_upper_out=$31\n    local dict_case_lower_out=$32\n\
    \    local dict_case_upper_out=$33\n    local dict_case_lower_out=$34\n    local\
    \ dict_case_upper_out=$35\n    local dict_case_lower_out=$36\n    local dict_case_upper_out=$37\n\
    \    local dict_case_lower_out=$38\n    local dict_case_upper_out=$39\n    local\
    \ dict_case_lower_out=$40\n    local dict_case_upper_out=$41\n    local dict_case_lower_out=$42\n\
    \    local dict_case_upper_out=$43\n    local dict_case_lower_out=$44\n    local\
    \ dict_case_upper_out=$45\n    local dict_case_lower_out=$46\n    local dict_case_upper_out=$47\n\
    \    local dict_case_lower_out=$48\n    local dict_case_upper_out=$49\n    local\
    \ dict_case_lower_out=$50\n    local dict_case_upper_out=$51\n    local dict_case_lower_out=$52\n\
    \    local dict_case_upper_out=$53\n    local dict_case_lower_out=$54\n    local\
    \ dict_case_upper_out=$55\n    local dict_case_lower_out=$56\n    local dict_case_upper_out=$57\n\
    \    local dict_case_lower_out=$\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n\n    lower=0\n    upper=0\n    for (( i=0; i<${#dict[*]};\
    \ i++ )); do\n        key=${dict[$i,0]}\n        value=${dict[$i,1]}\n       \
    \ if [ -z \"$key\" ]; then\n            echo \"ERROR: Key is missing in dictionary\
    \ $dict\"\n            return 1\n        fi\n        if [ -z \"$value\" ]; then\n\
    \            echo \"ERROR: Value is missing in dictionary $dict\"\n          \
    \  return 1\n        fi\n        if [ \"${key:0:1}\" == \"-\" ]; then\n      \
    \      lower=1\n        fi\n        if [ \"${key:0:1}\" == \"_\" ]; then\n   \
    \         upper=1\n        fi\n        if [ \"$lower\" -eq 1 ] && [ \"$upper\"\
    \ -eq 1 ]; then\n            echo \"ERROR: Key $key is both upper and lower case\"\
    \n            return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local found\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_lower=$5\n    local dict_upper=$6\n    local dict_empty=$7\n \
    \   local dict_not_empty=$8\n    local dict_key_not_empty=$9\n    local dict_value_not_empty=$10\n\
    \    local dict_key_empty=$11\n    local dict_value_empty=$12\n    local dict_key_not_empty_value=$13\n\
    \    local dict_value_not_empty_value=$14\n    local dict_key_empty_value=$15\n\
    \    local dict_value_empty_value=$16\n    local dict_key_not_empty_value_value=$17\n\
    \    local dict_value_not_empty_value_value=$18\n    local dict_key_empty_value_value=$19\n\
    \    local dict_value_empty_value_value=$20\n    local dict_key_not_empty_value_value_value=$21\n\
    \    local dict_value_not_empty_value_value_value=$22\n    local dict_key_empty_value_value_value=$23\n\
    \    local dict_value_empty_value_value_value=$24\n    local dict_key_not_empty_value_value_value=$25\n\
    \    local dict_value_not_empty_value_value_value=$26\n    local dict_key_empty_value_value_value=$27\n\
    \    local dict_value_empty_value_value_value=$28\n    local dict_key_not_empty_value_value_value=$29\n\
    \    local dict_value_not_empty_value_value_value=$30\n    local dict_key_empty_value_value_value=$31\n\
    \    local dict_value_empty_value_value_value=$32\n    local dict_key_not_empty_value_value_value=$33\n\
    \    local dict_value_not_empty_value_value_value=$34\n    local dict_key_empty_value_value_value=$35\n\
    \    local dict_value_empty_value_value_value=$36\n    local dict_key_not_empty_value_value_value=$37\n\
    \    local dict_value_not_empty_value_value_value=$38\n    local dict_key_empty_value_value_value=$39\n\
    \    local dict_value_empty_value_value_value=$40\n    local dict_key_not_empty_value_value_value=$41\n\
    \    local dict_value_not_empty_value_value_value=$42\n    local dict_key_empty_value_value_value=$43\n\
    \    local dict_value_empty_value_value_value=$44\n    local dict_key_not_empty_value_value_value=$45\n\
    \    local dict_value_not_empty_value_value_value=$46\n    local dict_key_empty_value_value_value=$47\n\
    \    local dict_value_empty_value_value_value=$48\n    local dict_key_not_empty_value_value_value=$49\n\
    \    local dict_value_not_empty_value_value\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_case_insensitive=$5\n    local dict_case_sensitive=$6\n    local\
    \ dict_case_sensitive_insensitive=$7\n    local dict_case_sensitive_insensitive_keys=$8\n\
    \    local dict_case_sensitive_insensitive_values=$9\n    local dict_case_sensitive_insensitive_keys_values=$10\n\
    \    local dict_case_sensitive_insensitive_keys_values_case=$11\n    local dict_case_sensitive_insensitive_keys_values_case_sensitive=$12\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive=$13\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys=$14\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_values=$15\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values=$16\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case=$17\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive=$18\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive=$19\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys=$20\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_values=$21\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values=$22\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case=$23\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive=$24\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive=$25\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys=$26\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_keys_values_case_sensitive_insensitive_values=$27\n\
    \    local dict_case_sensitive_insensitive_keys_values_case_sensitive_insensitive\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local keylen\n    local valuelen\n    local keylen2\n  \
    \  local valuelen2\n    local keylen3\n    local valuelen3\n    local keylen4\n\
    \    local valuelen4\n    local keylen5\n    local valuelen5\n    local keylen6\n\
    \    local valuelen6\n    local keylen7\n    local valuelen7\n    local keylen8\n\
    \    local valuelen8\n    local keylen9\n    local valuelen9\n    local keylen10\n\
    \    local valuelen10\n    local keylen11\n    local valuelen11\n    local keylen12\n\
    \    local valuelen12\n    local keylen13\n    local valuelen13\n    local keylen14\n\
    \    local valuelen14\n    local keylen15\n    local valuelen15\n    local keylen16\n\
    \    local valuelen16\n    local keylen17\n    local valuelen17\n    local keylen18\n\
    \    local valuelen18\n    local keylen19\n    local valuelen19\n    local keylen20\n\
    \    local valuelen20\n    local keylen21\n    local valuelen21\n    local keylen22\n\
    \    local valuelen22\n    local keylen23\n    local valuelen23\n    local keylen24\n\
    \    local valuelen24\n    local keylen25\n    local valuelen25\n    local keylen26\n\
    \    local valuelen26\n    local keylen27\n    local valuelen27\n    local keylen28\n\
    \    local valuelen28\n    local keylen29\n    local valuelen29\n    local keylen30\n\
    \    local valuelen30\n    local keylen31\n    local valuelen31\n    local keylen32\n\
    \    local valuelen32\n    local keylen33\n    local valuelen33\n    local keylen34\n\
    \    local valuelen34\n    local keylen35\n    local valuelen35\n    local keylen36\n\
    \    local valuelen36\n    local keylen37\n    local valuelen37\n    local keylen38\n\
    \    local valuelen38\n    local keylen39\n    local valuelen39\n    local keylen40\n\
    \    local valuelen40\n    local keylen41\n    local \n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local lower\n  local upper\n  local dict\n  dict=$1\n  lower=$(echo\
    \ $dict | awk '{print $1}')\n  upper=$(echo $dict | awk '{print $2}')\n  lower=${lower,,}\n\
    \  upper=${upper,,}\n  if [ -z \"$dict\" ]; then\n    return 0\n  fi\n  for key\
    \ in $dict; do\n    if [[ $key =~ ^[a-z]$ ]]; then\n      if [[ $key != $lower\
    \ ]]; then\n        return 0\n      fi\n    elif [[ $key =~ ^[A-Z]$ ]]; then\n\
    \      if [[ $key != $upper ]]; then\n        return 0\n      fi\n    else\n \
    \     return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=\"$1\"\n    local dict_name=\"$2\"\n    local dict_case=\"$3\"\n \
    \   local dict_case_insensitive=\"$(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\
    \n    local dict_case_sensitive=\"$(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\
    \n    local dict_case_sensitive_insensitive=\"$(echo \"$dict_case\" | tr '[:upper:]'\
    \ '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"$(echo \"$dict_case\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:lower:]' '[:upper:]')\"\n    local dict_case_sensitive_insensitive=\"\
    $(echo \"$dict_case\" | tr '[:upper:]' '[:lower:]')\"\n\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_insensitive=$4\n\
    \    local dict_case_sensitive=$5\n    local dict_case_sensitive_insensitive=$6\n\
    \    local dict_case_sensitive_insensitive_keys=$7\n    local dict_case_sensitive_keys=$8\n\
    \    local dict_case_sensitive_keys_only=$9\n    local dict_case_sensitive_keys_only_lower=$10\n\
    \    local dict_case_sensitive_keys_only_upper=$11\n    local dict_case_sensitive_keys_only_upper_insensitive=$12\n\
    \    local dict_case_sensitive_keys_only_upper_insensitive_keys=$13\n    local\
    \ dict_case_sensitive_keys_only_upper_keys=$14\n    local dict_case_sensitive_keys_only_lower_insensitive=$15\n\
    \    local dict_case_sensitive_keys_only_lower_insensitive_keys=$16\n    local\
    \ dict_case_sensitive_keys_only_lower_keys=$17\n    local dict_case_sensitive_keys_only_upper_insensitive_keys=$18\n\
    \    local dict_case_sensitive_keys_only_upper_keys=$19\n    local dict_case_sensitive_keys_only_lower_insensitive_keys=$20\n\
    \    local dict_case_sensitive_keys_only_lower_keys=$21\n    local dict_case_sensitive_keys_only_upper_insensitive_keys=$22\n\
    \    local dict_case_sensitive_keys_only_upper_keys=$23\n    local dict_case_sensitive_keys_only_lower_insensitive_keys=$24\n\
    \    local dict_case_sensitive_keys_only_lower_keys=$25\n    local dict_case_sensitive_keys_only_upper_insensitive_keys=$26\n\
    \    local dict_case_sensitive_keys_only_upper_keys=$27\n    local dict_case_sensitive_keys_only_lower_insensitive_keys=$28\n\
    \    local dict_case_sensitive_keys_only_lower_keys=$29\n    local dict_case_sensitive_keys_only_upper_insensitive_keys=$30\n\
    \    local dict_case_sensitive_keys_only_upper_keys=$31\n    local dict_case_sensitive_keys_only_lower_insensitive_keys=$32\n\
    \    local dict_case_sensitive_keys_only_lower_keys=$33\n    local dict_case_sensitive_keys_only_upper_insensitive_keys=$34\n\
    \    local dict_case_sensitive_keys_only_upper_keys=$35\n    local dict_case_sensitive_keys_only_lower_insensitive_keys=$36\n\
    \    local dict_case_sensitive_keys_only_lower_keys=$37\n    local dict_case_sensitive_keys_only_upper_insensitive_keys=$38\n\
    \    local dict_case_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=\"$1\"\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=0\n    upper=0\n    found=0\n    for key in \"${!dict}\"\
    ; do\n        value=\"${dict[$key]}\"\n        lower=$(echo \"$value\" | tr '[:upper:]'\
    \ '[:lower:]')\n        upper=$(echo \"$value\" | tr '[:lower:]' '[:upper:]')\n\
    \        if [ \"$lower\" != \"$value\" ]; then\n            lower=0\n        fi\n\
    \        if [ \"$upper\" != \"$value\" ]; then\n            upper=0\n        fi\n\
    \        if [ \"$lower\" == 0 ] && [ \"$upper\" == 0 ]; then\n            found=1\n\
    \        fi\n    done\n    if [ \"$found\" == 0 ]; then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpslktbrki.sh: line 18: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_keys=$4\n\
    \    local dict_values=$5\n    local dict_case_insensitive=$6\n    local dict_keys_insensitive=$7\n\
    \    local dict_values_insensitive=$8\n    local dict_case_insensitive_keys=$9\n\
    \    local dict_keys_insensitive_keys=$10\n    local dict_values_insensitive_values=$11\n\
    \    local dict_case_insensitive_values=$12\n    local dict_keys_insensitive_values=$13\n\
    \    local dict_values_insensitive_values=$14\n    local dict_case_insensitive_keys=$15\n\
    \    local dict_keys_insensitive_keys=$16\n    local dict_values_insensitive_values=$17\n\
    \    local dict_keys_insensitive_values=$18\n    local dict_values_insensitive_values=$19\n\
    \    local dict_case_insensitive_keys=$20\n    local dict_keys_insensitive_keys=$21\n\
    \    local dict_values_insensitive_values=$22\n    local dict_keys_insensitive_values=$23\n\
    \    local dict_values_insensitive_values=$24\n    local dict_case_insensitive_keys=$25\n\
    \    local dict_keys_insensitive_keys=$26\n    local dict_values_insensitive_values=$27\n\
    \    local dict_keys_insensitive_values=$28\n    local dict_values_insensitive_values=$29\n\
    \    local dict_case_insensitive_keys=$30\n    local dict_keys_insensitive_keys=$31\n\
    \    local dict_values_insensitive_values=$32\n    local dict_keys_insensitive_values=$33\n\
    \    local dict_values_insensitive_values=$34\n    local dict_case_insensitive_keys=$35\n\
    \    local dict_keys_insensitive_keys=$36\n    local dict_values_insensitive_values=$37\n\
    \    local dict_keys_insensitive_values=$38\n    local dict_values_insensitive_values=$39\n\
    \    local dict_case_insensitive_keys=$40\n    local dict_keys_insensitive_keys=$41\n\
    \    local dict_values_insensitive_values=$42\n    local dict_keys_insensitive_values=$43\n\
    \    local dict_values_insensitive_values=$44\n    local dict_case_insensitive_keys=$45\n\
    \    local dict_keys_insensitive_keys=$46\n    local dict_values_insensitive_values=$47\n\
    \    local dict_keys_insensitive_values=$48\n    local dict_values_insensitive_values=\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_in=$4\n\
    \    local dict_case_out=$5\n    local dict_case_in_file=$6\n    local dict_case_out_file=$7\n\
    \    local dict_case_out_file_header=$8\n    local dict_case_out_file_header_file=$9\n\
    \    local dict_case_out_file_footer=$10\n    local dict_case_out_file_footer_file=$11\n\
    \    local dict_case_out_file_footer_header=$12\n    local dict_case_out_file_footer_header_file=$13\n\
    \    local dict_case_out_file_footer_footer=$14\n    local dict_case_out_file_footer_footer_file=$15\n\
    \    local dict_case_out_file_footer_footer_header=$16\n    local dict_case_out_file_footer_footer_header_file=$17\n\
    \    local dict_case_out_file_footer_footer_footer=$18\n    local dict_case_out_file_footer_footer_footer_file=$19\n\
    \    local dict_case_out_file_footer_footer_footer_header=$20\n    local dict_case_out_file_footer_footer_header_file=$21\n\
    \    local dict_case_out_file_footer_footer_footer=$22\n    local dict_case_out_file_footer_footer_footer_file=$23\n\
    \    local dict_case_out_file_footer_footer_footer_header=$24\n    local dict_case_out_file_footer_footer_header_file=$25\n\
    \    local dict_case_out_file_footer_footer_footer=$26\n    local dict_case_out_file_footer_footer_footer_file=$27\n\
    \    local dict_case_out_file_footer_footer_footer_header=$28\n    local dict_case_out_file_footer_footer_header_file=$29\n\
    \    local dict_case_out_file_footer_footer_footer=$30\n    local dict_case_out_file_footer_footer_footer_file=$31\n\
    \    local dict_case_out_file_footer_footer_footer_header=$32\n    local dict_case_out_file_footer_footer_header_file=$33\n\
    \    local dict_case_out_file_footer_footer_footer=$34\n    local dict_case_out_file_footer_footer_footer_file=$35\n\
    \    local dict_case_out_file_footer_footer_footer_header=$36\n    local dict_case_out_file_footer_footer_header_file=$37\n\
    \    local dict_case_out_file_footer_footer_footer=$38\n    local dict_case_out_file_footer_footer_footer_file=$39\n\
    \    local dict_case_out_file_footer_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local key1\n    local key2\n    local\
    \ key3\n    local key4\n    local key5\n    local key6\n    local key7\n    local\
    \ key8\n    local key9\n    local key10\n    local key11\n    local key12\n  \
    \  local key13\n    local key14\n    local key15\n    local key16\n    local key17\n\
    \    local key18\n    local key19\n    local key20\n    local key21\n    local\
    \ key22\n    local key23\n    local key24\n    local key25\n    local key26\n\
    \    local key27\n    local key28\n    local key29\n    local key30\n    local\
    \ key31\n    local key32\n    local key33\n    local key34\n    local key35\n\
    \    local key36\n    local key37\n    local key38\n    local key39\n    local\
    \ key40\n    local key41\n    local key42\n    local key43\n    local key44\n\
    \    local key45\n    local key46\n    local key47\n    local key48\n    local\
    \ key49\n    local key50\n    local key51\n    local key52\n    local key53\n\
    \    local key54\n    local key55\n    local key56\n    local key57\n    local\
    \ key58\n    local key59\n    local key60\n    local key61\n    local key62\n\
    \    local key63\n    local key64\n    local key65\n    local key66\n    local\
    \ key67\n    local key68\n    local key69\n    local key70\n    local key71\n\
    \    local key72\n    local key73\n    local key74\n    local key75\n    local\
    \ key76\n    local key77\n    local key78\n    local key79\n    local key80\n\
    \    local key81\n    local key82\n    local key83\n    local key84\n    local\
    \ key85\n    local key86\n    local key87\n    local key88\n    local key89\n\
    \    local key90\n    local key91\n    local key92\n    local key93\n    local\
    \ key94\n    local key95\n    local key96\n    local key97\n    local key98\n\
    \    local key99\n    local key100\n\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=\"$1\"\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    \n    lower=$(echo \"$dict\" | awk -F, '{print $1}')\n\
    \    upper=$(echo \"$dict\" | awk -F, '{print $2}')\n    \n    if [ -z \"$lower\"\
    \ -o -z \"$upper\" ]; then\n        result=\"false\"\n    else\n        result=\"\
    true\"\n    fi\n    \n    echo \"$result\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local found\n  \
    \  local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n    local count\n    local keycount\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local found\n\
    \    local count\n    local keycount\n    local key\n    local value\n    local\
    \ lower\n    local upper\n    local found\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n    \n    if [ -z \"$dictionary\" ]\n    then\n   \
    \     return 0\n    fi\n    \n    lower=$(echo \"$dictionary\" | awk -F, '{print\
    \ $1}')\n    upper=$(echo \"$dictionary\" | awk -F, '{print $2}')\n    \n    for\
    \ key in $lower\n    do\n        if [ -z \"$key\" ]\n        then\n          \
    \  return 0\n        fi\n    done\n    \n    for key in $upper\n    do\n     \
    \   if [ -z \"$key\" ]\n        then\n            return 0\n        fi\n    done\n\
    \    \n    for value in $lower\n    do\n        if [ -z \"$value\" ]\n       \
    \ then\n            return 0\n        fi\n    done\n    \n    for value in $upper\n\
    \    do\n        if [ -z \"$value\" ]\n        then\n            return 0\n  \
    \      fi\n    done\n    \n    result=1\n    \n    return $result\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keys=()\n    local values=()\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n    local value\n    local key\n    local value\n\
    \    local key\n    local value\n    local key\n    local value\n    local key\n\
    \    local value\n    local key\n\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict_case\n    local dict_case_insensitive\n\
    \    local dict_case_insensitive_keys\n    local dict_case_insensitive_values\n\
    \    local dict_case_insensitive_keys_lower\n    local dict_case_insensitive_values_lower\n\
    \    local dict_case_insensitive_keys_upper\n    local dict_case_insensitive_values_upper\n\
    \    local dict_case_insensitive_keys_equal\n    local dict_case_insensitive_values_equal\n\
    \    local dict_case_insensitive_keys_not_equal\n    local dict_case_insensitive_values_not_equal\n\
    \    local dict_case_insensitive_keys_contains\n    local dict_case_insensitive_values_contains\n\
    \    local dict_case_insensitive_keys_not_contains\n    local dict_case_insensitive_values_not_contains\n\
    \    local dict_case_insensitive_keys_starts\n    local dict_case_insensitive_values_starts\n\
    \    local dict_case_insensitive_keys_ends\n    local dict_case_insensitive_values_ends\n\
    \    local dict_case_insensitive_keys_regex\n    local dict_case_insensitive_values_regex\n\
    \    local dict_case_insensitive_keys_not_regex\n    local dict_case_insensitive_values_not_regex\n\
    \    local dict_case_insensitive_keys_containsany\n    local dict_case_insensitive_values_containsany\n\
    \    local dict_case_insensitive_keys_containsall\n    local dict_case_insensitive_values_containsall\n\
    \    local dict_case_insensitive_keys_containsnone\n    local dict_case_insensitive_values_containsnone\n\
    \    local dict_case_insensitive_keys_contains\n    local dict_case_insensitive_values_contains\n\
    \    local dict_case_insensitive_keys_not_contains\n    local dict_case_insensitive_values_not_contains\n\
    \    local dict_case_insensitive_keys_starts\n    local dict_case_insensitive_values_starts\n\
    \    local dict_case_insensitive_keys_ends\n    local dict_case_insensitive_values_ends\n\
    \    local dict_case_insensitive_keys_regex\n    local dict_case_insensitive_values_regex\n\
    \    local dict_case_insensitive_keys_not_regex\n    local dict_case_insensitive_values_not_regex\n\
    \    local dict_case_insensitive_keys_containsany\n    local dict_case_insensitive_values_containsany\n\
    \    local dict_case_insensitive_keys_containsall\n    local dict_case_insensitive_values_containsall\n\
    \    local dict_case_insensitive_keys_containsnone\n    local dict_case_insensitive_values_containsnone\n\
    \    local dict_case\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local result\n    dict=$1\n    lower=$(echo $dict | awk -F, '{print $1}')\n\
    \    upper=$(echo $dict | awk -F, '{print $2}')\n    if [ -z \"$dict\" ]; then\n\
    \        return 0\n    fi\n    for key in $lower; do\n        if [ -z \"$key\"\
    \ ]; then\n            return 0\n        fi\n    done\n    for value in $upper;\
    \ do\n        if [ -z \"$value\" ]; then\n            return 0\n        fi\n \
    \   done\n    result=1\n    for key in $lower; do\n        if [ -z \"$key\" ];\
    \ then\n            return 0\n        fi\n        if [ -z \"$dict\" ]; then\n\
    \            return 0\n        fi\n        if [ \"$key\" != \"$value\" ]; then\n\
    \            result=0\n        fi\n    done\n    for value in $upper; do\n   \
    \     if [ -z \"$value\" ]; then\n            return 0\n        fi\n        if\
    \ [ -z \"$dict\" ]; then\n            return 0\n        fi\n        if [ \"$value\"\
    \ != \"$key\" ]; then\n            result=0\n        fi\n    done\n    return\
    \ $result\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_error=$7\n \
    \   local dict_error_key=$8\n    local dict_error_val=$9\n    local dict_error_empty=${10}\n\
    \    local dict_error_empty_key=${11}\n    local dict_error_empty_val=${12}\n\
    \    local dict_error_key_empty=${13}\n    local dict_error_val_empty=${14}\n\
    \    local dict_error_key_not_string=${15}\n    local dict_error_val_not_string=${16}\n\
    \    local dict_error_key_not_lower=${17}\n    local dict_error_val_not_lower=${18}\n\
    \    local dict_error_key_not_upper=${19}\n    local dict_error_val_not_upper=${20}\n\
    \    local dict_error_key_not_empty=${21}\n    local dict_error_val_not_empty=${22}\n\
    \    local dict_error_key_not_empty=${23}\n    local dict_error_val_not_empty=${24}\n\
    \    local dict_error_key_not_empty=${25}\n    local dict_error_val_not_empty=${26}\n\
    \    local dict_error_key_not_empty=${27}\n    local dict_error_val_not_empty=${28}\n\
    \    local dict_error_key_not_empty=${29}\n    local dict_error_val_not_empty=${30}\n\
    \    local dict_error_key_not_empty=${31}\n    local dict_error_val_not_empty=${32}\n\
    \    local dict_error_key_not_empty=${33}\n    local dict_error_val_not_empty=${34}\n\
    \    local dict_error_key_not_empty=${35}\n    local dict_error_val_not_empty=${36}\n\
    \    local dict_error_key_not_empty=${37}\n    local dict_error_val_not_empty=${38}\n\
    \    local dict_error_key_not_empty=${39}\n    local dict_error_val_not_empty=${40}\n\
    \    local dict_error_key_not_empty=${41}\n    local dict_error_val_not_empty=${42}\n\
    \    local dict_error_key_not_empty=${43}\n    local dict_error_val_not_empty=${44}\n\
    \    local dict_error_key_not_empty=${45}\n    local dict_error_val_not_empty=${46}\n\
    \    local dict_error_key_not_empty=${47}\n    local dict_error_val_not_empty=${48}\n\
    \    local dict_error_key_not_empty=${49}\n    local dict_error_val_not_empty=${50}\n\
    \    local dict_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_not_empty=$7\n\
    \    local dict_not_empty_value=$8\n    local dict_not_empty_key=$9\n    local\
    \ dict_not_empty_value_lower=$10\n    local dict_not_empty_value_upper=$11\n \
    \   local dict_not_empty_value_empty=$12\n    local dict_not_empty_value_not_empty=$13\n\
    \    local dict_not_empty_value_not_empty_value=$14\n    local dict_not_empty_value_not_empty_key=$15\n\
    \    local dict_not_empty_value_not_empty_value_lower=$16\n    local dict_not_empty_value_not_empty_value_upper=$17\n\
    \    local dict_not_empty_value_not_empty_value_empty=$18\n    local dict_not_empty_value_not_empty_value_not_empty=$19\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value=$20\n    local\
    \ dict_not_empty_value_not_empty_value_not_empty_key=$21\n    local dict_not_empty_value_not_empty_value_not_empty_value_lower=$22\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_upper=$23\n  \
    \  local dict_not_empty_value_not_empty_value_not_empty_value_empty=$24\n    local\
    \ dict_not_empty_value_not_empty_value_not_empty_value_not_empty=$25\n    local\
    \ dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value=$26\n \
    \   local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_key=$27\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_lower=$28\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_upper=$29\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_empty=$30\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_not_empty=$31\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_not_empty_value=$32\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_not_empty_key=$33\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_not_empty_value_lower=$34\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_not_empty_value_upper=$35\n\
    \    local dict_not_empty_value_not_empty_value_not_empty_value_not_empty_value_not_empty_value_empty=$36\n\
    \    local dict_not_empty_value_not_empty_value_not_empty\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local count\n    local keycount\n    local keycount2\n \
    \   local keycount3\n    local keycount4\n    local keycount5\n    local keycount6\n\
    \    local keycount7\n    local keycount8\n    local keycount9\n    local keycount10\n\
    \    local keycount11\n    local keycount12\n    local keycount13\n    local keycount14\n\
    \    local keycount15\n    local keycount16\n    local keycount17\n    local keycount18\n\
    \    local keycount19\n    local keycount20\n    local keycount21\n    local keycount22\n\
    \    local keycount23\n    local keycount24\n    local keycount25\n    local keycount26\n\
    \    local keycount27\n    local keycount28\n    local keycount29\n    local keycount30\n\
    \    local keycount31\n    local keycount32\n    local keycount33\n    local keycount34\n\
    \    local keycount35\n    local keycount36\n    local keycount37\n    local keycount38\n\
    \    local keycount39\n    local keycount40\n    local keycount41\n    local keycount42\n\
    \    local keycount43\n    local keycount44\n    local keycount45\n    local keycount46\n\
    \    local keycount47\n    local keycount48\n    local keycount49\n    local keycount50\n\
    \    local keycount51\n    local keycount52\n    local keycount53\n    local keycount54\n\
    \    local keycount55\n    local keycount56\n    local keycount57\n    local keycount58\n\
    \    local keycount59\n    local keycount60\n    local keycount61\n    local keycount62\n\
    \    local keycount63\n    local keycount64\n    local keycount65\n    local keycount66\n\
    \    local keycount67\n    local keycount68\n    local keycount69\n    local keycount70\n\
    \    local keycount71\n    local keycount72\n    local keycount73\n    local keycount74\n\
    \    local keycount75\n    local keycount76\n    local keycount77\n    local keycount78\n\
    \    local keycount79\n    local keycount80\n    local key\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local key1\n    local value1\n    local key2\n   \
    \ local value2\n    local key3\n    local value3\n    local key4\n    local value4\n\
    \    local key5\n    local value5\n    local key6\n    local value6\n    local\
    \ key7\n    local value7\n    local key8\n    local value8\n    local key9\n \
    \   local value9\n    local key10\n    local value10\n    local key11\n    local\
    \ value11\n    local key12\n    local value12\n    local key13\n    local value13\n\
    \    local key14\n    local value14\n    local key15\n    local value15\n    local\
    \ key16\n    local value16\n    local key17\n    local value17\n    local key18\n\
    \    local value18\n    local key19\n    local value19\n    local key20\n    local\
    \ value20\n    local key21\n    local value21\n    local key22\n    local value22\n\
    \    local key23\n    local value23\n    local key24\n    local value24\n    local\
    \ key25\n    local value25\n    local key26\n    local value26\n    local key27\n\
    \    local value27\n    local key28\n    local value28\n    local key29\n    local\
    \ value29\n    local key30\n    local value30\n    local key31\n    local value31\n\
    \    local key32\n    local value32\n    local key33\n    local value33\n    local\
    \ key34\n    local value34\n    local key35\n    local value35\n    local key36\n\
    \    local value36\n    local key37\n    local value37\n    local key38\n    local\
    \ value38\n    local key39\n    local value39\n    local key40\n    local value40\n\
    \    local key41\n    local value41\n    local key42\n    local value42\n    local\
    \ key43\n    local value43\n    local key44\n    local value44\n    local key45\n\
    \    local value45\n    local key46\n    local value46\n    local key47\n    local\
    \ value47\n    local key48\n    local value48\n    local key49\n    local value49\n\
    \    local key50\n    local value50\n    local key51\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_case=$2\n    local dict_value=$3\n    local dict_key=$4\n\
    \    local dict_keys=$5\n    local dict_values=$6\n    local dict_cases=$7\n \
    \   local dict_values=$8\n    local dict_keys=$9\n    local dict_cases=$10\n \
    \   local dict_values=$11\n    local dict_keys=$12\n    local dict_cases=$13\n\
    \    local dict_values=$14\n    local dict_keys=$15\n    local dict_cases=$16\n\
    \    local dict_values=$17\n    local dict_keys=$18\n    local dict_cases=$19\n\
    \    local dict_values=$20\n    local dict_keys=$21\n    local dict_cases=$22\n\
    \    local dict_values=$23\n    local dict_keys=$24\n    local dict_cases=$25\n\
    \    local dict_values=$26\n    local dict_keys=$27\n    local dict_cases=$28\n\
    \    local dict_values=$29\n    local dict_keys=$30\n    local dict_cases=$31\n\
    \    local dict_values=$32\n    local dict_keys=$33\n    local dict_cases=$34\n\
    \    local dict_values=$35\n    local dict_keys=$36\n    local dict_cases=$37\n\
    \    local dict_values=$38\n    local dict_keys=$39\n    local dict_cases=$40\n\
    \    local dict_values=$41\n    local dict_keys=$42\n    local dict_cases=$43\n\
    \    local dict_values=$44\n    local dict_keys=$45\n    local dict_cases=$46\n\
    \    local dict_values=$47\n    local dict_keys=$48\n    local dict_cases=$49\n\
    \    local dict_values=$50\n    local dict_keys=$51\n    local dict_cases=$52\n\
    \    local dict_values=$53\n    local dict_keys=$54\n    local dict_cases=$55\n\
    \    local dict_values=$56\n    local dict_keys=$57\n    local dict_cases=$58\n\
    \    local dict_values=$59\n    local dict_keys=$60\n    local dict_cases=$61\n\
    \    local dict_values=$62\n    local dict_keys=$63\n    local dict_cases=$64\n\
    \    local dict_values=\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local keyIsString\n    local\
    \ valueIsString\n    local isString\n    local isUpper\n    local isLower\n  \
    \  local isUpperOrLower\n    local isAllStrings\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOrNot\n    local isAllStringsOrNot\n\
    \    local isAllStringsOrNot\n    local isAllStringsOr\n}\n\ncandidate() {\n \
    \   check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local dict_case\n  dict_case=$1\n  shift\n  while read -r key\
    \ value; do\n    if [[ \"$dict_case\" == \"lower\" ]]; then\n      [[ \"$key\"\
    \ =~ ^[a-z]+ ]] && return 0\n    elif [[ \"$dict_case\" == \"upper\" ]]; then\n\
    \      [[ \"$key\" =~ ^[A-Z]+ ]] && return 0\n    else\n      return 1\n    fi\n\
    \  done < \"$1\"\n  return 1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwa5uh3of.sh: line 8: : No such file or directory

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    lower=false\n    upper=false\n    for k in \"${!dict}\"\
    ; do\n        key=\"${k}\"\n        value=\"${dict[k]}\"\n        if [[ \"$key\"\
    \ =~ ^[a-z]$ ]]; then\n            lower=true\n        elif [[ \"$key\" =~ ^[A-Z]$\
    \ ]]; then\n            upper=true\n        fi\n        if [[ \"$lower\" == \"\
    true\" && \"$upper\" == \"true\" ]]; then\n            result=true\n         \
    \   break\n        fi\n    done\n    if [[ \"$result\" == \"true\" ]]; then\n\
    \        echo \"All keys are strings in lower case\"\n    else\n        echo \"\
    All keys are strings in upper case\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkzqc8kup.sh: line 17: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local count\n    local keycount\n    local keycount2\n \
    \   local keycount3\n    local keycount4\n    local keycount5\n    local keycount6\n\
    \    local keycount7\n    local keycount8\n    local keycount9\n    local keycount10\n\
    \    local keycount11\n    local keycount12\n    local keycount13\n    local keycount14\n\
    \    local keycount15\n    local keycount16\n    local keycount17\n    local keycount18\n\
    \    local keycount19\n    local keycount20\n    local keycount21\n    local keycount22\n\
    \    local keycount23\n    local keycount24\n    local keycount25\n    local keycount26\n\
    \    local keycount27\n    local keycount28\n    local keycount29\n    local keycount30\n\
    \    local keycount31\n    local keycount32\n    local keycount33\n    local keycount34\n\
    \    local keycount35\n    local keycount36\n    local keycount37\n    local keycount38\n\
    \    local keycount39\n    local keycount40\n    local keycount41\n    local keycount42\n\
    \    local keycount43\n    local keycount44\n    local keycount45\n    local keycount46\n\
    \    local keycount47\n    local keycount48\n    local keycount49\n    local keycount50\n\
    \    local keycount51\n    local keycount52\n    local keycount53\n    local keycount54\n\
    \    local keycount55\n    local keycount56\n    local keycount57\n    local keycount58\n\
    \    local keycount59\n    local keycount60\n    local keycount61\n    local keycount62\n\
    \    local keycount63\n    local keycount64\n    local keycount65\n    local keycount66\n\
    \    local keycount67\n    local keycount68\n    local keycount69\n    local keycount70\n\
    \    local keycount71\n    local keycount72\n    local keycount73\n    local keycount74\n\
    \    local keycount75\n    local keycount76\n    local keycount77\n    local keycount78\n\
    \    local keycount79\n    local keycount80\n    local key\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_inverted=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_inverted=$7\n\
    \    local dict_case_upper_inverted=$8\n    local dict_case_lower_inverted_comma=$9\n\
    \    local dict_case_upper_inverted_comma=${10}\n    local dict_case_lower_inverted_comma=${11}\n\
    \    local dict_case_upper_inverted_comma=${12}\n    local dict_case_lower_inverted_comma=${13}\n\
    \    local dict_case_upper_inverted_comma=${14}\n    local dict_case_lower_inverted_comma=${15}\n\
    \    local dict_case_upper_inverted_comma=${16}\n    local dict_case_lower_inverted_comma=${17}\n\
    \    local dict_case_upper_inverted_comma=${18}\n    local dict_case_lower_inverted_comma=${19}\n\
    \    local dict_case_upper_inverted_comma=${20}\n    local dict_case_lower_inverted_comma=${21}\n\
    \    local dict_case_upper_inverted_comma=${22}\n    local dict_case_lower_inverted_comma=${23}\n\
    \    local dict_case_upper_inverted_comma=${24}\n    local dict_case_lower_inverted_comma=${25}\n\
    \    local dict_case_upper_inverted_comma=${26}\n    local dict_case_lower_inverted_comma=${27}\n\
    \    local dict_case_upper_inverted_comma=${28}\n    local dict_case_lower_inverted_comma=${29}\n\
    \    local dict_case_upper_inverted_comma=${30}\n    local dict_case_lower_inverted_comma=${31}\n\
    \    local dict_case_upper_inverted_comma=${32}\n    local dict_case_lower_inverted_comma=${33}\n\
    \    local dict_case_upper_inverted_comma=${34}\n    local dict_case_lower_inverted_comma=${35}\n\
    \    local dict_case_upper_inverted_comma=${36}\n    local dict_case_lower_inverted_comma=${37}\n\
    \    local dict_case_upper_inverted_comma=${38}\n    local dict_case_lower_inverted_comma=${39}\n\
    \    local dict_case_upper_inverted_comma=${40}\n    local dict_case_lower_inverted_comma=${41}\n\
    \    local dict_case_upper_inverted_comma=${42}\n    local dict_\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_case=$2\n    local dict_keys=$3\n    local dict_values=$4\n\
    \    local dict_case_insensitive=$5\n    local dict_case_sensitive=$6\n    local\
    \ dict_case_insensitive_keys=$7\n    local dict_case_sensitive_keys=$8\n    local\
    \ dict_case_insensitive_values=$9\n    local dict_case_sensitive_values=$10\n\
    \    local dict_case_insensitive_keys_values=$11\n    local dict_case_sensitive_keys_values=$12\n\
    \    local dict_case_insensitive_keys_values_values=$13\n    local dict_case_sensitive_keys_values_values=$14\n\
    \    local dict_case_insensitive_keys_values_values_values=$15\n    local dict_case_sensitive_keys_values_values_values=$16\n\
    \    local dict_case_insensitive_keys_values_values_values_values=$17\n    local\
    \ dict_case_sensitive_keys_values_values_values_values=$18\n    local dict_case_insensitive_keys_values_values_values_values_values=$19\n\
    \    local dict_case_sensitive_keys_values_values_values_values_values=$20\n \
    \   local dict_case_insensitive_keys_values_values_values_values_values_values=$21\n\
    \    local dict_case_sensitive_keys_values_values_values_values_values_values_values=$22\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values_values_values_values=$23\n\
    \    local dict_case_sensitive_keys_values_values_values_values_values_values_values_values_values=$24\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values_values_values_values_values_values=$25\n\
    \    local dict_case_sensitive_keys_values_values_values_values_values_values_values_values_values_values_values_values=$26\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values_values_values_values_values_values_values_values_values=$27\n\
    \    local dict_case_sensitive_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values=$28\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values=$29\n\
    \    local dict_case_sensitive_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values=$30\n\
    \    local dict_case_insensitive_keys_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values_values=$31\n\
    \    local dict_case_sensitive_keys_values_values_values_values_values_values_values_values_values_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_keys=$4\n\
    \    local dict_vals=$5\n    local dict_case_in=$6\n    local dict_case_out=$7\n\
    \    local dict_case_in_keys=$8\n    local dict_case_in_vals=$9\n    local dict_case_out_keys=$10\n\
    \    local dict_case_out_vals=$11\n    local dict_case_in_len=$12\n    local dict_case_out_len=$13\n\
    \    local dict_case_out_len_keys=$14\n    local dict_case_out_len_vals=$15\n\
    \    local dict_case_out_len_keys_vals=$16\n    local dict_case_out_len_vals_vals=$17\n\
    \    local dict_case_out_len_keys_vals_vals=$18\n    local dict_case_out_len_vals_vals_vals=$19\n\
    \    local dict_case_out_len_keys_vals_vals_vals=$20\n    local dict_case_out_len_vals_vals_vals_vals=$21\n\
    \    local dict_case_out_len_keys_vals_vals_vals_vals=$22\n    local dict_case_out_len_vals_vals_vals_vals_vals=$23\n\
    \    local dict_case_out_len_keys_vals_vals_vals_vals_vals=$24\n    local dict_case_out_len_vals_vals_vals_vals_vals_vals=$25\n\
    \    local dict_case_out_len_keys_vals_vals_vals_vals_vals=$26\n    local dict_case_out_len_vals_vals_vals_vals_vals_vals=$27\n\
    \    local dict_case_out_len_keys_vals_vals_vals_vals_vals_vals=$28\n    local\
    \ dict_case_out_len_vals_vals_vals_vals_vals_vals_vals=$29\n    local dict_case_out_len_keys_vals_vals_vals_vals_vals_vals_vals=$30\n\
    \    local dict_case_out_len_vals_vals_vals_vals_vals_vals_vals_vals=$31\n   \
    \ local dict_case_out_len_keys_vals_vals_vals_vals_vals_vals_vals_vals=$32\n \
    \   local dict_case_out_len_vals_vals_vals_vals_vals_vals_vals_vals_vals=$33\n\
    \    local dict_case_out_len_keys_vals_vals_vals_vals_vals_vals_vals_vals_vals=$34\n\
    \    local dict_case_out_len_vals_vals_vals_vals_vals_vals_vals_vals_vals_vals=$35\n\
    \    local dict_case_out_len_keys_vals_vals_vals_vals_vals_vals_vals_vals_vals_vals=$36\n\
    \    local dict_case_out_len_vals_vals_vals_vals_vals_vals_vals_vals_vals_vals_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local keys=$2\n    local upper\n    local lower\n    local\
    \ result\n    \n    lower=$(echo $keys | tr \",\" \"\\n\")\n    upper=$(echo $keys\
    \ | tr \",\" \"\\n\" | tr \" \" \"_\" | tr \" \" \"-\")\n    \n    if [ -z \"\
    $dictionary\" ]; then\n        result=false\n    else\n        result=true\n \
    \       for entry in $dictionary; do\n            key=$(echo $entry | cut -d','\
    \ -f1)\n            value=$(echo $entry | cut -d',' -f2)\n            if [ \"\
    $key\" == \"$lower\" ]; then\n                if [ \"$value\" == \"$upper\" ];\
    \ then\n                    result=false\n                    break\n        \
    \        else\n                    result=true\n                    break\n  \
    \              fi\n            else\n                if [ \"$value\" == \"$upper\"\
    \ ]; then\n                    result=false\n                    break\n     \
    \           else\n                    result=true\n                    break\n\
    \                fi\n            fi\n        done\n    fi\n    \n    echo $result\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local count\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local o\n    local p\n    local q\n \
    \   local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local lower=$2\n    local upper=$3\n    local dict=$4\n    local\
    \ alllower=$5\n    local allupper=$6\n    local count=0\n    local key\n    local\
    \ value\n    local lower\n    local upper\n    local alllower\n    local allupper\n\
    \    local key\n    local value\n    local lower\n    local upper\n    local alllower\n\
    \    local allupper\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local alllower\n    local allupper\n    local key\n    local value\n\
    \    local lower\n    local upper\n    local alllower\n    local allupper\n  \
    \  local key\n    local value\n    local lower\n    local upper\n    local alllower\n\
    \    local allupper\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local alllower\n    local allupper\n    local key\n    local value\n\
    \    local lower\n    local upper\n    local alllower\n    local allupper\n  \
    \  local key\n    local value\n    local lower\n    local upper\n    local alllower\n\
    \    local allupper\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local alllower\n    local allupper\n    local key\n    local value\n\
    \    local lower\n    local upper\n    local alllower\n    local allupper\n  \
    \  local key\n    local value\n    local lower\n    local upper\n    local alllower\n\
    \    local allupper\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local alllower\n    local allupper\n    local key\n    local value\n\
    \    local lower\n    local upper\n    local alllower\n    local allupper\n  \
    \  local key\n    local value\n    local lower\n    local upper\n    local alllower\n\
    \    local allupper\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local alllower\n    local allupper\n    local key\n    local value\n\
    \    local lower\n    local upper\n    local alllower\n    local allupper\n  \
    \  local key\n    local value\n    local lower\n    local upper\n    local alllower\n\
    \    local allupper\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local alllower\n    local allupper\n    \n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_lower=$5\n    local dict_upper=$6\n    local dict_empty=$7\n \
    \   local dict_keys=$8\n    local dict_values=$9\n    local dict_cases=$10\n \
    \   local dict_lowers=$11\n    local dict_uppers=$12\n    local dict_emptys=$13\n\
    \    local dict_keysss=$14\n    local dict_valuess=$15\n    local dict_casess=$16\n\
    \    local dict_lowersss=$17\n    local dict_uppersss=$18\n    local dict_emptysss=$19\n\
    \    local dict_keysssss=$20\n    local dict_valuessss=$21\n    local dict_casessss=$22\n\
    \    local dict_lowersssss=$23\n    local dict_uppersssss=$24\n    local dict_emptysssss=$25\n\
    \    local dict_keysssssss=$26\n    local dict_valuessssss=$27\n    local dict_casessssss=$28\n\
    \    local dict_lowersssssss=$29\n    local dict_uppersssssss=$30\n    local dict_emptysssssss=$31\n\
    \    local dict_keysssssssss=$32\n    local dict_valuessssssss=$33\n    local\
    \ dict_casessssssss=$34\n    local dict_lowersssssssss=$35\n    local dict_uppersssssssss=$36\n\
    \    local dict_emptysssssssss=$37\n    local dict_keysssssssssss=$38\n    local\
    \ dict_valuessssssssss=$39\n    local dict_casessssssssss=$40\n    local dict_lowersssssssssss=$41\n\
    \    local dict_uppersssssssssss=$42\n    local dict_emptysssssssssss=$43\n  \
    \  local dict_keysssssssssssss=$44\n    local dict_valuessssssssssss=$45\n   \
    \ local dict_casessssssssssss=$46\n    local dict_lowersssssssssssss=$47\n   \
    \ local dict_uppersssssssssssss=$48\n    local dict_emptysssssssssssss=$49\n \
    \   local dict_keysssssssssssssss=$50\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local result\n\n    #\
    \ Check for empty dictionary\n    if [ -z \"$dictionary\" ]; then\n        echo\
    \ \"check_dict_case: dictionary is empty\"\n        exit 0\n    fi\n\n    # Check\
    \ for valid input\n    if [ ! -f \"$dictionary\" ]; then\n        echo \"check_dict_case:\
    \ dictionary file not found\"\n        exit 0\n    fi\n\n    # Check for valid\
    \ format\n    if ! [ -f \"$dictionary\" ] || ! [ -r \"$dictionary\" ]; then\n\
    \        echo \"check_dict_case: dictionary file is not a readable file\"\n  \
    \      exit 0\n    fi\n\n    # Check for valid format\n    if ! [ -f \"$dictionary\"\
    \ ] || ! [ -r \"$dictionary\" ]; then\n        echo \"check_dict_case: dictionary\
    \ file is not a readable file\"\n        exit 0\n    fi\n\n    # Check for valid\
    \ format\n    if ! [ -f \"$dictionary\" ] || ! [ -r \"$dictionary\" ]; then\n\
    \        echo \"check_dict_case: dictionary file is not a readable file\"\n  \
    \      exit 0\n    fi\n\n    # Check for valid format\n    if ! [ -f \"$dictionary\"\
    \ ] || ! [ -r \"$dictionary\" ]; then\n        echo \"check_dict_case: dictionary\
    \ file is not a readable file\"\n        exit 0\n    fi\n\n    # Check for valid\
    \ format\n    if ! [ -f \"$dictionary\" ] || ! [ -r \"$dictionary\" ]; then\n\
    \        echo \"check_dict_case: dictionary file is not a readable file\"\n  \
    \      exit 0\n    fi\n\n    # Check for valid format\n    if ! [ -f \"$dictionary\"\
    \ ] || ! [ -r \"$dictionary\" ]; then\n        echo \"check_dict_case: dictionary\
    \ file is not a readable file\"\n        exit 0\n    fi\n\n    # Check for valid\
    \ format\n    if ! [ -f \"$dictionary\" ] || ! [ -r \"$dictionary\" ]; then\n\
    \        echo \"check_dict_case: dictionary file is not a readable file\"\n  \
    \      exit 0\n    fi\n\n    # Check for valid format\n    if ! [ -f \"$dictionary\"\
    \ ] || ! [ -r \"$dictionary\" ]; then\n        echo \"check_dict_case: dictionary\
    \ file is not a readable file\"\n        exit 0\n    fi\n\n    # Check for valid\
    \ format\n    if ! [ -f \"$dictionary\" ] || ! [ -r \"$dictionary\" ]; then\n\
    \        echo \"check_dict_case: dictionary file is not a readable file\"\n  \
    \      exit 0\n    fi\n\n    # Check for valid format\n    if ! [ -f \"$dictionary\"\
    \ ] || ! [ -r \"$dictionary\" ]; then\n        echo \"check_dict_case: dictionary\
    \ file is not a readable file\"\n        exit 0\n    fi\n\n    # Check for valid\
    \ format\n    if ! [ -f \"$dictionary\" ] || ! [ -r \"$dictionary\" ]; then\n\
    \        \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpondz32j_.sh: line 89: syntax error near unexpected token `}''

    /tmp/tmpondz32j_.sh: line 89: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_inverted=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_inverted=$7\n\
    \    local dict_case_upper_inverted=$8\n    local dict_case_lower_inverted_comma=$9\n\
    \    local dict_case_upper_inverted_comma=$10\n    local dict_case_lower_inverted_comma_inverted=$11\n\
    \    local dict_case_upper_inverted_comma_inverted=$12\n    local dict_case_lower_inverted_comma_inverted_inverted=$13\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted=$14\n    local dict_case_lower_inverted_comma_inverted_inverted_inverted=$15\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_inverted=$16\n   \
    \ local dict_case_lower_inverted_comma_inverted_inverted_inverted_inverted=$17\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_inverted_inverted=$18\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_inverted_inverted_inverted=$19\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_inverted_inverted_inverted=$20\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted=$21\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted=$22\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$23\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$24\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$25\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$26\n\
    \    local dict_case_lower_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$27\n\
    \    local dict_case_upper_inverted_comma_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$28\n\
    \    local dict_case_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower_case_flag\n \
    \   local upper_case_flag\n    local dict_length\n    local key_length\n    local\
    \ value_length\n    local key_found\n    local value_found\n    local key_not_found\n\
    \    local value_not_found\n    local key_not_in_lower_case_flag\n    local value_not_in_lower_case_flag\n\
    \    local key_not_in_upper_case_flag\n    local value_not_in_upper_case_flag\n\
    \    local key_in_upper_case_flag\n    local value_in_upper_case_flag\n    local\
    \ key_in_lower_case_flag\n    local value_in_lower_case_flag\n    local key_in_upper_case_flag\n\
    \    local value_in_upper_case_flag\n    local key_in_lower_case_flag\n    local\
    \ value_in_lower_case_flag\n    local key_in_upper_case_flag\n    local value_in_upper_case_flag\n\
    \    local key_in_lower_case_flag\n    local value_in_lower_case_flag\n    local\
    \ key_in_upper_case_flag\n    local value_in_upper_case_flag\n    local key_in_lower_case_flag\n\
    \    local value_in_lower_case_flag\n    local key_in_upper_case_flag\n    local\
    \ value_in_upper_case_flag\n    local key_in_lower_case_flag\n    local value_in_lower_case_flag\n\
    \    local key_in_upper_case_flag\n    local value_in_upper_case_flag\n    local\
    \ key_in_lower_case_flag\n    local value_in_lower_case_flag\n    local key_in_upper_case_flag\n\
    \    local value_in_upper_case_flag\n    local key_in_lower_case_flag\n    local\
    \ value_in_lower_case_flag\n    local key_in_upper_case_flag\n    local value_in_upper_case_flag\n\
    \    local key_in_lower_case_flag\n    local value_in_lower_case_flag\n    local\
    \ key_in_upper_case_flag\n    local value_in_upper_case_flag\n    local key_in_lower_case_flag\n\
    \    local value_in_lower_case_flag\n    local key_in_upper_case_flag\n    local\
    \ value_in_upper_case_flag\n    local key_in_lower_case_flag\n    local value_in_lower_case_flag\n\
    \    local key_in_upper_case_flag\n    local value_in_upper_case_flag\n    local\
    \ key_in_lower_case_flag\n    local value_in_lower_case_flag\n    local key_in_upper_case_flag\n\
    \    local value_in_upper_case_flag\n    local key_in_lower_case_flag\n    local\
    \ value_in_lower_case_flag\n    local key_in_upper_case_flag\n    local value_in_upper_case_flag\n\
    \    local key_in_lower_case_flag\n    local value_in_lower_\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_not_empty=$7\n\
    \    local dict_not_empty_keys=$8\n    local dict_not_empty_values=$9\n    local\
    \ dict_not_empty_lines=$10\n    local dict_not_empty_lines_keys=$11\n    local\
    \ dict_not_empty_lines_values=$12\n    local dict_not_empty_lines_lines_keys=$13\n\
    \    local dict_not_empty_lines_lines_values=$14\n    local dict_not_empty_lines_lines_lines_keys=$15\n\
    \    local dict_not_empty_lines_lines_lines_values=$16\n    local dict_not_empty_lines_lines_lines_lines_keys=$17\n\
    \    local dict_not_empty_lines_lines_lines_lines_values=$18\n    local dict_not_empty_lines_lines_lines_lines_lines_keys=$19\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_values=$20\n    local\
    \ dict_not_empty_lines_lines_lines_lines_lines_lines_keys=$21\n    local dict_not_empty_lines_lines_lines_lines_lines_lines_values=$22\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_keys=$23\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_values=$24\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_keys=$25\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_values=$26\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$27\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$28\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$29\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$30\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$31\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$32\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$33\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=$34\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_keys=$35\n\
    \    local dict_not_empty_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_lines_values=\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local key1\n  local value1\n  local key2\n  local value2\n \
    \ local key3\n  local value3\n  local key4\n  local value4\n  local key5\n  local\
    \ value5\n  local key6\n  local value6\n  local key7\n  local value7\n  local\
    \ key8\n  local value8\n  local key9\n  local value9\n  local key10\n  local value10\n\
    \  local key11\n  local value11\n  local key12\n  local value12\n  local key13\n\
    \  local value13\n  local key14\n  local value14\n  local key15\n  local value15\n\
    \  local key16\n  local value16\n  local key17\n  local value17\n  local key18\n\
    \  local value18\n  local key19\n  local value19\n  local key20\n  local value20\n\
    \  local key21\n  local value21\n  local key22\n  local value22\n  local key23\n\
    \  local value23\n  local key24\n  local value24\n  local key25\n  local value25\n\
    \  local key26\n  local value26\n  local key27\n  local value27\n  local key28\n\
    \  local value28\n  local key29\n  local value29\n  local key30\n  local value30\n\
    \  local key31\n  local value31\n  local key32\n  local value32\n  local key33\n\
    \  local value33\n  local key34\n  local value34\n  local key35\n  local value35\n\
    \  local key36\n  local value36\n  local key37\n  local value37\n  local key38\n\
    \  local value38\n  local key39\n  local value39\n  local key40\n  local value40\n\
    \  local key41\n  local value41\n  local key42\n  local value42\n  local key43\n\
    \  local value43\n  local key44\n  local value44\n  local key45\n  local value45\n\
    \  local key46\n  local value46\n  local key47\n  local value47\n  local key48\n\
    \  local value48\n  local key49\n  local value49\n  local key50\n  local value50\n\
    \  local key51\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local key1\n    local value1\n\
    \    local key2\n    local value2\n    local key3\n    local value3\n    local\
    \ key4\n    local value4\n    local key5\n    local value5\n    local key6\n \
    \   local value6\n    local key7\n    local value7\n    local key8\n    local\
    \ value8\n    local key9\n    local value9\n    local key10\n    local value10\n\
    \    local key11\n    local value11\n    local key12\n    local value12\n    local\
    \ key13\n    local value13\n    local key14\n    local value14\n    local key15\n\
    \    local value15\n    local key16\n    local value16\n    local key17\n    local\
    \ value17\n    local key18\n    local value18\n    local key19\n    local value19\n\
    \    local key20\n    local value20\n    local key21\n    local value21\n    local\
    \ key22\n    local value22\n    local key23\n    local value23\n    local key24\n\
    \    local value24\n    local key25\n    local value25\n    local key26\n    local\
    \ value26\n    local key27\n    local value27\n    local key28\n    local value28\n\
    \    local key29\n    local value29\n    local key30\n    local value30\n    local\
    \ key31\n    local value31\n    local key32\n    local value32\n    local key33\n\
    \    local value33\n    local key34\n    local value34\n    local key35\n    local\
    \ value35\n    local key36\n    local value36\n    local key37\n    local value37\n\
    \    local key38\n    local value38\n    local key39\n    local value39\n    local\
    \ key40\n    local value40\n    local key41\n    local value41\n    local key42\n\
    \    local value42\n    local key43\n    local value43\n    local key44\n    local\
    \ value44\n    local key45\n    local value45\n    local key46\n    local value46\n\
    \    local key47\n    local value47\n    local key48\n    local value48\n    local\
    \ key49\n    local value49\n    local key50\n    local value\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_case=$2\n    local dict_file=$3\n    local dict_case_file=$4\n\
    \    local dict_case_keys=$5\n    local dict_case_values=$6\n    local dict_case_lower=$7\n\
    \    local dict_case_upper=$8\n    local dict_case_count=$9\n    local dict_case_count_lower=$10\n\
    \    local dict_case_count_upper=$11\n    local dict_case_count_both=$12\n   \
    \ local dict_case_count_both_lower=$13\n    local dict_case_count_both_upper=$14\n\
    \    local dict_case_count_both_both=$15\n    local dict_case_count_both_both_lower=$16\n\
    \    local dict_case_count_both_both_upper=$17\n    local dict_case_count_both_both_both=$18\n\
    \    local dict_case_count_both_both_both_lower=$19\n    local dict_case_count_both_both_both_upper=$20\n\
    \    local dict_case_count_both_both_both_both=$21\n    local dict_case_count_both_both_both_both_lower=$22\n\
    \    local dict_case_count_both_both_both_both_upper=$23\n    local dict_case_count_both_both_both_both_both=$24\n\
    \    local dict_case_count_both_both_both_both_both_lower=$25\n    local dict_case_count_both_both_both_both_both_upper=$26\n\
    \    local dict_case_count_both_both_both_both_both_both=$27\n    local dict_case_count_both_both_both_both_both_both_lower=$28\n\
    \    local dict_case_count_both_both_both_both_both_both_upper=$29\n    local\
    \ dict_case_count_both_both_both_both_both_both_both_lower=$30\n    local dict_case_count_both_both_both_both_both_both_both_upper=$31\n\
    \    local dict_case_count_both_both_both_both_both_both_both_both_lower=$32\n\
    \    local dict_case_count_both_both_both_both_both_both_both_both_upper=$33\n\
    \    local dict_case_count_both_both_both_both_both_both_both_both_both_lower=$34\n\
    \    local dict_case_count_both_both_both_both_both_both_both_both_both_upper=$\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dict=$1\n\
    \  local key\n  local value\n  local lower\n  local upper\n  local result\n\n\
    \  result=true\n  lower=false\n  upper=false\n  for key in \"${!dict}\"; do\n\
    \    value=${dict[$key]}\n    if [[ $value =~ ^[[:lower:]]+$ ]]; then\n      lower=true\n\
    \    elif [[ $value =~ ^[[:upper:]]+$ ]]; then\n      upper=true\n    else\n \
    \     result=false\n    fi\n  done\n  if (( $lower && $upper )); then\n    return\
    \ 0\n  else\n    return $result\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaichq16z.sh: line 19: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n  local valueUpper\n  local keyLower\n  local\
    \ valueLower\n  local keyUpper\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for k\
    \ in \"${!dict[@]}\"; do\n        key=\"${k}\"\n        value=\"${dict[k]}\"\n\
    \        if [[ ${key} == *\"-\"* ]]; then\n            lower=true\n          \
    \  key=${key%-*}\n        fi\n        if [[ ${key} == *\"-\"* ]]; then\n     \
    \       upper=true\n            key=${key#-*}\n        fi\n        if [[ ${value}\
    \ == *\"-\"* ]]; then\n            lower=true\n            value=${value%-*}\n\
    \        fi\n        if [[ ${value} == *\"-\"* ]]; then\n            upper=true\n\
    \            value=${value#-*}\n        fi\n        if [[ ${lower} == true &&\
    \ ${upper} == true ]]; then\n            found=true\n        fi\n    done\n  \
    \  if [[ ${found} == false ]]; then\n        echo \"ERROR: dictionary keys must\
    \ be strings in lower case or upper case\"\n        exit 1\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_empty_value=$7\n\
    \    local dict_empty_key=$8\n    local dict_empty_key_value=$9\n    local dict_empty_key_value_lower=$10\n\
    \    local dict_empty_key_value_upper=$11\n    local dict_empty_key_value_empty=$12\n\
    \    local dict_empty_key_value_empty_value=$13\n    local dict_empty_key_value_empty_key=$14\n\
    \    local dict_empty_key_value_empty_key_value=$15\n    local dict_empty_key_value_empty_key_value_lower=$16\n\
    \    local dict_empty_key_value_empty_key_value_upper=$17\n    local dict_empty_key_value_empty_key_value_empty=$18\n\
    \    local dict_empty_key_value_empty_key_value_empty_value=$19\n    local dict_empty_key_value_empty_key_value_empty_key=$20\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value=$21\n    local\
    \ dict_empty_key_value_empty_key_value_empty_key_value_lower=$22\n    local dict_empty_key_value_empty_key_value_empty_key_value_upper=$23\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty=$24\n  \
    \  local dict_empty_key_value_empty_key_value_empty_key_value_empty_value=$25\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key=$26\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value=$27\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_lower=$28\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_upper=$29\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty=$30\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_value=$31\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key=$32\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value=$33\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value_lower=$34\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value_upper=$35\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty_key_value_empty=$36\n\
    \    local dict_empty_key_value_empty_key_value_empty_key_value_empty_key_value_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower_case_key\n  \
    \  local upper_case_key\n    local lower_case_value\n    local upper_case_value\n\
    \    local keys_in_lower\n    local keys_in_upper\n    local values_in_lower\n\
    \    local values_in_upper\n    local key_in_lower\n    local key_in_upper\n \
    \   local value_in_lower\n    local value_in_upper\n    local key_in_lower_count\n\
    \    local key_in_upper_count\n    local value_in_lower_count\n    local value_in_upper_count\n\
    \    local key_in_lower_count_total\n    local key_in_upper_count_total\n    local\
    \ value_in_lower_count_total\n    local value_in_upper_count_total\n    local\
    \ key_in_lower_count_total_total\n    local key_in_upper_count_total_total\n \
    \   local value_in_lower_count_total_total\n    local value_in_upper_count_total_total\n\
    \    local key_in_lower_count_total_total_total\n    local key_in_upper_count_total_total_total\n\
    \    local value_in_lower_count_total_total_total\n    local value_in_upper_count_total_total_total\n\
    \    local key_in_lower_count_total_total_total_total\n    local key_in_upper_count_total_total_total_total\n\
    \    local value_in_lower_count_total_total_total_total\n    local value_in_upper_count_total_total_total_total\n\
    \    local key_in_lower_count_total_total_total_total_total\n    local key_in_upper_count_total_total_total_total_total\n\
    \    local value_in_lower_count_total_total_total_total_total\n    local value_in_upper_count_total_total_total_total_total\n\
    \    local key_in_lower_count_total_total_total_total_total_total\n    local key_in_upper_count_total_total_total_total_total_total\n\
    \    local value_in_lower_count_total_total_total_total_total_total\n    local\
    \ value_in_upper_count_total_total_total_total_total_total\n    local key_in_lower_count_total_total_total_total_total_total_total\n\
    \    local key_in_upper_count_total_total_total_total_total_total_total\n    local\
    \ value_in_lower_count_total_total_total_total_total_total_total\n    local value_in_upper_count_total_total_total_total_total_total_total\n\
    \    local key_in_lower_count_total_total_total_total_total_total_total_total\n\
    \    local key_in_upper_count_total_total_total_total_total_total_total_total\n\
    \    local value_in_lower_count_total_total_total_total_total_total_total_total\n\
    \    local value_in_upper_count_total_total_total_total_total_total_total_total\n\
    \    local key_in_lower_count_total_total_total_total_total_total_total_total_total\n\
    \    local key_in_upper_count_total_total_total_total_total_total_total_total_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict_case\n    local dict_lower\n    local dict_upper\n\
    \    local dict_empty\n    dict_case=$1\n    dict_lower=$(echo $dict_case | awk\
    \ -F, '{print $1}')\n    dict_upper=$(echo $dict_case | awk -F, '{print $2}')\n\
    \    dict_empty=$(echo $dict_case | awk -F, '{print $3}')\n    if [ -z \"$dict_case\"\
    \ ];then\n        echo \"$dict_case is empty\"\n        dict_empty=\"yes\"\n \
    \   fi\n    if [ -z \"$dict_empty\" ];then\n        echo \"$dict_case is empty\"\
    \n        dict_empty=\"yes\"\n    fi\n    if [ \"$dict_empty\" == \"yes\" ];then\n\
    \        echo \"$dict_case is empty\"\n        dict_empty=\"yes\"\n    fi\n  \
    \  if [ \"$dict_empty\" == \"no\" ];then\n        echo \"$dict_case is not empty\"\
    \n        dict_empty=\"no\"\n    fi\n    if [ \"$dict_empty\" == \"no\" ];then\n\
    \        echo \"$dict_case is not empty\"\n        dict_empty=\"no\"\n    fi\n\
    \    if [ \"$dict_empty\" == \"yes\" ];then\n        echo \"$dict_case is not\
    \ empty\"\n        dict_empty=\"no\"\n    fi\n    if [ \"$dict_empty\" == \"no\"\
    \ ];then\n        echo \"$dict_case is not empty\"\n        dict_empty=\"no\"\n\
    \    fi\n    if [ \"$dict_empty\" == \"no\" ];then\n        echo \"$dict_case\
    \ is not empty\"\n        dict_empty=\"no\"\n    fi\n    if [ \"$dict_empty\"\
    \ == \"no\" ];then\n        echo \"$dict_case is not empty\"\n        dict_empty=\"\
    no\"\n    fi\n    if [ \"$dict_empty\" == \"no\" ];then\n        echo \"$dict_case\
    \ is not empty\"\n        dict_empty=\"no\"\n    fi\n    if [ \"$dict_empty\"\
    \ == \"no\" ];then\n        echo \"$dict_case is not empty\"\n        dict_empty=\"\
    no\"\n    fi\n    if [ \"$dict_empty\" == \"no\" ];then\n        echo \"$dict_case\
    \ is not empty\"\n        dict_empty=\"no\"\n    fi\n    if [ \"$dict_empty\"\
    \ == \"no\" ];then\n        echo \"$dict_case is not empty\"\n        dict_empty=\"\
    no\"\n    fi\n    if [ \"$dict_empty\" == \"no\" ];then\n        echo \"$dict_case\
    \ is not empty\"\n        dict_empty=\"no\"\n    fi\n    if [ \"$dict_empty\"\
    \ == \"no\" ];then\n        echo \"$dict_case is not empty\"\n        \n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv5yf5eu0.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpv5yf5eu0.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local key2\n  local value2\n  local key3\n  local value3\n \
    \ local key4\n  local value4\n  local key5\n  local value5\n  local key6\n  local\
    \ value6\n  local key7\n  local value7\n  local key8\n  local value8\n  local\
    \ key9\n  local value9\n  local key10\n  local value10\n  local key11\n  local\
    \ value11\n  local key12\n  local value12\n  local key13\n  local value13\n  local\
    \ key14\n  local value14\n  local key15\n  local value15\n  local key16\n  local\
    \ value16\n  local key17\n  local value17\n  local key18\n  local value18\n  local\
    \ key19\n  local value19\n  local key20\n  local value20\n  local key21\n  local\
    \ value21\n  local key22\n  local value22\n  local key23\n  local value23\n  local\
    \ key24\n  local value24\n  local key25\n  local value25\n  local key26\n  local\
    \ value26\n  local key27\n  local value27\n  local key28\n  local value28\n  local\
    \ key29\n  local value29\n  local key30\n  local value30\n  local key31\n  local\
    \ value31\n  local key32\n  local value32\n  local key33\n  local value33\n  local\
    \ key34\n  local value34\n  local key35\n  local value35\n  local key36\n  local\
    \ value36\n  local key37\n  local value37\n  local key38\n  local value38\n  local\
    \ key39\n  local value39\n  local key40\n  local value40\n  local key41\n  local\
    \ value41\n  local key42\n  local value42\n  local key43\n  local value43\n  local\
    \ key44\n  local value44\n  local key45\n  local value45\n  local key46\n  local\
    \ value46\n  local key47\n  local value47\n  local key48\n  local value48\n  local\
    \ key49\n  local value49\n  local key50\n  local value50\n  local key51\n  local\
    \ value51\n  local key52\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local count\n\n    lower=0\n    upper=0\n    dict=$1\n    count=0\n    for key\
    \ in ${!dict[@]}; do\n        value=${dict[$key]}\n        if [[ $key =~ ^[a-z]$\
    \ ]]; then\n            lower=$((lower + 1))\n        elif [[ $key =~ ^[A-Z]$\
    \ ]]; then\n            upper=$((upper + 1))\n        else\n            echo \"\
    $key is not a string in lower or upper case\"\n            return 1\n        fi\n\
    \    done\n    if [[ $lower -eq 0 || $upper -eq 0 ]]; then\n        echo \"$dict\
    \ is empty\"\n        return 1\n    fi\n    if [[ $lower -eq $upper ]]; then\n\
    \        echo \"$lower == $upper\"\n        return 0\n    fi\n    echo \"$lower\
    \ != $upper\"\n    return 1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local count\n    local keycount\n    local keycount2\n \
    \   local keycount3\n    local keycount4\n    local keycount5\n    local keycount6\n\
    \    local keycount7\n    local keycount8\n    local keycount9\n    local keycount10\n\
    \    local keycount11\n    local keycount12\n    local keycount13\n    local keycount14\n\
    \    local keycount15\n    local keycount16\n    local keycount17\n    local keycount18\n\
    \    local keycount19\n    local keycount20\n    local keycount21\n    local keycount22\n\
    \    local keycount23\n    local keycount24\n    local keycount25\n    local keycount26\n\
    \    local keycount27\n    local keycount28\n    local keycount29\n    local keycount30\n\
    \    local keycount31\n    local keycount32\n    local keycount33\n    local keycount34\n\
    \    local keycount35\n    local keycount36\n    local keycount37\n    local keycount38\n\
    \    local keycount39\n    local keycount40\n    local keycount41\n    local keycount42\n\
    \    local keycount43\n    local keycount44\n    local keycount45\n    local keycount46\n\
    \    local keycount47\n    local keycount48\n    local keycount49\n    local keycount50\n\
    \    local keycount51\n    local keycount52\n    local keycount53\n    local keycount54\n\
    \    local keycount55\n    local keycount56\n    local keycount57\n    local keycount58\n\
    \    local keycount59\n    local keycount60\n    local keycount61\n    local keycount62\n\
    \    local keycount63\n    local keycount64\n    local keycount65\n    local keycount66\n\
    \    local keycount67\n    local keycount68\n    local keycount69\n    local keycount70\n\
    \    local keycount71\n    local keycount72\n    local keycount73\n    local keycount74\n\
    \    local keycount75\n    local keycount76\n    local keycount77\n    local keycount78\n\
    \    local keycount79\n    local keycount80\n    local key\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for key\
    \ in \"${!dict}\"; do\n        value=${dict[$key]}\n        if [[ \"$key\" =~\
    \ ^[a-z]$ ]]; then\n            lower=true\n        elif [[ \"$key\" =~ ^[A-Z]$\
    \ ]]; then\n            upper=true\n        fi\n        if [[ \"$lower\" == \"\
    true\" && \"$upper\" == \"true\" ]]; then\n            found=true\n        fi\n\
    \    done\n    if [[ \"$found\" == \"false\" ]]; then\n        echo \"$dict is\
    \ all lower case\"\n    else\n        echo \"$dict is all upper case\"\n    fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcgtg9o7o.sh: line 18: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower_case_key\n\
    \    local upper_case_key\n    local lower_case_value\n    local upper_case_value\n\
    \    local result\n\n    if [ -z \"$dictionary\" ]\n    then\n        return 0\n\
    \    fi\n\n    for key in \"${!dictionary[@]}\"\n    do\n        value=${dictionary[$key]}\n\
    \        lower_case_key=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n      \
    \  upper_case_key=$(echo \"$key\" | tr '[:lower:]' '[:upper:]')\n        lower_case_value=$(echo\
    \ \"$value\" | tr '[:upper:]' '[:lower:]')\n        upper_case_value=$(echo \"\
    $value\" | tr '[:lower:]' '[:upper:]')\n\n        if [ \"$lower_case_key\" !=\
    \ \"$key\" ] || [ \"$upper_case_key\" != \"$key\" ]\n        then\n          \
    \  return 0\n        fi\n\n        if [ \"$lower_case_value\" != \"$value\" ]\
    \ || [ \"$upper_case_value\" != \"$value\" ]\n        then\n            return\
    \ 0\n        fi\n    done\n\n    return 1\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local found\n  \
    \  local count\n\n    lower=0\n    upper=0\n    found=0\n    count=0\n\n    IFS=,\n\
    \    while read key value; do\n        if [[ \"$key\" =~ ^[[:lower:]]+$ ]]; then\n\
    \            lower=$((lower + 1))\n        elif [[ \"$key\" =~ ^[[:upper:]]+$\
    \ ]]; then\n            upper=$((upper + 1))\n        else\n            found=$((found\
    \ + 1))\n        fi\n        count=$((count + 1))\n    done < \"$1\"\n\n    if\
    \ [[ $found -eq 0 ]]; then\n        return 0\n    elif [[ $lower -eq $upper ]];\
    \ then\n        return 1\n    else\n        return 0\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp82ekjh_3.sh: line 8: p,pineapple\nb,banana: No such file or directory

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_lower=$5\n    local dict_upper=$6\n    local dict_empty=$7\n \
    \   local dict_not_empty=$8\n    local dict_not_string=$9\n    local dict_not_int=$10\n\
    \    local dict_not_float=$11\n    local dict_not_bool=$12\n    local dict_not_list=$13\n\
    \    local dict_not_dict=$14\n    local dict_not_empty_list=$15\n    local dict_not_empty_dict=$16\n\
    \    local dict_not_empty_int_list=$17\n    local dict_not_empty_int_dict=$18\n\
    \    local dict_not_empty_float_list=$19\n    local dict_not_empty_float_dict=$20\n\
    \    local dict_not_empty_bool_list=$21\n    local dict_not_empty_bool_dict=$22\n\
    \    local dict_not_empty_list_int=$23\n    local dict_not_empty_list_float=$24\n\
    \    local dict_not_empty_list_bool=$25\n    local dict_not_empty_dict_int=$26\n\
    \    local dict_not_empty_dict_float=$27\n    local dict_not_empty_dict_bool=$28\n\
    \    local dict_not_empty_int_list_int=$29\n    local dict_not_empty_int_list_float=$30\n\
    \    local dict_not_empty_int_list_bool=$31\n    local dict_not_empty_int_dict_int=$32\n\
    \    local dict_not_empty_int_dict_float=$33\n    local dict_not_empty_int_dict_bool=$34\n\
    \    local dict_not_empty_float_list_int=$35\n    local dict_not_empty_float_list_float=$36\n\
    \    local dict_not_empty_float_list_bool=$37\n    local dict_not_empty_float_dict_int=$38\n\
    \    local dict_not_empty_float_dict_float=$39\n    local dict_not_empty_float_dict_bool=$40\n\
    \    local dict_not_empty_bool_list_int=$41\n    local dict_not_empty_bool_list_float=$42\n\
    \    local dict_not_empty_bool_list_bool=$43\n    local dict_not_empty_bool_dict_int=$44\n\
    \    local dict_not_empty_bool_dict_float=$45\n    local dict_not_empty_bool_dict_bool=$46\n\
    \    local dict_not_empty_list_int_int=$47\n    local dict_not_empty_list_int_float=$48\n\
    \    local dict_not_empty_list_int_bool=$49\n    local dict_not_empty_list_float_int=$50\n\
    \    local dict_not_empty_list_float_float=$51\n    local dict_not_empty_list_float_bool=$52\n\
    \    local dict_not_empty_list_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local keyUpper\n    local\
    \ valueUpper\n    local keyLower\n    local valueLower\n    local found\n    local\
    \ foundUpper\n    local foundLower\n    local foundKey\n    local foundValue\n\
    \    local foundKeyUpper\n    local foundValueUpper\n    local foundKeyLower\n\
    \    local foundValueLower\n    local foundKey\n    local foundValue\n    local\
    \ foundKeyUpper\n    local foundValueUpper\n    local foundKeyLower\n    local\
    \ foundValueLower\n    found=false\n    foundUpper=false\n    foundLower=false\n\
    \    foundKey=false\n    foundValue=false\n    foundKeyUpper=false\n    foundValueUpper=false\n\
    \    foundKeyLower=false\n    foundValueLower=false\n    IFS=',' read -r -a array\
    \ <<< \"$dictionary\"\n    for (( i=0; i<${#array[@]}; i++ )); do\n        key=${array[i]}\n\
    \        value=${array[i+1]}\n        keyUpper=${key:0:1}\n        valueUpper=${value:0:1}\n\
    \        keyLower=${key:0:1}\n        valueLower=${value:0:1}\n        if [ \"\
    $keyUpper\" == \"$keyLower\" ]; then\n            if [ \"$valueUpper\" == \"$valueLower\"\
    \ ]; then\n                found=true\n            else\n                found=false\n\
    \            fi\n        else\n            if [ \"$valueUpper\" == \"$valueLower\"\
    \ ]; then\n                foundUpper=true\n            else\n               \
    \ foundUpper=false\n            fi\n        fi\n    done\n    if [ \"$found\"\
    \ == \"true\" ]; then\n        found=true\n    else\n        found=false\n   \
    \ fi\n    if [ \"$foundUpper\" == \"true\" ]; then\n        foundUpper=true\n\
    \    else\n        foundUpper=false\n    fi\n    if [ \"$foundLower\" == \"true\"\
    \ ]; then\n        foundLower=true\n    else\n        foundLower=false\n    fi\n\
    \    if [ \"$foundKey\" == \"true\" ]; then\n        foundKey=true\n    else\n\
    \        foundKey=false\n    fi\n    if [ \"$foundValue\" == \"true\" ]; then\n\
    \        foundValue=true\n    else\n        foundValue=false\n    fi\n    if [\
    \ \"$foundKeyUpper\" == \"true\" ]; then\n        foundKeyUpper=true\n    else\n\
    \        foundKeyUpper=false\n    fi\n    if [ \"$foundValueUpper\" == \"true\"\
    \ ]; then\n        foundValueUpper=true\n    else\n        foundValueUpper=false\n\
    \    fi\n    if [ \"$foundKeyLower\" == \"true\" ]; then\n        foundKeyLower=\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw6rkcu94.sh: line 99: syntax error near unexpected token `}''

    /tmp/tmpw6rkcu94.sh: line 99: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for k\
    \ in \"${!dict}\"; do\n        key=\"${k}\"\n        value=\"${dict[k]}\"\n  \
    \      if [[ ${key} =~ ^[a-z]$ ]]; then\n            lower=true\n        elif\
    \ [[ ${key} =~ ^[A-Z]$ ]]; then\n            upper=true\n        fi\n        if\
    \ [[ ${value} =~ ^[a-z]$ ]]; then\n            lower=true\n        elif [[ ${value}\
    \ =~ ^[A-Z]$ ]]; then\n            upper=true\n        fi\n        if [[ ${lower}\
    \ && ${upper} ]]; then\n            found=true\n        fi\n    done\n    if [[\
    \ ${found} ]]; then\n        return ${found}\n    else\n        return ${found}\n\
    \    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7r37yeqg.sh: line 18: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    lower=0\n    upper=0\n    for (( i=0; i < ${#dict[@]};\
    \ i++ )); do\n        key=${dict[$i,0]}\n        value=${dict[$i,1]}\n       \
    \ if [[ ${key} =~ ^[[:lower:]]+$ ]]; then\n            lower=$((lower+1))\n  \
    \      elif [[ ${key} =~ ^[[:upper:]]+$ ]]; then\n            upper=$((upper+1))\n\
    \        fi\n    done\n    if [[ ${lower} -eq ${#dict[@]} && ${upper} -eq ${#dict[@]}\
    \ ]]; then\n        result=1\n    else\n        result=0\n    fi\n    echo ${result}\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_lines=$2\n    local dict_line\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_lower\n    local dict_upper\n    local dict_key\n\
    \    local dict_value\n    local dict_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local foundUpper\n    local foundLower\n    local foundKey\n\
    \    local foundValue\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpperValue\n \
    \   local foundKeyLowerValue\n    local foundValueUpperValue\n    local foundValueLowerValue\n\
    \    local foundKeyUpperValueLower\n    local foundKeyLowerValueUpper\n    local\
    \ foundValueUpperValueLower\n    local foundValueLowerValueUpper\n    local foundKeyUpperValueLowerValue\n\
    \    local foundKeyLowerValueUpperValue\n    local foundValueUpperValueLowerValue\n\
    \    local foundValueLowerValueUpperValue\n    local foundKeyUpperValueLowerValueValue\n\
    \    local foundKeyLowerValueUpperValueValue\n    local foundValueUpperValueLowerValueValue\n\
    \    local foundValueLowerValueUpperValueValue\n    local foundKeyUpperValueLowerValueValueValue\n\
    \    local foundKeyLowerValueUpperValueValueValue\n    local foundValueUpperValueLowerValueValueValue\n\
    \    local foundValueLowerValueUpperValueValueValue\n    local foundKeyUpperValueLowerValueValueValue\n\
    \    local foundKeyLowerValueUpperValueValueValue\n    local foundValueUpperValueLowerValueValueValueValue\n\
    \    local foundValueLowerValueUpperValueValueValueValue\n    local foundKeyUpperValueLowerValueValueValueValue\n\
    \    local foundKeyLowerValueUpperValueValueValueValue\n    local foundValueUpperValueLowerValueValueValueValueValue\n\
    \    local foundValueLowerValueUpperValueValueValueValueValue\n    local foundKeyUpperValueLowerValueValueValueValueValue\n\
    \    local foundKeyLowerValueUpperValueValueValueValueValue\n    local foundValueUpperValueLowerValueValueValueValueValueValue\n\
    \    local foundValueLowerValueUpperValueValueValueValueValueValue\n    local\
    \ foundKeyUpperValueLowerValueValueValueValueValueValue\n    local foundKeyLowerValueUpperValueValueValueValueValueValue\n\
    \    local foundValueUpperValueLowerValueValueValueValueValueValueValue\n    local\
    \ foundValueLowerValueUpperValueValueValueValueValueValueValue\n    local foundKeyUpperValueLowerValueValueValueValueValueValueValue\n\
    \    local foundKeyLowerValueUpperValueValueValueValueValueValueValue\n    local\
    \ foundValueUpperValueLowerValueValueValueValueValueValueValueValue\n    local\
    \ foundValueLowerValueUpperValue\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    lower=0\n    upper=0\n    for (( i=0; i < ${#dict}; i++\
    \ )); do\n        key=${dict[$i,0]}\n        value=${dict[$i,1]}\n        if [\
    \ -z \"$key\" ]; then\n            echo \"check_dict_case: dictionary is empty\"\
    \n            return 1\n        fi\n        if [ -z \"$value\" ]; then\n     \
    \       echo \"check_dict_case: dictionary is empty\"\n            return 1\n\
    \        fi\n        if [[ $key =~ ^[a-z]$ ]]; then\n            lower=$((lower+1))\n\
    \        elif [[ $key =~ ^[A-Z]$ ]]; then\n            upper=$((upper+1))\n  \
    \      fi\n    done\n    if [ $lower -eq 0 ] && [ $upper -eq 0 ]; then\n     \
    \   return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ keys=$1\n    local values=$2\n    local lower=0\n    local upper=0\n    local\
    \ len=0\n    local i=0\n    local j=0\n    local k=0\n    local val\n    local\
    \ key\n    local val1\n    local val2\n    local val3\n    local val4\n    local\
    \ val5\n    local val6\n    local val7\n    local val8\n    local val9\n    local\
    \ val10\n    local val11\n    local val12\n    local val13\n    local val14\n\
    \    local val15\n    local val16\n    local val17\n    local val18\n    local\
    \ val19\n    local val20\n    local val21\n    local val22\n    local val23\n\
    \    local val24\n    local val25\n    local val26\n    local val27\n    local\
    \ val28\n    local val29\n    local val30\n    local val31\n    local val32\n\
    \    local val33\n    local val34\n    local val35\n    local val36\n    local\
    \ val37\n    local val38\n    local val39\n    local val40\n    local val41\n\
    \    local val42\n    local val43\n    local val44\n    local val45\n    local\
    \ val46\n    local val47\n    local val48\n    local val49\n    local val50\n\
    \    local val51\n    local val52\n    local val53\n    local val54\n    local\
    \ val55\n    local val56\n    local val57\n    local val58\n    local val59\n\
    \    local val60\n    local val61\n    local val62\n    local val63\n    local\
    \ val64\n    local val65\n    local val66\n    local val67\n    local val68\n\
    \    local val69\n    local val70\n    local val71\n    local val72\n    local\
    \ val73\n    local val74\n    local val75\n    local val76\n    local val77\n\
    \    local val78\n    local val79\n    local val80\n    local val81\n    local\
    \ val82\n    local val83\n    local val84\n    local val85\n    local val86\n\
    \    local val87\n    local val88\n    local val89\n    local val90\n    local\
    \ val91\n    local val92\n    local \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local key1\n    local value1\n    local key2\n   \
    \ local value2\n    local key3\n    local value3\n    local key4\n    local value4\n\
    \    local key5\n    local value5\n    local key6\n    local value6\n    local\
    \ key7\n    local value7\n    local key8\n    local value8\n    local key9\n \
    \   local value9\n    local key10\n    local value10\n    local key11\n    local\
    \ value11\n    local key12\n    local value12\n    local key13\n    local value13\n\
    \    local key14\n    local value14\n    local key15\n    local value15\n    local\
    \ key16\n    local value16\n    local key17\n    local value17\n    local key18\n\
    \    local value18\n    local key19\n    local value19\n    local key20\n    local\
    \ value20\n    local key21\n    local value21\n    local key22\n    local value22\n\
    \    local key23\n    local value23\n    local key24\n    local value24\n    local\
    \ key25\n    local value25\n    local key26\n    local value26\n    local key27\n\
    \    local value27\n    local key28\n    local value28\n    local key29\n    local\
    \ value29\n    local key30\n    local value30\n    local key31\n    local value31\n\
    \    local key32\n    local value32\n    local key33\n    local value33\n    local\
    \ key34\n    local value34\n    local key35\n    local value35\n    local key36\n\
    \    local value36\n    local key37\n    local value37\n    local key38\n    local\
    \ value38\n    local key39\n    local value39\n    local key40\n    local value40\n\
    \    local key41\n    local value41\n    local key42\n    local value42\n    local\
    \ key43\n    local value43\n    local key44\n    local value44\n    local key45\n\
    \    local value45\n    local key46\n    local value46\n    local key47\n    local\
    \ value47\n    local key48\n    local value48\n    local key49\n    local value49\n\
    \    local key50\n    local value50\n    local key51\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local keyUpper\n    local\
    \ valueUpper\n    local keyLower\n    local valueLower\n    local found\n    local\
    \ keyCount\n    local valueCount\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local valueCountUpper\n    local keyCountLower\n    local valueCountLower\n\
    \    local keyCountUpper\n    local valueCountUpper\n    local keyCountLower\n\
    \    local valueCountLower\n    local keyCountUpper\n    local valueCountUpper\n\
    \    local keyCountLower\n    local valueCountLower\n    local keyCountUpper\n\
    \    local \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local found\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_case_insensitive=$5\n    local dict_case_sensitive=$6\n    local\
    \ dict_case_sensitive_insensitive=$7\n    local dict_case_sensitive_insensitive_keys=$8\n\
    \    local dict_case_sensitive_keys=$9\n    local dict_case_sensitive_values=$10\n\
    \    local dict_case_sensitive_values_key=$11\n    local dict_case_sensitive_values_value=$12\n\
    \    local dict_case_sensitive_values_key_value=$13\n    local dict_case_sensitive_values_key_value_case=$14\n\
    \    local dict_case_sensitive_values_key_value_case_lower=$15\n    local dict_case_sensitive_values_key_value_case_upper=$16\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive=$17\n \
    \   local dict_case_sensitive_values_key_value_case_upper_insensitive=$18\n  \
    \  local dict_case_sensitive_values_key_value_case_lower_insensitive_keys=$19\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_keys=$20\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive_values=$21\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_values=$22\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive_values_key=$23\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_values_key=$24\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive_values_value=$25\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_values_value=$26\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive_values_key_value=$27\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_values_key_value=$28\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive_values_key_value_case=$29\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_values_key_value_case=$30\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive_values_key_value_case_lower=$31\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_values_key_value_case_upper=$32\n\
    \    local dict_case_sensitive_values_key_value_case_lower_insensitive_values_key_value_case_upper_insensitive=$33\n\
    \    local dict_case_sensitive_values_key_value_case_upper_insensitive_values_key_value_case_lower_insensitive\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local key1\n    local value1\n    local key2\n   \
    \ local value2\n    local key3\n    local value3\n    local key4\n    local value4\n\
    \    local key5\n    local value5\n    local key6\n    local value6\n    local\
    \ key7\n    local value7\n    local key8\n    local value8\n    local key9\n \
    \   local value9\n    local key10\n    local value10\n    local key11\n    local\
    \ value11\n    local key12\n    local value12\n    local key13\n    local value13\n\
    \    local key14\n    local value14\n    local key15\n    local value15\n    local\
    \ key16\n    local value16\n    local key17\n    local value17\n    local key18\n\
    \    local value18\n    local key19\n    local value19\n    local key20\n    local\
    \ value20\n    local key21\n    local value21\n    local key22\n    local value22\n\
    \    local key23\n    local value23\n    local key24\n    local value24\n    local\
    \ key25\n    local value25\n    local key26\n    local value26\n    local key27\n\
    \    local value27\n    local key28\n    local value28\n    local key29\n    local\
    \ value29\n    local key30\n    local value30\n    local key31\n    local value31\n\
    \    local key32\n    local value32\n    local key33\n    local value33\n    local\
    \ key34\n    local value34\n    local key35\n    local value35\n    local key36\n\
    \    local value36\n    local key37\n    local value37\n    local key38\n    local\
    \ value38\n    local key39\n    local value39\n    local key40\n    local value40\n\
    \    local key41\n    local value41\n    local key42\n    local value42\n    local\
    \ key43\n    local value43\n    local key44\n    local value44\n    local key45\n\
    \    local value45\n    local key46\n    local value46\n    local key47\n    local\
    \ value47\n    local key48\n    local value48\n    local key49\n    local value49\n\
    \    local key50\n    local value50\n    local key51\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local keylen\n    local valuelen\n    local keystring\n\
    \    local valuestring\n    local keystringlen\n    local valuestringlen\n   \
    \ local keystringlen\n    local valuestringlen\n    local keystringlen\n    local\
    \ valuestringlen\n    local keystringlen\n    local valuestringlen\n    local\
    \ keystringlen\n    local valuestringlen\n    local keystringlen\n    local valuestringlen\n\
    \    local keystringlen\n    local valuestringlen\n    local keystringlen\n  \
    \  local valuestringlen\n    local keystringlen\n    local valuestringlen\n  \
    \  local keystringlen\n    local valuestringlen\n    local keystringlen\n    local\
    \ valuestringlen\n    local keystringlen\n    local valuestringlen\n    local\
    \ keystringlen\n    local valuestringlen\n    local keystringlen\n    local valuestringlen\n\
    \    local keystringlen\n    local valuestringlen\n    local keystringlen\n  \
    \  local valuestringlen\n    local keystringlen\n    local valuestringlen\n  \
    \  local keystringlen\n    local valuestringlen\n    local keystringlen\n    local\
    \ valuestringlen\n    local keystringlen\n    local valuestringlen\n    local\
    \ keystringlen\n    local valuestringlen\n    local keystringlen\n    local valuestringlen\n\
    \    local keystringlen\n    local valuestringlen\n    local keystringlen\n  \
    \  local valuestringlen\n    local keystringlen\n    local valuestringlen\n  \
    \  local keystringlen\n    local valuestringlen\n    local keystringlen\n    local\
    \ valuestringlen\n    local keystringlen\n    local valuestringlen\n    local\
    \ keystringlen\n    local valuestringlen\n    local keystringlen\n    local valuestringlen\n\
    \    local keystringlen\n    local valuestringlen\n    local keystringlen\n  \
    \  local valuestringlen\n    local keystringlen\n    local valuestringlen\n  \
    \  local keystringlen\n    local valuestringlen\n    local keystringlen\n    local\
    \ valuestringlen\n    local keystringlen\n    local valuestringlen\n    local\
    \ keystringlen\n    local valuestringlen\n    local keystringlen\n    local valuestringlen\n\
    \    local keystringlen\n    local valuestring\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local keyCount\n    local valueCount\n    local keyUpperCount\n\
    \    local valueUpperCount\n    local keyLowerCount\n    local valueLowerCount\n\
    \    local keyUpperValue\n    local valueUpperValue\n    local keyLowerValue\n\
    \    local valueLowerValue\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyLowerValueCount\n    local valueLowerValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyLowerValueCount\n    local valueLowerValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyLowerValueCount\n\
    \    local valueLowerValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyLowerValueCount\n    local valueLowerValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyLowerValueCount\n    local valueLowerValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyLowerValueCount\n\
    \    local valueLowerValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyLowerValueCount\n    local valueLowerValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyLowerValueCount\n    local valueLowerValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyLowerValueCount\n\
    \    local valueLowerValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyLowerValueCount\n    local valueLowerValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyLowerValueCount\n    local valueLowerValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyLowerValueCount\n\
    \    local valueLowerValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyLowerValueCount\n    local valueLowerValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyLowerValueCount\n    local valueLowerValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyLowerValueCount\n\
    \    local valueLowerValueCount\n    local keyUpperValueCount\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_case_lower=$4\n\
    \    local dict_case_upper=$5\n    local dict_case_lower_in=$6\n    local dict_case_upper_in=$7\n\
    \    local dict_case_lower_out=$8\n    local dict_case_upper_out=$9\n    local\
    \ dict_case_lower_in=$dict_case_lower_in\n    local dict_case_upper_in=$dict_case_upper_in\n\
    \    local dict_case_lower_out=$dict_case_lower_out\n    local dict_case_upper_out=$dict_case_upper_out\n\
    \    local dict_case_lower=$dict_case_lower\n    local dict_case_upper=$dict_case_upper\n\
    \    local dict_case=$dict_case\n    local dict_case_lower=$dict_case_lower\n\
    \    local dict_case_upper=$dict_case_upper\n    local dict_case_lower_in=$dict_case_lower_in\n\
    \    local dict_case_upper_in=$dict_case_upper_in\n    local dict_case_lower_out=$dict_case_lower_out\n\
    \    local dict_case_upper_out=$dict_case_upper_out\n    local dict_case_lower=$dict_case_lower\n\
    \    local dict_case_upper=$dict_case_upper\n    local dict_case=$dict_case\n\
    \    local dict_case_lower=$dict_case_lower\n    local dict_case_upper=$dict_case_upper\n\
    \    local dict_case_lower_in=$dict_case_lower_in\n    local dict_case_upper_in=$dict_case_upper_in\n\
    \    local dict_case_lower_out=$dict_case_lower_out\n    local dict_case_upper_out=$dict_case_upper_out\n\
    \    local dict_case_lower=$dict_case_lower\n    local dict_case_upper=$dict_case_upper\n\
    \    local dict_case=$dict_case\n    local dict_case_lower=$dict_case_lower\n\
    \    local dict_case_upper=$dict_case_upper\n    local dict_case_lower_in=$dict_case_lower_in\n\
    \    local dict_case_upper_in=$dict_case_upper_in\n    local dict_case_lower_out=$dict_case_lower_out\n\
    \    local dict_case_upper_out=$dict_case_upper_out\n    local dict_case_lower=$dict_case_lower\n\
    \    local dict_case_upper=$dict_case_upper\n    local dict_case=$dict_case\n\
    \    local dict_case_lower=$dict_case_lower\n    local dict_case_upper=$dict_case_upper\n\
    \    local dict_case_lower_in=$dict_case_lower_in\n    local dict_case_upper_in=$dict_case_upper_in\n\
    \    local dict_case_lower_out=$dict_case_lower_out\n    local dict_case_upper_out=$dict_case_upper_out\n\
    \    local dict_case_lower=$dict_case_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_keys=$3\n    local dict_case=$4\n\
    \    local dict_case_inverted=$5\n    local dict_case_lower=$6\n    local dict_case_upper=$7\n\
    \    local dict_case_lower_inverted=$8\n    local dict_case_upper_inverted=$9\n\
    \    local dict_case_lower_inverted_inverted=$10\n    local dict_case_upper_inverted_inverted=$11\n\
    \    local dict_case_lower_inverted_inverted_inverted=$12\n    local dict_case_upper_inverted_inverted_inverted=$13\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted=$14\n    local\
    \ dict_case_upper_inverted_inverted_inverted_inverted=$15\n    local dict_case_lower_inverted_inverted_inverted_inverted_inverted=$16\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted=$17\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted=$18\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted=$19\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$20\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$21\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$22\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$23\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$24\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$25\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$26\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$27\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$28\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=$29\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local keyUpper\n    local\
    \ valueUpper\n    local keyLower\n    local valueLower\n    local result\n   \
    \ local count\n    local keyCount\n    local valueCount\n    local keyUpperCount\n\
    \    local valueUpperCount\n    local keyLowerCount\n    local valueLowerCount\n\
    \    local keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n\
    \    local key\n    local value\n    local keyUpper\n    local valueUpper\n  \
    \  local keyLower\n    local valueLower\n    local key\n    local value\n    local\
    \ keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n \
    \   local key\n    local value\n    local keyUpper\n    local valueUpper\n   \
    \ local keyLower\n    local valueLower\n    local key\n    local value\n    local\
    \ keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n \
    \   local key\n    local value\n    local keyUpper\n    local valueUpper\n   \
    \ local keyLower\n    local valueLower\n    local key\n    local value\n    local\
    \ keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n \
    \   local key\n    local value\n    local keyUpper\n    local valueUpper\n   \
    \ local keyLower\n    local valueLower\n    local key\n    local value\n    local\
    \ keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n \
    \   local key\n    local value\n    local keyUpper\n    local valueUpper\n   \
    \ local keyLower\n    local valueLower\n    local key\n    local value\n    local\
    \ keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n \
    \   local key\n    local value\n    local keyUpper\n    local valueUpper\n   \
    \ local keyLower\n    local valueLower\n    local key\n    local value\n    local\
    \ keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n \
    \   local key\n    local value\n    local keyUpper\n    local valueUpper\n   \
    \ local keyLower\n    local valueLower\n    local key\n    local value\n    local\
    \ keyUpper\n    local valueUpper\n    local keyLower\n    local valueLower\n \
    \   local key\n    local value\n    local keyUpper\n    local valueUpper\n   \
    \ local keyLower\n    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=\"$1\"\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local foundBothUpper\n    local foundBothLower\n    local foundBoth\n   \
    \ local found\n    local foundUpper\n    local foundLower\n    local foundBoth\n\
    \    local found\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local found\n  \
    \  local keycount\n    local valuecount\n    local keycount2\n    local valuecount2\n\
    \    local keycount3\n    local valuecount3\n    local keycount4\n    local valuecount4\n\
    \    local keycount5\n    local valuecount5\n    local keycount6\n    local valuecount6\n\
    \    local keycount7\n    local valuecount7\n    local keycount8\n    local valuecount8\n\
    \    local keycount9\n    local valuecount9\n    local keycount10\n    local valuecount10\n\
    \    local keycount11\n    local valuecount11\n    local keycount12\n    local\
    \ valuecount12\n    local keycount13\n    local valuecount13\n    local keycount14\n\
    \    local valuecount14\n    local keycount15\n    local valuecount15\n    local\
    \ keycount16\n    local valuecount16\n    local keycount17\n    local valuecount17\n\
    \    local keycount18\n    local valuecount18\n    local keycount19\n    local\
    \ valuecount19\n    local keycount20\n    local valuecount20\n    local keycount21\n\
    \    local valuecount21\n    local keycount22\n    local valuecount22\n    local\
    \ keycount23\n    local valuecount23\n    local keycount24\n    local valuecount24\n\
    \    local keycount25\n    local valuecount25\n    local keycount26\n    local\
    \ valuecount26\n    local keycount27\n    local valuecount27\n    local keycount28\n\
    \    local valuecount28\n    local keycount29\n    local valuecount29\n    local\
    \ keycount30\n    local valuecount30\n    local keycount31\n    local valuecount31\n\
    \    local keycount32\n    local valuecount32\n    local keycount33\n    local\
    \ valuecount33\n    local keycount34\n    local valuecount34\n    local keycount35\n\
    \    local valuecount35\n    local keycount36\n    local valuecount36\n    local\
    \ keycount37\n    local valuecount37\n    local keycount38\n    local valuecount38\n\
    \    local keycount39\n    local valuecount39\n    local keycount40\n    local\
    \ valuecount40\n    local keycount41\n    local valuecount41\n    local \n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local dict\n\
    \    local keyCount\n    local valueCount\n    local keyUpperCount\n    local\
    \ valueUpperCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValue\n    local valueUpperValue\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    local valueUpperValueCount\n\
    \    local keyUpperValueCount\n    local valueUpperValueCount\n    local keyUpperValueCount\n\
    \    local valueUpperValueCount\n    local keyUpperValueCount\n    \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local ok\n    dict=$1\n    lower=$(echo $dict | awk -F, '{print $1}')\n    upper=$(echo\
    \ $dict | awk -F, '{print $2}')\n    ok=1\n    for k in $lower; do\n        if\
    \ [ -z \"$k\" ]; then\n            ok=0\n            break\n        fi\n    done\n\
    \    for k in $upper; do\n        if [ -z \"$k\" ]; then\n            ok=0\n \
    \           break\n        fi\n    done\n    return $ok\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local lower\n  local upper\n  local count\n  local keycount\n\
    \  local keycount2\n  local keycount3\n  local keycount4\n  local keycount5\n\
    \  local keycount6\n  local keycount7\n  local keycount8\n  local keycount9\n\
    \  local keycount10\n  local keycount11\n  local keycount12\n  local keycount13\n\
    \  local keycount14\n  local keycount15\n  local keycount16\n  local keycount17\n\
    \  local keycount18\n  local keycount19\n  local keycount20\n  local keycount21\n\
    \  local keycount22\n  local keycount23\n  local keycount24\n  local keycount25\n\
    \  local keycount26\n  local keycount27\n  local keycount28\n  local keycount29\n\
    \  local keycount30\n  local keycount31\n  local keycount32\n  local keycount33\n\
    \  local keycount34\n  local keycount35\n  local keycount36\n  local keycount37\n\
    \  local keycount38\n  local keycount39\n  local keycount40\n  local keycount41\n\
    \  local keycount42\n  local keycount43\n  local keycount44\n  local keycount45\n\
    \  local keycount46\n  local keycount47\n  local keycount48\n  local keycount49\n\
    \  local keycount50\n  local keycount51\n  local keycount52\n  local keycount53\n\
    \  local keycount54\n  local keycount55\n  local keycount56\n  local keycount57\n\
    \  local keycount58\n  local keycount59\n  local keycount60\n  local keycount61\n\
    \  local keycount62\n  local keycount63\n  local keycount64\n  local keycount65\n\
    \  local keycount66\n  local keycount67\n  local keycount68\n  local keycount69\n\
    \  local keycount70\n  local keycount71\n  local keycount72\n  local keycount73\n\
    \  local keycount74\n  local keycount75\n  local keycount76\n  local keycount77\n\
    \  local keycount78\n  local keycount79\n  local keycount80\n  local keycount81\n\
    \  local keycount82\n  \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_file=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_nocase=$7\n\
    \    local dict_noempty=$8\n    local dict_nonocase=$9\n    local dict_nonoempty=$10\n\
    \    local dict_nononocase=$11\n    local dict_nononoempty=$12\n    local dict_nonononocase=$13\n\
    \    local dict_nonononoempty=$14\n    local dict_nononononocase=$15\n    local\
    \ dict_nononononoempty=$16\n    local dict_nononononocase=$17\n    local dict_nononononoempty=$18\n\
    \    local dict_nonononononocase=$19\n    local dict_nonononononoempty=$20\n \
    \   local dict_nononononononocase=$21\n    local dict_nononononononoempty=$22\n\
    \    local dict_nononononononocase=$23\n    local dict_nononononononoempty=$24\n\
    \    local dict_nononononononocase=$25\n    local dict_nononononononoempty=$26\n\
    \    local dict_nonononononononocase=$27\n    local dict_nonononononononoempty=$28\n\
    \    local dict_nononononononononocase=$29\n    local dict_nonononononononoempty=$30\n\
    \    local dict_nononononononononocase=$31\n    local dict_nononononononononoempty=$32\n\
    \    local dict_nonononononononononocase=$33\n    local dict_nonononononononononoempty=$34\n\
    \    local dict_nononononononononononocase=$35\n    local dict_nononononononononononoempty=$36\n\
    \    local dict_nonononononononononononocase=$37\n    local dict_nononononononononononoempty=$38\n\
    \    local dict_nonononononononononononocase=$39\n    local dict_nonononononononononononoempty=$40\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_case_inverted=$4\n\
    \    local dict_case_lower=$5\n    local dict_case_upper=$6\n    local dict_case_lower_inverted=$7\n\
    \    local dict_case_upper_inverted=$8\n    local dict_case_lower_inverted_inverted=$9\n\
    \    local dict_case_upper_inverted_inverted=${10}\n    local dict_case_lower_inverted_inverted_inverted=${11}\n\
    \    local dict_case_upper_inverted_inverted_inverted=${12}\n    local dict_case_lower_inverted_inverted_inverted_inverted=${13}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted=${14}\n    local\
    \ dict_case_lower_inverted_inverted_inverted_inverted_inverted=${15}\n    local\
    \ dict_case_upper_inverted_inverted_inverted_inverted_inverted=${16}\n    local\
    \ dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted=${17}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted=${18}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${19}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${20}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${21}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${22}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${23}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${24}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${25}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${26}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${27}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local dict\n    local dictUpper\n    local dictLower\n\
    \    local result\n    \n    dict=$1\n    \n    if [ -z \"$dict\" ]\n    then\n\
    \        return 0\n    fi\n    \n    dictUpper=$(echo \"$dict\" | tr A-Z A-Z)\n\
    \    dictLower=$(echo \"$dict\" | tr a-z a-z)\n    \n    for key in $dict\n  \
    \  do\n        keyUpper=$(echo \"$key\" | tr A-Z A-Z)\n        keyLower=$(echo\
    \ \"$key\" | tr a-z a-z)\n        \n        if [ \"$keyUpper\" != \"$key\" ]\n\
    \        then\n            return 0\n        fi\n        \n        if [ \"$keyLower\"\
    \ != \"$key\" ]\n        then\n            return 0\n        fi\n        \n  \
    \      valueUpper=$(echo \"$dict\" | awk -F, '{print $2}')\n        valueLower=$(echo\
    \ \"$dict\" | awk -F, '{print $3}')\n        \n        if [ \"$valueUpper\" !=\
    \ \"$value\" ]\n        then\n            return 0\n        fi\n        \n   \
    \     if [ \"$valueLower\" != \"$value\" ]\n        then\n            return 0\n\
    \        fi\n    done\n    \n    return 1\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_name=$2\n    local dict_case=$3\n    local dict_case_in=$4\n\
    \    local dict_case_out=$5\n    local dict_case_in_keys=$6\n    local dict_case_out_keys=$7\n\
    \    local dict_case_in_vals=$8\n    local dict_case_out_vals=$9\n    local dict_case_out_vals_type=$10\n\
    \    local dict_case_out_vals_len=$11\n    local dict_case_out_vals_contains=$12\n\
    \    local dict_case_out_vals_contains_any=$13\n    local dict_case_out_vals_contains_all=$14\n\
    \    local dict_case_out_vals_contains_any_of=$15\n    local dict_case_out_vals_contains_all_of=$16\n\
    \    local dict_case_out_vals_contains_any_not_of=$17\n    local dict_case_out_vals_contains_all_not_of=$18\n\
    \    local dict_case_out_vals_contains_any_not_in=$19\n    local dict_case_out_vals_contains_all_not_in=$20\n\
    \    local dict_case_out_vals_contains_any_not_in_any=$21\n    local dict_case_out_vals_contains_all_not_in_any=$22\n\
    \    local dict_case_out_vals_contains_any_not_in_all=$23\n    local dict_case_out_vals_contains_all_not_in_all=$24\n\
    \    local dict_case_out_vals_contains_any_not_in_any_of=$25\n    local dict_case_out_vals_contains_all_not_in_any_of=$26\n\
    \    local dict_case_out_vals_contains_any_not_in_all_of=$27\n    local dict_case_out_vals_contains_all_not_in_all_of=$28\n\
    \    local dict_case_out_vals_contains_any_not_in_any_not_of=$29\n    local dict_case_out_vals_contains_all_not_in_any_not_of=$30\n\
    \    local dict_case_out_vals_contains_any_not_in_all_not_of=$31\n    local dict_case_out_vals_contains_all_not_in_all_not_of=$32\n\
    \    local dict_case_out_vals_contains_any_not_in_any_not_in=$33\n    local dict_case_out_vals_contains_all_not_in_any_not_in=$34\n\
    \    local dict_case_out_vals_contains_any_not_in_all_not_in=$35\n    local dict_case_out_vals_contains_all_not_in_all_not_in=$36\n\
    \    local dict_case_out_vals_contains_any_not_in_any_not_in_any=$37\n    local\
    \ dict_case_out_vals_contains_all_not_in_any_not_in_any=$38\n\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key\n\
    \  local value\n  local keys=()\n  local values=()\n  local key\n  local value\n\
    \  local key\n  local value\n  local key\n  local value\n  local key\n  local\
    \ value\n  local key\n  local value\n  local key\n  local value\n  local key\n\
    \  local value\n  local key\n  local value\n  local key\n  local value\n  local\
    \ key\n  local value\n  local key\n  local value\n  local key\n  local value\n\
    \  local key\n  local value\n  local key\n  local value\n  local key\n  local\
    \ value\n  local key\n  local value\n  local key\n  local value\n  local key\n\
    \  local value\n  local key\n  local value\n  local key\n  local value\n  local\
    \ key\n  local value\n  local key\n  local value\n  local key\n  local value\n\
    \  local key\n  local value\n  local key\n  local value\n  local key\n  local\
    \ value\n  local key\n  local value\n  local key\n  local value\n  local key\n\
    \  local value\n  local key\n  local value\n  local key\n  local value\n  local\
    \ key\n  local value\n  local key\n  local value\n  local key\n  local value\n\
    \  local key\n  local value\n  local key\n  local value\n  local key\n  local\
    \ value\n  local key\n  local value\n  local key\n  local value\n  local key\n\
    \  local value\n  local key\n  local value\n  local key\n  local value\n  local\
    \ key\n  local value\n  local key\n  local value\n  local key\n  local value\n\
    \  local key\n  local value\n  local key\n  local value\n  local key\n  local\
    \ value\n  local key\n  local value\n  local key\n  local value\n  local key\n\
    \  local value\n  local key\n  local value\n  local key\n  local value\n  local\
    \ key\n  local value\n  local key\n  local value\n  local key\n  local value\n\
    \  local key\n  local value\n  local key\n  local value\n  local key\n  local\
    \ value\n  local key\n  local value\n  local key\n  local value\n  local key\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n\n    # Check if dictionary is empty\n    if [ -z \"\
    $dictionary\" ]; then\n        echo \"dictionary is empty\"\n        exit 0\n\
    \    fi\n\n    # Loop through each key in the dictionary\n    for key in \"${!dictionary[@]}\"\
    ; do\n        # Check if key is string\n        if [ -z \"$key\" ]; then\n   \
    \         echo \"dictionary key $key is empty\"\n            exit 0\n        fi\n\
    \n        # Check if value is string\n        if [ -z \"$dictionary[$key]\" ];\
    \ then\n            echo \"dictionary key $key has no value\"\n            exit\
    \ 0\n        fi\n\n        # Check if value is lower case\n        lower=$(echo\
    \ \"$dictionary[$key]\" | tr '[:upper:]' '[:lower:]')\n        if [ -z \"$lower\"\
    \ ]; then\n            echo \"dictionary key $key has value $dictionary[$key]\
    \ but is not lower case\"\n            exit 0\n        fi\n\n        # Check if\
    \ value is upper case\n        upper=$(echo \"$dictionary[$key]\" | tr '[:lower:]'\
    \ '[:upper:]')\n        if [ -z \"$upper\" ]; then\n            echo \"dictionary\
    \ key $key has value $dictionary[$key] but is not upper case\"\n            exit\
    \ 0\n        fi\n\n        # Check if value is in lower or upper case\n      \
    \  if [ \"$lower\" == \"$upper\" ]; then\n            echo \"dictionary key $key\
    \ has value $dictionary[$key] but is in both lower and upper case\"\n        \
    \    exit 0\n        fi\n\n        # Check if value is in lower case\n       \
    \ result=$(echo \"$dictionary[$key]\" | grep -Fxq \"$lower\")\n        if [ -z\
    \ \"$result\" ]; then\n            echo \"dictionary key $key has value $dictionary[$key]\
    \ but is not in lower case\"\n            exit 0\n        fi\n\n        # Check\
    \ if value is in upper case\n        result=$(echo \"$dictionary[$key]\" | grep\
    \ -Fxq \"$upper\")\n        if [ -z \"$result\" ]; then\n            echo \"dictionary\
    \ key $key has value $dictionary[$key] but is not in upper case\"\n          \
    \  exit 0\n        fi\n    done\n\n    echo \"dictionary is all upper or all lower\
    \ case\"\n    exit 0\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local result\n    dict=$1\n    lower=$2\n    upper=$3\n    shift\n    shift\n\
    \    shift\n    if [ -z \"$dict\" ] ; then\n        return 0\n    fi\n    for\
    \ key in $dict; do\n        if [ -z \"$key\" ] ; then\n            return 0\n\
    \        fi\n        if [ \"$lower\" == \"true\" ] ; then\n            if [ \"\
    $key\" == \"$key\" ]; then\n                continue\n            fi\n       \
    \     if [ \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\"\
    \ -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"\
    $key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\"\
    \ == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"\
    $key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\"\
    \ -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"\
    $key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\"\
    \ == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"\
    $key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\"\
    \ -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"\
    $key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\"\
    \ == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"\
    $key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\"\
    \ -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"\
    $key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" == \"$key\" -o \"$key\"\
    \ == \"$key\" -o \"$key\" == \"$key\" -o \"$key\" \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn3nzhxxw.sh: line 33: syntax error near unexpected token `}''

    /tmp/tmpn3nzhxxw.sh: line 33: `}''

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_case_inverted=$5\n    local dict_case_lower=$6\n    local dict_case_upper=$7\n\
    \    local dict_case_lower_inverted=$8\n    local dict_case_upper_inverted=$9\n\
    \    local dict_case_lower_inverted_inverted=${10}\n    local dict_case_upper_inverted_inverted=${11}\n\
    \    local dict_case_lower_inverted_inverted_inverted=${12}\n    local dict_case_upper_inverted_inverted_inverted=${13}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted=${14}\n    local\
    \ dict_case_upper_inverted_inverted_inverted_inverted=${15}\n    local dict_case_lower_inverted_inverted_inverted_inverted_inverted=${16}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted=${17}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted=${18}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted=${19}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${20}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${21}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${22}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${23}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${24}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${25}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${26}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${27}\n\
    \    local dict_case_lower_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted_inverted=${28}\n\
    \    local dict_case_upper_inverted_inverted_inverted_inverted_inverted_inverted_inver\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local ok\n    dict=$1\n    lower=$(echo $dict | awk -F, '{print $1}')\n    upper=$(echo\
    \ $dict | awk -F, '{print $2}')\n    ok=0\n    for k in $(echo $dict | awk -F,\
    \ '{print $1}'); do\n        if [[ $k =~ ^[[:lower:]]+$ ]]; then\n           \
    \ ok=1\n            break\n        fi\n    done\n    for k in $(echo $dict | awk\
    \ -F, '{print $2}'); do\n        if [[ $k =~ ^[[:upper:]]+$ ]]; then\n       \
    \     ok=1\n            break\n        fi\n    done\n    return $ok\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local found\n  \
    \  local count\n    local keycount\n    local keycount2\n    local keycount3\n\
    \    local keycount4\n    local keycount5\n    local keycount6\n    local keycount7\n\
    \    local keycount8\n    local keycount9\n    local keycount10\n    local keycount11\n\
    \    local keycount12\n    local keycount13\n    local keycount14\n    local keycount15\n\
    \    local keycount16\n    local keycount17\n    local keycount18\n    local keycount19\n\
    \    local keycount20\n    local keycount21\n    local keycount22\n    local keycount23\n\
    \    local keycount24\n    local keycount25\n    local keycount26\n    local keycount27\n\
    \    local keycount28\n    local keycount29\n    local keycount30\n    local keycount31\n\
    \    local keycount32\n    local keycount33\n    local keycount34\n    local keycount35\n\
    \    local keycount36\n    local keycount37\n    local keycount38\n    local keycount39\n\
    \    local keycount40\n    local keycount41\n    local keycount42\n    local keycount43\n\
    \    local keycount44\n    local keycount45\n    local keycount46\n    local keycount47\n\
    \    local keycount48\n    local keycount49\n    local keycount50\n    local keycount51\n\
    \    local keycount52\n    local keycount53\n    local keycount54\n    local keycount55\n\
    \    local keycount56\n    local keycount57\n    local keycount58\n    local keycount59\n\
    \    local keycount60\n    local keycount61\n    local keycount62\n    local keycount63\n\
    \    local keycount64\n    local keycount65\n    local keycount66\n    local keycount67\n\
    \    local keycount68\n    local keycount69\n    local keycount70\n    local keycount71\n\
    \    local keycount72\n    local keycount73\n    local keycount74\n    local keycount75\n\
    \    local keycount76\n    local keycount77\n    local keycount78\n    local keycount79\n\
    \    local keycount80\n    local keycount81\n    local key\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local key2\n    local value2\n    local lower\n  \
    \  local upper\n    local lower2\n    local upper2\n    local key3\n    local\
    \ value3\n    local lower3\n    local upper3\n    local lower4\n    local upper4\n\
    \    local lower5\n    local upper5\n    local lower6\n    local upper6\n    local\
    \ lower7\n    local upper7\n    local lower8\n    local upper8\n    local lower9\n\
    \    local upper9\n    local lower10\n    local upper10\n    local lower11\n \
    \   local upper11\n    local lower12\n    local upper12\n    local lower13\n \
    \   local upper13\n    local lower14\n    local upper14\n    local lower15\n \
    \   local upper15\n    local lower16\n    local upper16\n    local lower17\n \
    \   local upper17\n    local lower18\n    local upper18\n    local lower19\n \
    \   local upper19\n    local lower20\n    local upper20\n    local lower21\n \
    \   local upper21\n    local lower22\n    local upper22\n    local lower23\n \
    \   local upper23\n    local lower24\n    local upper24\n    local lower25\n \
    \   local upper25\n    local lower26\n    local upper26\n    local lower27\n \
    \   local upper27\n    local lower28\n    local upper28\n    local lower29\n \
    \   local upper29\n    local lower30\n    local upper30\n    local lower31\n \
    \   local upper31\n    local lower32\n    local upper32\n    local lower33\n \
    \   local upper33\n    local lower34\n    local upper34\n    local lower35\n \
    \   local upper35\n    local lower36\n    local upper36\n    local lower37\n \
    \   local upper37\n    local lower38\n    local upper38\n    local lower39\n \
    \   local upper39\n    local lower40\n    local upper40\n    local lower41\n \
    \   local upper41\n    local lower42\n    local upper42\n    local lower43\n \
    \   local upper43\n    local lower44\n    local upper44\n    local lower45\n \
    \   local upper45\n    local lower46\n    local upper46\n    local lower47\n \
    \   local upper47\n    local lower48\n    local upper48\n    local lower49\n \
    \   \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local dict\n    local dictUpper\n    local dictLower\n\
    \    local result\n\n    dict=$1\n    dictUpper=$(echo \"$dict\" | tr '[:upper:]'\
    \ '[:lower:]')\n    dictLower=$(echo \"$dict\" | tr '[:lower:]' '[:upper:]')\n\
    \    \n    if [ -z \"$dict\" ]\n    then\n        return 0\n    fi\n\n    for\
    \ key in $dict\n    do\n        keyUpper=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n\
    \        keyLower=$(echo \"$key\" | tr '[:lower:]' '[:upper:]')\n        value=$(echo\
    \ \"$dict\" | tr '[:upper:]' '[:lower:]')\n        valueUpper=$(echo \"$value\"\
    \ | tr '[:upper:]' '[:lower:]')\n        valueLower=$(echo \"$value\" | tr '[:lower:]'\
    \ '[:upper:]')\n        \n        if [ \"$keyUpper\" != \"$keyLower\" ] \n   \
    \     then\n            return 0\n        fi\n        \n        if [ \"$valueUpper\"\
    \ != \"$valueLower\" ]\n        then\n            return 0\n        fi\n    done\n\
    \n    return 1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_name=$1\n    local dict_lines=$2\n    local dict_case=$3\n    local dict_lower=$4\n\
    \    local dict_upper=$5\n    local dict_empty=$6\n    local dict_empty_value=$7\n\
    \    local dict_empty_key=$8\n    local dict_empty_value_key=$9\n    local dict_empty_key_value=${10}\n\
    \    local dict_empty_key_value_key=${11}\n    local dict_empty_key_value_key=${12}\n\
    \    local dict_empty_key_value_key=${13}\n    local dict_empty_key_value_key=${14}\n\
    \    local dict_empty_key_value_key=${15}\n    local dict_empty_key_value_key=${16}\n\
    \    local dict_empty_key_value_key=${17}\n    local dict_empty_key_value_key=${18}\n\
    \    local dict_empty_key_value_key=${19}\n    local dict_empty_key_value_key=${20}\n\
    \    local dict_empty_key_value_key=${21}\n    local dict_empty_key_value_key=${22}\n\
    \    local dict_empty_key_value_key=${23}\n    local dict_empty_key_value_key=${24}\n\
    \    local dict_empty_key_value_key=${25}\n    local dict_empty_key_value_key=${26}\n\
    \    local dict_empty_key_value_key=${27}\n    local dict_empty_key_value_key=${28}\n\
    \    local dict_empty_key_value_key=${29}\n    local dict_empty_key_value_key=${30}\n\
    \    local dict_empty_key_value_key=${31}\n    local dict_empty_key_value_key=${32}\n\
    \    local dict_empty_key_value_key=${33}\n    local dict_empty_key_value_key=${34}\n\
    \    local dict_empty_key_value_key=${35}\n    local dict_empty_key_value_key=${36}\n\
    \    local dict_empty_key_value_key=${37}\n    local dict_empty_key_value_key=${38}\n\
    \    local dict_empty_key_value_key=${39}\n    local dict_empty_key_value_key=${40}\n\
    \    local dict_empty_key_value_key=${41}\n    local dict_empty_key_value_key=${42}\n\
    \    local dict_empty_key_value_key=${43}\n    local dict_empty_key_value_key=${44}\n\
    \    local dict_empty_key_value_key=${45}\n    local dict_empty_key_value_key=${46}\n\
    \    local dict_empty_key_value_key=${47}\n    local dict_empty_key_value_key=${48}\n\
    \    local dict_empty_key_value_key=${49}\n    local dict_empty_key_value\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local dict\n   \
    \ dict=$1\n    lower=false\n    upper=false\n    for k in $(echo $dict | cut -d\
    \ ',' -f 1); do\n        key=$(echo $k | cut -d '=' -f 1)\n        value=$(echo\
    \ $k | cut -d '=' -f 2)\n        if [ \"$key\" == \"lower\" ]; then\n        \
    \    lower=true\n        elif [ \"$key\" == \"upper\" ]; then\n            upper=true\n\
    \        else\n            if [ \"$lower\" == \"true\" ]; then\n             \
    \   if [ \"$value\" == \"$value\" ]; then\n                    lower=false\n \
    \               else\n                    lower=true\n                fi\n   \
    \         else\n                if [ \"$value\" == \"$value\" ]; then\n      \
    \              upper=false\n                else\n                    upper=true\n\
    \                fi\n            fi\n        fi\n    done\n    if [ \"$lower\"\
    \ == \"true\" ]; then\n        return true\n    else\n        if [ \"$upper\"\
    \ == \"true\" ]; then\n            return true\n        else\n            return\
    \ false\n        fi\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsr9v9avv.sh: line 46: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local keyUpper\n    local valueUpper\n    local keyLower\n\
    \    local valueLower\n    local dict\n    local dictUpper\n    local dictLower\n\
    \    local result\n    dict=$1\n    if [ -z \"$dict\" ]; then\n        return\
    \ 0\n    fi\n    dictUpper=$(echo \"$dict\" | tr '[:upper:]' '[:lower:]')\n  \
    \  dictLower=$(echo \"$dict\" | tr '[:lower:]' '[:upper:]')\n    for key in $dict;\
    \ do\n        if [ -z \"$key\" ]; then\n            return 0\n        fi\n   \
    \     keyUpper=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n        keyLower=$(echo\
    \ \"$key\" | tr '[:lower:]' '[:upper:]')\n        if [ \"$keyUpper\" != \"$key\"\
    \ ]; then\n            return 0\n        fi\n        if [ \"$keyLower\" != \"\
    $key\" ]; then\n            return 0\n        fi\n    done\n    for value in $dict;\
    \ do\n        if [ -z \"$value\" ]; then\n            return 0\n        fi\n \
    \       valueUpper=$(echo \"$value\" | tr '[:upper:]' '[:lower:]')\n        valueLower=$(echo\
    \ \"$value\" | tr '[:lower:]' '[:upper:]')\n        if [ \"$valueUpper\" != \"\
    $value\" ]; then\n            return 0\n        fi\n        if [ \"$valueLower\"\
    \ != \"$value\" ]; then\n            return 0\n        fi\n    done\n    return\
    \ 1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local keys=$2\n    local upper=false\n    local lower=false\n\
    \    local found=false\n    local key\n    \n    if [ -z \"$dictionary\" ]\n \
    \   then\n        echo \"dictionary is empty\"\n        exit 0\n    fi\n    \n\
    \    for key in $keys\n    do\n        found=false\n        \n        for value\
    \ in $dictionary\n        do\n            if [ \"$value\" == \"$key\" ]\n    \
    \        then\n                found=true\n                break\n           \
    \ fi\n        done\n        \n        if [ \"$found\" == \"false\" ]\n       \
    \ then\n            lower=true\n        fi\n        \n        if [ \"$found\"\
    \ == \"true\" ]\n        then\n            upper=true\n        fi\n    done\n\
    \    \n    if [ \"$lower\" == \"false\" ]\n    then\n        echo \"$keys is in\
    \ lower case\"\n        exit 0\n    fi\n    \n    if [ \"$upper\" == \"false\"\
    \ ]\n    then\n        echo \"$keys is in upper case\"\n        exit 0\n    fi\n\
    \    \n    echo \"$keys is mixed\"\n    exit 0\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=\"$1\"\n    local dict_line\n    local dict_key\n    local dict_value\n\
    \    local dict_key_lower\n    local dict_key_upper\n    local dict_value_lower\n\
    \    local dict_value_upper\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_count\n    local dict_key_count\n    local dict_value_count\n\
    \    local dict_key_count\n    local dict_value_count\n    local dict_key_count\n\
    \    local dict_value_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=0\n    upper=0\n    found=0\n    for k in \"${!dict}\"\
    ; do\n        key=${dict[k]}\n        value=${dict[k]}\n        lower=$(echo \"\
    ${key}\" | tr '[:upper:]' '[:lower:]')\n        upper=$(echo \"${key}\" | tr '[:lower:]'\
    \ '[:upper:]')\n        if [ \"${lower}\" == \"${key}\" ] || [ \"${upper}\" ==\
    \ \"${key}\" ]; then\n            found=1\n        fi\n    done\n    if [ \"${found}\"\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4yygjnax.sh: line 18: p,pineapple\nb,banana: invalid variable name

    '
  stdout: ''
  timestamp: 1660035785
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local dictionary=\"\
    $1\"\n  local key\n  local value\n  local keyUpper\n  local valueUpper\n  local\
    \ result\n  \n  if [ -z \"$dictionary\" ]\n  then\n    return 0\n  fi\n\n  for\
    \ key in \"${!dictionary[@]}\"\n  do\n    value=${dictionary[$key]}\n    keyUpper=$(echo\
    \ $key | tr '[:upper:]' '[:lower:]')\n    valueUpper=$(echo $value | tr '[:upper:]'\
    \ '[:lower:]')\n    \n    if [ \"$keyUpper\" != \"$key\" ]\n    then\n      return\
    \ 0\n    fi\n\n    if [ \"$valueUpper\" != \"$value\" ]\n    then\n      return\
    \ 0\n    fi\n  done\n\n  return 1\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    lower=false\n    upper=false\n    found=false\n    for k\
    \ in \"${!dict}\"; do\n        key=\"${dict[k]}\"\n        value=\"${dict[k]}\"\
    ;\n        if [[ \"$key\" == *[[:upper:]]* ]]; then\n            upper=true\n\
    \        elif [[ \"$key\" == *[[:lower:]]* ]]; then\n            lower=true\n\
    \        fi\n        if [[ \"$key\" == *[[:upper:]][[:lower:]]* ]]; then\n   \
    \         upper=true\n            lower=true\n        fi\n        if [[ \"$key\"\
    \ == *[[:upper:]][[:upper:]]* ]]; then\n            upper=true\n        fi\n \
    \       if [[ \"$key\" == *[[:lower:]][[:upper:]]* ]]; then\n            lower=true\n\
    \        fi\n        if [[ \"$key\" == *[[:upper:]][[:lower:]][[:upper:]]* ]];\
    \ then\n            upper=true\n            lower=true\n        fi\n        if\
    \ [[ \"$key\" == *[[:lower:]][[:lower:]]* ]]; then\n            lower=true\n \
    \       fi\n        if [[ \"$key\" == *[[:upper:]][[:upper:]][[:lower:]]* ]];\
    \ then\n            upper=true\n            lower=true\n        fi\n        if\
    \ [[ \"$key\" == *[[:lower:]][[:upper:]][[:upper:]]* ]]; then\n            lower=true\n\
    \            upper=true\n        fi\n        if [[ \"$key\" == *[[:upper:]][[:lower:]][[:lower:]]*\
    \ ]]; then\n            upper=true\n            lower=true\n        fi\n     \
    \   if [[ \"$key\" == *[[:lower:]][[:upper:]][[:upper:]]* ]]; then\n         \
    \   lower=true\n            upper=true\n        fi\n        if [[ \"$key\" ==\
    \ *[[:upper:]][[:lower:]][[:lower:]]* ]]; then\n            upper=true\n     \
    \       lower=true\n        fi\n        if [[ \"$key\" == *[[:lower:]][[:upper:]][[:upper:]]*\
    \ ]]; then\n            lower=true\n            upper=true\n        fi\n     \
    \   if [[ \"$key\" == *[[:upper:]][[:lower:]][[:lower:]]* ]]; then\n         \
    \   upper=true\n            lower=true\n        fi\n        if [[ \"$key\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmplfocuhzn.sh: line 86: unexpected EOF while looking for matching
    `"\''\n/tmp/tmplfocuhzn.sh: line 90: unexpected token `\xff\'' in conditional
    command\n/tmp/tmplfocuhzn.sh: line 90: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660077234
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local lower\n    local upper\n    local dict\n   \
    \ dict=$1\n    lower=$(echo $dict | awk -F, '{print $1}')\n    upper=$(echo $dict\
    \ | awk -F, '{print $2}')\n    if [ -z \"$lower\" ] || [ -z \"$upper\" ]; then\n\
    \        echo \"$dict is empty\"\n        exit 1\n    fi\n    for key in $lower;\
    \ do\n        if [ -z \"$key\" ]; then\n            echo \"$dict is empty\"\n\
    \            exit 1\n        fi\n    done\n    for key in $upper; do\n       \
    \ if [ -z \"$key\" ]; then\n            echo \"$dict is empty\"\n            exit\
    \ 1\n        fi\n    done\n    true\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077234
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local dict\n    local lower\n    local upper\n   \
    \ local result\n    dict=$1\n    lower=$(echo $dict | awk -F, '{print $1}')\n\
    \    upper=$(echo $dict | awk -F, '{print $2}')\n    if [ -z \"$dict\" ]; then\n\
    \        return 0\n    fi\n    for key in $lower; do\n        if [ -z \"$value\"\
    \ ]; then\n            return 0\n        fi\n        if [ -z \"$key\" ]; then\n\
    \            return 0\n        fi\n        if [ \"$key\" != \"$value\" ]; then\n\
    \            return 0\n        fi\n    done\n    for value in $upper; do\n   \
    \     if [ -z \"$key\" ]; then\n            return 0\n        fi\n        if [\
    \ \"$key\" != \"$value\" ]; then\n            return 0\n        fi\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077234
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local result\n    local count\n    local keycount\n    local keycount2\n\
    \    local keycount3\n    local keycount4\n    local keycount5\n    local keycount6\n\
    \    local keycount7\n    local keycount8\n    local keycount9\n    local keycount10\n\
    \    local keycount11\n    local keycount12\n    local keycount13\n    local keycount14\n\
    \    local keycount15\n    local keycount16\n    local keycount17\n    local keycount18\n\
    \    local keycount19\n    local keycount20\n    local keycount21\n    local keycount22\n\
    \    local keycount23\n    local keycount24\n    local keycount25\n    local keycount26\n\
    \    local keycount27\n    local keycount28\n    local keycount29\n    local keycount30\n\
    \    local keycount31\n    local keycount32\n    local keycount33\n    local keycount34\n\
    \    local keycount35\n    local keycount36\n    local keycount37\n    local keycount38\n\
    \    local keycount39\n    local keycount40\n    local keycount41\n    local keycount42\n\
    \    local keycount43\n    local keycount44\n    local keycount45\n    local keycount46\n\
    \    local keycount47\n    local keycount48\n    local keycount49\n    local keycount50\n\
    \    local keycount51\n    local keycount52\n    local keycount53\n    local keycount54\n\
    \    local keycount55\n    local keycount56\n    local keycount57\n    local keycount58\n\
    \    local keycount59\n    local keycount60\n    local keycount61\n    local keycount62\n\
    \    local keycount63\n    local keycount64\n    local keycount65\n    local keycount66\n\
    \    local keycount67\n    local keycount68\n    local keycount69\n    local keycount70\n\
    \    local keycount71\n    local keycount72\n    local keycount73\n    local keycount74\n\
    \    local keycount75\n    local keycount76\n    local keycount77\n    local keycount78\n\
    \    local keycount79\n    local keycount80\n    local key\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077234
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=$1\n    local key\n    local value\n    local lower\n    local upper\n\
    \    local found\n    local foundUpper\n    local foundLower\n    local foundKey\n\
    \    local foundValue\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpper\n    local\
    \ foundKeyLower\n    local foundValueUpper\n    local foundValueLower\n    local\
    \ foundKeyUpper\n    local foundKeyLower\n    local foundValueUpper\n    local\
    \ foundValueLower\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpper\n    local\
    \ foundKeyLower\n    local foundValueUpper\n    local foundValueLower\n    local\
    \ foundKeyUpper\n    local foundKeyLower\n    local foundValueUpper\n    local\
    \ foundValueLower\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpper\n    local\
    \ foundKeyLower\n    local foundValueUpper\n    local foundValueLower\n    local\
    \ foundKeyUpper\n    local foundKeyLower\n    local foundValueUpper\n    local\
    \ foundValueLower\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpper\n    local\
    \ foundKeyLower\n    local foundValueUpper\n    local foundValueLower\n    local\
    \ foundKeyUpper\n    local foundKeyLower\n    local foundValueUpper\n    local\
    \ foundValueLower\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpper\n    local\
    \ foundKeyLower\n    local foundValueUpper\n    local foundValueLower\n    local\
    \ foundKeyUpper\n    local foundKeyLower\n    local foundValueUpper\n    local\
    \ foundValueLower\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpper\n    local\
    \ foundKeyLower\n    local foundValueUpper\n    local foundValueLower\n    local\
    \ foundKeyUpper\n    local foundKeyLower\n    local foundValueUpper\n    local\
    \ foundValueLower\n    local foundKeyUpper\n    local foundKeyLower\n    local\
    \ foundValueUpper\n    local foundValueLower\n    local foundKeyUpper\n    local\
    \ foundKey\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077234
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dict_file=$1\n    local dict_key=$2\n    local dict_value=$3\n    local dict_case=$4\n\
    \    local dict_lower=$5\n    local dict_upper=$6\n    local dict_empty=$7\n \
    \   local dict_not_empty=$8\n    local dict_not_empty_key=$9\n    local dict_not_empty_value=$10\n\
    \    local dict_not_empty_key2=$11\n    local dict_not_empty_value2=$12\n    local\
    \ dict_not_empty_key3=$13\n    local dict_not_empty_value3=$14\n    local dict_not_empty_key4=$15\n\
    \    local dict_not_empty_value4=$16\n    local dict_not_empty_key5=$17\n    local\
    \ dict_not_empty_value5=$18\n    local dict_not_empty_key6=$19\n    local dict_not_empty_value6=$20\n\
    \    local dict_not_empty_key7=$21\n    local dict_not_empty_value7=$22\n    local\
    \ dict_not_empty_key8=$23\n    local dict_not_empty_value8=$24\n    local dict_not_empty_key9=$25\n\
    \    local dict_not_empty_value9=$26\n    local dict_not_empty_key10=$27\n   \
    \ local dict_not_empty_value10=$28\n    local dict_not_empty_key11=$29\n    local\
    \ dict_not_empty_value11=$30\n    local dict_not_empty_key12=$31\n    local dict_not_empty_value12=$32\n\
    \    local dict_not_empty_key13=$33\n    local dict_not_empty_value13=$34\n  \
    \  local dict_not_empty_key14=$35\n    local dict_not_empty_value14=$36\n    local\
    \ dict_not_empty_key15=$37\n    local dict_not_empty_value15=$38\n    local dict_not_empty_key16=$39\n\
    \    local dict_not_empty_value16=$40\n    local dict_not_empty_key17=$41\n  \
    \  local dict_not_empty_value17=$42\n    local dict_not_empty_key18=$43\n    local\
    \ dict_not_empty_value18=$44\n    local dict_not_empty_key19=$45\n    local dict_not_empty_value19=$46\n\
    \    local dict_not_empty_key20=$47\n    local dict_not_empty_value20=$48\n  \
    \  local dict_not_empty_key21=$49\n    local dict_not_empty_value21=$50\n    local\
    \ dict_not_empty_key22=$51\n    local dict_not_empty_value22=$52\n    local dict_not_empty_key23=$53\n\
    \    local dict_not_empty_value23=$\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077234
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ dictionary=\"$1\"\n    local key\n    local value\n    local lower\n    local\
    \ upper\n    local result\n    \n    if [ -z \"$dictionary\" ]\n    then\n   \
    \     echo \"check_dict_case: dictionary is empty\"\n        exit 0\n    fi\n\n\
    \    lower=$(echo \"$dictionary\" | awk -F, '{print $1}')\n    upper=$(echo \"\
    $dictionary\" | awk -F, '{print $2}')\n\n    for key in $lower\n    do\n     \
    \   value=$(echo \"$dictionary\" | awk -F, '{print $2}')\n        if [ \"$key\"\
    \ == \"$key\" ]; then\n            echo \"check_dict_case: dictionary key $key\
    \ has value $value\"\n            exit 0\n        fi\n    done\n\n    for key\
    \ in $upper\n    do\n        value=$(echo \"$dictionary\" | awk -F, '{print $2}')\n\
    \        if [ \"$key\" == \"$key\" ]; then\n            echo \"check_dict_case:\
    \ dictionary key $key has value $value\"\n            exit 0\n        fi\n   \
    \ done\n\n    echo \"check_dict_case: dictionary key $key has value $value\"\n\
    \    exit 0\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077234
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local\
    \ key\n    local value\n    local key1\n    local value1\n    local key2\n   \
    \ local value2\n    local key3\n    local value3\n    local key4\n    local value4\n\
    \    local key5\n    local value5\n    local key6\n    local value6\n    local\
    \ key7\n    local value7\n    local key8\n    local value8\n    local key9\n \
    \   local value9\n    local key10\n    local value10\n    local key11\n    local\
    \ value11\n    local key12\n    local value12\n    local key13\n    local value13\n\
    \    local key14\n    local value14\n    local key15\n    local value15\n    local\
    \ key16\n    local value16\n    local key17\n    local value17\n    local key18\n\
    \    local value18\n    local key19\n    local value19\n    local key20\n    local\
    \ value20\n    local key21\n    local value21\n    local key22\n    local value22\n\
    \    local key23\n    local value23\n    local key24\n    local value24\n    local\
    \ key25\n    local value25\n    local key26\n    local value26\n    local key27\n\
    \    local value27\n    local key28\n    local value28\n    local key29\n    local\
    \ value29\n    local key30\n    local value30\n    local key31\n    local value31\n\
    \    local key32\n    local value32\n    local key33\n    local value33\n    local\
    \ key34\n    local value34\n    local key35\n    local value35\n    local key36\n\
    \    local value36\n    local key37\n    local value37\n    local key38\n    local\
    \ value38\n    local key39\n    local value39\n    local key40\n    local value40\n\
    \    local key41\n    local value41\n    local key42\n    local value42\n    local\
    \ key43\n    local value43\n    local key44\n    local value44\n    local key45\n\
    \    local value45\n    local key46\n    local value46\n    local key47\n    local\
    \ value47\n    local key48\n    local value48\n    local key49\n    local value49\n\
    \    local key50\n    local value50\n    local key51\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660035785
