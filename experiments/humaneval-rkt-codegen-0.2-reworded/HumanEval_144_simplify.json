{
  "name": "HumanEval_144_simplify",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Your task is to implement a function that will simplify the expression\n;; x * n. The function returns #t if x * n evaluates to a whole number and #f\n;; otherwise. Both x and n, are string representation of a fraction, and have the following format,\n;; <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n;; You can assume that x, and n are valid fractions, and do not have zero as denominator.\n;; >>> (simplify \"1/5\" \"5/1\")\n;; #t\n;; >>> (simplify \"1/6\" \"2/1\")\n;; #f\n;; >>> (simplify \"7/10\" \"10/2\")\n;; #f\n(define (simplify x n)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n    (check-equal? (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate \"1/6\" \"2/1\") #f)\n    (check-equal? (candidate \"5/1\" \"3/1\") #t)\n    (check-equal? (candidate \"7/10\" \"10/2\") #f)\n    (check-equal? (candidate \"2/10\" \"50/10\") #t)\n    (check-equal? (candidate \"7/2\" \"4/2\") #t)\n    (check-equal? (candidate \"11/6\" \"6/1\") #t)\n    (check-equal? (candidate \"2/3\" \"5/2\") #f)\n    (check-equal? (candidate \"5/2\" \"3/5\") #f)\n    (check-equal? (candidate \"2/4\" \"8/4\") #t)\n    (check-equal? (candidate \"2/4\" \"4/2\") #t)\n    (check-equal? (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate \"1/5\" \"1/5\") #f)\n))\n\n(test-humaneval)",
  "completions": [
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x)\n        (string? n)\n        (else\n          (if (string? x)\n            (string? n)\n            (else\n              (if (string? x)\n                (string? n)\n                (else\n                  (if (string? x)\n                    (string? n)\n                    (else\n                      (if (string? x)\n                        (string? n)\n                        (else\n                          (if (string? x)\n                            (string? n)\n                            (else\n                              (if (string? x)\n                                (string? n)\n                                (else\n                                 (if (string? x)\n                                  (string? n)\n                                  (else\n                                    (if (string? x)\n                                      (string? n)\n                                      (else\n                                        (if (string? x)\n                                          (string? n)\n                                          (else\n                                            (if (string? x)\n                                              (string? n)\n                                              (else\n                                                (if (string? x)\n                                                  (string? n)\n                                                  (else\n                                                    (if (string? x)\n                                                      (string? n)\n                                                      (else\n                                                        (if (string? x)\n                                                          (string? n)\n                                                          (else\n                                                            (if (string? x)\n                                                              (string? n)\n                                                              (else\n                                                                (if (string? x)\n                                                                  (string? n)\n                                                                  (else\n                                                                    (if (string? x)\n                                                                      (string? n)\n                                                                      (else\n                                                                        (if (string? x)\n                                                                          (string? n)\n                                                                          (else\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \"\")\n        (string-split/char n \"\")\n        (string-split/char (string-replace/all x \"*\" \"/\") \"\")\n        (string-replace/all (string-replace/all n \"*\" \"/\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all x \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all n \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all x \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all n \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all x \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all n \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all x \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all n \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all x \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all n \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all x \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all n \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all x \"*\" \"/\") \"\") \"\")\n        (string-replace/all (string-replace/all (string-replace/all n \"*\" \"/\") \"\") \"\")\n        (string-replace/",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-replace/all x \"0\" \"\")\n                     (string-replace/all n \"0\" \"\")))\n    (string-length (string-replace/all x \"0\" \"\"))\n    (string-length (string-replace/all n \"0\" \"\"))\n    (string-length (string-replace/all x \"1\" \"\"))\n    (string-length (string-replace/all n \"1\" \"\"))\n    (string-length (string-replace/all x \"2\" \"\"))\n    (string-length (string-replace/all n \"2\" \"\"))\n    (string-length (string-replace/all x \"3\" \"\"))\n    (string-length (string-replace/all n \"3\" \"\"))\n    (string-length (string-replace/all x \"4\" \"\"))\n    (string-length (string-replace/all n \"4\" \"\"))\n    (string-length (string-replace/all x \"5\" \"\"))\n    (string-length (string-replace/all n \"5\" \"\"))\n    (string-length (string-replace/all x \"6\" \"\"))\n    (string-length (string-replace/all n \"6\" \"\"))\n    (string-length (string-replace/all x \"7\" \"\"))\n    (string-length (string-replace/all n \"7\" \"\"))\n    (string-length (string-replace/all x \"8\" \"\"))\n    (string-length (string-replace/all n \"8\" \"\"))\n    (string-length (string-replace/all x \"9\" \"\"))\n    (string-length (string-replace/all n \"9\" \"\"))\n    (string-length (string-replace/all x \"10\" \"\"))\n    (string-length (string-replace/all n \"10\" \"\"))\n    (string-length (string-replace/all x \"11\" \"\"))\n    (string-length (string-replace/all n \"11\" \"\"))\n    (string-length (string-replace/all x \"12\" \"\"))\n    (string-length (string-replace/",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (cond\n            ((string? numerator) (string? denominator))\n            ((string? denominator) (string? numerator))\n            (else\n              (let ((x-numerator (string-split-at-first x)))\n                (let ((n-denominator (string-split-at-first n)))\n                  (cond\n                    ((string? x-numerator) (string? n-denominator))\n                    ((string? n-denominator) (string? x-numerator))\n                    (else\n                      (let ((x-numerator (string-split-at-first x)))\n                        (let ((n-denominator (string-split-at-first n)))\n                          (cond\n                            ((string? x-numerator) (string? n-denominator))\n                            ((string? n-denominator) (string? x-numerator))\n                            (else\n                              (let ((x-numerator (string-split-at-first x)))\n                                (let ((n-denominator (string-split-at-first n)))\n                                  (cond\n                                    ((string? x-numerator) (string? n-denominator))\n                                    ((string? n-denominator) (string? x-numerator))\n                                    (else\n                                      (let ((x-numerator (string-split-at-first x)))\n                                        (let ((n-denominator (string-split-at-first n)))\n                                          (cond\n                                            ((string? x-numerator) (string? n-denominator))\n                                            ((string? n-denominator) (string? x-numerator))\n                                            (else\n                                              (let ((x-numerator (string-split-at-first x)))\n                                                (let ((n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x)\n        (string? n)\n        (if (string? x)\n          (string? n)\n          (if (string? x)\n            (string? n)\n            (if (string? x)\n              (string? n)\n              (if (string? x)\n                (string? n)\n                (if (string? x)\n                  (string? n)\n                  (if (string? x)\n                    (string? n)\n                    (if (string? x)\n                      (string? n)\n                      (if (string? x)\n                        (string? n)\n                        (if (string? x)\n                          (string? n)\n                          (if (string? x)\n                            (string? n)\n                            (if (string? x)\n                              (string? n)\n                              (if (string? x)\n                                (string? n)\n                                (if (string? x)\n                                  (string? n)\n                                  (if (string? x)\n                                    (string? n)\n                                    (if (string? x)\n                                      (string? n)\n                                      (if (string? x)\n                                        (string? n)\n                                        (if (string? x)\n                                          (string? n)\n                                          (if (string? x)\n                                            (string? n)\n                                            (if (string? x)\n                                              (string? n)\n                                              (if (string? x)\n                                                (string? n)\n                                                (if (string? x)\n                                                  (string? n)\n                                                  (if (string? x)\n                                                    (string? n)\n                                                    (if (string? x)\n                                                      (string? n)\n                                                      (if (string? x)\n                                                        (string? n)\n                                   ",
    "  (if (string=? x)\n    (if (string=? n)\n      (if (string=? (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x)))\n      (string->number (string->number x)))\n    (string->number (string->number x))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string=? x)\n        (if (string=? n)\n          (if (string=? (string-split x \"/\") n)\n            (string-join (string-split x \"/\") \"1\")\n            (string-join (string-split n \"/\") \"1\"))\n          (string-join (string-split x \"/\") \"0\")\n          (string-join (string-split n \"/\") \"0\"))\n        (string-join (string-split x \"/\") \"0\")\n        (string-join (string-split n \"/\") \"0\"))\n      (string-join (string-split x \"/\") \"0\")\n      (string-join (string-split n \"/\") \"0\"))\n    (string-join (string-split x \"/\") \"0\")\n    (string-join (string-split n \"/\") \"0\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((x-denominator (string-split n \"0\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"",
    "  (if (string? x)\n    (if (string? n)\n      (if (string=? x)\n        (if (string=? n)\n          (if (string-length x)\n            (if (string-length n)\n              (string-length x)\n              (string-length n))\n            (string-length x)\n            (string-length n))\n          (string-length x)\n          (string-length n))\n        (string-length x)\n        (string-length n))))\n  (string-length x)\n  (string-length n)))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-replace/all x \"0\" \"\")\n                     (string-replace/all n \"0\" \"\")))\n    (string-length (string-replace/all x \"0\" \"\"))\n    (string-length (string-replace/all n \"0\" \"\"))\n    (string-length (string-replace/all x \"1\" \"\"))\n    (string-length (string-replace/all n \"1\" \"\"))\n    (string-length (string-replace/all x \"2\" \"\"))\n    (string-length (string-replace/all n \"2\" \"\"))\n    (string-length (string-replace/all x \"3\" \"\"))\n    (string-length (string-replace/all n \"3\" \"\"))\n    (string-length (string-replace/all x \"4\" \"\"))\n    (string-length (string-replace/all n \"4\" \"\"))\n    (string-length (string-replace/all x \"5\" \"\"))\n    (string-length (string-replace/all n \"5\" \"\"))\n    (string-length (string-replace/all x \"6\" \"\"))\n    (string-length (string-replace/all n \"6\" \"\"))\n    (string-length (string-replace/all x \"7\" \"\"))\n    (string-length (string-replace/all n \"7\" \"\"))\n    (string-length (string-replace/all x \"8\" \"\"))\n    (string-length (string-replace/all n \"8\" \"\"))\n    (string-length (string-replace/all x \"9\" \"\"))\n    (string-length (string-replace/all n \"9\" \"\"))\n    (string-length (string-replace/all x \"10\" \"\"))\n    (string-length (string-replace/all n \"10\" \"\"))\n    (string-length (string-replace/all x \"11\" \"\"))\n    (string-length (string-replace/all n \"11\" \"\"))\n    (string-length (string-replace/all x \"12\" \"\"))\n    (string-length (string-replace/",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append (string-append x \"/\") n) \"0\"))\n    ((> (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)))\n)\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      ((string? x) (string? n))\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  ((string? x) (string? n))\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              ((string? x) (string? n))\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          ((string? x) (string? n))\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                                ((string? x) (string? n))\n                                                                (else\n                                                                  (if (string? x) (string? n))\n                                                                    (cond\n                                                                      ((string? x) (string? n))\n                                                                      (else\n                                                                        (if (string?",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"2\"))\n    (else\n      (let ((numerator (string-split x \"/\")))\n        (let ((denominator (string-split n \"/\")))\n          (string-append (string-join numerator \"/\")\n                                  (string-join denominator \"/\")))))\n  ))\n",
    "  (cond\n    ((string=? x \"0\") #t)\n    ((string=? n \"0\") #t)\n    ((string=? x \"1\") #f)\n    ((string=? n \"1\") (string-split x \"0\"))\n    ((string-length x) != (string-length n))\n    (\n      (string-split x \"0\")\n      (string-split n \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"1\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"1\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"1\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"1\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"1\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"1\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"0\")\n      (string-join (string-append (string-split x \"0\") (string-split n \"0\")) \"1\")\n      (string-join (string",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x) (string->number n)))\n      (string->number (string->number x) (string->number n)))\n    (string->number x (string->number n))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (cond\n        ((string? x) (string? n))\n        (else\n          (cond\n            ((string? x) (string? n))\n            (else\n              (cond\n                (and\n                  (string? x)\n                  (string? n))\n                (else\n                  (cond\n                    (and\n                      (string? x)\n                      (string? n))\n                    (else\n                      (cond\n                        (and\n                          (string? x)\n                          (string? n))\n                        (else\n                          (cond\n                            (and\n                              (string? x)\n                              (string? n))\n                            (else\n                              (cond\n                                (and\n                                  (string? x)\n                                  (string? n))\n                                (else\n                                  (cond\n                                    (and\n                                      (string? x)\n                                      (string? n))\n                                    (else\n                                      (cond\n                                        (and\n                                          (string? x)\n                                          (string? n))\n                                        (else\n                                          (cond\n                                            (and\n                                              (string? x)\n                                              (string? n))\n                                            (else\n                                              (cond\n                                                (and\n                                                  (string? x)\n                                                  (string? n))\n                                                (else\n                                                  (cond\n                                                    (and\n                                                      (string? x)\n                                                      (string? n))\n                                                    (else\n                                                      (cond\n                                                        (and\n                                                          (string? x)\n                                                          (string? n))\n                                                        (else\n                                                          (cond\n                                                            (and\n                                                              (string? x)\n                               ",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      ((string? x) (string? n))\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  ((string? x) (string? n))\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              ((string? x) (string? n))\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          ((string? x) (string? n))\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                                ((string? x) (string? n))\n                                                                (else\n                                                                  (if (string? x) (string? n))\n                                                                    (cond\n                                                                      ((string? x) (string? n))\n                                                                      (else\n                                                                        (if (string?",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (string-append (string-join x-numerator \"\")\n                        (string-join n-numerator \"/\")))))\n  ))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (let ((x-denominator (string-split x-numerator \"1\")))\n            (let ((n-denominator (string-split n-numerator \"1\")))\n              (string-append (string-join \"0\")\n                (string-join (string-join \"1\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    ((> (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split-at-first x \"0\"))\n             (x-denominator (string-split-at-first n \"0\")))\n        (if (and\n              (= (string-length x-numerator) (string-length x-denominator))\n              (= (string-length x-denominator) (string-length n))\n              (= (string-length x-numerator) (string-length n))\n              (= (string-length x-denominator) (string-length n))\n              (= (string-length x-numerator) (string-length x-denominator))\n              (= (string-length n) (string-length x-denominator))\n              (= (string-length n) (string-length x-numerator))\n              (= (string-length n) (string-length x-denominator))\n              (= (string-length n) (string-length n))\n              (= (string-length x-denominator) (string-length n))\n              (= (string-length x-numerator) (string-length n))\n              (= (string-length x-denominator) (string-length n))\n              (= (string-length x-numerator) (string-length x-denominator))\n              (= (string-length n) (string-length x-denominator))\n              (= (string-length n) (string-length x-numerator))\n              (= (string-length n) (string-length x-denominator))\n              (= (string-length n) (string-length n))\n              (= (string-length x-denominator) (string-length n))\n              (= (string-length x-numerator) (string-length n))",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n)\n          (if (string? x) (string? n)\n              (if (string? x) (string? n)\n                  (if (string? x) (string? n)\n                      (if (string? x) (string? n)\n                          (if (string? x) (string? n)\n                              (if (string? x) (string? n)\n                                  (if (string? x) (string? n)\n                                      (if (string? x) (string? n)\n                                          (if (string? x) (string? n)\n                                              (if (string? x) (string? n)\n                                                  (if (string? x) (string? n)\n                                                      (if (string? x) (string? n)\n                                                          (if (string? x) (string? n)\n                                                             (if (string? x) (string? n)\n                                                                 (if (string? x) (string? n)\n                                                                     (if (string? x) (string? n)\n                                                                         (if (string? x) (string? n)\n                                                                             (if (string? x) (string? n)\n                                                                                 (if (string? x) (string? n)\n                                                                                     (if (string? x) (string? n)\n                                                                                         (if (string? x) (string? n)\n                                                                                            (if (string? x) (string? n)\n                                                                                                (if (string? x) (string? n)\n                                                                                                    (if (string? x) (string? n)\n                                                                                                        (if (string? x) (string? n)\n                                                                                                            (if (string? x) (string? n)\n                                                                                                                (if (string?",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split-at-first x \"\")\n        (string-split-at-first n \"\")\n        (if (string-split-at-first x n)\n          (string-split-at-first x n)\n          (string-split-at-first n x)\n          (string-split-at-first x x)\n          (string-split-at-first n n)\n          (string-split-at-first x x))))\n    (string-split-at-first x x)))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x)\n        (string? n)\n        (else\n          (if (string? x)\n            (string? n)\n            (else\n              (if (string? x)\n                (string? n)\n                (else\n                  (if (string? x)\n                    (string? n)\n                    (else\n                      (if (string? x)\n                        (string? n)\n                        (else\n                          (if (string? x)\n                            (string? n)\n                            (else\n                              (if (string? x)\n                                (string? n)\n                                (else\n                                 (if (string? x)\n                                  (string? n)\n                                  (else\n                                    (if (string? x)\n                                      (string? n)\n                                      (else\n                                        (if (string? x)\n                                          (string? n)\n                                          (else\n                                            (if (string? x)\n                                              (string? n)\n                                              (else\n                                                (if (string? x)\n                                                  (string? n)\n                                                  (else\n                                                    (if (string? x)\n                                                      (string? n)\n                                                      (else\n                                                        (if (string? x)\n                                                          (string? n)\n                                                          (else\n                                                           (if (string? x)\n                                                              (string? n)\n                                                              (else\n                                                                (if (string? x)\n                                                                  (string? n)\n                                                                  (else\n                                                                    (if (string? x)\n                                                                      (string? n)\n                                                                      (else\n                                                                        (if (string? x)\n                                                                          (string? n)\n                                                                          (else\n                               ",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \".\")\n        (string-split/char n \".\")\n        (if (= (string-length x) (string-length n))\n          (if (= (string-length x) 1)\n            (if (= (string-length n) 1)\n              (if (= (string-at x 0) (string-at n 0))\n                (string-append x \"1\")\n                (string-append n \"1\"))\n              (string-append x n))\n            (string-append x n)))\n        (string-append x n))))\n  (string-join \"\")\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((x-denominator (string-split n \"/\")))\n          (string-append (string-join \"*\")\n            (string-join \"(\" (string-join \"/\" x-numerator) \")\")\n            (string-join \"/\" x-denominator)))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((< (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-n (string-split x \"/\")))\n        (let ((x-n-1 (string-split x-n \"0\")))\n          (let ((x-n-2 (string-split x-n-1 \"0\")))\n            (string-append x-n-2 \"1\")))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (let ((x-denominator (string-split x-numerator \"1\")))\n            (let ((n-denominator (string-split n-numerator \"1\")))\n              (string-append (string-join \"0\")\n                (string-join (string-join \"1\")\n                  (string-join x-denominator n-denominator))))))))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (string->number (string->number x)))\n    (string->number (string->number x))))\n",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (if (string-length x-numerator)\n            (let ((x-denominator (string-split x-numerator \" \")))\n              (let ((n-denominator (string-split n-numerator \" \")))\n                (if (string-length x-denominator)\n                  (let ((x-numerator (string-split x-denominator \" \")))\n                    (let ((n-numerator (string-split n-denominator \" \")))\n                      (if (string-length x-numerator)\n                        (let ((x-denominator (string-split x-numerator \" \")))\n                          (let ((n-denominator (string-split n-numerator \" \")))\n                            (if (string-length x-denominator)\n                              (let ((x-numerator (string-split x-denominator \" \")))\n                                (let ((n-numerator (string-split n-denominator \" \")))\n                                  (if (string-length x-numerator)\n                                    (let ((x-denominator (string-split x-numerator \" \")))\n                                      (let ((n-denominator (string-split n-numerator \" \")))\n                                        (if (string-length x-denominator)\n                                          (let ((x-numerator (string-split x-denominator \" \")))\n                                            (let ((n-numerator (string-split n-denominator \" \")))\n                                              (if (string-length x-numerator)\n                                                (let ((x-denominator (string-split x-numerator \" \")))\n                                                  (let ((n-denominator (string-split n-numerator \" \")))\n                                                    (if (string-length x-denominator",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"0\"))\n    ((> (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"1\"))\n    (else\n      (string-append (string-append x \"/\" n) \"0\")))\n)\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (cond\n            ((string? x-numerator) (string? n-numerator))\n            ((string? x-numerator) (string? n-numerator))\n            (else\n              (let ((x-denominator (string-split x-numerator \"-\")))\n                (let ((n-denominator (string-split n-numerator \"-\")))\n                  (cond\n                    ((string? x-denominator) (string? n-denominator))\n                    ((string? x-denominator) (string? n-denominator))\n                    (else\n                      (let ((x-numerator (string-split x-denominator \"/\")))\n                        (let ((n-numerator (string-split n-denominator \"/\")))\n                          (cond\n                            ((string? x-numerator) (string? n-numerator))\n                            ((string? x-numerator) (string? n-numerator))\n                            (else\n                              (let ((x-denominator (string-split x-numerator \"-\")))\n                                (let ((n-denominator (string-split n-numerator \"-\")))\n                                  (cond\n                                    ((string? x-denominator) (string? n-denominator))\n                                    ((string? x-denominator) (string? n-denominator))\n                                    (else\n                                      (let ((x-numerator (string-split x-denominator \"/\")))\n                                        (let ((n-numerator (string-split n-denominator \"/\")))\n                                          (cond\n                                            ((string? x-numerator) (string? n-numerator))\n                                            ((string? x-numerator) (string? n-numerator))\n                                            (else\n                                 ",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \".\")\n        (string-split/char n \".\")\n        (if (string-length x)\n          (if (string-length n)\n            (string-append (string-append (string-split/char x \".\") \"0\") (string-split/char n \".\") \"0\")\n            (string-append (string-split/char x \".\") (string-split/char n \".\") \"0\")\n            (string-append (string-split/char x \".\") \"0\")\n            (string-append \"0\" (string-split/char n \".\") \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (string-append \"0\" \"0\")\n            (",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (let ((x-denominator (string-split x-numerator \"1\")))\n            (let ((n-denominator (string-split n-numerator \"1\")))\n              (string-append (string-join \"0\" (string-join \"1\" x-denominator))\n                                  (string-join \"1\" n-denominator))))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      ((string? x) (string? n))\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  ((string? x) (string? n))\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              ((string? x) (string? n))\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          ((string? x) (string? n))\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                               ((string? x) (string? n))\n                                                               (else\n                                                                 (if (string? x) (string? n))\n                                                                  (cond\n                                                                    ((string? x) (string? n))\n                                                                    (else\n                               ",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append (string-append x \"*\") n) \"/1\"))\n    (else\n      (string-append (string-append x \"*\") n)\n      (simplify (string-append x \"/\") (string-append n \"*\" \"/1\"))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \".\")\n        (string-split/char n \".\")\n        (if (string-length x)\n          (if (string-length n)\n            (string-append x n)\n            (string-append x \"1\")\n            (string-append n \"1\"))\n          (string-append x \"1\")\n          (string-append n \"1\"))))\n    (string-append x \"1\")))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"*\") n)\n      (simplify (string-append x \"/\") (string-append n \"*\"))))\n",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    (else\n      (let ((x-numerator (string-split x \" \")))\n        (let ((n-numerator (string-split n \" \")))\n          (let ((x-denominator (string-split x-numerator \"/\")))\n            (let ((n-denominator (string-split n-numerator \"/\")))\n              (if (string-length x-denominator)\n                (let ((x-numerator-value (string->number x-numerator)))\n                  (let ((n-numerator-value (string->number n-numerator)))\n                    (let ((x-denominator-value (string->number x-denominator)))\n                      (let ((n-denominator-value (string->number n-denominator)))\n                        (if (and\n                          (integer? x-numerator-value)\n                          (integer? x-denominator-value)\n                          (integer? n-numerator-value)\n                          (integer? n-denominator-value))\n                          (return #t)\n                          (return #f))))))))))))))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"=\"))\n    (else\n      (string-append x \"*\" n \"/=\")\n      (simplify (string-append x \"*\" n) (string-append n \"*\" x) \"/\")\n    )\n  )\n)\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \"\")\n        (string-split/char n \"\")\n        (if (string-split/char x \"\")\n          (string-split/char n \"\")\n          (if (string-split/char x \"\")\n            (string-split/char n \"\")\n            (if (string-split/char x \"\")\n              (string-split/char n \"\")\n              (if (string-split/char x \"\")\n                (string-split/char n \"\")\n                (if (string-split/char x \"\")\n                  (string-split/char n \"\")\n                  (if (string-split/char x \"\")\n                    (string-split/char n \"\")\n                    (if (string-split/char x \"\")\n                      (string-split/char n \"\")\n                      (if (string-split/char x \"\")\n                        (string-split/char n \"\")\n                        (if (string-split/char x \"\")\n                          (string-split/char n \"\")\n                          (if (string-split/char x \"\")\n                            (string-split/char n \"\")\n                            (if (string-split/char x \"\")\n                              (string-split/char n \"\")\n                              (if (string-split/char x \"\")\n                                (string-split/char n \"\")\n                                (if (string-split/char x \"\")\n                                  (string-split/char n \"\")\n                                  (if (string-split/char x \"\")\n                                    (string-split/char n \"\")\n                                    (if (string-split/char x \"\")\n                                      (string-split/char n \"\")\n                                      (if (string-split/char x \"\")\n                                        (string-split/char n \"\")\n                                        (if (string-split/char x \"\")\n                                          (string-split/char n \"\")\n                                          (if (string-split/char x \"\")\n                                            (string-split/char n \"\")\n                                            (if (string-split/",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    ((string-substring x 1 (string-length x)) == (string-substring n 1 (string-length n)))\n    (return #t)\n    ))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number (string->number x)))\n        (string->number (string->number n)))\n      (if (string? (string->number (string->number n)))\n        (string->number (string->number x)))\n      (string->number (string->number x)))\n    (string->number x)))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"2\"))\n    (else\n      (string-append x \"1\")\n      (string-append n \"0\"))\n    )))\n",
    "  (if (and (string? x) (string? n))\n    (if (string-match \"^[0-9]+$\" x)\n      (if (string-match \"^[0-9]+$\" n)\n        (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace/all n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\")))\n      (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\")))\n    (string->number (string-replace/all n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"*\") n)\n      (simplify (string-append x \"/\") (string-append n \"*\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append n \"1\"))\n    (else\n      (let ((x-n (string-split x \" \")))\n        (let ((n-x (string-split n \" \")))\n          (string-join (string-append (string-join x-n \"*\") \"/\")\n                                  (string-join n-x \"*\")))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-of-str numerator \"\")\n                         (string-join-of-str denominator \"\")))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"2\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-lines\n                          (string-append (string-join-lines\n                                          (string-split-at-first numerator)\n                                          (string-split-at-first denominator))\n                                          \"*\")\n                                          \"/\")))\n          (string-append (string-join-lines\n                          (string-split-at-first numerator)\n                          (string-split-at-first denominator))\n                          \"/\"))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-of-first numerator \"\")\n                                      (string-join-of-first denominator \"\")))))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \".\")\n        (string-split/char n \".\")\n        (if (= (string-length x) (string-length n))\n          (if (= (string-length x) 2)\n            (if (= (string-length n) 2)\n              (if (= (string-at x 1) (string-at n 1))\n                (if (= (string-at x 2) (string-at n 2))\n                  (if (= (string-at x 0) (string-at n 0))\n                    (if (= (string-at x 1) \"0\")\n                      (if (= (string-at n 1) \"0\")\n                        (if (= (string-at x 2) \"0\")\n                          (if (= (string-at n 2) \"0\")\n                            (if (= (string-at x 0) \"0\")\n                              (if (= (string-at n 0) \"0\")\n                                (if (= (string-at x 1) \"0\")\n                                  (if (= (string-at n 1) \"0\")\n                                    (if (= (string-at x 2) \"0\")\n                                      (if (= (string-at n 2) \"0\")\n                                        (if (= (string-at x 0) \"0\")\n                                          (if (= (string-at n 0) \"0\")\n                                            (if (= (string-at x 1) \"0\")\n                                              (if (= (string-at n 1) \"0\")\n                                                (if (= (string-at x 2) \"0\")\n                                                  (if (= (string-at n 2) \"0\")\n                                                    (if (= (string-at x 0) \"0\")\n                                                      (if (= (string-at n 0) \"0\")\n                                                        (if (= (string-at x 1) \"0\")\n                                                         (if (= (string-at n 1) \"0\")\n                                                           (if (= (string-at x 2) \"",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (if (string? (string->number n))\n          (string->number (string->number x) * string->number (string->number n))\n          (string->number (string->number x) / string->number (string->number n)))))\n    (string->number x)))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split-at-first x \"\")\n        (string-split-at-first n \"\")\n        (if (= (string-length x) (string-length n))\n          (string-append (string-split-at-first x \"\") (string-split-at-first n \"\") \"\")\n          (string-append (string-split-at-first x \"\") \"\")\n          (string-append \"\")\n          (string-append (string-split-at-first n \"\") \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append \"\")\n          (string-append",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"2\"))\n    (else\n      (let ((x-numerator (string-split x \" \")))\n        (let ((n-numerator (string-split n \" \")))\n          (string-append (string-join \" \" (string-append x-numerator \"1\"))\n                                  (string-join \" \" (string-append n-numerator \"1\"))))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-lines\n                          (string-append (first numerator) \"/\")\n                          (first denominator))\n            \"1\")))\n    (t))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append (string-append x \"0\") n) \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"0\") n))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-append (string-append numerator \"0\") denominator) \"0\"))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/\"))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (cond\n        ((string? x) (string? n))\n        (else\n          (cond\n            ((string? x) (string? n))\n            (else\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (cond\n                    ((string? x) (string? n))\n                    (else\n                      (cond\n                        ((string? x) (string? n))\n                        (else\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (cond\n                                ((string? x) (string? n))\n                                (else\n                                  (cond\n                                    ((string? x) (string? n))\n                                    (else\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (cond\n                                            ((string? x) (string? n))\n                                            (else\n                                              (cond\n                                                ((string? x) (string? n))\n                                                (else\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (cond\n                                                        ((string? x) (string? n))\n                                                        (else\n                                                          (cond\n                                                            ((string? x) (string? n))\n                                                            (else\n                                                              (cond\n                                                                ((string? x) (string? n))\n                                                                (else\n                                                                  (cond\n                                                                    ((string? x) (string? n))\n                                                                    (else\n                                                                      (cond\n                                                                        ((string? x) (string? n))\n                                                                        (else\n                                                                          (cond\n                                                                            ((string? x) (string? n))\n                                                              ",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (let ((numerator-value (string->number numerator)))\n            (let ((denominator-value (string->number denominator)))\n              (if (exact? (quotient numerator-value denominator-value))\n                  (return #t)\n                  (else (return #f))))))))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (if (string? (string->number n))\n          (string->number (string->number x) * string->number (string->number n))\n          (string->number (string->number x) / string->number (string->number n))))\n      (string->number x))\n    (string->number x)))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string=? x)\n        (if (string=? n)\n          (string-split x \" \")\n          (string-split n \" \"))\n        (string-split x \" \")\n        (string-split n \" \"))\n      (string-split x \" \")\n      (string-split n \" \"))\n    (string-split x \" \")\n    (string-split n \" \"))\n  #t))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number (string->number x)))\n        (string->number (string->number n)))\n      (if (string? (string->number (string->number n)))\n        (string->number (string->number x)))\n      (if (string? (string->number (string->number (string->number x))))\n        (string->number (string->number (string->number n))))\n      (if (string? (string->number (string->number (string->number n))))\n        (string->number (string->number (string->number x))))\n      (if (string? (string->number (string->number (string->number (string->number x))))))\n        (string->number (string->number (string->number (string->number n))))\n      (if (string? (string->number (string->number (string->number (string->number n))))))\n        (string->number (string->number (string->number (string->number x))))\n      (if (string? (string->number (string->number (string->number (string->number (string->number x))))))\n        (string->number (string->number (string->number (string->number (string->number n))))))\n      (if (string? (string->number (string->number (string->number (string->number (string->number (string->number x))))))\n        (string->number (string->number (string->number (string->number (string->number (string->number n))))))\n      (if (string? (string->number (string->number (string->number (string->number (string->number (string->number (string->number x))))))))\n        (string->number (string->number (string->number (string->number (string->number (string->number (string->number n))))))))\n      (if (string? (string->number (string->number (string->number (string->number (string->number (string->number (",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (cond\n            ((= (length x-numerator) 0)\n              (= (length n-numerator) 0))\n            ((= (length x-numerator) 0)\n              (= (length n-numerator) 0))\n            ((= (length x-numerator) 0)\n              (= (length n-numerator) 0))\n            ((= (length x-numerator) 0)\n              (= (length n-numerator) 0))\n            (else\n              (let ((x-denominator (string-split x-numerator \"*\")))\n                (let ((n-denominator (string-split n-numerator \"*\")))\n                  (cond\n                    ((= (length x-denominator) 0)\n                      (= (length n-denominator) 0))\n                    ((= (length x-denominator) 0)\n                      (= (length n-denominator) 0))\n                    ((= (length x-denominator) 0)\n                      (= (length n-denominator) 0))\n                    ((= (length x-denominator) 0)\n                      (= (length n-denominator) 0))\n                    (else\n                      (let ((x-numerator (string-split x-denominator \"/\")))\n                        (let ((n-numerator (string-split n-denominator \"/\")))\n                          (cond\n                            ((= (length x-numerator) 0)\n                              (= (length n-numerator) 0))\n                            ((= (length x-numerator) 0)\n                              (= (length n-numerator) 0))\n                            ((= (length x-numerator) 0)\n                              (= (length n-numerator) 0))\n                            ((= (length x-numerator) 0)\n                              (= (length n-numerator) 0",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (let ((x-denominator (string-split x-numerator \"-\")))\n            (let ((n-denominator (string-split n-numerator \"-\")))\n              (let ((x-numerator-digits (string-split x-numerator \"-\")))\n                (let ((n-numerator-digits (string-split n-numerator \"-\")))\n                  (let ((x-denominator-digits (string-split x-denominator \"-\")))\n                    (let ((n-denominator-digits (string-split n-denominator \"-\")))\n                      (if (= (string-length x-numerator-digits) 0)\n                        (if (= (string-length n-numerator-digits) 0)\n                          (if (= (string-length x-denominator-digits) 0)\n                            (if (= (string-length n-denominator-digits) 0)\n                              (if (= (string-length x-numerator) 0)\n                                (if (= (string-length n-numerator) 0)\n                                  (if (= (string-length x-denominator) 0)\n                                    (if (= (string-length n-denominator) 0)\n                                      (return #t)\n                                      (return #f
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (string->number (string->number n)))\n    (string->number x)))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"=\"))\n    ((= (string-length x) 0)\n      (string-append \"1\" \"/1\"))\n    ((= (string-length n) 0)\n      (string-append \"1\" \"/1\"))\n    (else\n      (string-append \"1\" \"/1\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((x-n (string-split x \"/\")))\n        (let ((x-n-1 (string-split x-n \"1\")))\n          (string-append x-n-1 \"/\" (string-join x-n \"1\")))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let* ([xn (string->number x)])\n        (let* ([yn (string->number n)])\n          (if (and (not (zero? xn)) (not (zero? yn)))\n            (let* ([xden (denominator xn)])\n              (let* ([yden (denominator yn)])\n                (if (and (not (zero? xden)) (not (zero? yden)))\n                  (let* ([xnum (numerator xn)])\n                    (let* ([ynum (numerator yn)])\n                      (if (and (not (zero? xnum)) (not (zero? ynum)))\n                        (let* ([xdenx (denominator xden)])\n                          (let* ([ydenx (denominator yden)])\n                            (if (and (not (zero? xdenx)) (not (zero? ydenx)))\n                              (let* ([xnumx (numerator xnum)])\n                                (let* ([ynumx (numerator ynum)])\n                                  (if (and (not (zero? xnumx)) (not (zero? ynumx)))\n                                    (let* ([xdenxden (denominator xdenx)])\n                                      (let* ([ydenxden (denominator ydenx)])\n                                        (if (and (not (zero? xdenxden)) (not (zero? ydenxden)))\n                                          (let* ([xnumxnum (numerator xnumx)])\n                                            (let* ([ynumxnum (numerator ynumx)])\n                                              (if (and (not (zero? xnumxnum)) (not (zero? ynumxnum)))\n                                                (let* ([xdenxdenx (denominator xdenxden)])\n                                                  (let* ([ydenxdenx (denominator ydenxden)])\n                                                    (if (and (not (zero? x",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((< (string-length x) (string-length n))\n      (string-append x \"0\"))\n    (else\n      (string-append x \"0\"))))\n",
    "  (if (and (string? x) (string? n))\n      (if (string-match \"^[0-9]+/[0-9]+$\" x)\n        (if (string-match \"^[0-9]+/[0-9]+$\" n)\n          (string->number (string-replace x \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\"))\n          (string->number (string-replace n \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\"))\n          (string->number (string-replace x \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\"))\n          (string->number (string-replace n \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\")))\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\")))\n      (string->number (string-replace n \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"*\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (string-append (string-append x \"*\") n)))\n)\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \"\")\n        (string-split/char n \"\")\n        (if (string-split/char x \"\")\n          (string-split/char n \"\")\n          (if (string-split/char x \"\")\n            (string-split/char n \"\")\n            (if (string-split/char x \"\")\n              (string-split/char n \"\")\n              (if (string-split/char x \"\")\n                (string-split/char n \"\")\n                (if (string-split/char x \"\")\n                  (string-split/char n \"\")\n                  (if (string-split/char x \"\")\n                    (string-split/char n \"\")\n                    (if (string-split/char x \"\")\n                      (string-split/char n \"\")\n                      (if (string-split/char x \"\")\n                        (string-split/char n \"\")\n                        (if (string-split/char x \"\")\n                          (string-split/char n \"\")\n                          (if (string-split/char x \"\")\n                            (string-split/char n \"\")\n                            (if (string-split/char x \"\")\n                              (string-split/char n \"\")\n                              (if (string-split/char x \"\")\n                                (string-split/char n \"\")\n                                (if (string-split/char x \"\")\n                                  (string-split/char n \"\")\n                                  (if (string-split/char x \"\")\n                                    (string-split/char n \"\")\n                                    (if (string-split/char x \"\")\n                                      (string-split/char n \"\")\n                                      (if (string-split/char x \"\")\n                                        (string-split/char n \"\")\n                                        (if (string-split/char x \"\")\n                                          (string-split/char n \"\")\n                                          (if (string-split/char x \"\")\n                                            (string-split/char n \"\")\n                                            (if (string-split/",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split/char x \".\")\n        (string-split/char n \".\")\n        (string-join (string-split/char x \".\") (string-split/char n \".\"))\n        (string-join (string-split/char x \".\") (string-join \"0\" (string-split/char n \".\")))\n        (string-join \"0\" (string-join \"0\" (string-split/char x \".\"))))\n      (string-join \"0\" (string-join \"0\" (string-split/char x \".\"))))\n    (string-join \"0\" (string-join \"0\" (string-split/char n \".\"))))\n)\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number (string->number x)))\n        (string->number (string->number n)))\n      (if (string? (string->number (string->number n)))\n        (string->number (string->number x)))\n      (if (string? (string->number (string->number (string->number x))))\n        (string->number (string->number (string->number n))))\n      (if (string? (string->number (string->number (string->number n))))\n        (string->number (string->number (string->number x))))\n      (if (string? (string->number (string->number (string->number (string->number x))))))\n        (string->number (string->number (string->number (string->number n))))\n      (if (string? (string->number (string->number (string->number (string->number n))))))\n        (string->number (string->number (string->number (string->number x))))\n      (if (string? (string->number (string->number (string->number (string->number (string->number x))))))\n        (string->number (string->number (string->number (string->number (string->number n))))))\n      (if (string? (string->number (string->number (string->number (string->number (string->number n))))))\n        (string->number (string->number (string->number (string->number (string->number x))))))\n      (if (string? (string->number (string->number (string->number (string->number (string->number (string->number x))))))\n        (string->number (string->number (string->number (string->number (string->number (string->number n))))))\n        (string->number (string->number (string->number (string->number (string->number (string->number x))))))))\n      (if (string? (string->number (string->number (string->number",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (string-append \"1\")\n      (simplify (string-append x \"/\") (string-append n \"1\"))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (if (string? (string-join numerator denominator))\n            (string-join (string-join numerator \"/\") denominator)\n            (string-join numerator \"/\" denominator))))))))\n",
    "  (cond\n    ((string-length x) < (string-length n))\n    (return #f)\n    ((string-length x) == (string-length n))\n    (return #t)\n    (else\n      (let ((x-numerator (string-split x \"-\")))\n        (let ((x-denominator (string-split n \"-\")))\n          (let ((x-numerator-value (string-split x-numerator \"/\")))\n            (let ((x-denominator-value (string-split x-denominator \"/\")))\n              (let ((x-numerator-value-value (string-split x-numerator-value \"*\")))\n                (let ((x-denominator-value-value (string-split x-denominator-value \"*\")))\n                  (let ((x-numerator-value-value-value (string-split x-numerator-value-value \"/\")))\n                    (let ((x-denominator-value-value-value (string-split x-denominator-value-value \"/\")))\n                      (let ((x-numerator-value-value-value-value (string-split x-numerator-value-value-value \"*\")))\n                        (let ((x-denominator-value-value-value-value (string-split x-denominator-value-value-value \"/\")))\n                          (let ((x-numerator-value-value-value-value-value (string-split x-numerator-value-value-value-value \"/\")))\n                            (let ((x-denominator-value-value-value-value-value (string-split x-denominator-value-value-value-value \"/\")))\n                              (let ((x-numerator-value-value-value-value-value-value (string-split x-numerator-value-value-value-value-value \"/\")))\n                                (let ((x-denominator-value-value-value-value-value-value (string-split x-denominator-value-value-value-value-value \"/\")))\n                                  (let ((x-numerator-value",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-join\n            (string-append numerator \"0\")\n            (string-append denominator \"0\"))))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      ((string? x) (string? n))\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  ((string? x) (string? n))\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              ((string? x) (string? n))\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          ((string? x) (string? n))\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                                ((string? x) (string? n))\n                                                                (else\n                                                                  (if (string? x) (string? n))\n                                                                    (cond\n                                                                      ((string? x) (string? n))\n                                                                      (else\n                                                                        (if (string?",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append n \"1\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-lines\n                          (string-append (string-join-lines\n                                          (string-split-at-first numerator \"*\")\n                                          (string-split-at-first denominator \"/\"))\n                                          \"=\"))\n                          \"0\")))))\n)\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      ((string? x) (string? n))\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  ((string? x) (string? n))\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              ((string? x) (string? n))\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          ((string? x) (string? n))\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                               ((string? x) (string? n))\n                                                               (else\n                                                                 (if (string? x) (string? n))\n                                                                  (cond\n                                                                    ((string? x) (string? n))\n                                                                    (else\n                               ",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append n \"1\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-all (string-append numerator \"1\"))\n                                      (string-join-all denominator)))\n        (string-join-all (string-append x \"1\") (string-append n \"1\"))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (string-length x) (string-length n))\n    (string-append x \"0\")\n    (string-append n \"0\")\n    (> (",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append n \"1\"))\n    (else\n      (let ((numerator (string-split-at-first x \"1\"))\n             (denominator (string-split-at-first n \"1\")))\n        (string-append (string-join-all \"0\" (string-split-at-first denominator \"0\"))\n                                   (string-join-all \"0\" (string-split-at-first numerator \"0\")))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      ((string? x) (string? n))\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  ((string? x) (string? n))\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              ((string? x) (string? n))\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          ((string? x) (string? n))\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                               ((string? x) (string? n))\n                                                               (else\n                                                                 (if (string? x) (string? n))\n                                                                  (cond\n                                                                    ((string? x) (string? n))\n                                                                    (else\n                               ",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (let ((x-denominator (string-split x-numerator \"1\")))\n            (let ((n-denominator (string-split n-numerator \"1\")))\n              (string-append (string-join \"0\")\n                (string-join (string-join \"1\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0\")\n                  (string-join \"0",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n)\n",
    "  (if (and\n        (string? x)\n        (string? n)\n        (regexp-match \"^[0-9]+/[0-9]+$\" x)\n        (regexp-match \"^[0-9]+/[0-9]+$\" n))\n    (string->number (string-replace (string-replace x \"^\" \"\") \"/\" \"\"))))\n",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (if (string-length denominator)\n            (let ((numerator-value (string->number numerator)))\n              (let ((denominator-value (string->number denominator)))\n                (if (not (integer? denominator-value))\n                  (return #f)\n                  (let ((result (string->number (string-join (/ denominator-value numerator-value) \"1\"))))\n                    (if (integer? result)\n                      (return #t)\n                      (return #f))))))))))))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split x \"/\")\n        (string-split n \"/\")\n        (if (string-split x \"\")\n          (string-split n \"\")\n          (if (string-split x \"0\")\n            (string-split n \"0\")\n            (if (string-split x \"0\")\n              (string-split n \"0\")\n              (if (string-split x \"0\")\n                (string-split n \"0\")\n                (if (string-split x \"0\")\n                  (string-split n \"0\")\n                  (if (string-split x \"0\")\n                    (string-split n \"0\")\n                    (if (string-split x \"0\")\n                      (string-split n \"0\")\n                      (if (string-split x \"0\")\n                        (string-split n \"0\")\n                        (if (string-split x \"0\")\n                          (string-split n \"0\")\n                          (if (string-split x \"0\")\n                            (string-split n \"0\")\n                            (if (string-split x \"0\")\n                              (string-split n \"0\")\n                              (if (string-split x \"0\")\n                                (string-split n \"0\")\n                                (if (string-split x \"0\")\n                                  (string-split n \"0\")\n                                  (if (string-split x \"0\")\n                                    (string-split n \"0\")\n                                    (if (string-split x \"0\")\n                                      (string-split n \"0\")\n                                      (if (string-split x \"0\")\n                                        (string-split n \"0\")\n                                        (if (string-split x \"0\")\n                                          (string-split n \"0\")\n                                          (if (string-split x \"0\")\n                                            (string-split n \"0\")\n                                            (if (string-split x \"0\")\n                                              (string-split n \"0\")\n                                              (if (string-split x \"0\")\n                                                (string-split n",
    "  (cond\n    ((string-length x) < (string-length n))\n    (return #f)\n    ((string-length x) == (string-length n))\n    (return #t)\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (let ((x-denominator x-numerator)\n                (n-denominator n-numerator))\n            (if (string-length x-denominator)\n              (let ((x-denominator-numerator (string-split x-denominator \"/\")))\n                (let ((n-denominator-numerator (string-split n-denominator \"/\")))\n                  (let ((x-denominator-denominator (string-split x-denominator-numerator \"/\")))\n                    (let ((n-denominator-denominator (string-split n-denominator-numerator \"/\")))\n                      (if (string-length x-denominator-denominator)\n                        (let ((x-denominator-denominator-numerator (string-split x-denominator-denominator \"/\")))\n                          (let ((n-denominator-denominator-numerator (string-split n-denominator-denominator \"/\")))\n                            (let ((x-denominator-denominator-denominator (string-split x-denominator-denominator-numerator \"/\")))\n                              (let ((n-denominator-denominator-denominator (string-split n-denominator-denominator-numerator \"/\")))\n                                (if (string-length x-denominator-denominator-denominator)\n                                  (let ((x-denominator-denominator-denominator-numerator (string-split x-denominator-denominator-denominator \"/\")))\n                                    (let ((n-denominator-denominator-denominator-numerator (string-split n-denominator-denominator-denominator",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (let ((x-denominator (string-split x-numerator \"-\")))\n            (let ((n-denominator (string-split n-numerator \"-\")))\n              (string-append (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-",
    "  (cond\n    ((string-match x \"^[0-9]+$\")\n      (string-match n \"^[0-9]+$\"))\n    (else\n      (cond\n        ((string-match x \"^[0-9]+/[0-9]+$\")\n          (string-match n \"^[0-9]+/[0-9]+$\"))\n        (else\n          (cond\n            ((string-match x \"^[0-9]+/[0-9]+/[0-9]+$\")\n              (string-match n \"^[0-9]+/[0-9]+/[0-9]+$\"))\n            (else\n              (cond\n                ((string-match x \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+$\")\n                  (string-match n \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+$\"))\n                (else\n                  (cond\n                    ((string-match x \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+$\")\n                      (string-match n \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+$\"))\n                    (else\n                      (cond\n                        ((string-match x \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+$\")\n                          (string-match n \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+$\"))\n                        (else\n                          (cond\n                            ((string-match x \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9]+$\")\n                              (string-match n \"^[0-9]+/[0-9]+/[0-9]+/[0-9]+/[0-9",
    "  (cond\n    ((string-match x \"^[0-9]*\\\\.[0-9]*$\")\n      (string-match n \"^[0-9]*\\\\.[0-9]*$\"))\n    (return #t)\n    (else\n      (let ((xn (string-split x \"\\\\/\") (string-split n \"\\\\/\")))\n        (if (string-length xn)\n          (return #t)\n          (return #f)))\n    )\n  )\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"=\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"/\"))\n    (else\n      (string-append x \"*\" n \"=\"))\n    (else\n      (string-append x \"*\" n \"/\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"=\"))\n    (else\n      (string-append x \"*\" n \"/\")\n      (simplify (string-append x \"*\" n) (string-append n \"*\" x)))))\n",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (if (string-length denominator)\n            (let ((numerator-value (string-to-number numerator)))\n              (let ((denominator-value (string-to-number denominator)))\n                (if (exact? (quotient numerator-value denominator-value))\n                  (return #t)\n                  (else (return #f))))))\n          (return #f))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (string-append \"1\")\n      (simplify (string-append x \"/\") (string-append n \"1\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    ((= (string-length x) 1)\n      (string-append (string-append x \"1\") \"/1\"))\n    (else\n      (string-append (string-append x \"/\") n)\n      (string-append (string-append x \"1\") \"/1\"))\n  )\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((x-denominator (string-split n \"/\")))\n          (string-append (string-join \"*\")\n            (string-join \"(\" (string-join \"*\" x-numerator) \"/\") x-denominator)))\n        (string-join \"*\" (string-join \"(\" x-numerator \"/\") x-denominator))))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (string->number (string->number x)))\n    (string->number (string->number x))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string=? x)\n        (if (string=? n)\n          (string-split-at-first x)\n          (string-split-at-first n))\n        (string-split-at-first x)\n        (string-split-at-first n))\n      (string-split-at-first x)\n      (string-split-at-first n))\n    (string-split-at-first x)\n    (string-split-at-first n)))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (let ((x-denominator (string-split x-numerator \".\")))\n            (let ((n-denominator (string-split n-numerator \".\")))\n              (string-append (string-join \"0\" (string-split x-denominator \".\"))\n                (string-join \"0\" (string-split n-denominator \".\"))))))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/1\"))\n    (else\n      (string-append x \"1\" \"/1\")))\n)\n",
    "  (cond\n    ((string=? x \"0\") #t)\n    ((string=? n \"0\") #t)\n    ((string=? x \"1\") #f)\n    ((string=? n \"1\") (string-split x \"0\"))\n    ((string=? x \"1\") (string-split n \"0\"))\n    (else\n      (let ((numerator (string-split x \"0\")))\n        (let ((denominator (string-split n \"0\")))\n          (if (string-length numerator)\n            (let ((numerator-length (string-length numerator)))\n              (let ((denominator-length (string-length denominator)))\n                (if (numerator-length)\n                  (let ((result (string-join (string-split denominator \"0\") numerator)))\n                    (if (string-length result)\n                      (string-join \"0\" result)\n                      (string-join \"1\" result))))))))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n))\n    (else\n      (string-append x \"/\" n)\n      (simplify (string-append x \"*\" n) n))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((< (string-length x) (string-length n))\n      (string-append x \"0\"))\n    (else\n      (let ((x-n (string-split x \" \")))\n        (string-join (string-split n \" \") \"0\"))))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"*\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"*\") (string-append n \"/\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append (string-append x \"*\") n) \"/1\"))\n    (else\n      (string-append (string-append x \"*\") n)\n      (simplify (string-append x \"/\") (string-append n \"*\" \"/1\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (let ((x-denominator (string-split x-numerator \".\")))\n            (let ((n-denominator (string-split n-numerator \".\")))\n              (string-append (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-join \"\")\n                (string-",
    "  (cond\n    ((string-match x \"^[0-9]+/[0-9]+$\")\n      (string-match n \"^[0-9]+/[0-9]+$\")\n      (string-match x \"^[0-9]+/[0-9]+$\")\n      (string-match n \"^[0-9]+/[0-9]+$\")\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-split x \"/\") (string-split n \"/\"))\n      (equal (string-",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((< (string-length x) (string-length n))\n      (string-append x \"0\"))\n    (else\n      (string-append x \"0\"))))\n",
    "  (cond\n    ((string-length x) < (string-length n))\n    (return #f)\n    ((string-length x) == (string-length n))\n    (return #t)\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (let ((x-denominator (string-split x-numerator \"-\")))\n            (let ((n-denominator (string-split n-numerator \"-\")))\n              (let ((x-numerator-n (string-split x-denominator \"-\")))\n                (let ((n-numerator-n (string-split n-denominator \"-\")))\n                  (let ((x-denominator-n (string-split x-numerator-n \"-\")))\n                    (let ((n-denominator-n (string-split n-numerator-n \"-\")))\n                      (let ((x-numerator-numerator (string-split x-denominator-n \"-\")))\n                        (let ((n-numerator-numerator (string-split n-denominator-n \"-\")))\n                          (let ((x-denominator-denominator (string-split x-numerator-numerator \"-\")))\n                            (let ((n-denominator-denominator (string-split n-numerator-numerator \"-\")))\n                              (let ((x-numerator-denominator (string-split x-denominator-denominator \"-\")))\n                                (let ((n-numerator-denominator (string-split n-denominator-denominator \"-\")))\n                                  (let ((x-denominator-numerator (string-split x-numerator-denominator \"-\")))\n                                    (let ((n-denominator-numerator (string-split n-numerator-denominator \"-\")))\n                                      (let ((x-numerator-numerator-numerator (string-split x-denominator-numerator \"-\")))\n                                        ",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number (string->number x)))\n        (string->number (string->number (string->number n)))\n        (string->number (string->number x) (string->number n)))\n      (string->number (string->number x) (string->number n)))\n    (string->number x)\n    (string->number n)))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append (string-append x \"/\") n) \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (string-append (string-append x \"/\") n)))\n)\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x) (string->number n)))\n      (string->number (string->number x) (string->number n)))\n    (string->number (string->number x) (string->number n))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append (string-append x \"*\") n) \"/1\"))\n    (else\n      (string-append (string-append x \"*\") n)\n      (string-append (string-append x \"/\") (string-append n \"*\")))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string=? x)\n        (string=? n)\n        (string=? (string-replace x \"0\" \"\")))\n      (string=? (string-replace n \"0\" \"\")))\n    (string=? (string-replace x \"0\" \"\"))\n    (string=? (string-replace n \"0\" \"\")))\n  #t))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split x \"\")\n        (string-split n \"\"))\n      (if (string-split x n)\n        (string-split n x)))\n    (if (string-split x n)\n      (string-split n x)))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((x-n (string-split x \"/\")))\n        (let ((x-n-numerator (first x-n))\n              (x-n-denominator (second x-n)))\n          (let ((n-numerator (first n))\n                (n-denominator (second n)))\n            (cond\n              ((= (string-length x-n-numerator) 0)\n                (string-append n-numerator \"1\"))\n              ((= (string-length x-n-denominator) 0)\n                (string-append n-denominator \"1\"))\n              (else\n                (let ((x-n-numerator-numerator (first x-n-numerator))\n                      (x-n-numerator-denominator (second x-n-numerator)))\n                  (let ((n-numerator-numerator (first n-numerator))\n                        (n-numerator-denominator (second n-numerator)))\n                    (cond\n                      ((= (string-length x-n-numerator-numerator) 0)\n                        (string-append n-numerator-numerator \"1\"))\n                      ((= (string-length x-n-numerator-denominator) 0)\n                        (string-append n-numerator-denominator \"1\"))\n                      (else\n                        (let ((x-n-numerator-numerator-numerator (first x-n-numerator-numerator))\n                               (x-n-numerator-numerator-denominator (second x-n-numerator-numerator)))\n                          (let ((n-numerator-numerator-numerator (first n-numerator-numerator))\n                                (n-numerator-numerator-denominator (second n-numerator-numerator)))\n                            (cond\n                              ((= (string-length x-n-n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                ((string? x) (string? n))\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      ((string? x) (string? n))\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  ((string? x) (string? n))\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        ((string? x) (string? n))\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              ((string? x) (string? n))\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          ((string? x) (string? n))\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                                ((string? x) (string? n))\n                                                                (else\n                                                                  (if (string? x) (string? n))\n                                                                    (cond\n                                                                      ((string? x) (string? n))\n                                                                      (else\n                                                                        (if (string?",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-all (list numerator denominator)) \"1\"))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (cond\n            ((string? x) (string? n))\n            (else\n              (let ((x_numerator (string-split-at-first x)))\n                (let ((x_denominator (string-split-at-first n)))\n                  (cond\n                    ((string? x) (string? n))\n                    (else\n                      (let ((numerator (string-split-at-first x_numerator)))\n                        (let ((denominator (string-split-at-first x_denominator)))\n                          (cond\n                            ((string? x) (string? n))\n                            (else\n                              (let ((x_numerator (string-split-at-first x_numerator)))\n                                (let ((x_denominator (string-split-at-first x_denominator)))\n                                  (cond\n                                    ((string? x) (string? n))\n                                    (else\n                                      (let ((numerator (string-split-at-first x_numerator)))\n                                        (let ((denominator (string-split-at-first x_denominator)))\n                                          (cond\n                                            ((string? x) (string? n))\n                                            (else\n                                              (let ((numerator (string-split-at-first numerator)))\n                                                (let ((denominator (string-split-at-first denominator)))\n                                                  (cond\n                                                    ((string? x) (string? n))\n                                                    (else\n                                                      (let ((x_numerator (string-split-at-first x_numerator)))\n                                                        (let ((x_denominator (string-split-at-first x_denominator)))\n                                                          (cond\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number (string->number x)))\n        (string->number (string->number n)))\n      (if (string? (string->number (string->number n)))\n        (string->number (string->number x)))\n      (string->number (string->number x)))\n    (string->number x)))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"*\") n)\n      (simplify (string-append x \"/\") (string-append n \"*\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((x-numerator (string-split x \"-\")))\n        (let ((x-denominator (string-split n \"-\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((x_numerator (string-split x \" \")))\n        (let ((n_numerator (string-split n \" \")))\n          (string-append (string-join \" \" (string-join \" \" x_numerator \"1\"))\n                                  (string-join \" \" n_numerator \"1\")))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((x-denominator (string-split n \"0\")))\n          (string-append (string-join \"0\")\n            (string-join (string-join \"0\")\n              (string-join (string-join \"0\")\n                (string-join x-numerator x-denominator))))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (cond\n        ((string? x) (string? n))\n        (else\n          (cond\n            ((string? x) (string? n))\n            (else\n              (cond\n                (and\n                  (string? x)\n                  (string? n))\n                (else\n                  (cond\n                    (and\n                      (string? x)\n                      (string? n))\n                    (else\n                      (cond\n                        (and\n                          (string? x)\n                          (string? n))\n                        (else\n                          (cond\n                            (and\n                              (string? x)\n                              (string? n))\n                            (else\n                              (cond\n                                (and\n                                  (string? x)\n                                  (string? n))\n                                (else\n                                  (cond\n                                    (and\n                                      (string? x)\n                                      (string? n))\n                                    (else\n                                      (cond\n                                        (and\n                                          (string? x)\n                                          (string? n))\n                                        (else\n                                          (cond\n                                            (and\n                                              (string? x)\n                                              (string? n))\n                                            (else\n                                              (cond\n                                                (and\n                                                  (string? x)\n                                                  (string? n))\n                                                (else\n                                                  (cond\n                                                    (and\n                                                      (string? x)\n                                                      (string? n))\n                                                    (else\n                                                      (cond\n                                                        (and\n                                                          (string? x)\n                                                          (string? n))\n                                                        (else\n                                                          (cond\n                                                            (and\n                                                              (string? x)\n                               ",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"-\")))\n        (let ((x-denominator (string-split n \"-\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-replace/all x \"0\" \"\")\n                         (string-replace/all n \"0\" \"\")))\n    (string-length (string-replace/all x \"0\" \"\"))\n    (string-length (string-replace/all n \"0\" \"\"))\n    (string-length (string-replace/all x \".\" \"\"))\n    (string-length (string-replace/all n \".\" \"\"))\n    (string-length (string-replace/all x \"/\" \"\"))\n    (string-length (string-replace/all n \"/\" \"\"))\n    (string-length (string-replace/all x \"*\" \"\"))\n    (string-length (string-replace/all n \"*\" \"\"))\n    (string-length (string-replace/all x \"^\" \"\"))\n    (string-length (string-replace/all n \"^\" \"\"))\n    (string-length (string-replace/all x \"-\" \"\"))\n    (string-length (string-replace/all n \"-\" \"\"))\n    (string-length (string-replace/all x \" \" \"\"))\n    (string-length (string-replace/all n \" \" \"\"))\n    (string-length (string-replace/all x \"(\" \"\"))\n    (string-length (string-replace/all n \"(\" \"\"))\n    (string-length (string-replace/all x \")\" \"\"))\n    (string-length (string-replace/all n \")\" \"\"))\n    (string-length (string-replace/all x \"^\" \"\"))\n    (string-length (string-replace/all n \"^\" \"\"))\n    (string-length (string-replace/all x \"*\" \"\"))\n    (string-length (string-replace/all n \"*\" \"\"))\n    (string-length (string-replace/all x \"/\" \"\"))\n    (string-length (string-replace/all n \"/\" \"\"))\n    (string-length (string-replace/all x \"-\" \"\"))\n    (string-length (string-replace/all n \"-\" \"\"))\n    (string-length (string-",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"1\"))\n    (else\n      (let ((numerator (string-substring x 0 (string-length x) - 1)))\n        (let ((denominator (string-substring n 0 (string-length n) - 1)))\n          (string-append (string-append numerator \"/\" denominator) \"0\"))))\n  ))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n)\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (cond\n        ((string? x) (string? n))\n        (else\n          (cond\n            ((string? x) (string? n))\n            (else\n              (cond\n                (string? x)\n                (string? n)\n                (else\n                  (cond\n                    (string? x)\n                    (string? n)\n                    (else\n                      (cond\n                        (string? x)\n                        (string? n)\n                        (else\n                          (cond\n                            (string? x)\n                            (string? n)\n                            (else\n                              (cond\n                                (string? x)\n                                (string? n)\n                                (else\n                                  (cond\n                                    (string? x)\n                                    (string? n)\n                                    (else\n                                      (cond\n                                        (string? x)\n                                        (string? n)\n                                        (else\n                                          (cond\n                                            (string? x)\n                                            (string? n)\n                                            (else\n                                              (cond\n                                                (string? x)\n                                                (string? n)\n                                                (else\n                                                  (cond\n                                                    (string? x)\n                                                    (string? n)\n                                                    (else\n                                                      (cond\n                                                        (string? x)\n                                                        (string? n)\n                                                        (else\n                                                          (cond\n                                                            (string? x)\n                                                            (string? n)\n                                                            (else\n                                                              (cond\n                                                                (string? x)\n                                                                (string? n)\n                                                                (else\n                                                                  (cond\n                                                                    (string? x)\n                                                                    (string? n)",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((x-denominator (string-split n \"0\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append n \"1\"))\n    (else\n      (let ((x-n (string-split x \"/\")))\n        (let ((x-n-1 (string-split x-n \"1\")))\n          (string-join (string-join x-n-1 \"0\") \"/\"))))\n  ))\n",
    "  (if (string=? x)\n    (if (string=? n)\n      (if (string-length x)\n        (string-length n)\n        (string-length (string-append x \"/\" n))\n        (string-length (string-append x \"*\" n))\n        (string-length (string-append x \"-\" n))\n        (string-length (string-append x \"*\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" n))\n        (string-length (string-append x \"*\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/\" \"/",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    ((string-substring x 1 (string-length x)) == (string-substring n 1 (string-length n)))\n    (return #t)\n    ))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n",
    "  (if (string=? x)\n    (if (string=? n)\n      (if (string=? (string->number x))\n        (string->number (string->number n)))\n      (string->number (string->number x)))\n    (string->number (string->number x)))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"1\"))\n    (else\n      (string-append (string-append x \"/\" n) \"0\"))))\n",
    "  (cond\n    ((string=? x \"0\") #t)\n    ((string=? n \"0\") #t)\n    ((string=? x \"1\") #f)\n    ((string=? n \"1\")\n      (if (string=? x \"0\")\n          (string=? n \"0\")\n          (string=? x \"1\")\n            (string=? n \"1\")\n              (string=? x \"2\")\n                (string=? n \"2\")\n                  (string=? x \"3\")\n                    (string=? n \"3\")\n                      (string=? x \"4\")\n                        (string=? n \"4\")\n                          (string=? x \"5\")\n                            (string=? n \"5\")\n                              (string=? x \"6\")\n                                (string=? n \"6\")\n                                  (string=? x \"7\")\n                                    (string=? n \"7\")\n                                      (string=? x \"8\")\n                                        (string=? n \"8\")\n                                          (string=? x \"9\")\n                                            (string=? n \"9\")\n                                              (string=? x \"10\")\n                                                (string=? n \"10\")\n                                                  (string=? x \"11\")\n                                                    (string=? n \"11\")\n                                                      (string=? x \"12\")\n                                                        (string=? n \"12\")\n                                                          (string=? x \"13\")\n                                                            (string=? n \"13\")\n                                                              (string=? x \"14\")\n                                                                (string=? n \"14\")\n                                                                  (string=? x \"15\")\n                                                                    (string=? n \"15\")\n                                                                      (string=? x \"16\")\n                                                                        (string=? n \"16\")\n                                                                          (string=? x \"17\")\n                                                                            (string=? n \"17\")\n                                                                              (string=? x \"18\")\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n",
    "  (if (string-match \"^[0-9]+$\" x)\n    (if (string-match \"^[0-9]+$\" n)\n      (if (string-match \"^[0-9]+$\" (string-replace/all x \"^\" \"0\"))\n        (if (string-match \"^[0-9]+$\" (string-replace/all n \"^\" \"0\"))\n          (string-replace/all x \"^\" \"0\")\n          (string-replace/all n \"^\" \"0\"))\n        (string-replace/all x \"^\" \"0\")\n        (string-replace/all n \"^\" \"0\"))\n      (string-replace/all x \"^\" \"0\")\n      (string-replace/all n \"^\" \"0\"))\n    (string-replace/all x \"^\" \"0\")\n    (string-replace/all n \"^\" \"0\"))\n    #t\n    (else\n      #f)))\n",
    "  (if (string? x)\n    (if (string? n)\n      (let ((x-n (/ (string-to-number x) (string-to-number n))))\n        (if (integer? x-n)\n          x-n\n          (/ (string-to-number x) (string-to-number n)))))\n    (/ (string-to-number x) (string-to-number n))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"*\") n)\n      (simplify (string-append x \"/\") (string-append n \"*\"))))\n)\n",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    ((string-substring x 1 (string-length x)) == (string-substring n 1 (string-length n)))\n    (return #t)\n  ))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n)\n      (string-append (string-append x \"*\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (string-append (string-append x \"*\") n)))\n)\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x)))\n      (string->number (string->number n)))\n    (string->number (string->number x)))\n)\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string=? x)\n        (string=? n)\n        (string-split-at-first x)\n        (string-split-at-first n)\n        (if (string=? (string-join (string-split-at-first x) (string-split-at-first n)))\n          (string-join (string-split-at-first x) (string-split-at-first n))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"0\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"1\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"2\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"3\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"4\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"5\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"6\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"7\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"8\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"9\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"10\"))\n          (string-join (string-split-at-first x) (string-join (string-split-at-first n) \"11",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                (string? x)\n                (string? n)\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      (string? x)\n                      (string? n)\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            (string? x)\n                            (string? n)\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  (string? x)\n                                  (string? n)\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        (string? x)\n                                        (string? n)\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              (string? x)\n                                              (string? n)\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    (string? x)\n                                                    (string? n)\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          (string? x)\n                                                          (string? n)\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                                (string? x)\n                                                                (string? n)\n                                                                (else\n                                                                  (if (string? x) (string? n))",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        ",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (string->number (string->number x)))\n    (string->number (string->number x))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"*\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"*\") (string-append n \"*\"))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n)\n        (if (string? x) (string? n)\n          (if (string? x) (string? n)\n            (if (string? x) (string? n)\n              (if (string? x) (string? n)\n                (if (string? x) (string? n)\n                  (if (string? x) (string? n)\n                    (if (string? x) (string? n)\n                      (if (string? x) (string? n)\n                        (if (string? x) (string? n)\n                          (if (string? x) (string? n)\n                            (if (string? x) (string? n)\n                              (if (string? x) (string? n)\n                                (if (string? x) (string? n)\n                                  (if (string? x) (string? n)\n                                    (if (string? x) (string? n)\n                                      (if (string? x) (string? n)\n                                        (if (string? x) (string? n)\n                                          (if (string? x) (string? n)\n                                            (if (string? x) (string? n)\n                                              (if (string? x) (string? n)\n                                                (if (string? x) (string? n)\n                                                  (if (string? x) (string? n)\n                                                    (if (string? x) (string? n)\n                                                      (if (string? x) (string? n)\n                                                        (if (string? x) (string? n)\n                                                          (if (string? x) (string? n)\n                                                            (if (string? x) (string? n)\n                                                              (if (string? x) (string? n)\n                                                                (if (string? x) (string? n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (if (string? (string->number n))\n          (string->number (string-replace/all x \"0\" \"\") \"/\" (string->number n))\n          (string->number (string-replace/all x \"0\" \"\") \"/\" (string->number (string-replace/all n \"0\" \"\"))))\n        (string->number (string-replace/all x \"0\" \"\") \"/\" (string->number (string-replace/all n \"0\" \"\"))))\n      (string->number (string-replace/all x \"0\" \"\") \"/\" (string->number (string-replace/all n \"0\" \"\"))))\n    (string->number (string-replace/all x \"0\" \"\"))\n    (string->number (string-replace/all n \"0\" \"\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((x-denominator (string-split n \"0\")))\n          (string-append (string-join \"0\")\n            (string-join (string-join \"0\")\n              (string-join x-numerator x-denominator))))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (let ((x-denominator (string-split x-numerator \"1\")))\n            (let ((n-denominator (string-split n-numerator \"1\")))\n              (string-append x-denominator n-denominator))))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append n \"1\"))\n    (else\n      (let ((x-numerator (string-split-at-first x \"-\")))\n        (let ((x-denominator (string-split-at-first n \"-\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((x-denominator (string-split n \"0\")))\n          (string-append (string-join \"0\")\n            (string-join (string-join \"0\")\n              (string-join x-numerator x-denominator))))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (if (string? denominator)\n            (let ((numerator-value (string->number numerator)))\n              (let ((denominator-value (string->number denominator)))\n                (if (number? denominator-value)\n                  (if (number? numerator-value)\n                    (if (eq denominator-value 1)\n                      (if (eq numerator-value 0)\n                        (if (eq denominator-value 0)\n                          (if (eq numerator-value 1)\n                            (return #t)\n                            (return #f))\n                          (return #f))\n                        (return #t))\n                      (return #f))\n                    (return #f))\n                  (return #f))\n                (return #f))))))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n)\n          (if (string? x) (string? n)\n              (if (string? x) (string? n)\n                  (if (string? x) (string? n)\n                      (if (string? x) (string? n)\n                          (if (string? x) (string? n)\n                              (if (string? x) (string? n)\n                                  (if (string? x) (string? n)\n                                      (if (string? x) (string? n)\n                                          (if (string? x) (string? n)\n                                              (if (string? x) (string? n)\n                                                  (if (string? x) (string? n)\n                                                      (if (string? x) (string? n)\n                                                          (if (string? x) (string? n)\n                                                             (if (string? x) (string? n)\n                                                                 (if (string? x) (string? n)\n                                                                     (if (string? x) (string? n)\n                                                                         (if (string? x) (string? n)\n                                                                             (if (string? x) (string? n)\n                                                                                 (if (string? x) (string? n)\n                                                                                     (if (string? x) (string? n)\n                                                                                         (if (string? x) (string? n)\n                                                                                            (if (string? x) (string? n)\n                                                                                                (if (string? x) (string? n)\n                                                                                                    (if (string? x) (string? n)\n                                                                                                        (if (string? x) (string? n)\n                                                                                                            (if (string? x) (string? n)\n                                                                                                                (if (string?",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (string-append (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n            (string-join \"\")\n",
    "  (if (and (string? x) (string? n))\n    (if (string-match \"^[0-9]+$\" x)\n      (if (string-match \"^[0-9]+$\" n)\n        (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)\" \"*\")))\n      (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)\" \"/\")))\n    (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)\" \"*\"))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\")\n      (string-append n \"0\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-all (list numerator denominator)) \"0\"))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n))\n        (cond\n          ((string? x) (string? n))\n          (else\n            (if (string? x) (string? n))\n              (cond\n                (string? x)\n                (string? n)\n                (else\n                  (if (string? x) (string? n))\n                    (cond\n                      (string? x)\n                      (string? n)\n                      (else\n                        (if (string? x) (string? n))\n                          (cond\n                            (string? x)\n                            (string? n)\n                            (else\n                              (if (string? x) (string? n))\n                                (cond\n                                  (string? x)\n                                  (string? n)\n                                  (else\n                                    (if (string? x) (string? n))\n                                      (cond\n                                        (string? x)\n                                        (string? n)\n                                        (else\n                                          (if (string? x) (string? n))\n                                            (cond\n                                              (string? x)\n                                              (string? n)\n                                              (else\n                                                (if (string? x) (string? n))\n                                                  (cond\n                                                    (string? x)\n                                                    (string? n)\n                                                    (else\n                                                      (if (string? x) (string? n))\n                                                        (cond\n                                                          (string? x)\n                                                          (string? n)\n                                                          (else\n                                                            (if (string? x) (string? n))\n                                                              (cond\n                                                                (string? x)\n                                                                (string? n)\n                                                                (else\n                                                                  (if (string? x) (string? n))",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (cond\n        ((string? x) (string? n))\n        (else\n          (cond\n            ((string? x) (string? n))\n            (else\n              (cond\n                (integer? (string-to-number x))\n                (integer? (string-to-number n))\n                (else\n                  (cond\n                    (integer? (string-to-number x))\n                    (integer? (string-to-number n))\n                    (else\n                      (cond\n                        (integer? (string-to-number x))\n                        (integer? (string-to-number n))\n                        (else\n                          (cond\n                            (integer? (string-to-number x))\n                            (integer? (string-to-number n))\n                            (else\n                              (cond\n                                (integer? (string-to-number x))\n                                (integer? (string-to-number n))\n                                (else\n                                  (cond\n                                    (integer? (string-to-number x))\n                                    (integer? (string-to-number n))\n                                    (else\n                                      (cond\n                                        (integer? (string-to-number x))\n                                        (integer? (string-to-number n))\n                                        (else\n                                          (cond\n                                            (integer? (string-to-number x))\n                                            (integer? (string-to-number n))\n                                            (else\n                                              (cond\n                                                (integer? (string-to-number x))\n                                                (integer? (string-to-number n))\n                                                (else\n                                                  (cond\n                                                    (integer? (string-to-number x))\n                                                    (integer? (string-to-number n))\n                                                    (else\n                                                      (cond\n                                                        (integer? (string-to-number x))\n                                                        (integer? (string-to-",
    "  (if (and (string? x) (string? n))\n    (string-match (string-append x \"/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^[0-9]+\\\\*[0-9]+$\")\n    (string-match (string-append x \"\\\\/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^[0-9]+\\\\*[0-9]+$\")\n    (string-match (string-append x \"\\\\/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^[0-9]+\\\\*[0-9]+$\")\n    (string-match (string-append x \"\\\\/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^[0-9]+\\\\*[0-9]+$\")\n    (string-match (string-append x \"\\\\/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^[0-9]+\\\\*[0-9]+$\")\n    (string-match (string-append x \"\\\\/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^[0-9]+\\\\*[0-9]+$\")\n    (string-match (string-append x \"\\\\/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^[0-9]+\\\\*[0-9]+$\")\n    (string-match (string-append x \"\\\\/\" n) \"^[0-9]+/[0-9]+$\")\n    (string-match (string-append x \"\\\\*\" n) \"^",
    "  (if (string? x)\n    (if (string? n)\n      (if (string-split x \"/\")\n        (string-split n \"/\")\n        (if (string-split-at-first x \"/\")\n          (string-split-at-first n \"/\")\n          (if (string-split-at-last x \"/\")\n            (string-split-at-last n \"/\")\n            (if (string-split-at-last x \"/\")\n              (string-split-at-last n \"/\")\n              (if (string-split-at-last x \"/\")\n                (string-split-at-last n \"/\")\n                (if (string-split-at-last x \"/\")\n                  (string-split-at-last n \"/\")\n                  (if (string-split-at-last x \"/\")\n                    (string-split-at-last n \"/\")\n                    (if (string-split-at-last x \"/\")\n                      (string-split-at-last n \"/\")\n                      (if (string-split-at-last x \"/\")\n                        (string-split-at-last n \"/\")\n                        (if (string-split-at-last x \"/\")\n                          (string-split-at-last n \"/\")\n                          (if (string-split-at-last x \"/\")\n                            (string-split-at-last n \"/\")\n                            (if (string-split-at-last x \"/\")\n                              (string-split-at-last n \"/\")\n                              (if (string-split-at-last x \"/\")\n                                (string-split-at-last n \"/\")\n                                (if (string-split-at-last x \"/\")\n                                  (string-split-at-last n \"/\")\n                                  (if (string-split-at-last x \"/\")\n                                    (string-split-at-last n \"/\")\n                                    (if (string-split-at-last x \"/\")\n                                      (string-split-at-last n \"/\")\n                                      (if (string-split-at-last x \"/\")\n                                        (string-split-at-last n \"/\")\n                                        (if (string-split-",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n)\n          (if (string? x) (string? n)\n              (if (string? x) (string? n)\n                  (if (string? x) (string? n)\n                      (if (string? x) (string? n)\n                          (if (string? x) (string? n)\n                              (if (string? x) (string? n)\n                                  (if (string? x) (string? n)\n                                      (if (string? x) (string? n)\n                                          (if (string? x) (string? n)\n                                              (if (string? x) (string? n)\n                                                  (if (string? x) (string? n)\n                                                      (if (string? x) (string? n)\n                                                          (if (string? x) (string? n)\n                                                             (if (string? x) (string? n)\n                                                                 (if (string? x) (string? n)\n                                                                     (if (string? x) (string? n)\n                                                                         (if (string? x) (string? n)\n                                                                             (if (string? x) (string? n)\n                                                                                 (if (string? x) (string? n)\n                                                                                     (if (string? x) (string? n)\n                                                                                         (if (string? x) (string? n)\n                                                                                            (if (string? x) (string? n)\n                                                                                                (if (string? x) (string? n)\n                                                                                                    (if (string? x) (string? n)\n                                                                                                        (if (string? x) (string? n)\n                                                                                                            (if (string? x) (string? n)\n                                                                                                                (if (string?",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\"))\n    ((= (string-length x) (string-length n))\n      (string-append n \"1\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-lines\n                          (string-append (first numerator) \"/\")\n                          (first denominator))\n            \"1\"))))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((x-numerator (string-split x \"/\")))\n        (let ((n-numerator (string-split n \"/\")))\n          (cond\n            ((string? x-numerator) (string? n-numerator))\n            ((string? x-numerator) (string? n-numerator))\n            (else\n              (let ((x-denominator (string-split x-numerator \"-\")))\n                (let ((n-denominator (string-split n-numerator \"-\")))\n                  (cond\n                    ((string? x-denominator) (string? n-denominator))\n                    ((string? x-denominator) (string? n-denominator))\n                    (else\n                      (let ((x-numerator (string-split x-denominator \"-\")))\n                        (let ((n-numerator (string-split n-denominator \"-\")))\n                          (cond\n                            ((string? x-numerator) (string? n-numerator))\n                            ((string? x-numerator) (string? n-numerator))\n                            (else\n                              (let ((x-denominator (string-split x-numerator \"-\")))\n                                (let ((n-denominator (string-split n-numerator \"-\")))\n                                  (cond\n                                    ((string? x-denominator) (string? n-denominator))\n                                    ((string? x-denominator) (string? n-denominator))\n                                    (else\n                                      (let ((x-numerator (string-split x-denominator \"-\")))\n                                        (let ((n-numerator (string-split n-denominator \"-\")))\n                                          (cond\n                                            ((string? x-numerator) (string? n-numerator))\n                                            ((string? x-numerator) (string? n-numerator))\n                                            (else\n                                 ",
    "  (cond\n    ((string-length x) != (string-length n))\n    (return #f)\n    ((string-substring x 1 (string-length x)) == (string-substring n 1 (string-length n)))\n    (return #t)\n    (else\n      (let ((x-numerator (string-substring x 1 (string-length x) - 1)))\n        (let ((x-denominator (string-substring n 1 (string-length n) - 1)))\n          (let ((x-numerator-length (string-length x-numerator)))\n            (let ((x-denominator-length (string-length x-denominator)))\n              (let ((x-numerator-value (string->number x-numerator)))\n                (let ((x-denominator-value (string->number x-denominator)))\n                  (let ((numerator (string->number (string-substring n 1 x-numerator-length)))\n                        (denominator (string->number (string-substring n 1 x-denominator-length))))\n                    (let ((numerator-value (string->number x-numerator))\n                          (denominator-value (string->number x-denominator)))\n                      (if (exact? (rationalize (numerator numerator-value) (denominator denominator-value)))\n                        (return #t)\n                        (else\n                          (return #f))))))))))))))))\n",
    "  (if (and (string? x) (string? n))\n    (if (string-match \"^[0-9]+/[0-9]+$\" x)\n      (if (string-match \"^[0-9]+/[0-9]+$\" n)\n        (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\"))\n      (else\n        (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\"))))\n    (else\n      (string->number (string-replace/all x \"^([0-9]+)/([0-9]+)$\" \"*$1/$2\"))))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"=\"))\n    ((= (string-length x) 0)\n      (string-append \"1\" \"/1\"))\n    (else\n      (let ((numerator (string-split-at-first x \"*\"))\n             (denominator (string-split-at-first n \"*\")))\n        (string-append (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all \"\")\n          (string-join-all",
    "  (if (and (string? x) (string? n))\n    (if (string-split-at-first x \"\")\n      (string-split-at-first n \"\")\n      (if (string-split-at-first x \"\")\n        (string-split-at-first n \"\")\n        (if (string-split-at-first x \"\")\n          (string-split-at-first n \"\")\n          (if (string-split-at-first x \"\")\n            (string-split-at-first n \"\")\n            (if (string-split-at-first x \"\")\n              (string-split-at-first n \"\")\n              (if (string-split-at-first x \"\")\n                (string-split-at-first n \"\")\n                (if (string-split-at-first x \"\")\n                  (string-split-at-first n \"\")\n                  (if (string-split-at-first x \"\")\n                    (string-split-at-first n \"\")\n                    (if (string-split-at-first x \"\")\n                      (string-split-at-first n \"\")\n                      (if (string-split-at-first x \"\")\n                        (string-split-at-first n \"\")\n                        (if (string-split-at-first x \"\")\n                          (string-split-at-first n \"\")\n                          (if (string-split-at-first x \"\")\n                            (string-split-at-first n \"\")\n                            (if (string-split-at-first x \"\")\n                              (string-split-at-first n \"\")\n                              (if (string-split-at-first x \"\")\n                                (string-split-at-first n \"\")\n                                (if (string-split-at-first x \"\")\n                                  (string-split-at-first n \"\")\n                                  (if (string-split-at-first x \"\")\n                                    (string-split-at-first n \"\")\n                                    (if (string-split-at-first x \"\")\n                                      (string-split-at-first n \"\")\n                                      (if (string-",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x)))\n      (if (string? (string->number x))\n        (string->number (string->number n)))\n      (if (string? (string->number n))\n        (string->number (string->number x))))\n    (string->number (string->number x))))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"=\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"*\" n \"/\"))\n    (else\n      (string-append x \"*\" n \"=\"))\n  ))\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (simplify (string-append x \"/\") (string-append n \"/1\"))))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\" n) \"1\"))\n    (else\n      (string-append (string-append x \"/\" n) \"0\")))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/1\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/2\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/3\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/4\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/5\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/6\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/7\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/8\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/9\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"1\" \"/10\"))\n    (else\n      (string-append x \"1\" \"/11\")))\n)\n",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append (string-append x \"/\") n))\n    (else\n      (string-append (string-append x \"/\") n)\n      (string-append \"1\")\n      (simplify (string-append x \"/\") (string-append n \"1\"))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (if (string? denominator)\n            (if (string? numerator)\n              (string-join numerator \"/\")\n              (string-join denominator \"/\"))\n            (string-join numerator \"/\" denominator)))))))\n",
    "  (if (and (string? x) (string? n))\n    (if (string-match \"^[0-9]+$\" x)\n      (if (string-match \"^[0-9]+$\" n)\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace x \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace n \"^([0-9]+)/([0-9]+)\" \"*$1/$2\"))\n        (string->number (string-replace x",
    "  (if (string=? x)\n    (if (string=? n)\n      (if (string=? (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x)))\n      (string->number (string->number n)))\n    (string->number (string->number x)))\n)\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x) (string? n)\n          (if (string? x) (string? n)\n              (if (string? x) (string? n)\n                  (if (string? x) (string? n)\n                      (if (string? x) (string? n)\n                          (if (string? x) (string? n)\n                              (if (string? x) (string? n)\n                                  (if (string? x) (string? n)\n                                      (if (string? x) (string? n)\n                                          (if (string? x) (string? n)\n                                              (if (string? x) (string? n)\n                                                  (if (string? x) (string? n)\n                                                      (if (string? x) (string? n)\n                                                          (if (string? x) (string? n)\n                                                             (if (string? x) (string? n)\n                                                                 (if (string? x) (string? n)\n                                                                     (if (string? x) (string? n)\n                                                                         (if (string? x) (string? n)\n                                                                             (if (string? x) (string? n)\n                                                                                 (if (string? x) (string? n)\n                                                                                     (if (string? x) (string? n)\n                                                                                         (if (string? x) (string? n)\n                                                                                            (if (string? x) (string? n)\n                                                                                                (if (string? x) (string? n)\n                                                                                                    (if (string? x) (string? n)\n                                                                                                        (if (string? x) (string? n)\n                                                                                                            (if (string? x) (string? n)\n                                                                                                                    (if (string? x",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((numerator (string-split-at-first x)))\n        (let ((denominator (string-split-at-first n)))\n          (string-append (string-join-of-first numerator \"\")\n                                  (string-join-of-first denominator \"\")))))))\n",
    "  (if (string? x)\n    (if (string? n)\n      (if (string? (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        (string->number (string->number n))\n        (string->number (string->number x))\n        ",
    "  (cond\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    ((= (string-length x) (string-length n))\n      (string-append x \"0\")\n      (string-append n \"0\"))\n    (else\n      (let ((x-numerator (string-split x \"0\")))\n        (let ((n-numerator (string-split n \"0\")))\n          (let ((x-denominator (string-split x-numerator \"1\")))\n            (let ((n-denominator (string-split n-numerator \"1\")))\n              (string-append (string-join \"0\" x-denominator)\n                                  (string-join \"0\" n-denominator))))))))\n",
    "  (cond\n    ((string? x) (string? n))\n    ((string? x) (string? n))\n    (else\n      (if (string? x)\n        (string? n)\n        (if (string? n)\n          (string->number x)\n          (string->number n)\n          (string->number (string-replace/all x \".\" \"\"))\n          (string->number (string-replace/all n \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all x \".\" \"\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all n \".\" \"\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all x \".\" \"\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all n \".\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all (string-replace/all x \".\") \".\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all (string-replace/all n \".\") \".\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all (string-replace/all x \".\") \".\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all (string-replace/all n \".\") \".\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all (string-replace/all x \".\") \".\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all (string-replace/all n \".\") \".\") \".\") \".\" \"\"))\n          (string->number (string-replace/all (string-replace/all (string-replace/all (string-replace/all x \".\") \".\") \".\") \""
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}