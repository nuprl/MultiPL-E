{
  "name": "HumanEval_7_filter_by_substring",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n(define (filter_by_substring strings substring)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)",
  "completions": [
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result ()))\n                  strings))\n        (result))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest strings)))\n            (set! i (1+ i))\n            (rest strings)))))\n  )\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bac",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (cons s result)\n                    ))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (define (filter_substring string substring)\n    (cond\n      ((= string substring) (cons string ()))\n      ((< string substring) (filter_substring (cdr string) substring))\n      (else ()))\n    (filter_substring (car strings) substring)))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (cons s result)\n                    result))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (> i substring_len)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (i + 1))\n            (rest strings))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n        strings)))\n  )\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (1+ i))\n            (rest strings))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string-contains? s substring)\n                   (result (append result s))\n                   ))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string=? s substring)\n                   (result (append result s))\n                   (result ()))\n               strings)\n      result))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (> i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (+ i 1))\n            (set! (first (rest (rest strings))) (first (rest (rest (rest strings))))))\n          (set! i (+ i 1)))))\n    ))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? substring)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n        strings)))\n  )\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (string)\n               (if (string-contains? string substring)\n                   (result (append result string))\n                   (result ()))\n               )\n             strings)\n    result)\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"abc\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"abc\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\"",
    "  (cond\n    [(string? strings)]\n    [(string? substring)\n      (let ((result ()))\n        (for-each (lambda (s)\n                   (if (string? s)\n                       (if (string? substring)\n                           (if (string=? s substring)\n                               (result (cons s result))\n                               (result ()))\n                           ()))\n                   (string-split s \" \")))\n        (result)))\n    [else\n      (error \"filter_by_substring: expected a string\")]])\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (string)\n               (if (string-contains? string substring)\n                   (result (append result string))\n                   ))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list)\n;; >>>",
    "  (let* ([substr (substring)])\n    (if (null? substring)\n      (list)\n      (let* ([(i (0))])\n        (while (> i (length strings))\n          (if (string=? (string-ref strings i) substr)\n            (list (string-ref strings i))\n            (set! i (+ i 1))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;;",
    "  (let* ([result (list)])\n    (for-each (lambda (string)\n               (if (string-contains? string substring)\n                   (result (append result string))\n                   ()))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substr (substring)])\n    (if (null? substring)\n      (list)\n      (let* ([i (0)])\n        (while (< i (length strings))\n          (if (string=? (string-ci (first strings) i) substr)\n            (list (first strings) (second strings))\n            (set! i (1+ i))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string-contains? s substring)\n                   (result (append result s))\n                   ))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string-contains? s substring)\n                   (result (append result s))\n                   ))\n       strings))\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (cons s result)\n                    ))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first strings) (rest strings))\n            (set! i (+ i 1))\n          )\n        )\n      )\n    )\n  )\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s result)))))\n    result))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list",
    "  (cond\n    [(string? strings)\n      (return (filter strings (lambda (x) (string=? substring x))))]\n    [(list? strings)\n      (let ((result (make-vector 0 strings)))\n        (for-each (lambda (x) (string=? substring x)) strings (vector-set! result 0 x)))\n      (return result)]\n    [else\n      (error \"Invalid argument type\")]))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)]\n             [result (list)])\n        (while (< i substring_length)\n          (if (string-contains? (first strings) substring)\n            (result (append result (first strings)))\n            (set! i (1+ i))\n            (next strings)))))\n  ))\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (cons s result)\n                    ()))\n        strings)))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bac",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([substr_len (length substring)])\n    (if (eq? substr_len 0)\n      (list strings)\n      (let* ([substr (substring 0 substr_len)])\n        (filter_by_substring (map (lambda (x) (string-index-of x substr)) strings) substr))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string-contains? s substring)\n                   (result (append result s))\n                   ))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (append result s))\n                    ))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substr (substring)])\n    (if (null? substring)\n      (list)\n      (let* ([(i (0))])\n        (while (< i (length strings))\n          (if (string=? (string-ref strings i) substr)\n            (list (string-ref strings i))\n            (setf (fx+ i 1)\n              (if (> (fx+ i 1) (length strings))\n                (break)\n                (fx+ i 1))))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (zero? substring_length)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring (setf i (1 + i)))\n            (list (first strings))\n            (setf i (1 + i))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(string? (car strings))]\n    [(string? (car substring))]\n    [(string? (car (cdr strings)))]\n    [(string? (car (cdr substring)))])\n  (if (string? strings)\n    (if (string? substring)\n      (filter_by_substring (cdr strings) substring)\n      (filter_by_substring (cdr strings) substring))\n    (filter_by_substring (cdr strings) substring)))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (1+ i))\n            (rest strings)))))\n  ))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? substring_len)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_len)\n          (if (string=? (substring i substring_len) (car strings))\n            (cdr (cdr strings))\n            (setf i (1+ i)))\n          (setf i (1+ i)))\n        (car (cdr strings))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? substring)\n    (list )\n    (let* ([(substring_index (index substring))]\n           [(substring_length (length substring))])\n      (if (>= substring_index 0)\n        (if (<= substring_index (length strings))\n          (list (car strings) (cdr strings))\n          (filter_by_substring (cdr strings) substring))\n        (filter_by_substring (car strings) substring))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest strings)))\n            (set! i (1 + i))\n            (rest strings)))))\n  )\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring",
    "  (if (null? substring)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n        strings)))\n  )\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? substring)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_len)\n          (if (string-contains? (first strings) substring (setf i (1+ i)))\n            (list (first strings))\n            (setf i (1+ i))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k",
    "  (let* ([substring_length (length substring)]\n         [substring_index (index substring substring_length)]\n         [substring_index_start (substring_index - 1)]\n         [substring_index_end (substring_index + substring_length - 1)])\n    (if (null? substring_index_start)\n      (list substring)\n      (let* ([string (car strings)]\n             [strings (cdr strings)]\n             [substring_index_start_index (index string substring_index_start)]\n             [substring_index_end_index (index string substring_index_end)])\n        (if (null? substring_index_end_index)\n          (list string)\n          (let* ([string (car strings)]\n                 [strings (cdr strings)]\n                 [substring_index_end_index_index (index string substring_index_end_index)]\n                 [substring_index_end_index_start (index string substring_index_end_index_index)]\n                 [substring_index_end_index_end (index string substring_index_end_index_start)])\n            (if (null? substring_index_end_index_end)\n              (list string)\n              (let* ([string (car strings)]\n                     [strings (cdr strings)]\n                     [substring_index_end_index_end_index (index string substring_index_end_index_end)]\n                     [substring_index_end_index_end_start (index string substring_index_end_index_end_index)]\n                     [substring_index_end_index_end_end (index string substring_index_end_index_end_start)])\n                (if (null? substring_index_end_index_end_end)\n                  (list string)\n                  (let* ([string (car strings)]\n                          [strings (cdr strings)]\n                          [substring_index_end_index_end_end_index (index string substring_index_end_index_end_end)]\n                          [substring_index_end_index_end_end_start (index string subst",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (string=? x substring)\n                    (result (cons x result)))))\n    result))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substr_len (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i substr_len)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest strings)))\n            (set! i (1+ i))\n            (rest strings)))))\n  )\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (> i substring_len)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (i + 1))\n            (rest strings))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (string=? x substring)\n                    (result (cons x result)))))\n    result))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (string=? x substring)\n                    (result (cons x result)))))\n    result))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string? s)\n                    (if (string=? s substring)\n                      (cons s result)\n                      ()))\n                (car strings)))\n        (return (cdr result))))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond\n    [(string? strings)\n      (return (filter strings (lambda (x) (string=? substring x))))]\n    [(list? strings)\n      (return (filter strings (lambda (x) (string=? substring x))))]\n    [else\n      (return (filter strings (lambda (x) (string=? substring x))))]))\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"cde\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s result))\n                    (result ()))\n                strings)\n      result))\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (1+ i))\n            (set! (first (rest (rest strings))) (first (rest (rest (rest strings))))))\n          (set! i (1+ i)))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([found (find substring strings)] [result (])\n         [i (0)])\n    (cond\n      [found\n        (append result strings[i])\n        (i: (+ i 1))\n        [true]]\n      [false\n        (append result \"\")]))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;;",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (append result s))\n                    ))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list)\n;; >>> (filter_by",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(string? (car strings))]\n    [(string? (car substring))]\n    [(string? (car (cdr strings)))\n      (string? (car (cdr substring)))\n      (string? (car (cdr (cdr strings))))\n      (string? (car (cdr (cdr substring))))]\n    [(string? (car (cdr (cdr (cdr strings)))))]\n    [(string? (car (cdr (cdr (cdr (cdr substring))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr strings))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr substring))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr strings)))))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr substring))))))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(string? (car strings))]\n    [(string? (car substring))]\n    [(string? (car (cdr strings)))\n      (string? (car (cdr substring)))\n      (string? (car (cdr (cdr strings))))\n      (string? (car (cdr (cdr substring))))]\n    [(string? (car (cdr (cdr (cdr strings)))))]\n    [(string? (car (cdr (cdr (cdr (cdr substring))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr strings))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr substring))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr strings)))))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr substring))))))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (result ()))\n    result)\n)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)]\n         [substring_index_end (substring_index + substring_length)]\n         [substring_index_start (substring_index - substring_length)]\n         [substring_index_end_plus_one (substring_index_end + 1)])\n    (if (not (empty? strings))\n      (if (substring_index_start >= 0)\n        (if (substring_index_end_plus_one <= string-length)\n          (list substring)\n          (list))\n        (list)))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond ((null? strings) (list ))\n        ((null? substring) (list ))\n        (else\n          (let ((result (list )))\n            (for-each (lambda (s)\n                        (if (string? s)\n                            (if (string? substring)\n                                (if (string=? s substring)\n                                  (append result s))))\n                        (string-split s \" \"))\n              (result))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\"",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(string? (car strings))]\n    [(string? (car substring))]\n    [(string? (car (cdr strings)))]\n    [(string? (car (cdr substring)))])\n  (if (string? strings)\n    (filter_by_substring (cdr strings) substring)\n    (filter_by_substring (cdr substring) strings)))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n",
    "  (define (filter_by_substring_aux lst substring)\n    (cond\n      ((null? lst) (list))\n      ((= (length lst) 1) (cons (car lst) (filter_by_substring_aux (cdr lst) substring)))\n      (else (filter_by_substring_aux (cdr lst) substring))\n    )\n  )\n  (filter_by_substring_aux strings substring)\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>>",
    "  (let* ([found (false)])\n    (for-each (lambda (s)\n               (if (string=? s substring)\n                   (found true)\n                   (found false)))\n      strings))\n  (if found\n    (list strings)\n    (list)))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"c",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))) (first (rest (rest (rest strings)))) (first (rest (rest (rest (rest strings))))))\n            (set! i (i + 1))\n            (set! (first (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? substring_length)\n      (list)\n      (let* ([(i (0))])\n        (while (> i substring_length)\n          (if (string=? (string-ref strings i) substring)\n            (list (string-ref strings i))\n            (setf i (+ i 1))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (result ()))\n    result))\n",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(string? (car strings))]\n    [(string? (car substring))]\n    [(string? (car (cdr strings)))]\n    [(string? (car (cdr substring)))])\n  (if (filter_by_substring strings substring) (list strings)))\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let* ([found (find substring strings)])\n    (if found\n      (list strings (cdr found))\n      (list))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"z\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"c",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)])\n    (if (not (null? substring_index))\n      (if (not (null? substring_index))\n        (if (not (null? substring_length))\n          (list substring_index substring_length)\n          (list substring_index substring_length))\n        (list substring_index substring_length)))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string=? s substring)\n                   (result (append result s))\n                   ()))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"bacd",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond\n    [(string? strings)\n      (return (filter strings (lambda (x) (string=? substring x))))]\n    [(list? strings)\n      (let ((result (make-vector 0 (length strings))))\n        (for-each (lambda (x) (string=? substring x)) strings (vector-set! result 0 x)))\n      (return result))]\n    [else\n      (error \"filter_by_substring: invalid argument\"))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_index (string-index substring \"\")])\n    (if (eq substring_index 0)\n      (list substring)\n      (let* ([substring_index_end (string-index substring_index \"\")])\n        (if (eq substring_index_end (length strings))\n          (list)\n          (let* ([substring_index_start (string-index substring_index_end \"\")])\n            (if (eq substring_index_start 0)\n              (list)\n              (let* ([substring_index_end_end (string-index substring_index_start \"\")])\n                (if (eq substring_index_end_end (length strings))\n                  (list)\n                  (let* ([substring_index_start_start (string-index substring_index_end_end \"\")])\n                    (if (eq substring_index_start_start 0)\n                      (list)\n                      (let* ([substring_index_start_end (string-index substring_index_start_start \"\")])\n                        (if (eq substring_index_start_end (length strings))\n                          (list)\n                          (let* ([substring_index_start_start_start (string-index substring_index_start_end_start \"\")])\n                            (if (eq substring_index_start_start_start 0)\n                              (list)\n                              (let* ([substring_index_start_start_end (string-index substring_index_start_start_start \"\")])\n                                (if (eq substring_index_start_start_end (length strings))\n                                  (list)\n                                  (let* ([substring_index_start_start_end_start (string-index substring_index_start_start_end_start \"\")])\n                                    (if (eq substring_index_start_start_end_start (length strings))\n                                      (list)\n                                      (list))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(string? (car strings))]\n    [(string? (car substring))]\n    [(string? (car (cdr strings)))\n      (string? (car (cdr substring)))\n      (string? (car (cdr (cdr strings))))\n      (string? (car (cdr (cdr substring))))\n      (string? (car (cdr (cdr (cdr strings)))))]\n    [(string? (car (cdr (cdr (cdr substring)))))]\n    [(string? (car (cdr (cdr (cdr (cdr strings))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr substring))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr strings))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr substring)))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr strings))))))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr substring)))))))))))))]\n    [(string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (result ()))\n    result))\n",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(string? (car strings))]\n    [(string? (car substring))]\n    [(string? (car (cdr strings)))]\n    [(string? (car (cdr substring)))])\n  (if (string? strings)\n    (filter_by_substring (cdr strings) substring)\n    (filter_by_substring (cdr substring) strings)))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (append result s))\n                    ))\n      strings))\n)\n",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first strings) (rest strings))\n            (set! i (+ i 1))\n            (next strings)))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"abc\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"abc\" \"bacd\")\n;; (list \"abc\" \"bacd",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? substring)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first strings) (rest strings))\n            (set! i (+ i 1))\n            (rest strings)))))\n  ))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? substring)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result ()))\n                strings))\n        (result))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_len (length substring)]\n         [substring_index (find substring substring)])\n    (if (not (eq substring_index substring_len))\n      (cons substring\n       (filter_by_substring (cdr strings) substring))\n      (cdr strings))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\"",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (cons s result)\n                    ()))\n        strings)))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_len)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))) (first (rest (rest (rest strings)))) (first (rest (rest (rest (rest strings))))))\n            (set! i (i + 1))\n            (rest strings))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (string=? x substring)\n                    (result (cons x result)))))\n    result))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? strings)\n      []\n      (let* ([i (0)])\n        (while (< i substring_len)\n          (if (string=? (first strings) substring (setf i (1)))\n            (return (rest strings))\n            (setf i (+ i 1))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)]\n         [substring_index_end (substring_index + substring_length)]\n         [substring_index_start (substring_index - substring_length)]\n         [substring_index_end_plus_one (substring_index_end + 1)])\n    (if (not (eq? substring_index substring_index_end))\n      (list substring)\n      (let* ([substring_index_start_plus_one (substring_index_start + 1)]\n             [substring_index_end_minus_one (substring_index_end - 1)]\n             [substring_index_start_minus_one (substring_index_start - 1)]\n             [substring_index_end_minus_two (substring_index_end - 2)]\n             [substring_index_end_minus_three (substring_index_end - 3)]\n             [substring_index_end_minus_four (substring_index_end - 4)]\n             [substring_index_end_minus_five (substring_index_end - 5)]\n             [substring_index_end_minus_six (substring_index_end - 6)]\n             [substring_index_end_minus_seven (substring_index_end - 7)]\n             [substring_index_end_minus_eight (substring_index_end - 8)]\n             [substring_index_end_minus_nine (substring_index_end - 9)]\n             [substring_index_end_minus_ten (substring_index_end - 10)])\n        (if (not (eq? substring_index_start substring_index_end_minus_one))\n          (let* ([substring_index_start_minus_one_plus_one (substring_index_start - 1 + 1)]\n                 [substring_index_end_minus_one_minus_two (substring_index_end - 2 - 1)]\n                 [substring_index_end_minus_one_minus_three (substring_index_",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)]\n         [substring_index_end (substring_index + substring_length)]\n         [substring_length_end (substring_index_end + substring_length)]\n         [substring_index_start (substring_index - substring_length)]\n         [substring_length_start (substring_index_start - substring_length)])\n    (if (not (null? substring))\n      (if (substring_index_start >= 0)\n        (if (substring_length_end <= string-length)\n          (list substring)\n          (filter_by_substring (list (cdr strings) substring) substring))\n        (filter_by_substring (list (cdr strings) substring) substring))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (append result s))\n                    ))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list)\n;; >>> (filter",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string=? s substring)\n                   (result (append result s))\n                   ))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond\n    [(string? strings)]\n    [(string? substring)]\n    [(substring = substring)]\n    [(substring = substring) (cons strings)]\n    [else (error \"Invalid arguments\")]))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"bacd\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"bacd\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond\n    ((null? strings) \"\")\n    ((null? substring) \"\")\n    (string=? strings substring)\n    (else (cons strings substring)))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)])\n    (if (null? substring_index)\n      (list)\n      (let* ([string (first strings)]\n             [substring (first substring_index)]\n             [substring_index (second substring_index)]\n             [substring_length (second substring_length)]\n             [substring_index_end (substring_index + substring_length)])\n        (if (null? substring_index_end)\n          (list string)\n          (let* ([string (first (rest strings))]\n                 [substring (first substring_index)]\n                 [substring_index (second substring_index)]\n                 [substring_length (second substring_length)]\n                 [substring_index_end (substring_index + substring_length)])\n            (if (null? substring_index_end)\n              (list string)\n              (let* ([string (first (rest (rest strings)))]\n                     [substring (first substring_index)]\n                     [substring_index (second substring_index)]\n                     [substring_length (second substring_length)]\n                     [substring_index_end (substring_index + substring_length)])\n                (if (null? substring_index_end)\n                  (list string)\n                  (let* ([string (first (rest (rest (rest strings))))]\n                         [substring (first substring_index)]\n                         [substring_index (second substring_index)]\n                         [substring_length (second substring_length)]\n                         [substring_index_end (substring_index + substring_length)])\n                    (if (null? substring_index_end)\n                      (list string)\n                      (let* ([string (first (rest (rest (rest (rest strings)))))]\n                             [substring (first substring_index)]\n                             [substring_index (second substring_index)]\n                             [substring_length (second substring_length)]\n                             [substring_index_end (substring_index + substring_length)",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list)\n;; >>>",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)])\n    (if (not (null? substring_index))\n      (let* ([string (copy-sequence strings)]\n             [substring_index_start (substring-index-start string substring_index]]\n             [substring_index_end (substring-index-end string substring_index_start]]\n             [substring_index_length (substring-index-length string substring_index_start]]\n             [substring_index_string (copy-sequence string substring_index_start substring_index_end])\n            (if (not (null? substring_index_string))\n              (return (append string substring_index_string))))))))\n  (if (not (null? substring_index))\n    (return (append string substring))))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"m",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result ()))\n                strings))\n        result))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond ((null? strings) \"\")\n        ((null? substring) \"\")\n        (string? (car strings))\n        (string? (car substring))\n        (string? (cdr strings))\n        (string? (cdr substring))\n        (string? (car (cdr strings)))\n        (string? (car (cdr substring)))\n        (string? (cdr (cdr strings)))\n        (string? (cdr (cdr substring)))\n        (string? (car (cdr (cdr strings))))\n        (string? (car (cdr (cdr substring))))\n        (string? (cdr (cdr (cdr strings))))\n        (string? (cdr (cdr (cdr substring))))\n        (string? (car (cdr (cdr (cdr strings))))))\n  (cdr (filter_by_substring (cdr strings) substring)))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_",
    "  (if (null? substring)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string? s)\n                    (if (string=? s substring)\n                      (result (cons s s))\n                      (result )))))\n      (result))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string=? s substring)\n                   (result (cons s result))\n                   (result)))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (cons s result)\n                    ))\n      (string-split-at-first s)))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substr (substring)])\n    (if (null? substring)\n      (list)\n      (let* ([(i (0))])\n        (while (i < length? strings)\n          (if (contains? strings i substr)\n            (list (first strings i) (rest strings))\n            (i (i + 1))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (>= (i) 0)\n          (if (string=? (first strings) substring)\n            (list (first (next strings)) (first (next (next strings))))\n            (set! i (+ i 1))\n            (next (next (next strings))))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (cons s result)\n                    ()))\n        strings)))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond ((null? strings) (list ))\n        ((null? substring) (list ))\n        (else\n          (let ((result ()))\n            (for-each (lambda (s)\n                       (cond ((= s substring) (cons s result))\n                             (else ()))\n                       (string-split s \" \"))\n              (result)))\n          (result)))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)]\n         [substring_index_end (substring_index + substring_length)]\n         [substring_length_end (substring_index_end + substring_length)]\n         [substring_index_start (substring_index - substring_length)]\n         [substring_length_start (substring_index_start - substring_length)])\n    (if (null? substring)\n      (list)\n      (let* ([string (first strings)]\n             [substring (first substring)]\n             [substring_index (first substring_index)]\n             [substring_index_end (first substring_index_end)]\n             [substring_length (first substring_length)]\n             [substring_length_end (first substring_length_end)]\n             [substring_index_start (first substring_index_start)]\n             [substring_length_start (first substring_length_start)])\n        (if (string-contains? string substring)\n          (list string)\n          (let* ([string (first (rest strings))]\n                 [substring (first (rest substring))]\n                 [substring_index (first substring_index)]\n                 [substring_index_end (first substring_index_end)]\n                 [substring_length (first substring_length)]\n                 [substring_length_end (first substring_length_end)]\n                 [substring_index_start (first substring_index_start)]\n                 [substring_length_start (first substring_length_start)])\n            (filter_by_substring (rest string) substring)\n            ))))))))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (> i substring_len)\n          (if (string=? (first strings) substring (setf i (+ i 1)))\n              (list (first strings) (rest strings))\n            (setf i (+ i 1))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"l\")\n;; (list)\n;;",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bacd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bacd\" \"cde\" \"array\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string=? s substring)\n                    (result (cons s s))\n                    (result ()))\n                strings))\n        (result))))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (cons s result)\n                    ))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string? s)\n                    (if (string=? s substring)\n                        (result (cons s result)))))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (string)\n               (if (string-contains? string substring)\n                   (result (append result string))\n                   ()))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (append result s))\n                    ))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (zero? substring_length)\n      (list)\n      (let* ([i (0)])\n        (while (< i substring_length)\n          (if (string=? (string-ref strings i) substring)\n            (list (string-ref strings i))\n            (setf i (1+ i)))\n          (setf i (1+ i)))\n        (list))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond ((null? strings) (list ))\n        ((null? substring) (list ))\n        (else\n          (let ((result ()))\n            (for-each (lambda (x)\n                       (if (string=? x substring)\n                           (result (cons x result)))))\n            (result)))\n        ))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (string=? x substring)\n                    (result (cons x result)))))\n    result))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"z\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab",
    "  (if (null? substring)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (cons s result)\n                    result))\n        strings)))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"k\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"b",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond\n    [(string? strings)\n      (return (filter strings (lambda (s) (string=? s substring))))]\n    [(list? strings)\n      (let ((result (make-vector 0 (length strings))))\n        (for-each (lambda (s) (string=? s substring) (vector-set! result s))\n          strings))\n      (return result)]\n    [else\n      (error \"filter_by_substring: invalid argument\")]))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_substring (list \"abc\"",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (cons s result)\n                    ))\n        (list strings)))\n    ))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"bacd\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"bacd\" \"cde\" \"array\" \"bacd\" \"cde\")\n;; (list \"abc\" \"bacd\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\" \"b",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)])\n    (if (null? substring_index)\n      (list)\n      (let* ([(i (0))]\n             [(substring_index (i substring_index))])\n        (if (null? substring_index)\n          (list)\n          (let* ([(i (0))]\n                 [(substring_index (i substring_index))])\n            (if (null? substring_index)\n              (list)\n              (let* ([(i (0))]\n                     [(substring_index (i substring_index))])\n                (if (null? substring_index)\n                  (list)\n                  (let* ([(i (0))]\n                         [(substring_index (i substring_index))])\n                    (if (null? substring_index)\n                      (list)\n                      (let* ([(i (0))]\n                             [(substring_index (i substring_index))])\n                        (if (null? substring_index)\n                          (list)\n                          (let* ([(i (0))]\n                                 [(substring_index (i substring_index))])\n                            (if (null? substring_index)\n                              (list)\n                              (let* ([(i (0))]\n                                     [(substring_index (i substring_index))])\n                                (if (null? substring_index)\n                                  (list)\n                                  (let* ([(i (0))]\n                                        [(substring_index (i substring_index))])\n                                    (if (null? substring_index)\n                                      (list)\n                                      (let* ([(i (0))]\n                                            [(substring_index (i substring_index))])\n                                        (if (null? substring_index)\n                                          (list)\n                                          (let* ([(i (0))]\n                                                [(substring_index (i substring_index))])\n                               ",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (cond\n    ((null? strings) \"\")\n    ((null? substring) \"\")\n    (some (lambda (x) (string=? x substring)) strings)\n  ))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"b\")\n;; (list \"bacd\" \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"d\")\n;; (list \"cde\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"f\")\n;; (list \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"z\")\n;; (list \"\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bacd\" \"array\")\n;; >>> (filter_by_substring (list \"abc\" \"b",
    "  (let* ([substring_length (length substring)])\n    (if (null? substring)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substring_length)\n          (if (string=? (first strings) substring)\n            (list (first strings) (i))\n            (set! i (+ i 1))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n               (if (string-contains? s substring)\n                   (result (append result s))\n                   ))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_length (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (>= (i) 0)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (+ i 1))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_index (string-index substring 0)]\n         [substring_length (string-length substring)]\n         [substring_index_end (substring_index + substring_length)]\n         [substring_index_start (substring_index - substring_length)]\n         [substring_length_end (substring_length + substring_length)]\n         [substring_length_start (substring_length - substring_length)])\n    (if (null? substring)\n      (list)\n      (let* ([substring_index_end_minus_1 (substring_index_end - 1)]\n             [substring_index_start_minus_1 (substring_index_start - 1)]\n             [substring_index_end_plus_1 (substring_index_end + 1)]\n             [substring_index_start_plus_1 (substring_index_start + 1)])\n        (if (null? substring_index_end_minus_1)\n          (if (null? substring_index_start_minus_1)\n            (if (null? substring_index_end_plus_1)\n              (if (null? substring_index_start_plus_1)\n                (list)\n                (let* ([substring_index_end_minus_2 (substring_index_end - 2)]\n                        [substring_index_start_minus_2 (substring_index_start - 2)]\n                        [substring_index_end_plus_2 (substring_index_end + 2)]\n                        [substring_index_start_plus_2 (substring_index_start + 2)])\n                  (if (null? substring_index_end_minus_2)\n                    (if (null? substring_index_start_minus_2)\n                      (if (null? substring_index_end_plus_2)\n                        (if (null? substring_index_start_plus_2)\n                          (list)\n                          (filter_by_substring\n                            (list (substring substring_index_start substring_index_end substring_index_start_minus_1 subst",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? strings)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n        strings)))\n  (filter_by_substring strings substring))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([s (substring)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i (length strings))\n          (if (string=? (first strings) s)\n            (list (first (next strings)) (first (next (next strings))))\n            (set! i (i + 1))\n            (next (next (next strings))))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (string=? x substring)\n                    (result (cons x result)))))\n    result))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (cons s result)\n                    result))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (cons s result)\n                    ()))\n        strings)))\n)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substring_len (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substring_len)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (1+ i))\n            (rest strings)))))\n    (rest strings)))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substr_len (length substring)])\n    (if (null? strings)\n      (list)\n      (let* ([(i (0))])\n        (while (< i substr_len)\n          (if (string=? (first strings) substring)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (1+ i))\n            (rest strings))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let* ([substr (substring)])\n    (if (null? substring)\n      (list)\n      (let* ([i (0)])\n        (while (< i (length strings))\n          (if (string=? (aref strings i) substr)\n            (list (aref strings i))\n            (setf i (1+ i))))))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (if (null? substring)\n    (list )\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (result (cons s s))\n                    (result ))))\n      (result))))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (cons s result)\n                    ))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-contains? s substring)\n                    (cons s result)\n                    ))\n        (list strings)))\n    ))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-contains? s substring)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that do not contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"bacd\" \"cde\" \"array\")",
    "  (let* ([substring_len (length substring)]\n         [substring_index (index substring substring_len)]\n         [substring_index_start (index substring 0)]\n         [substring_index_end (index substring substring_len - 1)])\n    (if (null strings)\n      ()\n      (let* ([string (car strings)]\n             [string_len (length string)]\n             [string_index (index string substring_len)]\n             [string_index_start (index string substart)]\n             [string_index_end (index string substring_len - 1)])\n        (if (string_index_start <= string_index_end)\n          (cons string\n           (filter_by_substring (cdr strings) substring))\n          ()))))\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}