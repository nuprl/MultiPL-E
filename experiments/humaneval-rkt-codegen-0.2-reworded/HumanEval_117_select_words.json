{
  "name": "HumanEval_117_select_words",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a string s and a natural number n, you have been tasked to implement \n;; a function that returns a list of all words from string s that contain exactly \n;; n consonants, in order these words appear in the string s.\n;; If the string s is empty then the function should return an empty list.\n;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string->list word))\n                      (if (string? (string->list (string->list s)))\n                        (append words (string->list word)))\n                      (append words word)))\n                    (append words \"\")))\n        (string->list s)))\n  (if (empty? words)\n    (list)))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (c) (string-split-at-last-of-nth words c)))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((i 0))\n        (while (< i n)\n          (if (string? (string-ref s i))\n            (list (string-ref s i))\n            (setf i (1+ i))))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (string? s)\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))\n          (string-split s \" \"))))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (string-split s \" \"))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word))))\n      (string-split s \" \"))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word))))\n      (string-split s \" \"))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word))))\n      (string-split s \" \"))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word))))\n      (string-split s \" \"))))\n  (if (string? s)\n    (for-each (lambda (word",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar #'string-count-consecutive-chars words)))\n        (if (>= n consonants)\n          (mapcar (lambda (x) (list x)) words)\n          (list))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n        (if (>= n (length consonants))\n          (mapcar (lambda (x) (string-append x \" \")) words)\n          (select_words (string-join \" \" words) (length consonants))))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((result (list)))\n        (string-split s \" \")\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (zero? n)\n                       (append result word)\n                       (append result (list word)))\n                     (if (zero? (string-length word))\n                       (append result word)))))\n        (result)))\n    (list)))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (split-string s \" \")))\n        (map (lambda (word)\n               (if (string? word)\n                 (if (zero? n)\n                     (list)\n                     (let ((consonants (split-string word \"a-zA-Z\")))\n                       (if (zero? n)\n                         (list)\n                         (let ((consonant_count (count consonants)))\n                           (if (zero? consonant_count)\n                             (list)\n                             (let ((word_count (count word)))\n                               (if (zero? word_count)\n                                 (list)\n                                 (let ((consonant_count (count consonants)))\n                                   (if (zero? consonant_count)\n                                     (list)\n                                     (let ((word_count (count word)))\n                                       (if (zero? word_count)\n                                         (list)\n                                         (let ((consonant_count (count consonants)))\n                                           (if (zero? consonant_count)\n                                             (list)\n                                             (let ((word_count (count word)))\n                                               (if (zero? word_count)\n                                                 (list)\n                                                 (let ((consonant_count (count consonants)))\n                                                  (if (zero? consonant_count)\n                                                   (list)\n                                                   (let ((word_count (count word)))\n                                                    (if (zero? word_count)\n                                                      (list)\n                                                      (let ((consonant_count (count consonants)))\n                                                       (if (zero? consonant_count)\n                                                         (list)\n                                                         (let ((word_count (count word))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-any s \"aeiouy\")))\n        (let ((count (string-length consonants)))\n          (if (>= n count)\n            (map (lambda (word) (string-join \" \" word)) words)\n            (let ((consonant (car consonants)))\n              (if (= n count)\n                (list consonant)\n                (let ((next (cdr consonants)))\n                  (select_words (string-join \" \" consonant next)))))))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (null? words)\n        (list)\n        (let ((consonants (string-split s/1 \" \")))\n          (if (null? consonants)\n            (list)\n            (let ((words (string-split consonants/1 \" \")))\n              (if (null? words)\n                (list)\n                (let ((words (string-split words/1 \" \")))\n                  (if (null? words)\n                    (list)\n                    (let ((words (string-split words/2 \" \")))\n                      (if (null? words)\n                        (list)\n                        (let ((words (string-split words/3 \" \")))\n                          (if (null? words)\n                            (list)\n                            (let ((words (string-split words/4 \" \")))\n                              (if (null? words)\n                                (list)\n                                (let ((words (string-split words/5 \" \")))\n                                  (if (null? words)\n                                    (list)\n                                    (let ((words (string-split words/6 \" \")))\n                                      (if (null? words)\n                                        (list)\n                                        (let ((words (string-split words/7 \" \")))\n                                          (if (null? words)\n                                            (list)\n                                            (let ((words (string-split words/8 \" \"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n            (result ()))\n        (for-each consonants (lambda (consonant)\n          (for-each word words\n            (lambda (word)\n              (if (string-length word)\n                (if (string-length word)\n                  (if (string-length word)\n                    (if (string-length word)\n                      (if (string-length word)\n                        (if (string-length word)\n                          (if (string-length word)\n                            (if (string-length word)\n                              (if (string-length word)\n                                (if (string-length word)\n                                  (if (string-length word)\n                                    (if (string-length word)\n                                      (if (string-length word)\n                                        (if (string-length word)\n                                          (if (string-length word)\n                                            (if (string-length word)\n                                              (if (string-length word)\n                                                (if (string-length word)\n                                                  (if (string-length word)\n                                                    (if (string-length word)\n                                                      (if (string-length word)\n                                                        (if (string-length word)\n                                                          (if (string-length word)\n                                                            (if (string-length word)\n                                                              (if (string-length word)\n                                                                (if (string-length word)\n                                                                  (if (string-length word)\n                                                                    (if (string-length word)\n                                                                      (if (string-length word)\n                                                                        (if (string-length word)\n                                                                          (if (string-length word)\n                                                                            (if (string-length word)\n                                                                              ",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (c) (list c)))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (filter (lambda (x) (string-contains? x \"a\" \"e\" \"i\" \"o\" \"u\")) words))))))\n",
    "  (let ((words (string-split \" \" s)))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split/match \"([^a-zA-Z]+)+\" words)))\n        (if (> (length consonants) n)\n          (list)\n          (let ((result (list)))\n            (for-each (lambda (word)\n                       (if (member (first word) consonants)\n                         (result (append result word))\n                         (result (append result (list word))))\n                       (string-split \" \" word)))\n            (if (empty? result)\n              (list)\n              (result)))))))\n)\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (x) (string-split-at-first-of-nth x n)))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (let ((consonants (string-split word \"\")))\n                  (if (zero? (length consonants))\n                    (list word)\n                    (let ((consonant_count (length consonants)))\n                      (if (eq? consonant_count n)\n                        (list word)\n                        (let ((sublist (select_words (string-join consonants \"\") \n                                        (string-join consonants \" \"))))\n                          (map (lambda (word)\n                                (if (string? word)\n                                  (list word)\n                                  (let ((sublist (select_words word)))\n                                    (list (string-join sublist \" \"))))))))))))))))))))\n  (else\n    (select_words (string-join s \" \") (substring s 0 (string-length s) - 1))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n             (if (string-length word)\n               (filter (lambda (consonant)\n                        (string-contains? consonant word))\n                   consonants)\n               (list word)))\n           words))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n              (result ()))\n          (for-each (lambda (word)\n                     (if (zero? n)\n                       (result (append result word))\n                       (if (zero? (length word))\n                         (append result word))\n                       (if (zero? (length consonants))\n                         (append result word))\n                       (if (zero? (length consonants))\n                         (append result word))\n                       (append result word)))\n            words)))\n    (else\n      (let ((words (string-split s \" \")))\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n              (result ()))\n          (for-each (lambda (word)\n                     (if (zero? n)\n                       (append result word))\n                     (if (zero? (length word))\n                       (append result word))\n                     (if (zero? (length consonants))\n                       (append result word))\n                     (if (zero? (length consonants))\n                       (append result word))\n                     (append result word)))\n            words)))\n    (if (empty? result)\n      (list)\n      (result)))\n",
    "  (if (null? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (if (null? words)\n        (list)\n        (let ((consonants (map (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\")) words)))\n          (if (>= n consonants)\n            (map (lambda (x) (string-append x \" \")) words)\n            (list))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n-characters words n)))\n        (map consonants (lambda (x) (string-split x \" \")))))))\n",
    "  (let ((words (list)))\n    (if (empty? s)\n      (return words)\n      (let ((word (car s)))\n        (if (null? word)\n          (return words)\n          (if (null? (cdr word))\n            (append words (list word)))\n            (append (select_words (cdr word) (car word)) words)))\n        (append words (select_words (cdr word) (car word))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (let ((consonants (string-split word \"\")))\n                  (if (zero? n)\n                    (list word)\n                    (if (zero? (length consonants))\n                      (list word)\n                      (let ((consonant_count (length consonants)))\n                        (if (zero? consonant_count)\n                          (list word)\n                          (if (zero? consonant_count)\n                            (list word)\n                            (let ((consonant_count (length consonants)))\n                              (if (zero? consonant_count)\n                                (list word)\n                                (if (zero? consonant_count)\n                                  (list word))))))))))))))))))\n  (else\n    (let ((words (string-split s \" \")))\n      (map (lambda (word)\n            (if (string? word)\n              (let ((consonants (string-split word \"\")))\n                (if (zero? n)\n                  (list word)\n                  (if (zero? (length consonants))\n                    (list word)\n                    (let ((consonant_count (length consonants)))\n                      (if (zero? consonant_count)\n                        (list word)\n                        (if (zero? consonant_count)\n                          (list word)\n                          (let ((consonant_count (length consonants)))\n                            (if (zero? consonant_count)\n                              (list word)\n                              (if (zero? consonant_count)\n                                (list word)))))))))))))))))))))\n",
    "  (if (null? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (let ((consonants (string-split \"aeiou\")))\n        (let ((count (string-count consonants s)))\n          (filter (lambda (word) (string-count word consonants) == n) words))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (let ((consonants (string-split word \"\")))\n                    (if (zero? (string-length consonants))\n                      (list)\n                      (map (lambda (consonant)\n                            (if (string? consonant)\n                              (list)\n                              (let ((word_consonants (string-split consonant \"\")))\n                                (if (zero? (string-length word_consonants))\n                                  (list)\n                                  (let ((word_consonants_count (string-length word_consonants)))\n                                    (if (eq? word_consonants_count n)\n                                      (list)\n                                      (let ((word_consonants_list (string-split word_consonants \" \")))\n                                        (if (zero? (string-length word_consonants_list))\n                                          (list)\n                                          (map (lambda (word_consonant)\n                                                (if (string? word_consonant)\n                                                  (list)\n                                                  (let ((word_consonant_count (string-length word_consonant)))\n                                                    (if (eq? word_consonant_count n)\n                                                      (list)\n                                                      (let ((word_consonant_list (string-split word_consonant \" \")))\n                                                        (if (zero? (string-length word_consonant_list))\n                                                          (list)\n                                                          (map (lambda (word_consonant_word)\n                                                                (if (string? word_consonant_word)\n                                                                  (list)\n                                                                  (let ((word_consonant_word_count (",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (let ((consonants (string-split word \"\")))\n                    (if (zero? (string-length consonants))\n                      (list)\n                      (let ((consonant-count (string-length consonants)))\n                        (if (zero? consonant-count)\n                          (list)\n                          (let ((consonant-counts (map consonants consonant-count)))\n                            (if (zero? consonant-counts)\n                              (list)\n                              (let ((consonant-counts (map consonants consonant-counts)))\n                                (if (zero? consonant-counts)\n                                  (list)\n                                  (let ((consonant-counts (map consonants consonant-counts)))\n                                    (if (zero? consonant-counts)\n                                      (list)\n                                      (let ((consonant-counts (map consonants consonant-counts)))\n                                        (if (zero? consonant-counts)\n                                          (list)\n                                          (let ((consonant-counts (map consonants consonant-counts)))\n                                            (if (zero? consonant-counts)\n                                              (list)\n                                              (let ((consonant-counts (map consonants consonant-counts)))\n                                                (if (zero? consonant-counts)\n                                                  (list)\n                                                  (let ((consonant-counts (map consonants consonant-counts)))\n                                                    (if (zero? consonant-counts)\n                                                      (list)\n                                                      (let ((consonant-counts (map consonants consonant-counts)))\n                                                        (if (zero? consonant-counts)\n                                ",
    "  (let ((words (list)))\n    (if (empty? s)\n      words\n    (let ((consonants (list)))\n      (for-each (lambda (c)\n                  (if (member c s)\n                    (append consonants c)\n                    (append words c)))\n        s)))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-any s \"aAeEiIoOuU\")))\n        (let ((result (list)))\n          (for-each consonants\n            (lambda (consonant)\n              (if (string-contains? consonant s)\n                (append result (list consonant)))))))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n",
    "  (if (empty? s)\n    []\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n             (if (string-length word)\n               (if (string-length word)\n                 (if (string-length word)\n                   (if (string-length word)\n                     (if (string-length word)\n                       (if (string-length word)\n                         (if (string-length word)\n                           (if (string-length word)\n                             (if (string-length word)\n                               (if (string-length word)\n                                 (if (string-length word)\n                                   (if (string-length word)\n                                     (if (string-length word)\n                                       (if (string-length word)\n                                         (if (string-length word)\n                                           (if (string-length word)\n                                             (if (string-length word)\n                                               (if (string-length word)\n                                                (if (string-length word)\n                                                  (if (string-length word)\n                                                   (if (string-length word)\n                                                     (if (string-length word)\n                                                       (if (string-length word)\n                                                        (if (string-length word)\n                                                          (if (string-length word)\n                                                            (if (string-length word)\n                                                              (if (string-length word)\n                                                                (if (string-length word)\n                                                                  (if (string-length word)\n                                                                    (if (string-length word)\n                                                                      (if (string-length word)\n                                                                        (if (string-length word)\n                                                                          (if (string-length word)\n                                                                            (if (string-length word)\n                                                                              (if (string-length word)\n                                                                                (if (string-length word)\n                                                                                  (if (string-length word)\n                                                                                    (if",
    "  (if (string? s)\n    (if (string? n)\n      (map (lambda (x)\n\t     (if (string? x)\n\t       (if (string? n)\n\t\t (string-split x n)\n\t\t (string-split x n -1))))\n\t (string-split s \" \"))))\n  (list)))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word)))\n                    (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))\n        (string-split s \" \")\n        words)\n    (if (empty? words)\n      (list)))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (if (string? n)\n        (if (>= n 0)\n          (let ((i 0))\n            (while (< i n)\n              (if (string? (string-ref s i))\n                (append words (string-ref s i)))\n              (set! i (1+ i)))))\n        (append words s)))\n    (words)))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n             (if (string-length word)\n               (if (string-length (string-join \" \" (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string->list word))\n                      (if (string? (string->list (string->list s)))\n                        (if (string? (string->list (string->list (string->list s) word)))\n                          (append words (string->list word))))))))\n      (if (string? s)\n        (if (string? (string->list s))\n          (append words (string->list s))))\n      (if (string? s)\n        (if (string? (string->list (string->list s)))\n          (append words (string->list (string->list s))))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (let ((consonants (string-split word \"\")))\n                    (if (zero? n)\n                      (list)\n                      (if (zero? (length consonants))\n                        (list)\n                        (let ((consonant_count (string-length consonants)))\n                          (if (zero? consonant_count)\n                            (list)\n                            (let ((consonant_list (string-split consonants \"\")))\n                              (map (lambda (consonant)\n                                    (if (string? consonant)\n                                      (list)\n                                      (if (zero? (string-length consonant))\n                                        (list)\n                                        (let ((consonant_count (string-length consonant)))\n                                          (if (zero? consonant_count)\n                                            (list)\n                                            (let ((consonant_list (string-split consonant \"\")))\n                                              (if (zero? consonant_count)\n                                                (list)\n                                                (let ((consonant_count (string-length consonant_list)))\n                                                  (if (zero? consonant_count)\n                                                    (list)\n                                                    (let ((consonant_list (string-split consonant_list \"\")))\n                                                      (if (zero? consonant_count)\n                                                        (list)\n                                                        (let ((consonant_count (string-length consonant_list)))\n                                                         (if (zero? consonant_count)\n                                                           (list)\n                                                           (let ((consonant_list (string-split consonant_list \"\"))))))))))))))))))))))))))))))))))))",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n            (result ()))\n        (for-each consonants (lambda (consonant)\n          (for-each word words\n            (lambda (word)\n              (if (string-length word)\n                (if (string-length word)\n                  (if (string-length word)\n                    (if (string-length word)\n                      (if (string-length word)\n                        (if (string-length word)\n                          (if (string-length word)\n                            (if (string-length word)\n                              (if (string-length word)\n                                (if (string-length word)\n                                  (if (string-length word)\n                                    (if (string-length word)\n                                      (if (string-length word)\n                                        (if (string-length word)\n                                          (if (string-length word)\n                                            (if (string-length word)\n                                              (if (string-length word)\n                                                (if (string-length word)\n                                                  (if (string-length word)\n                                                    (if (string-length word)\n                                                      (if (string-length word)\n                                                        (if (string-length word)\n                                                          (if (string-length word)\n                                                            (if (string-length word)\n                                                              (if (string-length word)\n                                                                (if (string-length word)\n                                                                  (if (string-length word)\n                                                                    (if (string-length word)\n                                                                      (if (string-length word)\n                                                                        (if (string-length word)\n                                                                          (if (string-length word)\n                                                                            (if (string-length word)\n                                                                              ",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\")) words)))\n        (if (>= n consonants)\n          (mapcar (lambda (x) (concatenate (list x) (list))) words)\n          (select_words (concatenate words) (sub1 n) (list)))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list))))\n        (string-split s \" \"))\n      (if (null? words)\n        (list)\n        (for-each (lambda (word)\n                   (if (null? (string-split word \" \"))\n                     (list)))\n          words))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map (lambda (word)\n               (string-split-at-first-of-nth word n))\n             consonants))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (c) (string-split-at-first-of-nth words c)))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (filter (lambda (x) (string-contains-x x s)) words))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")\n             (consonant-count (string-length consonants))))\n        (if (eq? n (string-length consonants))\n          (map (lambda (x) (string-join x consonants)) words)\n          (select_words (cdr words) (string-length consonants))))\n      )))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string->list word))\n                      (if (string? (string->list s))\n                        (append words (string->list word))))\n                    (append words (string->list word))))\n                s)\n      (if (empty? words)\n        (list)\n        (reverse words))))\n",
    "  (if (string? s)\n    (if (null? s)\n      (list)\n      (let ((words (string-split s \" \")))\n        (if (> (length words) n)\n          (list)\n          (let ((consonants (string-split-at-any words n)))\n            (map (lambda (word) (string-split word \" \")) consonants)))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (if (empty? words)\n        (list)\n        (let ((consonants (mapcar #(lambda (c) (string-ci-caseless-equal? c \"a\" \"A\" \"e\" \"E\" \"i\" \"I\" \"o\" \"O\" \"u\" \"U\" \"y\" \"Y\")))\n               (filter (lambda (w) (length (filter (lambda (c) (string-ci-caseless-equal? c \"a\" \"A\" \"e\" \"E\" \"i\" \"I\" \"o\" \"O\" \"u\" \"U\" \"y\" \"Y\")) w))) (words)))\n          (mapcar (lambda (c) (string-append (string-join \" \" (consonants c)) \" \")) (words)))\n        )))\n  ))\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar #'string-count-consecutive-chars words)))\n        (if (>= consonants n)\n          (mapcar (lambda (x) (list x)) words)\n          (let ((consonant_counts (mapcar (lambda (x) (length x)) consonants)))\n            (let ((consonant_words (filter (lambda (x) (member x consonant_counts)) words)))\n              (mapcar (lambda (x) (list x)) consonant_words))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map (lambda (word)\n               (if (empty? word)\n                 (list)\n                 (string-split-at-first-of-nth word n)\n               )\n             )\n           consonants\n          )\n        )\n      )\n    )\n)\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar #'string-count-consecutive-chars s)))\n        (if (= n (length consonants))\n          (mapcar (lambda (x) (list x)) words)\n          (let ((sublist (mapcar (lambda (x) (list x)) words)))\n            (let ((result (list)))\n              (for-each (lambda (x)\n                         (if (member x sublist)\n                             (append result x)\n                             ()))\n                    consonants))))))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n\t     (if (string-length word)\n\t       (if (string-length (string-join \" \" (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (if (string? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (if (null? words)\n        (list)\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))\n          (if (null? consonants)\n            (list)\n            (let ((words (filter (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))\n              (if (null? words)\n                (list)\n                (let ((words (filter (lambda (x) (string-count x \"A\" \"E\" \"I\" \"O\" \"U\"))))\n                      (if (null? words)\n                        (list)\n                        (let ((words (filter (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\"))))\n                              (if (null? words)\n                                (list)\n                                (let ((words (filter (lambda (x) (string-count x \"y\"))))\n                                      (if (null? words)\n                                        (list)\n                                        (let ((words (filter (lambda (x) (string-count x \"Y\"))))\n                                              (if (null? words)\n                                                (list)\n                                                (let ((words (filter (lambda (x) (string-count x \"s\"))))\n                                                      (if (null? words)\n                                                        (list)\n                                                        (let ((words (filter (lambda (x) (string-count x \"S\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \"))\n                (string-split word \" \")))\n          words))))\n  (else\n    (error \"Invalid arguments\")))\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar #'string-count-consecutive-chars words)))\n        (if (>= n consonants)\n          (mapcar (lambda (x) (concatenate (list x) words)) consonants)\n          (list))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (zero? n)\n        (list)))\n  (words))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-any s \"aeiouy\")))\n        (let ((count (string-length consonants)))\n          (if (= n count)\n            (mapcar (lambda (x) (string-split x \" \")) words)\n            (let ((word (car words)))\n              (let ((consonant (car consonants)))\n                (if (string-contains? consonant word)\n                  (consonants\n                    (append consonants (string-split-at-any consonant word \" \")))\n                  (select_words (cdr words) (car consonants)))))))))))\n",
    "  (if (string? s)\n    (if (null? s)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (null? word)\n                (list)\n                (let ((consonants (string-split word \"a-zA-Z\")))\n                  (if (= (length consonants) n)\n                    (list word)\n                    (append (select_words word (length consonants))\n                                  (list word))))))))\n    (select_words s (length s))))\n",
    "  (let ((words (string-split s \" \")))\n    (let ((consonants (string-split \"aeiou\")))\n      (let ((count (string-length n)))\n        (map (lambda (word)\n               (if (string-length word)\n                 (filter (lambda (c) (member c consonants) count))\n                 (list \"\"))))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (split-string s \" \")))\n        (map (lambda (word)\n               (if (string? word)\n                 (if (zero? n)\n                     (list word)\n                     (let ((consonants (string-split-at-first-char word)))\n                       (if (zero? n)\n                         (list word)\n                         (let ((consonant_count (length consonants)))\n                           (if (zero? consonant_count)\n                             (list word)\n                             (let ((consonant_list (split-string consonants \" \")))\n                               (map (lambda (consonant)\n                                     (if (string? consonant)\n                                       (if (zero? consonant_count)\n                                         (list word)\n                                         (let ((word_list (split-string word \" \")))\n                                           (map (lambda (word)\n                                                 (if (string? word)\n                                                  (list word)\n                                                  (let ((word_count (length word)))\n                                                   (if (zero? word_count)\n                                                      (list word)\n                                                      (let ((consonant_count (length consonant)))\n                                                        (if (zero? consonant_count)\n                                                          (list word)\n                                                          (let ((consonant_list (split-string consonant \" \")))\n                                                            (map (lambda (consonant)\n                                                                 (if (string? consonant)\n                                                                   (if (zero? consonant_count)\n                                                                      (list word)\n                                                                      (let ((word_count (length word)))\n                                                                        (if (zero? word_count)\n                                                                          (list word)\n                                                                          (let ((consonant_count (length consonant)))\n                                                                            (if (zero? consonant_count)\n                                                                              ",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word)))\n                    (if (string? word)\n                      (if (string? (string-split word \" \"))\n                        (string-split word \" \")\n                        (list word)))\n                    (if (string? word)\n                      (if (string? (string-split word \" \"))\n                        (string-split word \" \")\n                        (list word))))\n                  (words)))\n    (if (empty? words)\n      (list)))\n)\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string->list word))\n                      (if (string? (string->list (string->list s)))\n                        (append words (string->list word))))\n                    (append words (string->list word))))\n                (string->list s)))\n    (if (empty? words)\n      (list))\n    (if (null? n)\n      (list words))\n    (if (negative? n)\n      (let ((result (list)))\n        (for-each (lambda (word)\n                    (if (string? word)\n                      (if (string? (string->list word))\n                        (append result (string->list word))))\n                  (string->list s)))\n          (if (empty? result)\n            (list))\n          (if (null? n)\n            (list result))\n          (if (negative? n)\n            (let ((result (list)))\n              (for-each (lambda (word)\n                         (if (string? word)\n                           (if (string? (string->list word))\n                             (append result (string->list word))))\n                         (string->list s)))\n                (if (empty? result)\n                  (list))\n                (if (null? n)\n                  (list result))\n                (if (negative? n)\n                  (let ((result (list)))\n                    (for-each (lambda (word)\n                               (if (string? word)\n                                 (if (string? (string->list word))\n                                   (append result (string->list word))))\n                               (string->list s)))\n                      (if (empty? result)\n                        (list))\n                      (if (null? n)\n                        (list result))\n                      (if (negative? n)\n                        (let ((result (list)))\n                          (for-each (lambda (word)\n                                     (if (string? word)\n                                       (if (string? (string->list word))\n                                         (append result (string->list word))))\n                                     (string->list s)))\n                            (if (empty?",
    "  (if (string? s)\n    (if (string? n)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (string-split-at-first x)) s)\n      (mapcar (lambda (x) (",
    "  (if (string? s)\n    (let ((words (string-split s \" \")))\n      (if (null? words)\n        (list)\n        (let ((consonants (string-split s/1 \" \")))\n          (if (null? consonants)\n            (list)\n            (let ((result ()))\n              (for-each (lambda (word)\n                         (if (string? word)\n                           (let ((consonants (string-split word \" \")))\n                               (if (null? consonants)\n                                 (list)\n                                 (append result (append (list word) consonants))))))\n                words\n              (result))))))))\n  (if (null? s)\n    (list)\n    (let ((consonants (string-split s/1 \" \")))\n      (if (null? consonants)\n        (list)\n        (let ((result ()))\n          (for-each (lambda (word)\n                     (if (string? word)\n                       (let ((consonants (string-split word \" \")))\n                           (if (null? consonants)\n                             (list)\n                             (append result (append (list word) consonants))))))\n                s\n              (result))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n-characters words n)))\n        (map consonants (lambda (x) (string-split x \" \")))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-any s \"a-zA-Z\")))\n        (map (lambda (word)\n              (if (string-length word)\n                (let ((consonant_count (string-count consonants word)))\n                  (if (= consonant_count n)\n                    (list word)\n                    ()))\n                ()))\n          words))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (append words (string-split word \" \")))\n                    (append words (string-split word \" \"))))\n        s)\n      (if (empty? words)\n        (list)\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                       (append words (string-split word \" \")))))))))\n",
    "  (if (null? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (if (>= n (length words))\n        (map (lambda (word)\n               (if (null? word)\n                 (list)\n                 (let ((consonants (split-string word \"-\")))\n                   (if (>= n (length consonants))\n                     (list word)\n                     (let ((consonant (car consonants)))\n                       (if (null? consonant)\n                         (list)\n                         (let ((word (cdr consonants)))\n                           (if (null? word)\n                             (list)\n                             (let ((word (car word)))\n                               (list word))))))))))))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (null? words)\n        (list)\n        (let ((consonants (string-split-at-any s \"aeiou\"))\n              (counts (map (lambda (x) (string-count x s)) consonants)))\n          (if (>= n counts)\n            (map (lambda (x) (string-split x \" \")) words)\n            (select_words (string-join words \" \") (n - counts)))))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\"))))\n            (result ()))\n        (for-each (lambda (word)\n                   (if (and (string-length word) (string-length word) (eq (string-length word) n))\n                       (append result (list word))\n                       ()))\n           words))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split s \"aeiou\"))\n            (counts (map (lambda (x) (string-count x consonants))))\n            (words (filter (lambda (x) (eq (counts x) n)) words)))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")))\n        (if (zero? n)\n          (list)\n          (let ((result ()))\n            (for-each (lambda (word)\n                       (if (string-length word)\n                         (append result (list word))\n                         ()))\n               consonants)))))\n  ))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (string? s)\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                   (string-split word \" \")\n                   (list word))))))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (let ((consonants (mapcar #(lambda (c) (string-ci-caseless-equal? c \"a\" \"A\" \"e\" \"E\" \"i\" \"I\" \"o\" \"O\" \"u\" \"U\" \"y\" \"Y\" \"h\" \"H\" \"r\" \"R\" \"l\" \"L\" \"n\" \"N\" \"m\" \"M\" \"w\" \"W\" \"t\" \"T\" \"s\" \"S\" \"d\" \"D\" \"g\" \"G\" \"b\" \"B\" \"p\" \"P\" \"q\" \"Q\" \"k\" \"K\" \"x\" \"X\" \"j\" \"J\" \"z\" \"Z\" \"c\" \"C\" \"v\" \"V\" \"b\" \"B\" \"m\" \"M\" \"n\" \"N\" \"r\" \"R\" \"l\" \"L\" \"s\" \"S\" \"z\" \"Z\" \"k\" \"K\" \"p\" \"P\" \"q\" \"Q\" \"t\" \"T\" \"w\" \"W\" \"y\" \"Y\" \"u\" \"U\" \"i\" \"I\" \"o\" \"O\" \"e\" \"E\" \"a\" \"A\" \"h\" \"H\" \"r\" \"R\" \"l\" \"L\" \"n\" \"N\" \"m\" \"M\" \"d\" \"D\" \"g\" \"G\" \"b\" \"B\" \"p\" \"P\" \"q\" \"Q\" \"k\" \"K\" \"x\" \"X\" \"j\" \"J\" \"z\" \"Z\" \"c\" \"C\" \"v\" \"V\" \"b\" \"B\" \"m\" \"M\" \"n\" \"N\" \"r\" \"R\" \"l\" \"L\" \"s\" \"S\" \"z\" \"Z\" \"k\" \"K\" \"p\" \"P\" \"q\" \"Q\" \"t\" \"T\" \"w\" \"W\" \"y\" \"Y\" \"u\" \"U\" \"i\" \"I\" \"o\" \"O\" \"e\" \"E\" \"",
    "  (let ((words (list)))\n    (if (empty? s)\n      words\n    (let ((c (first s)))\n      (if (null? c)\n        (append words (list c))\n      (let ((c (first (cdr c))))\n        (if (null? c)\n          (append words (list c))\n        (let ((c (first (cdr c))))\n          (if (null? c)\n            (append words (list c))\n          (let ((c (first (cdr c))))\n            (if (null? c)\n              (append words (list c))\n            (let ((c (first (cdr c))))\n              (if (null? c)\n                (append words (list c))\n              (let ((c (first (cdr c))))\n                (if (null? c)\n                  (append words (list c))\n                (let ((c (first (cdr c))))\n                  (if (null? c)\n                    (append words (list c))\n                  (let ((c (first (cdr c))))\n                    (if (null? c)\n                      (append words (list c))\n                    (let ((c (first (cdr c))))\n                      (if (null? c)\n                        (append words (list c))\n                      (let ((c (first (cdr c))))\n                        (if (null? c)\n                          (append words (list c))\n                        (let ((c (first (cdr c))))\n                          (if (null? c)\n                            (append words (list c))\n                          (let ((c (first (cdr c))))\n                            (if (null? c)\n                              (append words (list c))\n                            (let ((c (first (cdr c))))\n                              (if (null? c)\n                                (append words (list c))\n                              (let ((c (first (cdr c))))\n                                (if (null? c)\n                                  (append words (list c))\n                                (let ((c (first (cdr c))))\n                                  (if (null? c)\n                                    (append words (list c))\n                                  (let ((c (first (cdr c))))\n                                    (if (null?",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (map (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n            (result ()))\n        (for-each (lambda (word)\n          (if (and (eq (length word) n) (memconsonants word consonants))\n            (result (append result word))))\n          words)))\n  ))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (let ((consonants (string-split word \"\")))\n                  (if (zero? n)\n                    (list)\n                    (if (zero? (length consonants))\n                      (list word)\n                      (let ((words (select_words word (length consonants) - 1)))\n                        (consonants (append consonants (words))))))\n                  (select_words word (length consonants) - 1)))))))\n    (select_words s (length s) - 1)))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")\n             (result ()))\n            (for-each (lambda (word)\n                       (if (string-length word)\n                         (append result (string-split word \"\"))))\n               words))\n        (if (> n (length result))\n          (list)\n          (for-each (lambda (word)\n                     (if (string-length word)\n                       (append result (string-split word \"\"))))\n            words))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n               (if (string? word)\n                 (if (zero? n)\n                     (list)\n                     (let ((consonants (string-split word \"\")))\n                       (if (zero? n)\n                         (list)\n                         (map (lambda (consonant)\n                               (if (string? consonant)\n                                 (list consonant)\n                                 (let ((consonant_list (string-split consonant \"\")))\n                                   (if (zero? n)\n                                     (list)\n                                     (map (lambda (consonant_word)\n                                           (if (string? consonant_word)\n                                             (list consonant_word)\n                                             (let ((consonant_word_list (string-split consonant_word \" \")))\n                                               (if (zero? n)\n                                                (list)\n                                                (map (lambda (consonant_word_word)\n                                                      (if (string? consonant_word_word)\n                                                        (list consonant_word_word)\n                                                        (let ((consonant_word_word_list (string-split consonant_word_word \" \")))\n                                                          (if (zero? n)\n                                                           (list)\n                                                           (map (lambda (consonant_word_word_word)\n                                                                 (if (string? consonant_word_word_word)\n                                                                   (list consonant_word_word_word)\n                                                                   (let ((consonant_word_word_word_list (string-split consonant_word_word_word \" \")))\n                                                                    (if (zero? n)\n                                                                      (list)\n                                                                      (map (lambda (consonant_word_word_word_word)\n                               ",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (string? s)\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map (lambda (word) (string-split-at-first-of-nth word n)) words))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (split-string s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? n)\n                  (list)\n                  (let ((consonants (string-split-at-first-char word)))\n                    (if (zero? n)\n                      (list)\n                      (map (lambda (consonant)\n                            (if (zero? n)\n                              (list)\n                              (list consonant)))\n                        consonants)))))))))))\n  (else\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n            (if (string? word)\n              (if (zero? n)\n                (list)\n                (let ((consonants (string-split-at-first-char word)))\n                  (if (zero? n)\n                    (list)\n                    (map (lambda (consonant)\n                          (if (zero? n)\n                            (list)\n                            (list consonant)))\n                      consonants)))))))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (null? words)\n        (list)\n        (let ((consonants (string-split/lines words \"\\\\s\")))\n          (if (null? consonants)\n            (list)\n            (let ((words (string-split consonants \" \")))\n              (if (null? words)\n                (list)\n                (let ((words (string-split words \"\\\\s\")))\n                  (if (null? words)\n                    (list)\n                    (let ((words (string-split words \"\\\\s\")))\n                      (if (null? words)\n                        (list)\n                        (let ((words (string-split words \"\\\\s\")))\n                          (if (null? words)\n                            (list)\n                            (let ((words (string-split words \"\\\\s\")))\n                              (if (null? words)\n                                (list)\n                                (let ((words (string-split words \"\\\\s\")))\n                                  (if (null? words)\n                                    (list)\n                                    (let ((words (string-split words \"\\\\s
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split s \"\")))\n        (let ((consonant-count (string-length consonants)))\n          (if (= consonant-count n)\n            (map (lambda (word) (string-replace word \" \" \"\")) words)\n            (let ((word (car words)))\n              (if (string-length word)\n                (let ((consonant (car consonants)))\n                  (if (string-length consonant)\n                    (let ((word (car word)))\n                      (if (string-length word)\n                        (let ((consonant (car consonant)))\n                          (if (string-length consonant)\n                            (list word)\n                            (list)\n                          )\n                        )\n                        (list)\n                      )\n                    )\n                    (list)\n                  )\n                )\n                (list)\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (if (string? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (if (null? words)\n        (list)\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))\n          (if (null? consonants)\n            (list)\n            (let ((words (filter (lambda (x) (consonants (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))))\n              (list (mapcar (lambda (x) (string-join \" \" x)) words))))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")\n              (n_consonants (string-length (first words))))\n            (result ()))\n        (for-each (lambda (word)\n                   (if (string-length word)\n                       (if (= (string-length word) n)\n                           (append result word)\n                           (append result (string-join \" \" word))))\n                   (string-split word \" \")))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (x) (string-split x \" \")))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n-characters words n)))\n        (map (lambda (word) (string-split-at-first-of-n-characters word n)) words))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n          (let ((result ()))\n            (for-each consonants (lambda (consonant)\n              (if (zero? n)\n                (result)\n                (for-each word (lambda (word)\n                  (if (string-contains? word consonant)\n                    (append result (list word))\n                  )\n                )\n              )\n            )\n            )\n          )\n        )\n      )\n    )\n    (list)\n  )\n)\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (zero? n)\n        (list))\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (if (zero? n)\n          (list))\n        (for-each (lambda (word)\n                    (if (string? word)\n                      (if (string? (string-split word \" \"))\n                        (string-split word \" \")\n                        (list word))))\n          (if (zero? n)\n            (list))))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word)))\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (string-split s \" \")\n        words))\n  (if (empty? words)\n    (list)))\n",
    "  (cond\n    ((= n 0) (list))\n    ((< n 0) (list))\n    (else\n      (let ((words (split-string s \" \")))\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n              (result ()))\n          (for-each (lambda (word)\n                     (if (and (string-length word) (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string-length word)\n                            (string",
    "  (let ((words (list)))\n    (if (empty? s)\n      (return words)\n      (let ((cursor (make-string n)))\n        (let ((word (make-string)))\n          (while (string-length word)\n            (string-set! word (string-set! cursor (string-ref s cursor)))\n            (if (string-length word)\n              (string-set! word (string-set! cursor (string-ref s cursor)))\n              (string-set! cursor (string-ref s cursor)))\n            (string-set! cursor (string-ref s cursor))))\n        (string-set! cursor (string-ref s cursor))\n        (words (append words word))))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-at-spaces s)))\n      (if (>= n (length words))\n        (map (lambda (word)\n               (if (empty? word)\n                 (list)\n                 (cons (string->symbol word) (select_words (cdr words) n))))\n             (car words)))\n      (select_words (cdr words) n)))\n)\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word)))\n                    (if (string? word)\n                       (if (string? (string-split word \" \"))\n                          (string-split word \" \")\n                          (list word)))\n                    (if (string? word)\n                       (if (string? (string-split word \" \"))\n                          (string-split word \" \")\n                          (list word))))\n                  (words)))\n    (if (empty? words)\n      (list)))\n)\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map (lambda (word)\n               (string-split-at-first-of-nth word n))\n             consonants))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n\t     (if (string-length word)\n\t       (if (string-length (string-join \" \" (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (x) (if (string? x) (append words (string-split x \" \")))) s)\n      (if (null? words)\n        (list)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null? x) (append words (string-split x \" \")))) s)\n        (for-each (lambda (x) (if (null?",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")))\n        (if (eq? n (length consonants))\n          (mapcar (lambda (x) (string-split x \" \")) words)\n          (let ((result ()))\n            (for-each (lambda (x)\n                       (if (eq? (length x) n)\n                         (append result x)))\n               consonants\n               words))))))\n)\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n-characters words n)))\n        (map (lambda (word) (string-split-at-first-of-n-characters word n)) words))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (x) (string-split-at-first-of-nth x n)))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (> (length words) n)\n        (list)\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))\n          (let ((result ()))\n            (for-each consonants (lambda (x)\n              (if (member x words)\n                (append result (list (first x) (second x)))\n                ()))\n            )\n            (if (length result)\n              (list result)\n              (list))))))))\n",
    "  (if (empty? s)\n    []\n    (let ((words (string-split s \" \")))\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n        (let ((result ()))\n          (for-each (lambda (word)\n                     (if (eq (length word) n)\n                       (append result word)))\n               consonants\n               words))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (filter (lambda (x) (string-contains? x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \"))\n                (list))))\n        (if (empty? words)\n          (list)\n          (map (lambda (word)\n                (if (string? word)\n                  (if (zero? (string-length word))\n                    (list)\n                    (string-split word \" \"))\n                  (list))))))))\n  (select_words s n)))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n-characters words n)))\n        (map consonants (lambda (x) (string-split x \" \")))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (let ((consonants (string-split word \"\")))\n                    (if (zero? (string-length consonants))\n                      (list)\n                      (let ((consonant_count (string-length consonants)))\n                        (if (zero? consonant_count)\n                          (list)\n                          (let ((consonant_list (string-split consonants \"\")))\n                            (map (lambda (consonant)\n                                  (if (string? consonant)\n                                    (if (zero? consonant_count)\n                                      (list)\n                                      (let ((word_list (string-split word \" \")))\n                                        (map (lambda (word)\n                                              (if (string? word)\n                                                (list)\n                                                (let ((consonant_count (string-length word)))\n                                                  (if (zero? consonant_count)\n                                                    (list)\n                                                    (let ((consonant_list (string-split word \" \")))\n                                                      (map (lambda (consonant)\n                                                           (if (string? consonant)\n                                                            (if (zero? consonant_count)\n                                                              (list)\n                                                              (let ((word_list (string-split word \" \")))\n                                                                (map (lambda (word)\n                                                                     (if (string? word)\n                                                                      (list)\n                                                                      (let ((consonant_count (string-length word)))\n                                                                        (if (zero? consonant_count)\n                                                                          (list)\n                                                                          (let ((consonant_list (string-split word \" \")))\n                                                                            (map (lambda (consonant)",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (string? s)\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))\n          (string-split s \" \"))))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (string-split s \" \"))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word))))\n      (string-split s \" \"))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (empty? words)\n        (list)\n        (let ((consonants (string-split s/1 \" \")))\n          (if (empty? consonants)\n            (list)\n            (let ((result (list)))\n              (for-each (lambda (word)\n                         (if (string? word)\n                           (let ((consonant (string-split word/1 \" \")))\n                             (if (empty? consonant)\n                               (list)\n                               (append result (list word))))))\n                words)\n              (list result))))))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\")) words)))\n        (let ((result ()))\n          (for-each (lambda (word)\n                     (if (eq (length word) n)\n                       (append result word)\n                       ()))\n            consonants)))\n      (list-sort result)\n      (list-unique result))))\n",
    "  (let ((words (string-split s \" \")))\n    (let ((consonants (mapcar (lambda (c) (string-count c c))))\n          (counts (mapcar (lambda (w) (string-count w \" \"))))\n          (consonant-count (lambda (w) (string-count w \" \"))))\n      (filter (lambda (w) (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w) (string-length w) (string-length w)\n               (string-length w",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (split-string s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (let ((consonants (string-split-at-first-char word)))\n                    (if (zero? n)\n                      (list)\n                      (let ((consonant_count (string-length consonants)))\n                        (if (zero? consonant_count)\n                          (list)\n                          (let ((consonant_list (string-split consonants \" \")))\n                            (map (lambda (consonant)\n                                  (if (string? consonant)\n                                    (if (zero? consonant_count)\n                                      (list)\n                                      (list consonant)\n                                      (consonant_count - 1))))))))))))))))))))\n  (else\n    (select_words (string-append s \" \") (sub1 n))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \"))\n                (string-split word \" \")))\n          words)))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (zero? n)\n        (list))\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (if (zero? n)\n          (list))\n        (for-each (lambda (word)\n                    (if (string? word)\n                      (if (string? (string-split word \" \"))\n                        (string-split word \" \")\n                        (list word))))\n          (if (zero? n)\n            (list))))))\n)\n",
    "  (if (string? s)\n    (if (null? s)\n      (list)\n      (let ((words (string-split s \" \")))\n        (if (>= n (length words))\n          (map (lambda (w) (string-split w \" \")) words)\n          (select_words (string-join words \" \") (length words)))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (filter (lambda (x) (string-contains? x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))))))\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar #[(lambda (x) (string-count x #\"a\" #\"e\" #\"i\" #\"o\" #\"u\")) words]))))\n      (let ((nconsonants (string-count n consonants)))\n        (if (>= nconsonants n)\n          (mapcar (lambda (x) (string-join x \" \")) words)\n          (select_words (string-join words \" \") (nconsonants - n)))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (let ((consonants (mapcar #'string-count-consecutive-chars words)))\n        (filter (lambda (x) (= x n)) consonants)))\n    ))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (let ((consonants (string-split word \"\")))\n                  (if (zero? n)\n                    (list word)\n                    (if (zero? (length consonants))\n                      (list word)\n                      (let ((consonant_count (length consonants)))\n                        (if (zero? consonant_count)\n                          (list word)\n                          (let ((consonant_list (string-split consonants \"\")))\n                            (map (lambda (consonant)\n                                  (if (string? consonant)\n                                    (list word)\n                                    (if (zero? consonant_count)\n                                      (list word)\n                                      (let ((consonant_count (consonant_count - 1)))\n                                        (if (zero? consonant_count)\n                                          (list word)\n                                          (let ((consonant_list (consonant_list - 1)))\n                                            (list word))))))))))))))))))))))))))\n  (else\n    (let ((words (string-split s \" \")))\n      (map (lambda (word)\n            (if (string? word)\n              (let ((consonants (string-split word \"\")))\n                (if (zero? n)\n                  (list word)\n                  (if (zero? (length consonants))\n                    (list word)\n                    (let ((consonant_count (length consonants)))\n                      (if (zero? consonant_count)\n                        (list word)\n                        (let ((consonant_list (string-split consonants \"\")))\n                          (map (lambda (consonant)\n                                (if (string? consonant)\n                                  (list word)\n                                  (if (zero? consonant_count)\n                                    (list word)\n                                    (let ((consonant_count (consonant_count - 1)))\n                                      (if (zero? consonant",
    "  (cond\n    [(string? s)\n      (let ((s1 (string-split s \" \")))\n        (map (lambda (x) (string-split x \" \")) s1))]\n    [(integer? n)\n      (let ((s1 (string-split s \" \")))\n        (map (lambda (x) (string-split x \" \")) s1))]\n    [else\n      (let ((s1 (string-split s \" \")))\n        (map (lambda (x) (string-split x \" \")) s1))]))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (empty? words)\n        (list)\n        (let ((consonants (mapcar #(lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))\n          (result (mapcar (lambda (word)\n                          (if (empty? consonants (consonants (string-split word \" \")))\n                            (consonants (string-split word \" \"))\n                            (consonants (string-split word \" \")))) words))))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n\t     (if (string? word)\n\t       (let ((consonants (string-split-at-first-char word)))\n\t\t   (if (= (length consonants) n)\n\t\t     (list word)\n\t\t     (let ((sublist (select_words (substring word 0 (length consonants) - 1))))\n\t\t       (append sublist (list word)))))))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word)))\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (string-split s \" \")\n        words))\n  words)\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split/case words #\"^[a-zA-Z]$\" \"\")))\n        (if (>= (length consonants) n)\n          (mapcar (lambda (x) (string-split x \" \")) words)\n          (select_words (string-join (mapcar (lambda (x) (string-split x \" \")) words) \" \") (length consonants)))\n        )\n      )\n    )\n  )\n)\n",
    "  (if (string? s)\n    (if (string? n)\n      (if (zero? n)\n        (list)\n        (let ((cnt (string-length s)))\n          (let ((words (list)))\n            (for-each (lambda (word)\n                       (if (string? word)\n                         (if (zero? (string-length word))\n                           (append words (list word)))\n                         (append words (append (list word) (list))))\n                       (string-split-at-spaces s))))\n          (if (empty? words)\n            (list)\n            (let ((cnt (string-length s)))\n              (let ((words (list)))\n                (for-each (lambda (word)\n                           (if (string? word)\n                             (if (zero? (string-length word))\n                               (append words (list word)))\n                             (append words (append (list word) (list))))\n                           (string-split-at-spaces s))))))))\n    (list)))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n               (if (string? word)\n                 (if (zero? (string-length word))\n                     (list)\n                     (string-split word \"\")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n                     (string-split word \" \")\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"a-zA-Z\"))\n            (count (string-length consonants)))\n        (if (>= n count)\n          (map (lambda (word)\n                (string-replace/all word \" \" \"\"))\n              (filter (lambda (word)\n                       (string-contains? word consonants))\n                words)))))\n))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (empty? words)\n        (list)\n        (let ((consonants (string-split s/1 \" \")))\n          (if (= (length consonants) n)\n            (mapcar (lambda (word) (string-split word \" \")) words)\n            (select_words (cdr words) n))))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (empty? words)\n        (list)\n        (let ((consonants (string-split s/1 \" \")))\n          (if (empty? consonants)\n            (list)\n            (let ((count (string-count consonants s/1)))\n              (if (= count n)\n                (map (lambda (word) (string-join \" \" word)) words)\n                (let ((words (select_words (string-join \" \" words))))\n                  (map (lambda (word) (string-join \" \" word)) words)))))))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (if (empty? s)\n        (list)\n        (let ((i 0))\n          (while (< i n)\n            (if (string? (string-ref s i))\n              (append words (list (string-ref s i)))\n              (setq i (1+ i))))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (let ((count (string-count/ci words \"#\"))))\n    (if (eq n 0)\n      (list)\n      (let ((result (list)))\n        (for-each (lambda (word)\n                    (if (eq (count word) n)\n                        (append result word)))\n                  words))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (zero? n)\n        (list))\n      (if (zero? (string-length s))\n        (list))\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (if (zero? n)\n          (list))\n        (if (zero? (string-length s))\n          (list))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n-characters words n)))\n        (map (lambda (word) (string-split-at-first-of-n-characters word n)) words))))\n",
    "  (if (null? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (if (> (length words) n)\n        (list)\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))))\n          (let ((result (list)))\n            (for-each consonants (lambda (x)\n              (if (member x words)\n                (append result (list (first x) (first (cdr x))))))))))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (append words (string-split word \" \"))))\n                    (append words (string-split word \" \"))))\n        (if (string? s)\n          (if (eq n 0)\n            (list)\n            (for-each (lambda (word)\n                       (if (string? word)\n                         (if (string? (string-split word \" \"))\n                            (append words (string-split word \" \")))))))))\n    (if (string? s)\n      (if (eq n 0)\n        (list)\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                         (append words (string-split word \" \"))))))))))\n",
    "  (if (empty? s)\n    []\n    (let ((words (split-at-spaces s)))\n      (if (>= n (length words))\n        (mapcar (lambda (word)\n                 (filter (lambda (consonant)\n                          (= consonant n))\n                       (string-split-at-spaces word)))\n               words)\n         (select_words (cdr words) (car words)))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string->list word))\n                      (if (null? (string->list word))\n                        (append words (string->list word)))\n                      (append words (string->list word))))\n                    (if (null? (string->list word))\n                      (append words (string->list word))))\n                 (string->list s)))\n    (if (null? words)\n      (list)))\n",
    "  (let ((words (string-split s \" \")))\n    (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n      (let ((result ()))\n        (for-each (lambda (x)\n                    (if (eq (length x) n)\n                        (append result x)))\n          consonants)))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (string? s)\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? word)\n                 (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (let ((count (string-count/ci words #\"a-zA-Z\")))\n      (cond\n        ((= count n)\n          (mapcar (lambda (word) (string-split word \" \")) words))\n        (else\n          (let ((subwords (mapcar (lambda (word) (string-split word \" \"))))\n                (result ()))\n            (for-each (lambda (word)\n                       (if (string-length word)\n                         (append result (append result word))\n                         ()))\n               subwords)))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (not (empty? words))\n        (if (zero? n)\n          (list words)\n          (for-each (lambda (word)\n                      (if (zero? (string-length word))\n                        (list word))))\n          (for-each (lambda (word)\n                      (if (zero? (string-length word))\n                        (list word)))\n            words))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))\n                    (list))))\n      (if (zero? n)\n        (list))\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (if (zero? n)\n          (list))\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))\n          (if (zero? n)\n            (list))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (let ((consonants (mapcar #(lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\")) words)))\n          (let ((result ()))\n            (for-each consonants (lambda (consonant)\n              (if (zero? (string-count consonant \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))\n                (append result (string-split consonant \" \")))))\n            (return result)))\n    (else\n      (let ((words (string-split s \" \")))\n        (let ((consonants (mapcar #(lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\")) words)))\n          (let ((result ()))\n            (for-each consonants (lambda (consonant)\n              (if (zero? (string-count consonant \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"A\" \"E\" \"I\" \"O\" \"U\" \"Y\"))\n                (append result (string-split consonant \" \")))))\n            (return result)))))))\n",
    "  (if (empty? s)\n    []\n    (let ((words (split-string s \" \")))\n      (let ((consonants (mapcar #(lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\" \"n\" \"l\" \"r\" \"s\" \"t\" \"d\" \"g\" \"b\" \"p\" \"m\" \"k\" \"c\" \"w\" \"j\" \"q\" \"x\" \"z\"))))\n        (let ((result ()))\n          (for-each consonants (lambda (consonant)\n            (for-each words (lambda (word)\n              (if (string-count word consonant)\n                (append result (list word))\n              )))))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n n (car words))))\n        (map (lambda (word)\n               (if (empty? consonants)\n                 (list word)\n                 (consonants\n                   (string-split-at-first-of-n n (car (cdr word)))\n                   (cdr consonants))))\n             (cdr words))))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (let ((consonants (map (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n            (result ()))\n        (for-each consonants (lambda (consonant)\n          (for-each word words\n            (lambda (word)\n              (if (string-length word)\n                (if (string-length word)\n                  (if (string-length word)\n                    (if (string-length word)\n                      (if (string-length word)\n                        (if (string-length word)\n                          (if (string-length word)\n                            (if (string-length word)\n                              (if (string-length word)\n                                (if (string-length word)\n                                  (if (string-length word)\n                                    (if (string-length word)\n                                      (if (string-length word)\n                                        (if (string-length word)\n                                          (if (string-length word)\n                                            (if (string-length word)\n                                              (if (string-length word)\n                                                (if (string-length word)\n                                                  (if (string-length word)\n                                                    (if (string-length word)\n                                                      (if (string-length word)\n                                                        (if (string-length word)\n                                                          (if (string-length word)\n                                                            (if (string-length word)\n                                                              (if (string-length word)\n                                                                (if (string-length word)\n                                                                  (if (string-length word)\n                                                                    (if (string-length word)\n                                                                      (if (string-length word)\n                                                                        (if (string-length word)\n                                                                          (if (string-length word)\n                                                                            (if (string-length word)\n                                                                              (",
    "  (if (empty? s)\n    (list)\n    (let ((p (string-split s \" \")))\n      (map (lambda (x) (string-split x \" \")) p))\n    (filter (lambda (x) (string-length x) = n) p)))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (append words (string-split word \" \")))\n                    (append words (string-split word \" \"))))\n        s)\n      (if (null? words)\n        (list)\n        (reverse words))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-at-spaces s)))\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n            (n_consonants (string-length n)))\n        (filter (lambda (x) (string-count x consonants) == n) words)))\n  )\n)\n",
    "  (let ((words (split-at-spaces s)))\n    (if (empty? words)\n      (list)\n      (let ((consonants (map (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n            (result ()))\n        (for-each consonants (lambda (consonant)\n          (for-each (lambda (word)\n            (if (string-count word consonant)\n              (append result (list word))\n              ()))\n            words)))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split/match words \"([^a-zA-Z]|_)\" \"\")))\n        (if (>= n (length consonants))\n          (map (lambda (x) (string-split x \" \")) words)\n          (select_words (string-join (map (lambda (x) (string-split x \" \")) words) \" \") (length consonants) - 1))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")))\n        (let ((count (string-length consonants)))\n          (if (= count n)\n            (mapcar (lambda (word) (string-join \" \" word)) words)\n            (let ((word (first words)))\n              (if (string-length word)\n                (let ((consonant (first consonants)))\n                  (if (= count 1)\n                    (list word)\n                    (let ((next (cdr consonants)))\n                      (let ((next_word (first next)))\n                        (if (string-length next_word)\n                          (let ((next_consonant (first next_word)))\n                            (if (= count 2)\n                              (list word next_word)\n                              (let ((next_next_word (first (cdr next_word)))\n                                    (if (string-length next_next_word)\n                                      (let ((next_next_consonant (first next_next_word)))\n                                        (if (= count 3)\n                                          (list word next_word next_next_word)\n                                          (let ((next_next_next_word (first (cdr next_next_word))))\n                                            (if (= count 4)\n                                              (list word next_word next_next_word next_next_word)\n                                              (list
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (x) (string-split x \" \")))))))\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n            (n_consonants (string-length n)))\n        (let ((result ()))\n          (for-each (lambda (word)\n                     (if (and (string-length word)\n                            (= n_consonants (string-length word)))\n                         (append result (list word))))\n            words))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (string? words)\n        (let ((consonants (string-split words \"a-zA-Z\")))\n          (if (string? consonants)\n            (let ((count (string-length consonants)))\n              (if (>= n count)\n                (map (lambda (word)\n                      (string-split word \" \"))\n                  consonants)\n                (list))))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-any s \"aeiouy\")))\n        (let ((count (string-length consonants)))\n          (if (= n count)\n            (mapcar (lambda (x) (string-split x \" \")) words)\n            (let ((count (string-length consonants)))\n              (if (<= n count)\n                (mapcar (lambda (x) (string-split x \" \")) words)\n                (let ((count (string-length consonants)))\n                  (if (<= n count)\n                    (mapcar (lambda (x) (string-split x \" \")) words)\n                    (let ((count (string-length consonants)))\n                      (if (<= n count)\n                        (mapcar (lambda (x) (string-split x \" \")) words)\n                        (let ((count (string-length consonants)))\n                          (if (<= n count)\n                            (mapcar (lambda (x) (string-split x \" \")) words)\n                            (let ((count (string-length consonants)))\n                              (if (<= n count)\n                                (mapcar (lambda (x) (string-split x \" \")) words)\n                                (let ((count (string-length consonants)))\n                                  (if (<= n count)\n                                    (mapcar (lambda (x) (string-split x \" \")) words)\n                                    (let ((count (string-length consonants)))\n                                      (if (<= n count)\n                                        (mapcar (lambda (x) (string-split x \" \")) words)\n                                        (let ((count (string-length consonants)))\n                                          (if (<= n count)\n                                            (mapcar (lambda (x) (string-split x \" \")) words)\n                                            (let ((count (string-length consonants)))\n                                              (if (<= n count)\n                                                (mapcar (lambda (x) (string-split x \" \")) words)\n                                                (let ((count (string-length consonants",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-any s \"aeiouy\")))\n        (let ((result ()))\n          (for-each (lambda (word)\n                     (if (string-length word)\n                       (if (string-length consonants)\n                         (append result (append (list word) consonants))\n                         (append result (list word))))\n                    words)\n            (if (string-length consonants)\n                (append result consonants))))))))\n",
    "  (if (string? s)\n    (if (string? n)\n      (map (lambda (x)\n             (string-split x \" \"))\n           (string-split s \" \"))\n      (map (lambda (x)\n             (string-split x \" \"))\n           (string-split s \" \")))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((p (string-split s \" \")))\n        (map (lambda (x)\n               (if (string? x)\n                 (let ((cnt (string-count x \" \")))\n                   (if (zero? cnt)\n                     (list)\n                     (let ((words (string-split x \" \")))\n                       (map (lambda (w)\n                             (if (string? w)\n                               (if (zero? cnt)\n                                 (list)\n                                 (list w))\n                               (list))))))))))))\n    (list)))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (let ((consonants (string-split word \"\")))\n                    (if (zero? (string-length consonants))\n                      (list)\n                      (let ((consonant_count (string-length consonants)))\n                        (if (zero? consonant_count)\n                          (list)\n                          (let ((consonant_list (string-split consonants \"\")))\n                            (if (zero? consonant_count)\n                              (list)\n                              (let ((consonant_list_length (string-length consonant_list)))\n                                (if (zero? consonant_list_length)\n                                  (list)\n                                  (let ((consonant_list_length_count (string-length consonant_list_length)))\n                                    (if (zero? consonant_list_length_count)\n                                      (list)\n                                      (let ((consonant_list_length_count_count (string-length consonant_list_length_count)))\n                                        (if (zero? consonant_list_length_count_count)\n                                          (list)\n                                          (let ((consonant_list_length_count_count_count (string-length consonant_list_length_count_count)))\n                                            (if (zero? consonant_list_length_count_count_count)\n                                              (list)\n                                              (let ((consonant_list_length_count_count_count_count (string-length consonant_list_length_count_count_count)))\n                                                (if (zero? consonant_list_length_count_count_count_count)\n                                                  (list)\n                                                  (let ((consonant_list_length_count_count_count_count_count (string-length consonant_list_length_count_count",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-any s \"aeiouy\")))\n        (let ((count (string-length consonants)))\n          (if (>= n count)\n            (map (lambda (word) (string-split-at-any word \" \")) words)\n            (let ((word (car words)))\n              (if (string-length word)\n                (let ((consonant (car consonants)))\n                  (if (= consonant word)\n                    (cdr words)\n                    (let ((next (cdr consonants)))\n                      (if (string-length next)\n                        (let ((next-word (car next)))\n                          (if (string-length next-word)\n                            (let ((next-consonant (car next-word)))\n                              (if (= next-consonant word)\n                                (consonants next-word)\n                                (consonants next))))))))))))))))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split s/1 \" \")))\n        (if (eq? n (length consonants))\n          (map consonants words)\n          (select_words (cdr words) (car consonants)))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((i 0))\n        (while (< i n)\n          (if (string? (string-ref s i))\n            (append (list (string-ref s i)) (select_words (string-substring s i (i + 1))))\n            (i = (i + 1)))))))\n  (else\n    (select_words (string-concat s \" \") n)))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))\n                      (list))))\n      (if (zero? n)\n        (list))\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                       (string-split word \" \")\n                       (list word))))\n        (if (zero? n)\n          (list))\n        (for-each (lambda (word)\n                   (if (string? word)\n                     (if (string? (string-split word \" \"))\n                         (string-split word \" \")\n                         (list word))))\n          (if (zero? n)\n            (list)))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (substring word 0 n))\n                        (append words (substring word 0 n))))\n                    (append words (substring word 0 (string-length word))))\n                 s)\n        words))\n)\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")\n             (n_consonants (string-length (first words))))\n            (result ()))\n        (for-each (lambda (word)\n                   (if (string-length word)\n                       (if (= (string-length word) n)\n                           (append result word)\n                           (append result (string-join \" \" word))))\n                   (string-split word \" \")))\n        (if (empty? result)\n            (list)\n            (string-join \" \" result)))\n      ))\n)\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split s/1 \" \")))\n        (map (lambda (consonant)\n              (if (string-length consonant)\n                (list consonant)\n                (select_words consonant (string-length consonant))))\n          consonants))))\n)\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (let ((consonants (mapcar #(lambda (c) (string-ci-caseless-find c c))))\n              (result ()))\n          (for-each (lambda (word)\n                     (if (string-ci-caseless-find word word)\n                       (append result (append (list word) (consonants (string-split word \" \"))))))\n            words)))\n      (list)))\n  (select_words s n)))\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\" \"y\")) words)))\n        (if (= n (length consonants))\n          (mapcar (lambda (x) (string-append x \" \")) words)\n          (let ((result (mapcar (lambda (x) (string-append x \" \")) words)))\n            (if (empty? result)\n              (list)\n              (let ((result (mapcar (lambda (x) (string-append x \" \")) words)))\n                (if (empty? result)\n                  (list)\n                  (let ((result (mapcar (lambda (x) (string-append x \" \")) words)))\n                    (if (empty? result)\n                      (list)\n                      (let ((result (mapcar (lambda (x) (string-append x \" \")) words)))\n                        (if (empty? result)\n                          (list)\n                          (let ((result (mapcar (lambda (x) (string-append x \" \")) words)))\n                            (if (empty? result)\n                              (list)\n                              (let ((result (mapcar (lambda (x) (string-append x \" \")) words
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-n-characters words n)))\n        (map (lambda (word)\n               (string-split-at-first-of-n-characters word n))\n             consonants))))\n",
    "  (cond\n    ((= n 0) (list))\n    (else\n      (let ((words (split-string s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (let ((consonants (string-split-at-first-char word)))\n                  (if (= (length consonants) n)\n                    (list word)\n                    (select_words (string-join consonants \" \")\n                                  (sub1 n)\n                                  (string-join consonants \" \"))))))\n          words))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (x) (string-split-at-first-of-nth x n)))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (substring word 0 n))\n                        (append words (substring word 0 n))))\n                    (append words (substring word 0 (string-length word))))\n                 s)\n        words)))\n",
    "  (let ((words (list)))\n    (if (empty? s)\n      (return words)\n      (let ((c (char-at s 0)))\n        (if (not (in c #\\space #\\space))\n          (if (not (in c #\\space))\n            (append words (list (string-copy s 0 (string-length s))))\n            (append words (select_words (string-copy s 1) (char-at s 1) -1)))\n          (append words (select_words (string-copy s 1) (char-at s 1) -1))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n          (let ((result ()))\n            (for-each consonants (lambda (consonant)\n              (for-each word (lambda (word)\n                (if (string-contains? word consonant)\n                  (append result (list word))\n                )\n              )\n              consonants\n            )\n            )\n            (list-sort result)\n          )\n        )\n      )\n    )\n    (list)\n  )\n)\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (if (zero? n)\n        (list)\n        (let ((word (string->list s)))\n          (if (empty? word)\n            (list)\n            (let ((consonants (string-split \" \" word)))\n              (if (zero? n)\n                (consonants)\n                (let ((consonant (car consonants)))\n                  (if (zero? n)\n                    (consonant)\n                    (let ((next_consonant (cdr consonants)))\n                      (consonant (if (zero? n)\n                                    (consonant)\n                                    (if (zero? n)\n                                      (next_consonant)\n                                      (consonant))))))))))))))))))\n",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (if (> (length words) n)\n        (list)\n        (let ((consonants (string-split-at-first-of-n-characters words n)))\n          (map (lambda (word)\n                (if (string? word)\n                  (list word)\n                  (let ((consonant (string-split-at-first-of-n-characters word n)))\n                    (list (append word consonant))))))))))))\n",
    "  (if (null? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n\t     (if (null? word)\n\t       (list)\n\t       (if (null? (string-length word))\n\t\t (list)\n\t\t (let ((consonants (string-split-at-first-char word \"aeiou\"))\n\t\t       (count (string-length consonants)))\n\t\t   (if (= count n)\n\t\t     (list word)\n\t\t     (let ((sublist (select_words (string-substring word 0 (string-length word) - 1))))\n\t\t       (append (list word) sublist)))))))))))\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\"))))\n            (result ()))\n        (for-each consonants (lambda (consonant)\n          (for-each word words\n            (lambda (word)\n              (if (string-length word)\n                (if (string-length word)\n                  (if (string-length word)\n                    (if (string-length word)\n                      (if (string-length word)\n                        (if (string-length word)\n                          (if (string-length word)\n                            (if (string-length word)\n                              (if (string-length word)\n                                (if (string-length word)\n                                  (if (string-length word)\n                                    (if (string-length word)\n                                      (if (string-length word)\n                                        (if (string-length word)\n                                          (if (string-length word)\n                                            (if (string-length word)\n                                              (if (string-length word)\n                                                (if (string-length word)\n                                                  (if (string-length word)\n                                                    (if (string-length word)\n                                                      (if (string-length word)\n                                                        (if (string-length word)\n                                                          (if (string-length word)\n                                                            (if (string-length word)\n                                                              (if (string-length word)\n                                                                (if (string-length word)\n                                                                  (if (string-length word)\n                                                                    (if (string-length word)\n                                                                      (if (string-length word)\n                                                                        (if (string-length word)\n                                                                          (if (string-length word)\n                                                                            (if (string-length word)\n                                                                              (if (",
    "  (if (string? s)\n    (list)\n    (let ((words (string-split s \" \")))\n      (let ((consonants (mapcar #(lambda (c) (string-count c c))))\n            (result ()))\n        (for-each (lambda (word)\n                   (if (string-length word)\n                       (if (string-length word)\n                           (if (string-length word)\n                               (if (string-length word)\n                                   (if (string-length word)\n                                       (if (string-length word)\n                                           (if (string-length word)\n                                               (if (string-length word)\n                                                  (if (string-length word)\n                                                     (if (string-length word)\n                                                        (if (string-length word)\n                                                           (if (string-length word)\n                                                              (if (string-length word)\n                                                                 (if (string-length word)\n                                                                    (if (string-length word)\n                                                                       (if (string-length word)\n                                                                          (if (string-length word)\n                                                                             (if (string-length word)\n                                                                               (if (string-length word)\n                                                                                 (if (string-length word)\n                                                                                    (if (string-length word)\n                                                                                      (if (string-length word)\n                                                                                         (if (string-length word)\n                                                                                          (if (string-length word)\n                                                                                            (if (string-length word)\n                                                                                             (if (string-length word)\n                                                                                               (if (string-length word)\n                                                                                                 (if (string-length word)\n                                                                                                   (if (string-length word)\n                                                                                                    (if (string-length word)\n                                                                                                       (if (string-length word)\n                                                                                                         (if (string-length word)\n                                                                                                          (if (string-length",
    "  (let ((words (string-split s \" \")))\n    (let ((consonants (string-split \"aeiou\")))\n      (let ((count (string-count consonants s)))\n        (if (eq count n)\n            (map consonants words)\n            (let ((word (car words)))\n              (let ((words (cdr words)))\n                (if (eq (string-length word) n)\n                    (append (select_words word (count - 1)) words)\n                    (select_words word (count - 1))))))))))\n",
    "  (if (empty? s)\n    (list)\n    (let ((words (split-string s \" \")))\n      (map (lambda (word)\n\t     (if (string-length word)\n\t       (if (string-length (string-join \" \" (map cons word n)))\n\t\t (list word))))\n\twords))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split/case words #\"a-zA-Z\")))\n        (let ((result ()))\n          (for-each consonants (lambda (consonant)\n            (if (string-contains? consonant s)\n              (append result (string-split consonant \" \")))))\n          (if (> n 0)\n            (append result (string-split/case words #\" \"))))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split (first words) \"\")\n             (consonant-count (string-length (first words))))\n            (result ()))\n        (for-each consonant consonants\n          (if (= consonant-count n)\n            (append result (first words))))))))\n",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n        (if (>= n consonants)\n          (mapcar (lambda (x) (concatenate (list x) (list))) words)\n          (select_words (cdr words) (n - consonants)))))))\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split/lines words \"([^a-zA-Z]|_)\")))\n        (if (>= n (length consonants))\n          (map (lambda (x) (string-split x \" \")) consonants)\n          (list))))))\n",
    "  (let ((words (split-string s \" \")))\n    (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n      (if (null? consonants)\n        (list)\n        (let ((result ()))\n          (for-each (lambda (word)\n                     (if (null? (string-count word \"a\" \"e\" \"i\" \"o\" \"u\"))\n                          (append result word))\n                       ()))\n            words\n          )\n        )\n      )\n    )\n)\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        (string-split s \" \"))\n      (if (null? words)\n        (list)\n        (for-each (lambda (word)\n                   (if (null? (string-split word \" \"))\n                     (list word))))))))\n",
    "  (let ((words (list)))\n    (if (empty? s)\n      (return words)\n      (let ((c (first s)))\n        (let ((words (cons c words)))\n          (if (null? (cdr words))\n            (return words)\n            (let ((c (first (cdr words))))\n              (let ((words (cons c words)))\n                (if (null? (cdr words))\n                  (return words)\n                  (let ((c (first (cdr words))))\n                    (let ((words (cons c words))))\n                      (if (null? (cdr words))\n                        (return words)\n                        (let ((c (first (cdr words))))\n                          (let ((words (cons c words))))\n                            (if (null? (cdr words))\n                              (return words)\n                              (let ((c (first (cdr words))))\n                                (let ((words (cons c words))))\n                                  (if (null? (cdr words))\n                                    (return words)\n                                    (let ((c (first (cdr words))))\n                                      (let ((words (cons c words))))\n                                      (if (null? (cdr words))\n                                        (return words)\n                                        (let ((c (first (cdr words))))\n                                          (let ((words (cons c words))))\n                                          (if (null? (cdr words))\n                                            (return words)\n                                            (let ((c (first (cdr words))))\n                                              (let ((words (cons c words))))\n                                              (if (null? (cdr words))\n                                                (return words)\n                                                (let ((c (first (cdr words))))\n                                                  (let ((words (cons c words))))\n                                                  (if (null? (cdr words))\n                                                    (return words)\n                                                    (let ((c (first (cdr words))))\n                                                      (let ((words (cons c words))))\n                                                      (if (null? (cdr words))\n                                                        (return words",
    "  (let ((words (split-string s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (mapcar #'string-count-consecutive-chars words)))\n        (if (>= consonants n)\n          (mapcar #'string-append words)\n          (select_words (cdr words) (car consonants))))))))\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word)))\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word)))\n                  s)\n        (words (cons words (list))))\n    (if (empty? words)\n      (list)))\n",
    "  (cond\n    [(= n 0) (list)]\n    [(< n 0) (let ((result (list)))\n      (string-split s \" \")\n      (map (lambda (x) (string-split x \" \")) result))]\n    [else (let ((result (list)))\n      (string-split s \" \")\n      (map (lambda (x) (string-split x \" \")) result)\n      (let ((result2 (list)))\n        (string-split s \" \")\n        (map (lambda (x) (string-split x \" \")) result2)\n        (append result2 result)))])\n)\n",
    "  (let ((words (string-split s \" \")))\n    (let ((consonants (mapcar (lambda (x) (string-count x \"a\" \"e\" \"i\" \"o\" \"u\")) words)))\n      (let ((result ()))\n        (for-each (lambda (x) (if (eq n 0) (result x))) consonants words))))\n)\n",
    "  (let ((words (string-split s \" \")))\n    (if (empty? words)\n      (list)\n      (let ((consonants (string-split-at-first-of-nth words n)))\n        (map consonants (lambda (x) (string-split-at-first-of-nth x n)))))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (zero? (string-length word))\n                (list)\n                (let ((consonants (string-split word \"-\")))\n                  (if (zero? (string-length consonants))\n                    (list)\n                    (let ((consonant_count (string-length consonants)))\n                      (if (zero? consonant_count)\n                        (list)\n                        (let ((word_consonants (string-join consonants \"-\")))\n                          (if (zero? (string-length word_consonants))\n                            (list)\n                            (let ((word_consonant_count (string-length word_consonants)))\n                              (if (zero? word_consonant_count)\n                                (list)\n                                (let ((word_consonant_list (string-split word_consonants \"-\")))\n                                  (if (zero? (string-length word_consonant_list))\n                                    (list)\n                                    (let ((word_consonant_list_count (string-length word_consonant_list)))\n                                      (if (zero? word_consonant_list_count)\n                                        (list)\n                                        (let ((word_consonant_list_string (string-join word_consonant_list \"-\")))\n                                          (if (zero? (string-length word_consonant_list_string))\n                                            (list)\n                                            (let ((word_consonant_list_string_count (string-length word_consonant_list_string)))\n                                              (if (zero? word_consonant_list_string_count)\n                                                (list)\n                                                (let ((word_consonant_list_string_string (string-join word_consonant_list_string \"-\")))\n                                                  (if (zero? (string-length word_consonant_list_string_string))\n                                  ",
    "  (let ((words (list)))\n    (if (empty? s)\n      words\n    (let ((c (char-at s 0)))\n      (if (not (in c #\\space #\\space))\n        (if (eq n 0)\n          (append words (list s))\n        (append (append words (list)) (select_words (cdr s) (sub1 n)))\n        )\n      )\n      )\n    )\n  )\n)\n",
    "  (let ((words (list)))\n    (if (string? s)\n      (for-each (lambda (word)\n                  (if (string? word)\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word)))\n                    (if (string? (string-split word \" \"))\n                      (string-split word \" \")\n                      (list word))))\n        words\n      (if (string? s)\n        (for-each (lambda (word)\n                   (if (string? (string-split word \" \"))\n                     (string-split word \" \")\n                     (list word)))\n          words))))\n  (if (string? s)\n    (for-each (lambda (word)\n               (if (string? (string-split word \" \"))\n                 (string-split word \" \")\n                 (list word)))\n      words))))\n",
    "  (if (string? s)\n    (if (zero? n)\n      (list)\n      (let ((words (string-split s \" \")))\n        (map (lambda (word)\n              (if (string? word)\n                (if (zero? (string-length word))\n                  (list)\n                  (string-split word \"\")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n                  (string-split word \" \")\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}