{
  "name": "HumanEval_10_make_palindrome",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p p string)\n      (string-append string (string-reverse (string-prefix p string)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac",
    "  (let* ([\n    (string-length string)\n    (string-prefix string)\n    (string-suffix string)\n    (string-reverse string-prefix)\n    (string-prefix-length string-prefix)\n    (string-suffix-length string-suffix)\n    (string-length string-suffix)\n    (string-length string-reverse)\n    (string-prefix-length string-reverse)\n    (string-suffix-length string-reverse)\n    (palindrome? string-prefix string-suffix)\n    (palindrome? string-reverse string-suffix)\n    (palindrome? string-prefix string-reverse)\n    (palindrome? string-suffix string-reverse)\n    (palindrome? string-prefix-length string-suffix-length)\n    (palindrome? string-prefix-length string-suffix-length)\n    (palindrome? string-prefix-length string-reverse-length)\n    (palindrome? string-suffix-length string-reverse-length)\n    (palindrome? string-length string-reverse-length)\n    (palindrome? string-length string-prefix-length)\n    (palindrome? string-length string-suffix-length)\n    (palindrome? string-length string-reverse-length)\n    (palindrome? string-length string-prefix-length)\n    (palindrome? string-length string-suffix-length)\n    (palindrome? string-length string-reverse-length)\n    (palindrome? string-length string-prefix-length)\n    (palindrome? string-length string-suffix-length)\n    (palindrome? string-length string-reverse-length)\n    (palindrome? string-length string-prefix-length)\n    (palindrome? string-length string-suffix-length)\n    (palindrome? string-length string-reverse-length)\n    (palindrome? string-length string-prefix-length)\n    (palindrome? string-length string-suffix-length)\n    (palindrome? string-length string-reverse-length)\n    (palind",
    "  (let ((result \"\"))\n    (let ((pfx (string)))\n      (while (string-length pfx)\n        (let ((sfx (string-reverse pfx)))\n          (if (string=? sfx pfx)\n            (result pfx)\n            (let ((pfx (string-concat pfx sfx)))\n              (if (string=? pfx pfx)\n                (result pfx)\n                (let ((pfx (string-concat pfx sfx)))\n                  (if (string=? pfx pfx)\n                    (result pfx)\n                    (let ((pfx (string-concat pfx sfx)))\n                      (if (string=? pfx pfx)\n                        (result pfx)\n                        (let ((pfx (string-concat pfx sfx)))\n                          (if (string=? pfx pfx)\n                            (result pfx)\n                            (let ((pfx (string-concat pfx sfx)))\n                              (if (string=? pfx pfx)\n                                (result pfx)\n                                (let ((pfx (string-concat pfx sfx)))\n                                  (if (string=? pfx pfx)\n                                    (result pfx)\n                                    (let ((pfx (string-concat pfx sfx)))\n                                      (if (string=? pfx pfx)\n                                        (result pfx)\n                                        (let ((pfx (string-concat pfx sfx)))\n                                          (if (string=? pfx pfx)\n                                            (result pfx)\n                                            (let ((pfx (string-concat pfx sfx)))\n                                              (if (string=? pfx pfx)\n                                                (result pfx)\n                                                (let ((pfx (string-concat pfx sfx)))\n                                                  (if (string=? pfx pfx)\n                                                    (result pfx))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((longest (string-reverse string)))\n    (if (string-prefix? string longest)\n      string\n      (string-append string (string-prefix string longest))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length - 1)\n    string_suffix (string 1 string_length)\n    string_reverse (reverse string_prefix)\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    string_palindrome (string_prefix string_suffix)\n    string_palindrome_length (length string_palindrome)\n    string_palindrome_prefix (string_palindrome 0 string_palindrome_length - 1)\n    string_palindrome_suffix (string_palindrome 1 string_palindrome_length)\n    string_palindrome_reverse (reverse string_palindrome_prefix)\n    string_palindrome_prefix_length (length string_palindrome_prefix)\n    string_palindrome_suffix_length (length string_palindrome_suffix)\n    string_palindrome_reverse_length (length string_palindrome_reverse)\n    string_palindrome_reverse_prefix (string_palindrome_reverse 0 string_palindrome_reverse_length - 1)\n    string_palindrome_reverse_suffix (string_palindrome_reverse 1 string_palindrome_reverse_length)\n    string_palindrome_reverse_prefix_length (length string_palindrome_reverse_prefix)\n    string_palindrome_reverse_suffix_length (length string_palindrome_reverse_suffix)\n    string_palindrome_reverse_prefix_suffix (string_palindrome_reverse_prefix string_palindrome_reverse_suffix)\n    string_palindrome_reverse_prefix_suffix_length (length string_palindrome_reverse_prefix_suffix)\n    string_palindrome_reverse_prefix_suffix_string (string_palindrome_reverse_prefix_suffix 0 string_palindrome_reverse_prefix_suffix_length - 1)\n    string_palindrome_reverse_prefix_suffix_string_length (length string_palindrome_reverse_prefix_suffix_string)\n",
    "  (let ((longest_palindrome (string_length string)))\n    (let ((palindrome_suffix (string_ref string string_length longest_palindrome)))\n      (string_copy string (string_length string) longest_palindrome)\n      (string_copy string 0 (string_length string) longest_palindrome)\n      (string_reverse string 0 (string_length string) longest_palindrome)\n      (string_append string longest_palindrome)))\n  \"\"))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make",
    "  (let ((result \"\"))\n    (let ((p (string)))\n      (while (string-length p)\n        (if (string=p \"\")\n          (return result)\n          (result (append (reverse (substring p 0 -1)) p)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (",
    "  (let* ([string (string)])\n    (if (string-length string)\n      (let* ([string (string-append string \"\")])\n        (if (string-length string)\n          (let* ([string (string-append string (reverse string))])\n            (if (string-length string)\n              (let* ([string (string-append string (reverse string-prefix string))])\n                (if (string-length string)\n                  (let* ([string (string-append string (reverse string-prefix string))])\n                    (if (string-length string)\n                      (let* ([string (string-append string (reverse string-prefix string))])\n                        (if (string-length string)\n                          (let* ([string (string-append string (reverse string-prefix string))])\n                            (if (string-length string)\n                              (let* ([string (string-append string (reverse string-prefix string))])\n                                (if (string-length string)\n                                  (let* ([string (string-append string (reverse string-prefix string))])\n                                    (if (string-length string)\n                                      (let* ([string (string-append string (reverse string-prefix string))])\n                                        (if (string-length string)\n                                          (let* ([string (string-append string (reverse string-prefix string))])\n                                            (if (string-length string)\n                                              (let* ([string (string-append string (reverse string-prefix string))])\n                                                (if (string-length string)\n                                                  (let* ([string (string-append string (reverse string-prefix string))])\n                                                    (if (string-length string)\n                                                      (let* ([string (string-append string (reverse string-prefix string))])\n                                                        (if (string-length string)\n                                                          (let* ([string (string-append string (reverse string-prefix string))])\n                                                           (if (string-length string)\n                                                              (let* ([string (string-append string (reverse string-prefix string))])\n",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length)\n    string_suffix (string_length - 1 string_length)\n    string_reverse (reverse string_length)\n    palindrome_length (length string_reverse)\n    palindrome_prefix (string_reverse 0 palindrome_length)\n    palindrome_suffix (palindrome_length - 1 palindrome_length)\n    palindrome_string (concat string_prefix string_suffix string_reverse)\n    palindrome_string_length (length palindrome_string)\n    palindrome_string_prefix (palindrome_string 0 palindrome_string_length)\n    palindrome_string_suffix (palindrome_string_length - 1 palindrome_string_length)\n    palindrome_string_reverse (reverse palindrome_string_length)\n    palindrome_string_reverse_prefix (palindrome_string_reverse 0 palindrome_string_length)\n    palindrome_string_reverse_suffix (palindrome_string_length - 1 palindrome_string_length)\n    palindrome_string_reverse_string (concat palindrome_string_prefix palindrome_string_suffix palindrome_string_reverse_prefix palindrome_string_reverse_suffix)\n    palindrome_string_reverse_string_length (length palindrome_string_reverse_string)\n    palindrome_string_reverse_string_prefix (palindrome_string_reverse_string 0 palindrome_string_reverse_string_length)\n    palindrome_string_reverse_string_suffix (palindrome_string_reverse_string_length - 1 palindrome_string_reverse_string_length)\n    palindrome_string_reverse_string_reverse (reverse palindrome_string_reverse_string_length)\n    palindrome_string_reverse_string_reverse_prefix (palindrome_string_reverse_string_reverse 0 palindrome_string_reverse_string_length)\n    palindrome_string_reverse_string_reverse_suffix (palindrome_string",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (reverse string))))\n    (if (string-length string)\n      (if (string-length palindrome-length)\n        (string-append (string-copy string 0 string-length -1) (string-copy string palindrome-length -1 string-length))\n        (string-copy string 0 string-length -1))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacat",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length - 1)\n    string_suffix (string 1 string_length)\n    string_reverse (reverse string_suffix)\n    palindrome_length (length string_reverse)\n    palindrome_prefix (string_prefix 0 palindrome_length - 1)\n    palindrome_suffix (string_suffix palindrome_length)\n    palindrome_string (concat string_prefix string_suffix)\n    palindrome_string_length (length palindrome_string)\n    palindrome_string_prefix (string_prefix 0 palindrome_string_length - 1)\n    palindrome_string_suffix (string_suffix palindrome_string_length)\n    palindrome_string_reverse (reverse palindrome_string_suffix)\n    palindrome_string_length (length palindrome_string_reverse)\n    palindrome_string_prefix (string_prefix 0 palindrome_string_length - 1)\n    palindrome_string_suffix (string_suffix palindrome_string_length)\n    palindrome_string_reverse (reverse palindrome_string_suffix)\n    palindrome_string_length (length palindrome_string_reverse)\n    palindrome_string_prefix (string_prefix 0 palindrome_string_length - 1)\n    palindrome_string_suffix (string_suffix palindrome_string_length)\n    palindrome_string_reverse (reverse palindrome_string_suffix)\n    palindrome_string_length (length palindrome_string_reverse)\n    palindrome_string_prefix (string_prefix 0 palindrome_string_length - 1)\n    palindrome_string_suffix (string_suffix palindrome_string_length)\n    palindrome_string_reverse (reverse palindrome_string_suffix)\n    palindrome_string_length (length palindrome_string_reverse)\n    palindrome_string_prefix (string_prefix 0 palindrome_string_length - 1)\n    palind",
    "  (let* ([string-length (string-length string)]\n         [palindrome-length (string-length string)])\n    (if (string-length string)\n      (let* ([palindrome (string-copy/reverse string-length/c)])\n        (if (string-length/c palindrome)\n          (string-copy/reverse palindrome-length palindrome)\n          (string-copy/reverse string-length/c string)))\n      (string-copy/reverse string-length/c string))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatac",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length -1)))\n        (let ((palindrome-string-length (string-length palindrome-string)))\n          (if (string-equal string-reverse palindrome-string)\n            (string-copy string-length -1)\n            (string-copy string-length -1 -1))))))))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"",
    "  (let* ([string (string)])\n    (if (string=string)\n      (string)\n      (let* ([string (string)])\n        (if (string=string)\n          (string)\n          (let* ([string (string)])\n            (if (string=string)\n              (string)\n              (let* ([string (string)])\n                (if (string=string)\n                  (string)\n                  (let* ([string (string)])\n                    (if (string=string)\n                      (string)\n                      (let* ([string (string)])\n                        (if (string=string)\n                          (string)\n                          (let* ([string (string)])\n                            (if (string=string)\n                              (string)\n                              (let* ([string (string)])\n                                (if (string=string)\n                                  (string)\n                                  (let* ([string (string)])\n                                    (if (string=string)\n                                      (string)\n                                      (let* ([string (string)])\n                                        (if (string=string)\n                                          (string)\n                                          (let* ([string (string)])\n                                            (if (string=string)\n                                              (string)\n                                              (let* ([string (string)])\n                                                (if (string=string)\n                                                  (string)\n                                                  (let* ([string (string)])\n                                                    (if (string=string)\n                                                      (string)\n                                                      (let* ([string (string)])\n                                                        (if (string=string)\n                                                          (string)\n                                                          (let* ([string (string)])\n                                                            (if (string=string)\n                                                              (string)\n                                                              (let* ([string (string)])\n                                                                (if (string=string)\n                                                                  (string)\n                                                                  (let* ([string (string)])\n                                                               ",
    "  (let ((result \"\"))\n    (let ((p (string)))\n      (while (string-length p)\n        (let ((q (string-copy p (- (string-length p) 1))))\n          (if (string=? q p)\n              (append result q)\n              (append result (string-copy p (- (string-length p) 2))))\n          (setq p (string-copy p (- (string-length p) 1))))\n        (setq p (string-copy p (- (string-length p) 1))))\n      (append result (string-copy string (- (string-length string) 1))))\n    result))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (make-string string-length))))\n      (let ((palindrome (make-string palindrome-length)))\n        (let ((prefix (make-string palindrome-length/2)))\n          (let ((suffix (make-string palindrome-length/2)))\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 0)\n            (string-copy/part 0 string-length/2)\n            (string-copy/part 0 0)\n            (string-append prefix string-reverse suffix)\n            (string-copy/part 0 0)\n            (string-copy/part string-length/2 0)\n            (string-copy/part 0 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-copy/part string-length/2 string-length/2)\n            (string-",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-index (string-length palindrome-length)))\n        (let ((palindrome-index-2 (string-length palindrome-index)))\n          (let ((palindrome-index-3 (string-length palindrome-index-2)))\n            (let ((palindrome-index-4 (string-length palindrome-index-3)))\n              (let ((palindrome-index-5 (string-length palindrome-index-4)))\n                (let ((palindrome-index-6 (string-length palindrome-index-5)))\n                  (let ((palindrome-index-7 (string-length palindrome-index-6)))\n                    (let ((palindrome-index-8 (string-length palindrome-index-7)))\n                      (let ((palindrome-index-9 (string-length palindrome-index-8)))\n                        (let ((palindrome-index-10 (string-length palindrome-index-9)))\n                          (let ((palindrome-index-11 (string-length palindrome-index-10)))\n                            (let ((palindrome-index-12 (string-length palindrome-index-11)))\n                              (let ((palindrome-index-13 (string-length palindrome-index-12)))\n                                (let ((palindrome-index-14 (string-length palindrome-index-13)))\n                                  (let ((palindrome-index-15 (string-length palindrome-index-14)))\n                                    (let ((palindrome-index-16 (string-length palindrome-index-15)))\n                                      (let ((palindrome-index-17 (string-length palindrome-index-16)))\n                                        (let ((palindrome-index-18 (string-length palindrome-index-17)))\n                                          (let ((palindrome-index-19 (string-length palindrome-index-18)))\n                                            (let ((palindrome-index-20 (string-length palind",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length -1)))\n        (let ((palindrome-string-length (string-length palindrome-string)))\n          (if (string-length palindrome-string)\n            (if (string-length string)\n              (string-append string (string string-length -1))\n              (string-append (string string-length -1) string))\n            (string-append (string string-length -1) (string string-length -1))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palind",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (string_length - 1)\n    palindrome_prefix (string_length - palindrome_length)\n    palindrome_suffix (palindrome_length)\n    palindrome_string (string_length - palindrome_length)\n    palindrome_string_reverse (string_length - palindrome_length)\n    palindrome_string_reverse_prefix (palindrome_length)\n    palindrome_string_reverse_suffix (palindrome_length)\n    palindrome_string_reverse_prefix_suffix (palindrome_length)\n    ])\n    (if (string_length = 0)\n      \"\"\n      (let* ([\n        string_prefix (string)\n        string_suffix (string)\n        string_reverse_prefix (string_reverse string_prefix)\n        string_reverse_suffix (string_reverse string_suffix)\n        string_reverse_prefix_suffix (string_reverse string_prefix string_suffix)\n        ])\n        (if (string_reverse_prefix_suffix = string_reverse_suffix)\n          (string_reverse_prefix_suffix)\n          (let* ([\n            string_reverse_prefix_suffix_length (length string_reverse_prefix_suffix)\n            string_reverse_prefix_suffix_prefix (string_reverse_prefix_suffix_length - 1)\n            string_reverse_prefix_suffix_suffix (string_reverse_prefix_suffix_length - 2)\n            ])\n            (if (string_reverse_prefix_suffix_prefix = string_reverse_prefix_suffix_suffix)\n              (string_reverse_prefix_suffix_prefix)\n              (let* ([\n                string_reverse_prefix_suffix_prefix_length (length string_reverse_prefix_suffix_prefix)\n                string_reverse_prefix_suffix_prefix_prefix (string_reverse_prefix_suffix_prefix_length - 1)\n                string_reverse_prefix_suffix_prefix_suffix (string_reverse_prefix_suffix_prefix_length - 2)\n                ])\n",
    "  (let ((result \"\"))\n    (let ((p (string)))\n      (while (string-length p)\n        (if (string-ref p p)\n          (string-append result (string-reverse (string-substring p 0 -1))))\n        (string-set! p (string-next p))))\n    (string result)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacat",
    "  (let* ([string (string)])\n    (let ([string_length (length string)])\n      (let ([palindrome_length (min (string_length 2) (string_length string))])\n        (let ([palindrome_string (string)])\n          (let ([palindrome_index (string_length - palindrome_length)])\n            (let ([reverse_string (string)])\n              (let ([reverse_index (string_length - palindrome_index)])\n                (let ([reverse_string_prefix (reverse_string)])\n                  (let ([reverse_string_suffix (reverse_string_prefix)])\n                    (let ([reverse_string_prefix_length (length reverse_string_prefix)])\n                      (let ([reverse_string_suffix_length (length reverse_string_suffix)])\n                        (if (eqv? (string_length - reverse_string_prefix_length) (string_length - reverse_string_suffix_length))\n                          (reverse_string_prefix)\n                          (reverse_string_prefix (reverse_string_suffix)))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let* ([\n    prefix (string)\n    suffix (string)\n    i (0)\n    j (string-length (string))\n    k (j)\n    l (j)\n    m (j)\n    n (j)\n    p (j)\n    q (j)\n    r (j)\n    s (j)\n    t (j)\n    u (j)\n    v (j)\n    w (j)\n    x (j)\n    y (j)\n    z (j)\n    tokens (list)\n    token (string)\n    token_length (integer)\n    token_index (integer)\n    token_index_start (integer)\n    token_index_end (integer)\n    token_index_start_end (integer)\n    token_index_start_end_length (integer)\n    token_index_start_end_length_index (integer)\n    token_index_start_end_length_index_start (integer)\n    token_index_start_end_length_index_end (integer)\n    token_index_start_end_length_index_start_end (integer)\n    token_index_start_end_length_index_start_end_length (integer)\n    token_index_start_end_length_index_start_end_length_index (integer)\n    token_index_start_end_length_index_start_end_length_index_start (integer)\n    token_index_start_end_length_index_start_end_length_index_end (integer)\n    token_index_start_end_length_index_start_end_length_index_start_end (integer)\n    token_index_start_end_length_index_start_end_length_index_start_end_length (integer)\n    token_index_start_end_length_index_start_end_length_index_start_end_length_index (integer)\n    token_index_start_end_length_index_start_end_length_index_start_end_length_index_start (integer)\n    token_index_start_end_length_index_start_end_",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (string_length - 1)\n    palindrome_suffix (string_length - palindrome_length)\n    palindrome_prefix (palindrome_length)\n    palindrome_suffix_string (string (take palindrome_suffix string))\n    palindrome_prefix_string (string (drop palindrome_prefix string))\n    palindrome_suffix_string_reverse (reverse palindrome_suffix_string)\n    palindrome_prefix_string_reverse (reverse palindrome_prefix_string)\n    palindrome_suffix_string_reverse_string (palindrome_suffix_string_reverse)\n    palindrome_prefix_string_reverse_string (palindrome_prefix_string_reverse)\n    palindrome_suffix_string_reverse_string_reverse (palindrome_suffix_string_reverse_string)\n    palindrome_prefix_string_reverse_string_reverse (palindrome_prefix_string_reverse_string)\n    palindrome_suffix_string_reverse_string_reverse_string (palindrome_suffix_string_reverse_string_reverse)\n    palindrome_prefix_string_reverse_string_reverse_string (palindrome_prefix_string_reverse_string_reverse_string)\n    ])\n    (if (string=? palindrome_suffix_string_reverse_string_reverse_string)\n      (string)\n      (string (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append",
    "  (let ((p (string)))\n    (if (string-length p)\n      (let ((p (string-reverse p)))\n        (if (string-length p)\n          (let ((p (string-prefix p)))\n            (if (string-length p)\n              (let ((p (string-suffix p)))\n                (if (string-length p)\n                  (string-append p string-reverse p)\n                  string))))))))))\n",
    "  (let* ([\n    string_length (length string)\n    string_reverse (reverse string)\n    palindrome_suffix (string_length - 1)\n    palindrome_prefix (string_length - 1)\n    palindrome_length (string_length)\n    palindrome_index (string_length - 1)\n    palindrome_index_reverse (string_length - 1)\n    palindrome_index_reverse_index (string_length - 1)\n    palindrome_index_reverse_index_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (reverse string))))\n    (if (string-length string)\n      (string-append (string-copy string (string-length string))\n                                 (string-copy string-length -1))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatac",
    "  (let ((longest_palindrome (string_reverse (string_prefix (string_reverse string))))\n         (shortest_palindrome (string_prefix string)))\n    (if (string=? longest_palindrome shortest_palindrome)\n      string\n      (string_append (string_prefix (string_reverse shortest_palindrome))\n       (string_prefix longest_palindrome))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat",
    "  (let ((longest_palindrome (string_length string)))\n    (let ((palindrome_prefix (string_ref string 0 longest_palindrome)))\n      (string_append (string_reverse palindrome_prefix) (string_ref string longest_palindrome))))\n  (make_palindrome string))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (longest_palindrome \"\")\n;; \"\"\n;; >>> (longest_palindrome \"cat\")\n;; \"cat\"\n;; >>> (longest_palindrome \"cata\")\n;; \"cat\"",
    "  (let* ([\n    postfix (string)\n    prefix (reverse string)\n    result (string)\n    i (0)\n    j (length string)\n  ])\n    (while (< i j)\n      (if (string= postfix (substring string i j))\n        (set! result (concat result postfix))\n        (set! i (i + 1)))\n      (set! j (j - 1)))\n    result)\n  )\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_pal",
    "  (let ((string-length (string-length string)))\n    (let ((string-prefix (string-prefix string string-length)))\n      (let ((string-suffix (string-suffix string string-length)))\n        (if (string-prefix)\n          (string-prefix (reverse string-prefix)))\n        (if (string-suffix)\n          (string-suffix (reverse string-suffix))))))))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (find_palindrome \"\")\n;; \"\"\n;; >>> (find_palindrome \"cat\")\n;; \"catac\"\n;; >>> (find_palindrome \"cata\")\n;; \"catac\"",
    "  (let* ([\n    longest_palindrome (string)\n    longest_palindrome_length (length of longest_palindrome)\n    longest_palindrome_index (index of longest_palindrome)\n    reverse_prefix (string)\n    reverse_prefix_length (length of reverse_prefix)\n    reverse_prefix_index (index of reverse_prefix)\n    ]\n    (if (eq? longest_palindrome_length length of string)\n      (string)\n      (let* ([\n        prefix (string)\n        prefix_length (length of prefix)\n        prefix_index (index of prefix)\n        ]\n        (if (eq? prefix_length length of longest_palindrome)\n          (string)\n          (let* ([\n            suffix (string)\n            suffix_length (length of suffix)\n            suffix_index (index of suffix)\n            ]\n            (if (eq? suffix_length length of string)\n              (string)\n              (let* ([\n                reverse_suffix (string)\n                reverse_suffix_length (length of reverse_suffix)\n                reverse_suffix_index (index of reverse_suffix)\n                ]\n                (if (eq? reverse_suffix_length length of string)\n                  (string)\n                  (let* ([\n                    reverse_prefix (string)\n                    reverse_prefix_length (length of reverse_prefix)\n                    reverse_prefix_index (index of reverse_prefix)\n                    ]\n                    (if (eq? reverse_prefix_length length of string)\n                      (string)\n                      (let* ([\n                        longest_palindrome (string)\n                        longest_palindrome_length (length of longest_palindrome)\n                        longest_palindrome_index (index of longest_palindrome)\n                        ]\n                        (if (eq? longest_palindrome_length length of string)\n                          (string)\n                          (let* ([\n                            longest_palindrome (string)\n                            longest_palindrome_length (length of longest_palindrome)\n                            longest_palindrome_index (index of longest_palindrome)\n                            ]\n                            (if",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-index (string-length -1)))\n        (let ((palindrome-index-2 (string-length -2)))\n          (let ((palindrome-index-3 (string-length -3)))\n            (let ((palindrome-index-4 (string-length -4)))\n              (let ((palindrome-index-5 (string-length -5)))\n                (let ((palindrome-index-6 (string-length -6)))\n                  (let ((palindrome-index-7 (string-length -7)))\n                    (let ((palindrome-index-8 (string-length -8)))\n                      (let ((palindrome-index-9 (string-length -9)))\n                        (let ((palindrome-index-10 (string-length -10)))\n                          (let ((palindrome-index-11 (string-length -11)))\n                            (let ((palindrome-index-12 (string-length -12)))\n                              (let ((palindrome-index-13 (string-length -13)))\n                                (let ((palindrome-index-14 (string-length -14)))\n                                  (let ((palindrome-index-15 (string-length -15)))\n                                    (let ((palindrome-index-16 (string-length -16)))\n                                      (let ((palindrome-index-17 (string-length -17)))\n                                        (let ((palindrome-index-18 (string-length -18)))\n                                          (let ((palindrome-index-19 (string-length -19)))\n                                            (let ((palindrome-index-20 (string-length -20)))\n                                              (let ((palindrome-index-21 (string-length -21)))\n                                                (let ((palindrome-index-22 (string-length -22)))\n                                                  (let ((palindrome-index-23 (string-length -23)))\n                                                    (let ((palindrome-index-24 (string-length -24)))\n",
    "  (let ((result \"\"))\n    (let ((string_length (string-length string)))\n      (while (string-length string)\n        (let ((i (- (string-length string) 1)))\n          (if (string-ref string i)\n            (string-append result (string-reverse string-ref string i))))\n        (string-append result string-ref string 0))))\n  result)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>>",
    "  (let ((string-length (string-length string))\n         (string-prefix (string-prefix string)))\n    (if (string-length string-prefix)\n      (string-append string-prefix (string-reverse string-prefix))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;;",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length)))\n        (if (string-length string)\n          (let ((palindrome-string-length (string-length palindrome-string)))\n            (if (string-length palindrome-string)\n              (let ((palindrome-string-reverse (reverse palindrome-string)))\n                (if (string-length palindrome-string-reverse)\n                  (let ((palindrome-string-reverse-length (string-length palindrome-string-reverse)))\n                    (if (string-length string)\n                      (let ((palindrome-string-reverse-length (string-length palindrome-string-reverse)))\n                        (if (string-length palindrome-string-reverse)\n                          (let ((palindrome-string-reverse-reverse (reverse palindrome-string-reverse)))\n                            (if (string-length palindrome-string-reverse-reverse)\n                              (let ((palindrome-string-reverse-reverse-length (string-length palindrome-string-reverse-reverse)))\n                                (if (string-length string)\n                                  (let ((palindrome-string-reverse-reverse-length (string-length palindrome-string-reverse-reverse)))\n                                    (if (string-length palindrome-string-reverse-reverse)\n                                      (let ((palindrome-string-reverse-reverse-reverse (reverse palindrome-string-reverse-reverse)))\n                                        (if (string-length palindrome-string-reverse-reverse-reverse)\n                                          (let ((palindrome-string-reverse-reverse-reverse-length (string-length palindrome-string-reverse-reverse-reverse)))\n                                            (if (string-length string)\n                                              (let ((palindrome-string-reverse-reverse-reverse-length (string-length palindrome-string-reverse-reverse-reverse)))\n                                                (if (string-length palindrome-string-reverse-reverse-reverse-reverse)\n                                                  (let ((",
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p p string)\n      string\n      (string-append string (string-prefix p string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;;",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-length (string-length longest-palindrome)))\n        (if (string-ref string-length -1 -palindrome-length)\n            (string-append string-ref string-length -1 -palindrome-length string-ref string-length -1 -palindrome-length)\n            (string-append string-ref string-length -1 -palindrome-length string-ref string-length -1 -palindrome-length string-ref string-length -1 -palindrome-length)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatcat\")\n;; \"catacatcat\"\n;; >>> (make_palindrome \"catacatcatacat\")\n;; \"catacatcatacat\"\n;; >>> (make_palindrome \"catacatcatacatcat\")\n;; \"catacatcatacatcat\"\n;; >>> (make_palindrome \"catacatcatacatcatacat\")\n;; \"catacatcatacatcatacat\"\n;; >>> (make_palindrome \"catacatcatacatcatacatcat\")\n;; \"catacatcatacatcatacatcat\"\n;; >>> (make_palindrome \"catacatcatacatcatacatcatacat\")\n;; \"catacatcatacatcatacatcatacat\"\n;; >>> (make_palindrome \"catacatcatacatcatacatcatacatcat\")\n;; \"catacatcatacatcatacatcatacatcat\"\n;; >>> (make_palindrome \"catacatcatacatcatacatcatacatcatacat\")\n;; \"catacatcatacatcatacatcatacatcatacat\"\n;; >>> (make_pal",
    "  (let ((longest (string-length string)))\n    (let ((i (0)))\n      (while (string-ref string i)\n        (if (string-ref string (string-length string) - i)\n          (return string)\n          (i (i + 1)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length)))\n        (let ((palindrome-string-length (string-length palindrome-string)))\n          (if (string-length palindrome-string-length)\n            (string-copy (string-copy string-length)\n               (string-copy palindrome-string-length)\n               (string-copy (string-copy palindrome-string-length)\n                 (string-copy string-length)))))))))))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (make-string string-length))))\n      (let ((palindrome (make-string palindrome-length)))\n        (let ((i (string-length)))\n          (while (< i 0)\n            (let ((j (string-length)))\n              (while (< j i)\n                (setf (aref palindrome j) (aref string i))\n                (setf (aref palindrome j) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) (aref string j))\n                (setf (aref string",
    "  (let* ([\n    postfix (string-reverse string)\n    prefix (string-prefix string postfix)\n    result (if (string=? prefix postfix) string prefix)\n  ])\n    (if (string=? result string)\n      result\n      (make_palindrome (string-concat result postfix))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatac",
    "  (let* ([string (string)])\n    (let ([string_length (length string)])\n      (if (string_length < 2)\n        (string)\n      (let ([palindrome_length (length (reverse string))])\n        (if (palindrome_length == string_length)\n          (string)\n        (let ([palindrome_string (string)])\n          (let ([palindrome_string_length (length palindrome_string)])\n            (if (palindrome_string_length == palindrome_length)\n              (string)\n            (let ([prefix_string (string)])\n              (let ([prefix_string_length (length prefix_string)])\n                (if (prefix_string_length == palindrome_length)\n                  (string)\n                (let ([prefix_string_reverse (reverse prefix_string)])\n                  (let ([prefix_string_reverse_length (length prefix_string_reverse)])\n                    (if (prefix_string_reverse_length == palindrome_length)\n                      (string)\n                    (let ([suffix_string (string)])\n                      (let ([suffix_string_length (length suffix_string)])\n                        (if (suffix_string_length == palindrome_length)\n                          (string)\n                        (let ([suffix_string_reverse (reverse suffix_string)])\n                          (let ([suffix_string_reverse_length (length suffix_string_reverse)])\n                            (if (suffix_string_reverse_length == palindrome_length)\n                              (string)\n                            (let ([postfix_string (string)])\n                              (let ([postfix_string_length (length postfix_string)])\n                                (if (postfix_string_length == palindrome_length)\n                                  (string)\n                                  (let ([postfix_string_reverse (reverse postfix_string)])\n                                    (let ([postfix_string_reverse_length (length postfix_string_reverse)])\n                                      (if (postfix_string_reverse_length == palindrome_length)\n                                        (string)\n                                      (let ([postfix_string",
    "  (let ((longest_palindrome (string_length string)))\n    (let ((palindrome_length (string_length string)))\n      (if (eqv? palindrome_length longest_palindrome)\n          (string string)\n          (string (string_reverse string (substring string 0 palindrome_length)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacat",
    "  (let* ([string-length (string-length string)]\n         [palindrome-length (string-length string)])\n    (if (string-length string)\n      (let* ([palindrome (string-copy string)]\n             [prefix (string-copy string-length -1)]\n             [suffix (string-copy string-length -2)])\n        (if (string-equal prefix suffix)\n          (string-copy string-length -1)\n          (let* ([reverse-prefix (string-copy string-length -2)]\n                 [reverse-suffix (string-copy string-length -3)])\n            (string-append reverse-prefix reverse-suffix)))\n        (string-append prefix suffix)))\n    (string-copy palindrome-length -1)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacat",
    "  (let ((longest_palindrome (string-reverse string)))\n    (if (string-length string)\n      (string-append string longest_palindrome)\n      string)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac",
    "  (let ((string-length (string-length string)))\n    (let ((string-index (string-index string string-length)))\n      (if (eqv? string-index 0)\n        (string-append (string-reverse string-index) string-index)\n        (let ((palindrome-length (string-length string-index)))\n          (let ((palindrome-index (string-index string-index)))\n            (string-append (string-reverse (string-prefix string-index string-length))\n                                      (string-prefix (string-prefix string-index string-length))))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catac",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length)))\n        (if (string-length string)\n          (string-append (string-reverse (string-prefix palindrome-string palindrome-length))\n             (string-prefix palindrome-string palindrome-length))\n          (string-prefix palindrome-string palindrome-length))))))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (longest_palindrome \"\")\n;; \"\"\n;; >>> (longest_palindrome \"cat\")\n;; \"cat\"\n;; >>> (longest_palindrome \"cata\")\n;; \"cat\"",
    "  (let* ([\n    longest_palindrome (\n      (string-length string) - 1\n      (string-length string)\n      (string-append string string)\n      (string-reverse string)\n      (string-prefix string)\n    )\n  ])\n    (string-append string longest_palindrome)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacat",
    "  (let ((string-length (string-length string))\n         (string-prefix (make-string string-length/2 string)))\n    (if (string-prefix? string-prefix string)\n      (string-prefix string-prefix string)\n      (string-prefix string string-prefix))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length)\n    string_suffix (string_length - 1 string_length)\n    string_reverse (reverse string_prefix)\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    string_prefix_palindrome (string_prefix_length - string_suffix_length)\n    string_suffix_palindrome (string_suffix_length - string_prefix_length)\n    string_palindrome (string_prefix_palindrome + string_suffix_palindrome)\n    string_palindrome_length (length string_palindrome)\n    string_palindrome_prefix (string_palindrome 0 string_palindrome_length)\n    string_palindrome_suffix (string_palindrome_length - 1 string_palindrome_length)\n    string_palindrome_reverse (reverse string_palindrome_prefix)\n    string_palindrome_reverse_length (length string_palindrome_reverse)\n    string_palindrome_reverse_prefix (string_palindrome_reverse 0 string_palindrome_reverse_length)\n    string_palindrome_reverse_suffix (string_palindrome_reverse_length - 1 string_palindrome_reverse_length)\n    string_palindrome_reverse_palindrome (string_palindrome_reverse_prefix + string_palindrome_reverse_suffix)\n    string_palindrome_reverse_palindrome_length (length string_palindrome_reverse_palindrome)\n    string_palindrome_reverse_palindrome_prefix (string_palindrome_reverse_palindrome 0 string_palindrome_reverse_palindrome_length)\n    string_palindrome_reverse_palindrome_suffix (string_palindrome_reverse_palindrome_length - 1 string_palindrome_reverse_palindrome_length)\n    string_palindrome_reverse_palindrome_palindrome (string_palindrome_reverse_palindrome_prefix + string_",
    "  (let* ([string (string)])\n    (if (string-length string)\n      (let* ([string_length (string-length string)])\n        (let* ([palindrome_length (string-length string)])\n          (let* ([palindrome_string (string)])\n            (if (string-length palindrome_string)\n              (let* ([palindrome_string_length (string-length palindrome_string)])\n                (if (string-length string)\n                  (let* ([string_prefix (string 0 (string-length string) - 1)])\n                    (let* ([string_suffix (string (string-length string) - 1)])\n                      (if (string-length string_suffix)\n                        (let* ([string_suffix_length (string-length string_suffix)])\n                          (if (string-length string_prefix)\n                            (let* ([string_prefix_length (string-length string_prefix)])\n                              (if (string-length string_suffix)\n                                (if (string-prefix-ci string string_prefix string_suffix)\n                                  (string-append string_prefix string_suffix)\n                                  (string-append string_prefix string_suffix string_prefix))\n                                (string-append string_prefix string_suffix
    "  (let ((palindrome (string)))\n    (if (string=? palindrome)\n      palindrome\n      (let ((prefix (string)))\n        (let ((suffix (string)))\n          (let ((i (length prefix)))\n            (let ((j (length suffix)))\n              (let ((k (min i j)))\n                (if (string=? (substring prefix k) (substring suffix k))\n                  (append (reverse prefix) suffix)\n                  (make_palindrome (substring prefix k) (substring suffix k))))))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacat",
    "  (let ((length (string-length string)))\n    (let ((p (string-copy string)))\n      (let ((i (0)))\n        (while (eqv? (string-ref p i) (string-ref string i)))\n          (string-set! p i (- (1 + i))))\n      (string-set! p i length)\n      (string-reverse! (string-substring string 0 i))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palind",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (reverse string))))\n      (if (eq string-length palindrome-length)\n        (string)\n        (string (reverse (substring string 0 (- string-length palindrome-length) palindrome-length)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make",
    "  (let ((longest_palindrome (string_length string)))\n    (let ((palindrome_length (string_length longest_palindrome)))\n      (let ((palindrome (string_ref string palindrome_length)))\n        (string_set! string (string_ref string 0) (string_ref longest_palindrome (string_length longest_palindrome) - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome (string_length longest_palindrome) - 1) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set! string (string_ref longest_palindrome 0) (string_length longest_palindrome - 1))\n        (string_set",
    "  (let ((longest (string-reverse string)))\n    (if (string-prefix? string longest)\n      (string-append string longest)\n      (string-append string (string-reverse (string-prefix string longest))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make",
    "  (let ((longest (string-length string)))\n    (let ((palindrome (string-copy string)))\n      (let ((i (0)))\n        (while (< i longest)\n          (let ((j (i)))\n            (let ((prefix (string-copy string 0 i)))\n              (let ((suffix (string-copy string j)))\n                (if (string=? prefix suffix)\n                  (string-append prefix suffix)\n                  (string-append prefix string-reverse suffix)))))))))\n  (string-append string string-reverse (string-copy string 0)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac",
    "  (let ((p (string)))\n    (if (string-length p)\n      (let ((s (string-reverse p)))\n        (string-append p s))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaaaa\")",
    "  (let* ([string_length (string-length string)])\n    (let* ([palindrome_length (string-length (reverse string))])\n      (if (eq? palindrome_length string_length)\n        (string)\n        (let* ([prefix_length (string-length (reverse (substring string 0 palindrome_length))))\n          (let* ([prefix (substring string 0 prefix_length)]\n            [suffix (substring string (string-length string) - palindrome_length)])\n            (concat prefix (reverse suffix))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat",
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p string p)\n      string\n      (string-append string (string-prefix-p p string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac",
    "  (let ((length (string-length string)))\n    (if (string-empty? string)\n      string\n      (let ((max-length (string-length (string-reverse string))))\n        (if (string-empty? string)\n          string\n          (let ((min-length (string-length string)))\n            (if (string-empty? string)\n              string\n              (let ((palindrome (string-copy string)))\n                (let ((prefix (string-copy string (max-length -1))))\n                  (let ((suffix (string-copy string (min-length))))\n                    (string-append (string-reverse prefix) suffix))))))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome (string-copy string)))\n        (let ((prefix (string-copy string-length -1)))\n          (let ((suffix (string-copy string-length)))\n            (string-append prefix (string-reverse suffix))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")",
    "  (let* ([string-length (string-length string)]\n         [palindrome-length (string-length string)])\n    (if (eq string-length 0)\n      (string)\n      (let* ([prefix (string-copy/part string-length -1 -1)]\n              [suffix (string-copy/part string-length -1 -1)])\n        (if (eq string-length palindrome-length)\n          (string)\n          (let* ([palindrome (string-copy/part palindrome-length -1 -1)]\n                  [reverse-prefix (string-copy/part -1 -1)]\n                  [reverse-suffix (string-copy/part -1 -1)])\n            (string-append (string-append prefix reverse-prefix)\n                                  (string-append reverse-suffix suffix))))))\n  ))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatac",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (while (string)\n        (if (string = reverse string)\n          (return result)\n          (result (append result (string))))\n        (string = (cdr string)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"cat",
    "  (let ((longest_palindrome (string_length string)))\n    (let ((palindrome_prefix (string_ref string 0 longest_palindrome)))\n      (string_append (string_reverse palindrome_prefix)\n        (string_ref string longest_palindrome - 1))))\n  (make_palindrome string))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome (string-copy string)))\n        (let ((prefix (string-copy string-length -1)))\n          (let ((suffix (string-copy string)))\n            (string-copy string-length -1))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"cat",
    "  (let ((longest_palindrome (string_reverse (string_prefix (string_reverse string))))\n         (shortest_palindrome (string_prefix string)))\n    (if (string=? string longest_palindrome)\n      string\n      (string_append (string_prefix string)\n       (string_append (string_reverse shortest_palindrome))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatac",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (length (make_palindrome_string string))\n    palindrome_string (make_palindrome_string string)\n    palindrome_string_length (length palindrome_string)\n    palindrome_string_prefix (make_palindrome_string string)\n    palindrome_string_prefix_length (length palindrome_string_prefix)\n    palindrome_string_suffix (make_palindrome_string string)\n    palindrome_string_suffix_length (length palindrome_string_suffix)\n    palindrome_string_suffix_reverse (reverse palindrome_string_suffix)\n    palindrome_string_prefix_reverse (reverse palindrome_string_prefix)\n    palindrome_string_suffix_reverse_prefix (\n      append palindrome_string_suffix_reverse\n        palindrome_string_prefix_reverse)\n    palindrome_string_suffix_reverse_prefix_length (\n      length palindrome_string_suffix_reverse_prefix)\n    palindrome_string_suffix_reverse_prefix_string (\n      palindrome_string_suffix_reverse_prefix)\n    palindrome_string_suffix_reverse_prefix_string_length (\n      length palindrome_string_suffix_reverse_prefix_string)\n    palindrome_string_suffix_reverse_prefix_string_string (\n      palindrome_string_suffix_reverse_prefix_string)\n    palindrome_string_suffix_reverse_prefix_string_string_length (\n      length palindrome_string_suffix_reverse_prefix_string_string)\n    palindrome_string_suffix_reverse_prefix_string_string_string (\n      palindrome_string_suffix_reverse_prefix_string_string)\n    palindrome_string_suffix_reverse_prefix_string_string_string_length (\n      length palindrome_string_suffix_reverse_prefix_string_string_string)\n    ])\n    (if (eq string_length palind",
    "  (let ((longest_palindrome (string_length string)))\n    (let ((palindrome_prefix (string_prefix string longest_palindrome)))\n      (string_append (string_reverse palindrome_prefix) string)))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatac",
    "  (let* ([string (string)])\n    (if (string=string)\n      (string)\n      (let ([string_length (length string)])\n        (if (> string_length 1)\n          (let* ([string_prefix (substring string 0 (- string_length 1))]\n                 [string_suffix (substring string (+ string_length 1))])\n            (string_prefix (reverse string_prefix))\n            (string_suffix (reverse string_suffix))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome",
    "  (let ((string-length (string-length string))\n         (string-prefix (string-prefix string))\n         (string-suffix (string-suffix string)))\n    (if (string-length string-prefix)\n      (string-append string-prefix (string-reverse string-suffix))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"",
    "  (let ((longest (string-reverse (string-prefix string))))\n    (string-append string (string-reverse (string-prefix string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatac",
    "  (let ((palindrome (string)))\n    (if (string-length string)\n      (let ((prefix (string-prefix string)))\n        (string-append prefix (string-reverse prefix))))\n    (string)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-length (string-length longest-palindrome)))\n        (let ((palindrome-string (string-copy string (string-length palindrome))))\n          (string-copy string (- palindrome-length 2))\n          (string-copy palindrome (string-length string))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (min (string_length - 1) (string_length / 2))\n    palindrome_prefix (string_length - palindrome_length)\n    palindrome_suffix (palindrome_length)\n    palindrome_string (string_slice string palindrome_prefix string_length - palindrome_suffix)\n    reverse_prefix (string_slice string palindrome_prefix string_length - 1)\n    reverse_suffix (string_slice string palindrome_suffix 1)\n    reverse_string (string_concat reverse_prefix reverse_suffix)\n    ])\n    (if (string=? string reverse_string)\n      (string)\n      (string_concat string reverse_string)))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catac",
    "  (let* ([\n    postfix (string-reverse string)\n    prefix (string-prefix string postfix)\n    result (string-append prefix postfix)\n  ])\n    (if (string-length postfix)\n      result\n      (make_palindrome (string-append postfix string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac",
    "  (let ((longest (string-reverse string)))\n    (if (string-prefix? longest string)\n      string\n      (string-append string (string-prefix string longest))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac",
    "  (let ((length (string-length string)))\n    (let ((max_length (string-length (string-prefix string))))\n      (let ((palindrome (string-copy string max_length)))\n        (string-append (string-reverse string (max_length - 1)) palindrome))))\n)\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (longest_palindrome \"\")\n;; \"\"\n;; >>> (longest_palindrome \"cat\")\n;; \"cat\"\n;; >>> (longest_palindrome \"cata\")\n;; \"cat\"",
    "  (let ((longest (string-reverse (string-prefix string))))\n    (string-append string (string-reverse (string-prefix string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatac",
    "  (let* ([\n    max_len (string-length string)\n    max_palindrome (make_palindrome_helper string max_len)\n    max_palindrome_len (length max_palindrome)\n    max_palindrome_str (string-copy/part max_palindrome_len max_palindrome)\n    max_palindrome_str_rev (reverse string-copy/part max_palindrome_len max_palindrome)\n    max_palindrome_str_rev_str (string-append max_palindrome_str max_palindrome_str_rev)\n    max_palindrome_str_rev_str_str (string-append max_palindrome_str_rev max_palindrome_str_rev_str)\n    max_palindrome_str_rev_str_str_str (string-append max_palindrome_str_rev max_palindrome_str_rev_str_str)\n    max_palindrome_str_rev_str_str_str_str (string-append max_palindrome_str_rev max_palindrome_str_rev_str_str_str)\n    max_palindrome_str_rev_str_str_str_str_str (string-append max_palindrome_str_rev max_palindrome_str_rev_str_str_str_str)\n    max_palindrome_str_rev_str_str_str_str_str_str (string-append max_palindrome_str_rev max_palindrome_str_rev_str_str_str_str_str)\n    max_palindrome_str_rev_str_str_str_str_str_str_str (string-append max_palindrome_str_rev max_palindrome_str_rev_str_str_str_str_str_str)\n    max_palindrome_str_rev_str_str_str_str_str_str_str_str (string-append max_palindrome_str_rev max_palindrome_str_rev_str_str_str_str_str_str_str)\n",
    "  (let ((str (string)))\n    (if (string=? str)\n      (string)\n      (let ((p (string)))\n        (if (string=? p)\n          (string)\n          (let ((s (string)))\n            (if (string=? s)\n              (string)\n              (let ((l (string)))\n                (if (string=? l)\n                  (string)\n                  (let ((r (string)))\n                    (if (string=? r)\n                      (string)\n                      (let ((l (string)))\n                        (if (string=? l)\n                          (string)\n                          (let ((r (string)))\n                            (if (string=? r)\n                              (string)\n                              (let ((l (string)))\n                                (if (string=? l)\n                                  (string)\n                                  (let ((r (string)))\n                                    (if (string=? r)\n                                      (string)\n                                      (let ((l (string)))\n                                        (if (string=? l)\n                                          (string)\n                                          (let ((r (string)))\n                                            (if (string=? r)\n                                              (string)\n                                              (let ((l (string)))\n                                                (if (string=? l)\n                                                  (string)\n                                                  (let ((r (string)))\n                                                    (if (string=? r)\n                                                      (string)\n                                                      (let ((l (string)))\n                                                        (if (string=? l)\n                                                          (string)\n                                                          (let ((r (string)))\n                                                            (if (string=? r)\n                                                              (string)\n                                                              (let ((l (string)))\n                                                                (if (string=? l)\n                                                                  (string)\n                                                                  (let ((r (string)))\n                                                                    (if (string=? r)\n                                                                      (string)",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-length (string-length longest-palindrome)))\n        (let ((palindrome-string (string-copy string 0 palindrome-length)))\n          (string-copy string palindrome-length -1 string-length)))))))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (longest_palindrome \"\")\n;; \"\"\n;; >>> (longest_palindrome \"cat\")\n;; \"catac\"\n;; >>> (longest_palindrome \"cata\")\n;; \"catac\"",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length)))\n        (let ((palindrome-string-length (string-length palindrome-string)))\n          (let ((palindrome-string-prefix (string string-length palindrome-string-length)))\n            (let ((palindrome-string-suffix (string-reverse palindrome-string-prefix)))\n              (string-append palindrome-string-suffix string-length-difference))))))))\n\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacat",
    "  (let ((palindrome (string)))\n    (if (string-length string)\n      (if (string-length palindrome)\n        (string-append (string-reverse (string-prefix palindrome)) (string-prefix (string-reverse palindrome))))\n        (string-append (string-prefix (string-reverse palindrome)) (string-prefix palindrome))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat",
    "  (let* ([\n    prefix (string)\n    suffix (string)\n    length (length string)\n    i (0)\n    j (length - 1)\n    ])\n    (while (> i j)\n      (if (string-ref string i)\n        (string-ref string j)\n        (set! i (+ i 1))\n        (set! j (- j 1)))))\n  (string-append (string-reverse prefix) suffix))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome",
    "  (let* ([\n    postfix (string-reverse string)\n    prefix (string-prefix string postfix)\n    result (if (string-prefix? prefix)\n      (string-append prefix postfix)\n      (string-append postfix prefix))\n  ])\n    (if (string-prefix? result)\n      result\n      (make_palindrome (string-append postfix prefix))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-index (string-length string)))\n        (let ((palindrome-index-2 (string-length string)))\n          (let ((palindrome-index-3 (string-length string)))\n            (let ((palindrome-index-4 (string-length string)))\n              (let ((palindrome-index-5 (string-length string)))\n                (let ((palindrome-index-6 (string-length string)))\n                  (let ((palindrome-index-7 (string-length string)))\n                    (let ((palindrome-index-8 (string-length string)))\n                      (let ((palindrome-index-9 (string-length string)))\n                        (let ((palindrome-index-10 (string-length string)))\n                          (let ((palindrome-index-11 (string-length string)))\n                            (let ((palindrome-index-12 (string-length string)))\n                              (let ((palindrome-index-13 (string-length string)))\n                                (let ((palindrome-index-14 (string-length string)))\n                                  (let ((palindrome-index-15 (string-length string)))\n                                    (let ((palindrome-index-16 (string-length string)))\n                                      (let ((palindrome-index-17 (string-length string)))\n                                        (let ((palindrome-index-18 (string-length string)))\n                                          (let ((palindrome-index-19 (string-length string)))\n                                            (let ((palindrome-index-20 (string-length string)))\n                                              (let ((palindrome-index-21 (string-length string)))\n                                                (let ((palindrome-index-22 (string-length string)))\n                                                  (let ((palindrome-index-23 (string-length string)))\n                                                    (let ((palindrome-index-24 (string-length string)))\n                                                      (let ((palindrome-index-25 (string-length string)))\n",
    "  (let ((palindrome (string)))\n    (if (string=? palindrome)\n      palindrome\n      (let ((prefix (string)))\n        (if (string=? prefix)\n          prefix\n          (let ((suffix (string)))\n            (if (string=? suffix)\n              suffix\n              (let ((reverse (string)))\n                (if (string=? reverse)\n                  reverse\n                  (let ((reverse_prefix (string)))\n                    (if (string=? reverse_prefix)\n                      reverse_prefix\n                      (let ((reverse_suffix (string)))\n                        (if (string=? reverse_suffix)\n                          reverse_suffix\n                          (let ((reverse_prefix_suffix (string)))\n                            (if (string=? reverse_prefix_suffix)\n                              reverse_prefix_suffix\n                              (let ((reverse_prefix_suffix_reverse (string)))\n                                (if (string=? reverse_prefix_suffix_reverse)\n                                  reverse_prefix_suffix_reverse\n                                  (let ((reverse_prefix_suffix_reverse_reverse (string)))\n                                    (if (string=? reverse_prefix_suffix_reverse_reverse)\n                                      reverse_prefix_suffix_reverse_reverse\n                                      (let ((reverse_prefix_suffix_reverse_reverse_reverse (string)))\n                                        (if (string=? reverse_prefix_suffix_reverse_reverse_reverse)\n                                          reverse_prefix_suffix_reverse_reverse_reverse\n                                          (let ((reverse_prefix_suffix_reverse_reverse_reverse_reverse (string)))\n                                            (if (string=? reverse_prefix_suffix_reverse_reverse_reverse_reverse)\n                                              reverse_prefix_suffix_reverse_reverse_reverse_reverse\n                                              (let ((reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse (string)))\n                                                (if (string=? reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse)\n                                                  reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse\n                                                  (let ((reverse_",
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p p string)\n      string\n      (string-append string (string-prefix p string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;;",
    "  (let ((str (string)))\n    (if (string=? str)\n      (string)\n      (let ((str_rev (reverse (string))))\n        (if (string=? str_rev)\n          (string)\n          (let ((str_rev_rev (reverse (string_rev))))\n            (if (string=? str_rev_rev)\n              (string)\n              (let ((str_rev_rev_rev (reverse (string_rev_rev))))\n                (if (string=? str_rev_rev_rev)\n                  (string)\n                  (let ((str_rev_rev_rev_rev (reverse (string_rev_rev_rev))))\n                    (if (string=? str_rev_rev_rev_rev)\n                      (string)\n                      (let ((str_rev_rev_rev_rev_rev (reverse (string_rev_rev_rev_rev))))\n                        (if (string=? str_rev_rev_rev_rev_rev)\n                          (string)\n                          (let ((str_rev_rev_rev_rev_rev_rev (reverse (string_rev_rev_rev_rev_rev))))\n                            (if (string=? str_rev_rev_rev_rev_rev_rev)\n                              (string)\n                              (let ((str_rev_rev_rev_rev_rev_rev_rev (reverse (string_rev_rev_rev_rev_rev_rev))))\n                                (if (string=? str_rev_rev_rev_rev_rev_rev_rev)\n                                  (string)\n                                  (let ((str_rev_rev_rev_rev_rev_rev_rev_rev (reverse (string_rev_rev_rev_rev_rev_rev_rev))))\n                                    (if (string=? str_rev_rev_rev_rev_rev_rev_rev_rev)\n                                      (string)\n                                      (let ((str_rev_rev_rev_rev_rev_rev_rev_rev_rev (reverse (string_rev_rev_rev_rev_rev_rev_rev_rev))))\n                                        (if (string=? str_rev_rev_rev_rev_rev_rev_",
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p string p)\n      string\n      (string-append string (string-prefix-p p string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa",
    "  (let ((longest_palindrome (string_length string)))\n    (let ((palindrome_prefix (string_ref string 0 longest_palindrome)))\n      (string_append (string_reverse palindrome_prefix) string_ref string 0 longest_palindrome))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_",
    "  (let* ([\n    string_length (length string)\n    string_reverse (reverse string)\n    string_prefix (take-while-equal? string_reverse string)\n    string_suffix (drop-while-equal? string string_reverse)\n    string_palindrome (take string_length - (length string_prefix) - (length string_suffix))\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    string_palindrome_length (length string_palindrome)\n    string_palindrome_reverse (reverse string_palindrome)\n    string_prefix_reverse (reverse string_prefix)\n    string_suffix_reverse (reverse string_suffix)\n    string_palindrome_reverse_length (length string_palindrome_reverse)\n    string_prefix_reverse_length (length string_prefix_reverse)\n    string_suffix_reverse_length (length string_suffix_reverse)\n    string_palindrome_reverse_prefix (take-while-equal? string_palindrome_reverse string_prefix_reverse)\n    string_palindrome_reverse_suffix (drop-while-equal? string_palindrome_reverse string_suffix_reverse)\n    string_palindrome_reverse_prefix_length (length string_palindrome_reverse_prefix)\n    string_palindrome_reverse_suffix_length (length string_palindrome_reverse_suffix)\n    string_palindrome_reverse_prefix_reverse (reverse string_palindrome_reverse_prefix)\n    string_palindrome_reverse_suffix_reverse (reverse string_palindrome_reverse_suffix)\n    string_palindrome_reverse_prefix_reverse_length (length string_palindrome_reverse_prefix_reverse)\n    string_palindrome_reverse_suffix_reverse_length (length string_palindrome_reverse_suffix_reverse)\n    string_palindrome_reverse_prefix_reverse_suffix (concat string_palindrome_reverse_prefix_reverse string_palindrome_reverse_suffix_reverse)\n    string_palindrome_reverse",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (length (make_palindrome_string string))\n    palindrome_string (make_palindrome_string string)\n    palindrome_string_length (length palindrome_string)\n    prefix_length (length (make_prefix_string string))\n    prefix_string (make_prefix_string string)\n    prefix_string_length (length prefix_string)\n    suffix_length (length (make_suffix_string string))\n    suffix_string (make_suffix_string string)\n    suffix_string_length (length suffix_string)\n    palindrome_string_length_minus_prefix_string_length (palindrome_string_length - prefix_string_length)\n    palindrome_string_length_minus_suffix_string_length (palindrome_string_length - suffix_string_length)\n    palindrome_string_length_minus_prefix_string_length_minus_suffix_string_length (palindrome_string_length - prefix_string_length - suffix_string_length)\n    ])\n    (if (eq? string_length palindrome_length)\n      (string)\n      (let* ([\n        prefix_string_length (length prefix_string)\n        suffix_string_length (length suffix_string)\n        palindrome_string_length_minus_prefix_string_length (palindrome_string_length - prefix_string_length)\n        palindrome_string_length_minus_suffix_string_length (palindrome_string_length - suffix_string_length)\n        palindrome_string_length_minus_prefix_string_length_minus_suffix_string_length (palindrome_string_length - prefix_string_length - suffix_string_length)\n        ])\n        (if (eq? prefix_string_length palindrome_string_length_minus_prefix_string_length)\n          (let* ([\n            prefix_string_length_minus_suffix_string_length (prefix_string_length - suffix_string_length)\n            palindrome_string_length_minus",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-index (string-length -1)))\n        (let ((palindrome-string (string string-length -1)))\n          (if (string-length = palindrome-length)\n            (string)\n            (string-append (string-reverse (string-prefix string-length palindrome-index)) (string-prefix string-length palindrome-index))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacat",
    "  (let* ([\n    longest_palindrome (string)\n    longest_palindrome_length (length string)\n    longest_palindrome_index (index string)\n    longest_palindrome_index_length (length longest_palindrome)\n    longest_palindrome_index_index (index longest_palindrome)\n    longest_palindrome_index_index_length (length longest_palindrome_index)\n    longest_palindrome_index_index_index (index longest_palindrome_index)\n    longest_palindrome_index_index_index_length (length longest_palindrome_index_index)\n    longest_palindrome_index_index_index_index (index longest_palindrome_index_index)\n    longest_palindrome_index_index_index_index_length (length longest_palindrome_index_index_index)\n    longest_palindrome_index_index_index_index_index (index longest_palindrome_index_index_index)\n    longest_palindrome_index_index_index_index_index_length (length longest_palindrome_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index (index longest_palindrome_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index_length (length longest_palindrome_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index_index (index longest_palindrome_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index_index_length (length longest_palindrome_index_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index_index_index (index longest_palindrome_index_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index",
    "  (let ((longest_palindrome (string_reverse (string_prefix (string_reverse string))))\n         (palindrome_suffix (string_prefix string)))\n    (if (string=? string longest_palindrome)\n      string\n      (string_append string (string_reverse palindrome_suffix))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (while (string)\n        (if (string = (reverse string))\n          (result string)\n          (string = (string (- 1))))\n        (string = (string (- 1))))\n      (result string)))\n  result)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat",
    "  (let ((longest (string-reverse string)))\n    (if (string-prefix? string longest)\n      string\n      (string-append string (string-prefix string longest))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;;",
    "  (let* ([\n    prefix (string)\n    suffix (string)\n    len (length string)\n    i (0)\n    j (len - 1)\n    ])\n    (while (i < j)\n      (if (string-ref string i)\n        (if (string-ref string j)\n          (string-append prefix string-ref string j)\n          (string-append string-ref string i string-ref string j)\n          (string-set! string j (- 1 j))\n          (string-set! string i (len - 1)))\n        (string-set! string i (i + 1))\n        (string-set! string j (j - 1)))\n      (i (i + 1)))\n    (string)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac",
    "  (let* ([string_length (string-length string)])\n    (if (string-empty? string)\n      string\n      (let* ([longest_palindrome (make-string string_length)])\n        (let* ([palindrome_prefix (make-string string_length)])\n          (let* ([palindrome_suffix (make-string string_length)])\n            (if (string-empty? string)\n              (string)\n              (let* ([palindrome_length (string-length string)])\n                (if (string-empty? string)\n                  (string)\n                  (let* ([prefix_length (string-length string_length)])\n                    (if (string-empty? string_length)\n                      (string)\n                      (let* ([suffix_length (string-length string)])\n                        (if (string-empty? string)\n                          (string)\n                          (let* ([palindrome_string (make-string palindrome_length)])\n                            (string-copy string palindrome_string)\n                            (string-copy string_length palindrome_string)\n                            (string-copy palindrome_length palindrome_string)\n                            (string-copy palindrome_length string)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string_length)\n                            (string-copy palindrome_length string",
    "  (let* ([string_len (length string)])\n    (if (string_len < 2)\n      (string)\n      (let* ([max_len (string_len - 1)])\n        (let* ([i (0)])\n          (let ([j (0)])\n            (while (string_len > i + j)\n              (if (string_len > i + j + 1)\n                (if (string[i] == string[i + j])\n                  (string)\n                  (string (append string (reverse string[i + 1 : j]))))\n                (if (string_len > i + j + 1)\n                  (if (string[i] == string[i + j + 1])\n                    (string)\n                    (string (append string (reverse string[i + 1 : j + 1]))))\n                  (j (j + 1))))\n              (i (i + 1)))))))\n))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatac",
    "  (let* ([string (string)])\n    (if (string-length string)\n      (let* ([string (string)])\n        (if (string-length string)\n          (let* ([string (string)])\n            (if (string-length string)\n              (let* ([string (string)])\n                (if (string-length string)\n                  (let* ([string (string)])\n                    (if (string-length string)\n                      (let* ([string (string)])\n                        (if (string-length string)\n                          (let* ([string (string)])\n                            (if (string-length string)\n                              (let* ([string (string)])\n                                (if (string-length string)\n                                  (let* ([string (string)])\n                                    (if (string-length string)\n                                      (let* ([string (string)])\n                                        (if (string-length string)\n                                          (let* ([string (string)])\n                                            (if (string-length string)\n                                              (let* ([string (string)])\n                                                (if (string-length string)\n                                                  (let* ([string (string)])\n                                                    (if (string-length string)\n                                                      (let* ([string (string)])\n                                                        (if (string-length string)\n                                                          (let* ([string (string)])\n                                                            (if (string-length string)\n                                                              (let* ([string (string)])\n                                                                (if (string-length string)\n                                                                  (let* ([string (string)])\n                                                                    (if (string-length string)\n                                                                      (let* ([string (string)])\n                                                                        (if (string-length string)\n                                                                          (let* ([string (string)])\n                                                                            (if (string-length string)\n                                                                              (let* ([string (string)])\n                                                                                (if (string-length string)\n                               ",
    "  (let* ([\n    prefix (string)\n    suffix (string)\n    length (length string)\n    i (0)\n    j (length - 1)\n    ])\n    (while (i < j)\n      (let ([\n        p (string-ref prefix i)\n        s (string-ref suffix j)\n        ])\n        (if (eqp p s)\n          (return string)\n          (j (decrement j))))\n      (i (increment i))\n      (j (decrement j))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catac",
    "  (let ((longest_palindrome (string_reverse (string_prefix (string_reverse string))))\n         (shortest_palindrome (string_prefix string))))\n  (if (string=? string longest_palindrome)\n    string\n    (string_append (string_prefix string)\n      (string_append (string_reverse longest_palindrome)\n        (string_prefix (string_reverse shortest_palindrome)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatac",
    "  (let* ([string-length (string-length string)]\n         [palindrome-length (string-length string)])\n    (if (eq string-length palindrome-length)\n      (string)\n      (let* ([palindrome (string-copy string)]\n              [string-index (string-index string palindrome-length)]\n              [reverse-index (string-copy string-index string-length)])\n        (string-concat (string-copy string-index string-length)\n                  (string-copy reverse-index string-length)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac",
    "  (let ((palindrome (string)))\n    (if (string=? string)\n      string\n      (let ((prefix (string)))\n        (let ((suffix (string)))\n          (if (string=? prefix)\n            prefix\n            (let ((reverse (string)))\n              (if (string=? reverse)\n                reverse\n                (let ((reverse_prefix (string)))\n                  (if (string=? reverse_prefix)\n                    reverse_prefix\n                    (let ((reverse_suffix (string)))\n                      (if (string=? reverse_suffix)\n                        reverse_suffix\n                        (let ((reverse_prefix_suffix (string)))\n                          (if (string=? reverse_prefix_suffix)\n                            reverse_prefix_suffix\n                            (let ((reverse_prefix_suffix_reverse (string)))\n                              (if (string=? reverse_prefix_suffix_reverse)\n                                reverse_prefix_suffix_reverse\n                                (let ((reverse_prefix_suffix_reverse_reverse (string)))\n                                  (if (string=? reverse_prefix_suffix_reverse_reverse)\n                                    reverse_prefix_suffix_reverse_reverse\n                                    (let ((reverse_prefix_suffix_reverse_reverse_reverse (string)))\n                                      (if (string=? reverse_prefix_suffix_reverse_reverse_reverse)\n                                        reverse_prefix_suffix_reverse_reverse_reverse\n                                        (let ((reverse_prefix_suffix_reverse_reverse_reverse_reverse (string)))\n                                          (if (string=? reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse)\n                                            reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse\n                                            (let ((reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse_reverse (string)))\n                                              (if (string=? reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse)\n                                                reverse_prefix_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n                                                (let ((reverse_prefix_suffix_reverse_reverse_reverse_reverse_",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-index (string-length string)))\n        (while (string-length string)\n          (if (string-prefix? string string-length)\n            (string-append string-length string)\n            (string-append (string-reverse string-length) string-length))))\n      (string-append string-length string))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (string_length - 1)\n    palindrome_suffix (string_length - palindrome_length)\n    palindrome_prefix (palindrome_length)\n    palindrome_suffix_string (string (take palindrome_suffix string))\n    palindrome_prefix_string (string (drop palindrome_prefix string))\n    palindrome_suffix_string_reverse (reverse palindrome_suffix_string)\n    palindrome_prefix_string_reverse (reverse palindrome_prefix_string)\n    palindrome_suffix_string_reverse_string (palindrome_suffix_string_reverse)\n    palindrome_prefix_string_reverse_string (palindrome_prefix_string_reverse)\n    palindrome_suffix_string_reverse_string_reverse (palindrome_suffix_string_reverse_string)\n    palindrome_prefix_string_reverse_string_reverse (palindrome_prefix_string_reverse_string)\n    palindrome_suffix_string_reverse_string_reverse_string (palindrome_suffix_string_reverse_string_reverse)\n    palindrome_prefix_string_reverse_string_reverse_string (palindrome_prefix_string_reverse_string_reverse_string)\n    ])\n    (if (string=? palindrome_suffix_string_reverse_string_reverse_string)\n      (string)\n      (string (append palindrome_prefix_string_reverse_string_reverse_string))))\n)\n",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (make-string string-length/2))))\n    (let ((palindrome (make-string palindrome-length)))\n      (let ((i 0))\n        (while (< i string-length)\n          (let ((j (string-length - i)))\n            (let ((prefix (string-substring string i j)))\n              (let ((suffix (string-substring string 0 j))))\n                (if (string=? prefix suffix)\n                  (string-append prefix suffix)\n                  (string-append prefix (string-reverse suffix)))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n;; >>> (make_replace \"cat\" \"dog\")\n;; \"dogac\"\n",
    "  (let ((longest_palindrome (string_reverse (string_prefix (string_reverse string))))\n         (shortest_palindrome (string_prefix string)))\n    (if (string=? longest_palindrome shortest_palindrome)\n      string\n      (string_append (string_prefix (string_reverse shortest_palindrome))\n       (string_reverse longest_palindrome))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length - 1)\n    string_suffix (string 1 string_length)\n    string_reverse (reverse string_prefix)\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    string_palindrome (string_prefix string_suffix)\n    string_palindrome_length (length string_palindrome)\n    string_palindrome_prefix (string_palindrome 0 string_palindrome_length - 1)\n    string_palindrome_suffix (string_palindrome 1 string_palindrome_length)\n    string_palindrome_reverse (reverse string_palindrome_prefix)\n    string_palindrome_prefix_length (length string_palindrome_prefix)\n    string_palindrome_suffix_length (length string_palindrome_suffix)\n    string_palindrome_reverse_length (length string_palindrome_reverse)\n    string_palindrome_reverse_prefix (string_palindrome_reverse 0 string_palindrome_reverse_length - 1)\n    string_palindrome_reverse_suffix (string_palindrome_reverse 1 string_palindrome_reverse_length)\n    string_palindrome_reverse_prefix_length (length string_palindrome_reverse_prefix)\n    string_palindrome_reverse_suffix_length (length string_palindrome_reverse_suffix)\n    string_palindrome_reverse_prefix_suffix (string_palindrome_reverse_prefix string_palindrome_reverse_suffix)\n    string_palindrome_reverse_prefix_suffix_length (length string_palindrome_reverse_prefix_suffix)\n    string_palindrome_reverse_prefix_suffix_string (string_palindrome_reverse_prefix_suffix 0 string_palindrome_reverse_prefix_suffix_length - 1)\n    string_palindrome_reverse_prefix_suffix_string_length (length string_palindrome_reverse_prefix_suffix_string)\n",
    "  (let* ([\n    string_length (length string)\n    string_reverse (reverse string)\n    palindrome_suffix (string_length - 1)\n    palindrome_prefix (string_length - 1)\n    palindrome_length (string_length)\n    palindrome_index (string_length - 1)\n    palindrome_index_reverse (string_length - 1)\n    palindrome_index_reverse_index (string_length - 1)\n    palindrome_index_reverse_index_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse_string_reverse (string_length - 1)\n    palindrome_index_reverse_index_string_reverse_string_reverse_string_reverse_string_reverse_",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (string_length - 1)\n    palindrome_suffix (string_length - palindrome_length)\n    palindrome_prefix (palindrome_length)\n    palindrome_string (string)\n    palindrome_string_reverse (reverse string)\n    palindrome_string_prefix (string_prefix string)\n    palindrome_string_suffix (string_suffix string)\n    palindrome_string_prefix_reverse (reverse string_prefix)\n    palindrome_string_suffix_reverse (reverse string_suffix)\n    palindrome_string_prefix_suffix (string_prefix string_suffix)\n    palindrome_string_prefix_suffix_reverse (reverse string_prefix string_suffix)\n    ])\n    (if (string_length = palindrome_length)\n      (string)\n      (let* ([\n        palindrome_string_length (length palindrome_string)\n        palindrome_string_prefix_length (length palindrome_string_prefix)\n        palindrome_string_suffix_length (length palindrome_string_suffix)\n        palindrome_string_prefix_suffix_length (length palindrome_string_prefix_suffix)\n        palindrome_string_prefix_suffix_reverse_length (length palindrome_string_prefix_suffix_reverse)\n        ])\n        (if (string_length = palindrome_string_length)\n          (string)\n          (let* ([\n            palindrome_string_length (length palindrome_string)\n            palindrome_string_prefix_length (length palindrome_string_prefix)\n            palindrome_string_suffix_length (length palindrome_string_suffix)\n            palindrome_string_prefix_suffix_length (length palindrome_string_prefix_suffix)\n            palindrome_string_prefix_suffix_reverse_length (length palindrome_string_prefix_suffix_reverse)\n            ])\n            (if (string_length = palindrome_string",
    "  (let ((string-length (string-length string))\n         (string-prefix (string-prefix string)))\n    (if (string-length string-prefix)\n      (string-append (string-reverse string-prefix) string-prefix)\n      string)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catac",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (make_palindrome string))))\n    (if (string-length string)\n      (string-append (make_palindrome string)\n           (string-copy (string-copy string string-length -1)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacat",
    "  (let* ([\n    longest_palindrome (\n      (string-length string) - 1\n    )\n    longest_palindrome_index (\n      (string-index/reverse string longest_palindrome) + 1\n    )\n    longest_palindrome_length (\n      (string-length string) - longest_palindrome_index\n    )\n    longest_palindrome_string (\n      (string-substring string longest_palindrome_index\n        longest_palindrome_length)\n    )\n    longest_palindrome_string_reverse (\n      (string-reverse string longest_palindrome_string)\n    )\n    new_string (\n      (string-concat string longest_palindrome_string\n        longest_palindrome_string_reverse)\n    )\n  ])\n  (if (string-length string)\n    (string-append string new_string)\n    new_string)\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>>",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length)\n    string_suffix (string_length - 1 string_length)\n    string_reverse (reverse string_prefix)\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    string_prefix_palindrome (string_prefix_length - string_suffix_length)\n    string_suffix_palindrome (string_suffix_length - string_prefix_length)\n    string_palindrome (string_prefix_palindrome + string_suffix_palindrome)\n    string_palindrome_length (length string_palindrome)\n    string_palindrome_prefix (string_palindrome 0 string_palindrome_length)\n    string_palindrome_suffix (string_palindrome_length - 1 string_palindrome_length)\n    string_palindrome_reverse (reverse string_palindrome_prefix)\n    string_palindrome_prefix_length (length string_palindrome_prefix)\n    string_palindrome_suffix_length (length string_palindrome_suffix)\n    string_palindrome_prefix_palindrome (string_palindrome_prefix_length - string_palindrome_suffix_length)\n    string_palindrome_suffix_palindrome (string_palindrome_suffix_length - string_palindrome_prefix_length)\n    string_palindrome_palindrome (string_palindrome_prefix_palindrome + string_palindrome_suffix_palindrome)\n    string_palindrome_palindrome_length (length string_palindrome_palindrome)\n    string_palindrome_palindrome_prefix (string_palindrome_palindrome 0 string_palindrome_palindrome_length)\n    string_palindrome_palindrome_suffix (string_palindrome_palindrome_length - 1 string_palindrome_palindrome_length)\n    string_palindrome_palindrome_reverse (reverse string_pal",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-length (string-length longest-palindrome)))\n        (if (string-length longest-palindrome)\n          (string-append string-reverse (string-prefix string-length longest-palindrome))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat",
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p p string)\n      string\n      (string-append string (string-prefix p string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palind",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (reverse string))))\n    (if (string-length string)\n      (if (string-length palindrome-length)\n        (string string-length)\n        (string string-length (make_palindrome (string-tail string))))\n      (string string-length))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")",
    "  (let ((longest (string-reverse (string-prefix string))))\n    (string-append string (string-prefix string (string-reverse longest))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatac",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (make-string string-length/2))))\n    (if (string-length/2 = palindrome-length)\n      (string)\n      (let ((palindrome (make-string palindrome-length)))\n        (string-copy/reverse (string-copy string 0 palindrome-length))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac",
    "  (let* ([\n    string_length (string-length string)\n    longest_palindrome (\n      (let* ([\n        longest_palindrome_length (\n          (let* ([\n            longest_palindrome_string (\n              (string-copy string)\n              (string-fill! string_length longest_palindrome_length - 1 #\\0)\n            )\n            longest_palindrome_string_length (string-length longest_palindrome_string)\n          ])\n          (if (string-equal? string longest_palindrome_string)\n            longest_palindrome_length\n            (if (string-equal? string longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_palindrome_string)\n              (string-copy string)\n              (string-copy longest_",
    "  (let ((longest (string-length string)))\n    (let ((prefix (string-substring string 0 longest)))\n      (let ((suffix (string-substring string (longest - 1))))\n        (if (string=? prefix suffix)\n            prefix\n            (string-append prefix (string-reverse suffix)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac",
    "  (let ((length (string-length string)))\n    (if (string-empty? string)\n      string\n      (let ((prefix (string-prefix string)))\n        (let ((suffix (string-suffix string)))\n          (if (string-empty? prefix)\n            (string-append prefix string)\n            (string-append (string-reverse prefix) suffix))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatac",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (reverse string))))\n    (if (string-length string)\n      (if (string-length palindrome-length)\n        (string string-length)\n        (string string-length (make_palindrome (string-length string))))\n      (string string-length))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")",
    "  (let ((longest_palindrome (string_reverse (string_prefix (string_reverse string))))\n\t(shortest_palindrome (string_prefix string))))\n  (if (string=? string longest_palindrome)\n    string\n    (string append (string_prefix string) (string_reverse longest_palindrome))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacat",
    "  (let* ([\n    postfix (string)\n    postfix_len (length postfix)\n    postfix_rev (reverse postfix)\n    postfix_rev_len (length postfix_rev)\n    prefix (string)\n    prefix_len (length prefix)\n    prefix_rev (reverse prefix)\n    prefix_rev_len (length prefix_rev)\n    palindrome (string)\n    palindrome_len (length palindrome)\n    palindrome_rev (reverse palindrome)\n    palindrome_rev_len (length palindrome_rev)\n    ])\n    (if (eq? postfix_len postfix_rev_len)\n      (if (eq? prefix_len prefix_rev_len)\n        (if (eq? palindrome_len palindrome_rev_len)\n          (string)\n          (string (concat prefix prefix_rev prefix_rev_rev))))\n      (string (concat prefix prefix_rev prefix_rev_rev))))\n",
    "  (let* ([\n    prefix (string)\n    suffix (string)\n    i (length prefix)\n    j (length suffix)\n    k (length prefix)\n    l (length suffix)\n    p (make-string (length prefix) #\\0)\n    q (make-string (length suffix) #\\0)\n    r (make-string (length prefix) #\\0)\n    s (make-string (length suffix) #\\0)\n    t (make-string (length prefix) #\\0)\n    u (make-string (length suffix) #\\0)\n    v (make-string (length prefix) #\\0)\n    w (make-string (length suffix) #\\0)\n    x (make-string (length prefix) #\\0)\n    y (make-string (length suffix) #\\0)\n    z (make-string (length prefix) #\\0)\n    z1 (make-string (length suffix) #\\0)\n    z2 (make-string (length prefix) #\\0)\n    z3 (make-string (length suffix) #\\0)\n    z4 (make-string (length prefix) #\\0)\n    z5 (make-string (length suffix) #\\0)\n    z6 (make-string (length prefix) #\\0)\n    z7 (make-string (length suffix) #\\0)\n    z8 (make-string (length prefix) #\\0)\n    z9 (make-string (length suffix) #\\0)\n    z10 (make-string (length prefix) #\\0)\n    z11 (make-string (length suffix) #\\0)\n    z12 (make-string (length prefix) #\\0)\n    z13 (make-string (length suffix) #\\0)\n    z14 (make-string (length prefix) #\\0)\n    z15 (make-string (length suffix) #\\0)\n    z16 (make-string (length prefix) #\\0)\n    z17 (make-string (length suffix) #\\0)\n    z18 (make-string (length prefix) #\\0)\n    z19 (make-string (length suffix) #",
    "  (let* ([string (string)])\n    (let ([string-length (length string)])\n      (if (string-length < 2)\n        (string)\n      (let ([palindrome (make_palindrome_helper string)])\n        (if (string-length == palindrome)\n          (string)\n        (string (concat (string-copy string) (string-copy string-reverse palindrome))))))))\n\n;; Helper function for make_palindrome.\n;; Takes a string and returns the longest palindrome that starts with it.\n;; >>> (make_palindrome_helper \"cat\")\n;; \"cat\"\n;; >>> (make_palindrome_helper \"cata\")\n;; \"cat\"",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (while (string)\n        (if (string = reverse string)\n          (return result)\n          (string = (string (- 1))))\n        (result = (append result string))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make",
    "  (let* ([\n    longest_palindrome (\n      (string-length string) - 1\n    )\n    longest_palindrome_index (\n      (string-index/reverse string longest_palindrome) + 1\n    )\n  ])\n    (if (string-empty? string)\n      string\n      (string-append\n        (string-copy/reverse (string-prefix string longest_palindrome_index))\n        (string-copy/reverse (string-suffix string longest_palindrome_index))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacatc\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacatc\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacatc\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacatc\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacatc\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatc\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatc\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatc\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatc\"\n;; >>> (make_pal",
    "  (let ((result \"\"))\n    (let ((string_length (string-length string)))\n      (while (>= string_length 1)\n        (let ((palindrome_length (string-length (reverse (substring string 0 (string-length string) - 1))))\n              (palindrome_index (string-length string)))\n          (if (string-equal (substring string palindrome_index) (substring string 0 palindrome_index))\n            (set! result (concatenate/dup result string_length)))\n          (set! string (substring string 0 palindrome_index - 1))))\n      (set! string (reverse (substring string 0 string_length))))\n    (if (string-length string)\n      (set! result (concatenate/dup result string_length))))\n  result)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"",
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p string p)\n      (string-append string p)\n      (string-append string (string-reverse string))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatac",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (make_palindrome string))))\n    (if (string-length palindrome-length)\n      (string-append (string-reverse (string-prefix string string-length palindrome-length))\n                                      (string-prefix string string-length palindrome-length))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatac",
    "  (let ((string-length (string-length string))\n         (string-prefix (make-string string-length/2 string)))\n    (if (string-prefix? string-prefix string)\n      (string-prefix string-prefix string)\n      (string-prefix string string-prefix))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat",
    "  (let ((longest (string-reverse (string-prefix string string))))\n    (string-append string longest)))\n\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacatacat\")\n",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-index (string-length string)))\n        (while (string-length string)\n          (if (string-ref string palindrome-index)\n            (string-set! string (string-ref string (string-length string) - 1))\n            (string-set! string (string-ref string palindrome-index) (string-ref string (string-length string) - 1))))\n        (string-append string (reverse (substring string 0 (string-length string) - longest-palindrome)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-length (string-length longest-palindrome)))\n        (let ((palindrome-string (string-copy string 0 palindrome-length)))\n          (string-copy string palindrome-length -1 string-length -1)\n          (string-copy string 0 palindrome-length -1 string-length -1)\n          (string-append palindrome-string longest-palindrome)))))))\n\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-index (string-length -1)))\n        (while (< palindrome-index palindrome-length)\n          (let ((palindrome-index (string-length -1)))\n            (if (string-ref string-index palindrome-index)\n              (string-append string-ref string-index palindrome-index)\n              (string-append string-ref string-index (string-length -1) -1))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatac",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (make-string string-length))))\n      (let ((palindrome (make-string palindrome-length)))\n        (let ((i (string-length)))\n          (while (< i 0)\n            (let ((j (string-length)))\n              (while (< j i)\n                (setf (aref palindrome j) (aref string i))\n                (setf (aref palindrome j) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) #\\0))\n              (setf (aref string i) (aref string j))\n              (setf (aref string j) (aref string i))\n              (setf (aref string i) #\\0))\n            (setf i (- i 1))))\n        (let ((prefix (make-string palindrome-length)))\n          (let ((i (string-length)))\n            (while (< i 0)\n              (let ((j (string-length)))\n                (while (< j i)\n                  (setf (aref prefix j) (aref string i))\n                  (setf (aref prefix j) (aref string j))\n                  (setf (aref string j) (aref string i))\n                  (setf (aref string i) #\\0))\n                (setf (aref string i) (aref string j))\n                (setf (aref string j) (aref string i))\n                (setf (aref string i) #\\0))\n              (setf i (- i 1))))\n          (let ((postfix (make-string string-length)))\n            (let ((i (string-length)))\n              (while (< i 0)\n                (let ((j (string-length)))\n                  (while (< j i)\n                    (setf (aref postfix j) (aref string i))\n                    (setf (aref postfix j) (aref string j))\n                    (setf (aref string j) (aref string i))\n                    (setf (are",
    "  (let ((result \"\"))\n    (let ((i (string-length string)))\n      (while (< i 0)\n        (let ((j (string-length result)))\n          (if (string=? (substring string i j) (substring result j i))\n              (set! result (concatenate/dup result (substring string i j))))\n            (set! i (- i 1)))))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (string-length string))))\n      (let ((palindrome (string-copy string)))\n        (let ((prefix (string-copy string-length)))\n          (let ((suffix (string-copy string-length -1)))\n            (string-set! suffix (string-set! prefix string-length))))\n          (string-set! palindrome-length (string-length (string-length palindrome)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n",
    "  (let ((result (string)))\n    (while (string-length result)\n      (if (string-ref result (string-length result) - 1)\n        (string-append (string-reverse (string-substring result 0 (string-length result) - 1)) result)\n        (string-set! result (string-substring result 0 (string-length result) - 1))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (reverse string))))\n      (if (eq string-length palindrome-length)\n        (string)\n        (string (string-append (reverse string) (string-slice string (- palindrome-length 1))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length palindrome-length)))\n        (string-copy palindrome-string string-length (- palindrome-length 1)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacat",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length - 1)\n    string_suffix (string 1 string_length)\n    string_reverse (reverse string_prefix)\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    string_prefix_palindrome (string_prefix_length string_length - string_suffix_length)\n    string_suffix_palindrome (string_length - string_prefix_length)\n    palindrome (if (eqv? string_prefix string_suffix)\n      (string_prefix_length string_length - string_suffix_length)\n      (string_prefix_length string_length))\n    string_prefix_palindrome_length (length string_prefix_palindrome)\n    string_suffix_palindrome_length (length string_suffix_palindrome)\n    string_prefix_palindrome_string (string_prefix_palindrome 0 string_prefix_palindrome_length)\n    string_suffix_palindrome_string (string_length - string_suffix_palindrome_length)\n    string_prefix_palindrome_string_length (length string_prefix_palindrome_string)\n    string_suffix_palindrome_string_length (length string_suffix_palindrome_string)\n    string_prefix_palindrome_string_reverse (reverse string_prefix_palindrome_string)\n    string_suffix_palindrome_string_reverse (reverse string_suffix_palindrome_string)\n    string_prefix_palindrome_string_reverse_length (length string_prefix_palindrome_string_reverse)\n    string_suffix_palindrome_string_reverse_length (length string_suffix_palindrome_string_reverse)\n    string_prefix_palindrome_string_reverse_string (string_prefix_palindrome_string_reverse 0 string_prefix_palindrome_string_reverse_length)\n    string_suffix_palindrome_string_reverse_string (string_length - string_suffix_pal",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (length (make_palindrome_postfix string))\n    palindrome_suffix (string_length - palindrome_length)\n    palindrome_prefix (palindrome_length - 1)\n    palindrome_string (string_length - palindrome_suffix - palindrome_prefix)\n    reverse_prefix (string_length - palindrome_prefix)\n    reverse_suffix (string_length - palindrome_suffix)\n    reverse_string (string_length - reverse_suffix - reverse_prefix)\n    ]\n    (if (eqv? string_length palindrome_length)\n      (string)\n      (string_append\n       (string_append\n        (string_copy reverse_prefix)\n        (string_copy reverse_suffix))\n       (string_copy reverse_string))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (let ((i (length string)))\n        (while (< i 0)\n          (let ((j (i - 1)))\n            (if (string-ref string j)\n              (string-append (reverse (string-prefix string i j)) result)\n              (string-append result (reverse (string-prefix string i j))))\n            (setq i (- i 2))))))\n    (string result)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatac",
    "  (let ((result \"\"))\n    (let ((string_length (length string)))\n      (let ((i 0))\n        (while (< i string_length)\n          (let ((j (string_length - i)))\n            (if (string-ref string i)\n              (let ((p (string-ref string j)))\n                (if (string-ref string (string-length - j))\n                  (append result (reverse (substring string i j))))\n                (append result (string-ref string j))))\n            (setq i (string-length - j))))\n        (append result string)))\n    result))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (make-string string-length))))\n      (let ((palindrome (make-string palindrome-length)))\n        (let ((prefix (make-string palindrome-length)))\n          (let ((suffix (make-string string-length)))\n            (let ((postfix (make-string string-length)))\n              (let ((i 0))\n                (while (< i string-length)\n                  (set! i (inc i))\n                  (set! prefix (concat prefix (make-string (- i 2))))\n                  (set! suffix (concat suffix (make-string (- i 1))))\n                  (set! postfix (concat postfix (make-string (- i 1))))\n                  (if (equal? postfix palindrome)\n                    (return postfix)\n                    (set! postfix (concat postfix (make-string (- i 1))))\n                    (set! i (inc i))))))))))))))\n\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catac",
    "  (let ((longest (string-reverse string)))\n    (if (string-prefix? string longest)\n      string\n      (string-append string (string-reverse (string-prefix string longest))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat",
    "  (let ((longest (string-reverse string)))\n    (if (string-prefix? string longest)\n      string\n      (string-append string (string-prefix string longest))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacatacat\")\n;; \"",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-index (string-length string)))\n        (while (string-length string)\n          (if (string-ref string palindrome-index)\n            (string-set! string string-ref string (string-ref string (string-length string) - 1))\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length string) - 1)\n            (string-set! string string-ref string (string-length",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (make_palindrome string))))\n    (if (string-length string)\n      (string-append (string-reverse string-prefix string-length - palindrome-length)\n                                      string-prefix string-length - palindrome-length)\n      string)))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"",
    "  (let ((longest (string-length string)))\n    (let ((prefix (string-copy string 0 longest/2)))\n      (let ((suffix (string-copy string longest/2)))\n        (string-append prefix (string-reverse suffix)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-length (string-length longest-palindrome)))\n        (if (eqv? longest-palindrome palindrome-length)\n            (string-copy string longest-palindrome)\n            (string-copy string 0 (string-length string) -1)\n            (string-copy string 0 (string-length string) -palindrome-length)))))))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome_with_prefix \"\")\n;; \"\"\n;; >>> (make_palindrome_with_prefix \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome_with_prefix \"cata\")\n;; \"catac\"",
    "  (let* ([\n    max_length (length string)\n    max_palindrome (make_palindrome_from_max_length string)\n    max_palindrome_length (length max_palindrome)\n    max_palindrome_string (string max_palindrome_length)\n    max_palindrome_string_reverse (reverse max_palindrome_string)\n    max_palindrome_string_reverse_length (length max_palindrome_string_reverse)\n    max_palindrome_string_reverse_string (string max_palindrome_string_reverse_length)\n    ]\n    (if (eqv? string max_palindrome_string_reverse_string)\n      string\n      (append string max_palindrome_string_reverse_string))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_",
    "  (let ((length (string-length string)))\n    (let ((palindrome (string-ref string length)))\n      (if (string-ref string 0)\n        (string-append (string-reverse (string-substring string 0 (length - 1))) string)\n        (string-append (string-reverse string) (string-substring string 0 (length - 1)))\n        (string-append (string-reverse (string-substring string (length - 1) 0)) string))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;;",
    "  (let* ([string (string)])\n    (let ([string_length (length string)])\n      (if (string_length < 2)\n        (string)\n      (let ([palindrome_length (length (make_palindrome_string string))])\n        (if (string_length == palindrome_length)\n          (string)\n        (let ([palindrome_string (make_palindrome_string string)])\n          (string (concat (reverse string_length) palindrome_string))))))))\n\n;; Make a palindrome string from a string.\n;; >>> (make_palindrome_string \"\")\n;; \"\"\n;; >>> (make_palindrome_string \"cat\")\n;; \"cat\"\n;; >>> (make_palindrome_string \"cata\")\n;; \"cat\"",
    "  (let* ([\n    postfix (string)\n    postfix-length (length postfix)\n    postfix-palindrome (make_palindrome postfix)\n    prefix (string)\n    prefix-length (length prefix)\n    prefix-palindrome (make_palindrome prefix)\n  ])\n    (if (eq? postfix-palindrome postfix)\n      (if (eq? prefix-palindrome prefix)\n        (string)\n        (string prefix postfix))\n      (string prefix postfix))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"cat",
    "  (let* ([string-length (string-length string)]\n         [palindrome-length (string-length string)])\n    (if (string-length string)\n      (if (string-length string)\n        (string-append (string-reverse (string-prefix string string-length))\n                                     (string-prefix string string-length))\n        (string-prefix string string-length))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatac",
    "  (let* ([\n    max_len (string-length string)\n    max_postfix (string-copy string max_len)\n    max_postfix_palindrome (string-copy string max_len max_len)\n    max_postfix_palindrome_index (string-index max_postfix_palindrome max_len)\n    max_postfix_palindrome_index_index (string-index max_postfix_palindrome max_len max_len)\n    max_postfix_palindrome_index_index_index (string-index max_postfix_palindrome max_len max_len max_len)\n    max_postfix_palindrome_index_index_index_index (string-index max_postfix_palindrome max_len max_len max_len max_len)\n    max_postfix_palindrome_index_index_index_index_index (string-index max_postfix_palindrome max_len max_len max_len max_len max_len)\n    max_postfix_palindrome_index_index_index_index_index_index (string-index max_postfix_palindrome max_len max_len max_len max_len max_len max_len)\n    max_postfix_palindrome_index_index_index_index_index_index_index (string-index max_postfix_palindrome max_len max_len max_len max_len max_len max_len max_len)\n    max_postfix_palindrome_index_index_index_index_index_index_index_index (string-index max_postfix_palindrome max_len max_len max_len max_len max_len max_len max_len max_len)\n    max_postfix_palindrome_index_index_index_index_index_index_index_index_index (string-index max_postfix_palindrome max_len max_len max_len max_len max_len max_len max_len max_len max_len)\n    max_postfix_palindrome_index_index_index_index_index_index_index_index_",
    "  (let* ([string (string)])\n    (if (string-length string)\n      (let* ([string (string)])\n        (if (string-length string)\n          (let* ([string (string)])\n            (if (string-length string)\n              (let* ([string (string)])\n                (if (string-length string)\n                  (let* ([string (string)])\n                    (if (string-length string)\n                      (let* ([string (string)])\n                        (if (string-length string)\n                          (let* ([string (string)])\n                            (if (string-length string)\n                              (let* ([string (string)])\n                                (if (string-length string)\n                                  (let* ([string (string)])\n                                    (if (string-length string)\n                                      (let* ([string (string)])\n                                        (if (string-length string)\n                                          (let* ([string (string)])\n                                            (if (string-length string)\n                                              (let* ([string (string)])\n                                                (if (string-length string)\n                                                  (let* ([string (string)])\n                                                    (if (string-length string)\n                                                      (let* ([string (string)])\n                                                        (if (string-length string)\n                                                          (let* ([string (string)])\n                                                            (if (string-length string)\n                                                              (let* ([string (string)])\n                                                                (if (string-length string)\n                                                                  (let* ([string (string)])\n                                                                    (if (string-length string)\n                                                                      (let* ([string (string)])\n                                                                        (if (string-length string)\n                                                                          (let* ([string (string)])\n                                                                            (if (string-length string)\n                                                                              (let* ([string (string)])\n                                                                                (if (string-length string)\n                               ",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length)))\n        (if (string-length string)\n          (if (string-length string)\n            (string-length string)\n            (string-length string))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;;",
    "  (let* ([string_len (length string)])\n    (if (eq string_len 1)\n      (string)\n      (let* ([string_prefix (substring string 0 (string_len - 1))]\n             [string_suffix (substring string (string_len - 1) 0)])\n        (let* ([string_prefix_len (length string_prefix)])\n          (if (eq string_prefix_len string_len)\n            (string_prefix)\n            (let* ([string_suffix_len (length string_suffix)])\n              (if (eq string_suffix_len string_len)\n                (string_suffix)\n                (let* ([string_prefix_rev (reverse string_prefix)]\n                       [string_suffix_rev (reverse string_suffix)])\n                  (concat string_prefix_rev string_suffix_rev)))\n              (let* ([string_prefix_rev (reverse string_prefix)]\n                     [string_suffix_rev (reverse string_suffix)])\n                (concat string_prefix_rev string_suffix_rev)))))))\n  ))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (",
    "  (let ((result string))\n    (let ((i 0))\n      (while (string-cii-less? result string)\n        (set! result (string-append result (string-cii-less? result string))))\n      (string-append result (string-cii-less? result string))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacatac\"\n",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (while (string)\n        (if (string-length string)\n          (let ((string (string-tail string)))\n            (if (string-ref string string-length)\n              (string-set! string (- (string-length string) 1))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (string-set! string (- (string-length string) 1) (string-ref string (- (string-length string) 1)))\n              (",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (length (make_palindrome_string string))\n    palindrome_string (make_palindrome_string string)\n    reverse_string (make_reverse_string string)\n    reverse_string_length (length reverse_string)\n    reverse_string_string (make_reverse_string string)\n    reverse_string_string_length (length reverse_string_string)\n    palindrome_string_length (length palindrome_string)\n    palindrome_string_string (make_palindrome_string string)\n    palindrome_string_string_length (length palindrome_string_string)\n    palindrome_string_length_reverse (length (make_palindrome_string string))\n    palindrome_string_string_length_reverse (length palindrome_string_string)\n    palindrome_string_length_reverse_string (make_palindrome_string string)\n    palindrome_string_string_length_reverse_string (length palindrome_string_string)\n    ])\n    (if (string_length = palindrome_length)\n      (string)\n      (let* ([\n        string_length (length string)\n        palindrome_length (length (make_palindrome_string string))\n        palindrome_string (make_palindrome_string string)\n        reverse_string (make_reverse_string string)\n        reverse_string_length (length reverse_string)\n        reverse_string_string (make_reverse_string string)\n        reverse_string_string_length (length reverse_string_string)\n        palindrome_string_length (length palindrome_string)\n        palindrome_string_string (make_palindrome_string string)\n        palindrome_string_string_length (length palindrome_string_string)\n        palindrome_string_length_reverse (length (make_palindrome_string string))\n        palindrome_string_string_length_reverse (length palindrome_string_string)\n        palindrome_string_length_reverse_string (make_palind",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (while (string)\n        (if (string = reverse string)\n          (return result)\n          (string = (string (- 1))))\n        (result = (append result string))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (string-length string))))\n      (let ((palindrome (string-copy string)))\n        (let ((prefix (string-copy string-length -1)))\n          (let ((suffix (string-copy string-length)))\n            (if (string=? prefix suffix)\n              (string-copy string-length -1)\n              (string-copy string-length -2)))\n            (string-copy string-length -1 -1)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatc\")\n;; \"catacatc\"\n;; >>> (make_palindrome \"catacatca\")\n;; \"catacatca\"\n;; >>> (make_palindrome \"catacatcaa\")\n;; \"catacatcaa\"\n;; >>> (make_palindrome \"catacatcaaa\")\n;; \"catacatcaaa\"\n;; >>> (make_palindrome \"catacatcaaaa\")\n;; \"catacatcaaaa\"\n;; >>> (make_palindrome \"catacatcaaaaa\")\n;; \"catacatcaaaaa\"\n;; >>> (make_palindrome \"catacatcaaaaaa\")\n;; \"catacatcaaaaaa\"\n;; >>> (make_palindrome \"catacatcaaaaaaa\")\n;; \"catacatcaaaaaaa\"\n;; >>> (make_palindrome \"catacatcaaaaaaaa\")\n;; \"catacatcaaaaaaaa\"\n;; >>> (make_palindrome \"catacatcaaaaaaaaa\")\n;; \"catacatcaaaaaaaaa\"\n;; >>> (make_palindrome \"catacatcaaaaaaaaaa\")\n;; \"catacatcaaaaaaaaaa\"\n;; >>> (make_palindrome \"catacatcaaaaaaaaaaa\")\n;; \"catac",
    "  (let* ([string (string)])\n    (let ([string_length (length string)])\n      (if (string_length < 2)\n        (string)\n      (let ([palindrome (make_palindrome (string_tail string string_length - 1))])\n        (if (string_length > 2)\n          (string_append (string_prefix string string_length - 1) palindrome)\n          (string))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"cat",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (reverse string))))\n    (if (string-length string)\n      (if (string-length palindrome-length)\n        (string string-length)\n        (string string-length (make_palindrome (string-prefix string string-length))))\n      (string string-length))))\n\n;; Find the longest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (longest_palindrome \"\")\n;; \"\"\n;; >>> (longest_palindrome \"cat\")\n;; \"cat\"\n;; >>> (longest_palindrome \"cata\")\n;; \"cat\"",
    "  (let ((p (string-reverse string)))\n    (if (string-prefix-p p string)\n      (string-append string p)\n      (string-append string (string-reverse string))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (reverse string))))\n    (if (string-length string)\n      (if (string-length string)\n        (if (string-length string)\n          (if (string-length string)\n            (if (string-length string)\n              (if (string-length string)\n                (if (string-length string)\n                  (if (string-length string)\n                    (if (string-length string)\n                      (if (string-length string)\n                        (if (string-length string)\n                          (if (string-length string)\n                            (if (string-length string)\n                              (if (string-length string)\n                                (if (string-length string)\n                                  (if (string-length string)\n                                    (if (string-length string)\n                                      (if (string-length string)\n                                        (if (string-length string)\n                                          (if (string-length string)\n                                            (if (string-length string)\n                                              (if (string-length string)\n                                                (if (string-length string)\n                                                  (if (string-length string)\n                                                    (if (string-length string)\n                                                      (if (string-length string)\n                                                        (if (string-length string)\n                                                          (if (string-length string)\n                                                            (if (string-length string)\n                                                              (if (string-length string)\n                                                                (if (string-length string)\n                                                                  (if (string-length string)\n                                                                    (if (string-length string)\n                                                                      (if (string-length string)\n                                                                        (if (string-length string)\n                                                                          (if (string-length string)\n                                                                            (if (string-length string)\n                                                                              (if (string-length string)\n                                                                                (if (string-length string)\n                               ",
    "  (let* ([\n    string_length (length string)\n    string_reverse (reverse string)\n    string_prefix (take-while-less-than-string-length string_reverse string_length)\n    string_suffix (drop-while-less-than-string-length string_reverse string_length)\n    string_palindrome (take-while-equal-string-length string_reverse string_prefix string_suffix)\n    string_palindrome_length (length string_palindrome)\n    string_palindrome_reverse (reverse string_palindrome)\n    string_palindrome_prefix (take-while-less-than-string-length string_palindrome_reverse string_palindrome_length)\n    string_palindrome_suffix (drop-while-less-than-string-length string_palindrome_reverse string_palindrome_length)\n    string_palindrome_prefix_length (length string_palindrome_prefix)\n    string_palindrome_suffix_length (length string_palindrome_suffix)\n    string_palindrome_prefix_reverse (reverse string_palindrome_prefix)\n    string_palindrome_suffix_reverse (reverse string_palindrome_suffix)\n    string_palindrome_prefix_suffix (concat string_palindrome_prefix string_palindrome_suffix)\n    string_palindrome_prefix_suffix_length (length string_palindrome_prefix_suffix)\n    string_palindrome_prefix_suffix_reverse (reverse string_palindrome_prefix_suffix)\n    string_palindrome_prefix_suffix_reverse_length (length string_palindrome_prefix_suffix_reverse)\n    string_palindrome_prefix_suffix_reverse_prefix (take-while-less-than-string-length string_palindrome_prefix_suffix_reverse string_palindrome_prefix_suffix_reverse_length)\n    string_palindrome_prefix_suffix_reverse_prefix_length (length string_palindrome_prefix_suffix_reverse_prefix)\n    string_palindrome_prefix_suff",
    "  (let* ([\n    string_length (length string)\n    palindrome_length (string_length - 1)\n    palindrome_string (string)\n    palindrome_string_length (string_length)\n    palindrome_string_index (string_length - 1)\n    palindrome_string_index_start (string_length - 2)\n    palindrome_string_index_end (string_length - 1)\n    palindrome_string_index_mid (string_length - 2)\n    palindrome_string_index_mid_start (string_length - 3)\n    palindrome_string_index_mid_end (string_length - 2)\n    palindrome_string_index_mid_mid (string_length - 3)\n    palindrome_string_index_mid_mid_start (string_length - 4)\n    palindrome_string_index_mid_mid_end (string_length - 3)\n    palindrome_string_index_mid_mid_mid (string_length - 4)\n    palindrome_string_index_mid_mid_mid_start (string_length - 5)\n    palindrome_string_index_mid_mid_mid_end (string_length - 4)\n    palindrome_string_index_mid_mid_mid_mid (string_length - 5)\n    palindrome_string_index_mid_mid_mid_mid_start (string_length - 6)\n    palindrome_string_index_mid_mid_mid_mid_end (string_length - 5)\n    palindrome_string_index_mid_mid_mid_mid_mid (string_length - 6)\n    palindrome_string_index_mid_mid_mid_mid_mid_start (string_length - 7)\n    palindrome_string_index_mid_mid_mid_mid_mid_end (string_length - 6)\n    palindrome_string_index_mid_mid_mid_mid_mid_mid (string_length - 7)\n    palindrome_string_index_mid_mid_mid_mid_mid_mid_start (string_length - 8)",
    "  (let* ([string (string)])\n    (if (string=string)\n      (string)\n      (let* ([string (string)])\n        (if (string=string)\n          (string)\n          (let* ([string (string)])\n            (if (string=string)\n              (string)\n              (let* ([string (string)])\n                (if (string=string)\n                  (string)\n                  (let* ([string (string)])\n                    (if (string=string)\n                      (string)\n                      (let* ([string (string)])\n                        (if (string=string)\n                          (string)\n                          (let* ([string (string)])\n                            (if (string=string)\n                              (string)\n                              (let* ([string (string)])\n                                (if (string=string)\n                                  (string)\n                                  (let* ([string (string)])\n                                    (if (string=string)\n                                      (string)\n                                      (let* ([string (string)])\n                                        (if (string=string)\n                                          (string)\n                                          (let* ([string (string)])\n                                            (if (string=string)\n                                              (string)\n                                              (let* ([string (string)])\n                                                (if (string=string)\n                                                  (string)\n                                                  (let* ([string (string)])\n                                                    (if (string=string)\n                                                      (string)\n                                                      (let* ([string (string)])\n                                                        (if (string=string)\n                                                          (string)\n                                                          (let* ([string (string)])\n                                                            (if (string=string)\n                                                              (string)\n                                                              (let* ([string (string)])\n                                                                (if (string=string)\n                                                                  (string)\n                                                                  (let* ([string (string)])\n                                                               ",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length (string-length string))))\n      (let ((palindrome-string (string string-length palindrome-length)))\n        (if (string=? palindrome-string)\n          (string string-length palindrome-length)\n          (string-append (string-reverse (string-prefix string palindrome-length))\n            (string-prefix string palindrome-length))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"",
    "  (let* ([string (string)])\n    (if (string-length string)\n      (let* ([string_length (string-length string)])\n        (if (string-length string_length)\n          (let* ([string_prefix (string-prefix string string_length)])\n            (if (string-length string_prefix)\n              (let* ([string_suffix (string-suffix string string_length string_prefix)])\n                (if (string-length string_suffix)\n                  (let* ([string_postfix (string-postfix string string_length string_prefix string_suffix)])\n                    (if (string-length string_postfix)\n                      (let* ([string_palindrome (string-palindrome string string_length string_prefix string_suffix string_postfix)])\n                        (if (string-length string_palindrome)\n                          (return string_palindrome)\n                          (return string_postfix))))))))))))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatac",
    "  (let* ([string_length (length string)])\n    (let* ([palindrome_length (min (string_length 2) string_length)])\n      (let* ([palindrome_string (substring string string_length palindrome_length)])\n        (if (string=? palindrome_string string)\n            (string)\n            (let* ([prefix (substring string 0 palindrome_length)])\n              (let* ([suffix (substring string palindrome_length)])\n                (concat prefix (reverse suffix))))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"cat",
    "  (let* ([string-length (string-length string)]\n         [string-prefix (string-prefix string)]\n         [string-suffix (string-suffix string)])\n    (if (string-length string-prefix)\n      (string-append string-prefix (make_palindrome string-suffix))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_pal",
    "  (let* ([\n    (string-length string)\n    (string-prefix string)\n    (string-suffix string)\n    (string-reverse string)\n    (string-prefix-suffix string)\n    (string-prefix-suffix-reverse string)\n    (longest-palindrome string)\n    (longest-palindrome-prefix string)\n    (longest-palindrome-suffix string)\n    (longest-palindrome-prefix-suffix string)\n    (longest-palindrome-reverse string)\n    (longest-palindrome-prefix-reverse string)\n    (longest-palindrome-suffix-reverse string)\n    (longest-palindrome-prefix-suffix-reverse string)\n    (longest-palindrome-reverse-prefix string)\n    (longest-palindrome-reverse-suffix string)\n    (longest-palindrome-reverse-prefix-suffix string)\n    (longest-palindrome-reverse-prefix-suffix-reverse string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-suffix string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix-suffix string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix-suffix-reverse string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix-suffix-reverse-prefix string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix-suffix-reverse-suffix string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix-suffix-reverse-prefix-suffix string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix-suffix-reverse-prefix-suffix-reverse string)\n    (longest-palindrome-reverse-prefix-suffix-reverse-prefix-suffix-reverse-prefix-suffix-reverse-suffix string)\n    (longest-",
    "  (let ((longest (string-length string))\n         (prefix (string-copy string 0 longest/2)))\n    (if (string-ref string longest/2)\n      (string-append prefix (string-reverse string 0 longest/2))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_pal",
    "  (let* ([string-length (string-length string)])\n    (let* ([string-prefix (string-prefix string)])\n      (let* ([string-suffix (string-suffix string)])\n        (if (string-length string-prefix)\n          (string-append string-prefix (string-reverse string-suffix))\n          (string-prefix))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((longest-palindrome (string-length string)))\n      (let ((palindrome-length (string-length longest-palindrome)))\n        (let ((palindrome-string (string-copy string 0 palindrome-length)))\n          (string-copy string palindrome-length -1 string-length)\n          (string-copy string 0 palindrome-length -1 string-length)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (",
    "  (let* ([\n    string_length (length string)\n    string_prefix (string 0 string_length - 1)\n    string_suffix (string 1 string_length)\n    string_reverse (reverse string_prefix)\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    string_reverse_length (length string_reverse)\n    palindrome_length (max (string_prefix_length string_suffix_length) string_reverse_length)\n    palindrome (string_prefix string_suffix string_reverse)\n    palindrome_length (length palindrome)\n    palindrome_string (string_prefix string_suffix string_reverse)\n    palindrome_string_length (length palindrome_string)\n    palindrome_string_length_difference (string_length - palindrome_string_length)\n    palindrome_string_length_difference_negative (palindrome_string_length_difference - 1)\n    palindrome_string_length_difference_negative_negative (palindrome_string_length_difference_negative - 1)\n    palindrome_string_length_difference_negative_negative_negative (palindrome_string_length_difference_negative_negative - 1)\n    palindrome_string_length_difference_negative_negative_negative_negative (palindrome_string_length_difference_negative_negative_negative - 1)\n    palindrome_string_length_difference_negative_negative_negative_negative_negative (palindrome_string_length_difference_negative_negative_negative_negative - 1)\n    palindrome_string_length_difference_negative_negative_negative_negative_negative_negative (palindrome_string_length_difference_negative_negative_negative_negative_negative - 1)\n    palindrome_string_length_difference_negative_negative_negative_negative_negative_negative_negative (palindrome_string_length_difference_negative_negative_negative_negative_negative_negative - 1)\n    palindrome_string_length_difference_negative_negative_negative_negative",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (while (string-length string)\n        (let ((string (string-reverse string)))\n          (if (string-length string)\n            (let ((string (string-prefix string 1)))\n              (if (string-length string)\n                (let ((string (string-prefix string (- (string-length string) 1))))\n                  (if (string-length string)\n                    (let ((string (string-prefix string (- (string-length string) 2))))\n                      (if (string-length string)\n                        (let ((string (string-prefix string (- (string-length string) 3))))\n                          (if (string-length string)\n                            (let ((string (string-prefix string (- (string-length string) 4))))\n                              (if (string-length string)\n                                (let ((string (string-prefix string (- (string-length string) 5))))\n                                  (if (string-length string)\n                                    (let ((string (string-prefix string (- (string-length string) 6))))\n                                      (if (string-length string)\n                                        (let ((string (string-prefix string (- (string-length string) 7))))\n                                          (if (string-length string)\n                                            (let ((string (string-prefix string (- (string-length string) 8))))\n                                              (if (string-length string)\n                                                (let ((string (string-prefix string (- (string-length string) 9))))\n                                                  (if (string-length string)\n                                                    (let ((string (string-prefix string (- (string-length string) 10))))\n                                                      (if (string-length string)\n                                                        (let ((string (string-prefix string (- (string-length string) 11))))\n                                                         (if (string-length string)\n                                                           (let ((string (string-prefix string (- (string-length string) 12))))\n                                                            (if (string-length string)\n                                                              (let ((string (string-prefix string (-",
    "  (let* ([\n    string_length (length string)\n    string_prefix (take-while-less-than-predicate string string_length)\n    string_suffix (drop-while-less-than-predicate string string_length)\n    string_prefix_length (length string_prefix)\n    string_suffix_length (length string_suffix)\n    palindrome_prefix (take string_prefix string_prefix_length)\n    palindrome_suffix (drop string_suffix string_suffix_length)\n    palindrome_length (length palindrome_prefix)\n    palindrome_prefix_length (length palindrome_prefix)\n    palindrome_suffix_length (length palindrome_suffix)\n    palindrome_string (concat palindrome_prefix (reverse palindrome_suffix))\n    palindrome_string_length (length palindrome_string)\n    longest_palindrome_length (max (string_length string_prefix_length string_suffix_length palindrome_length palindrome_prefix_length palindrome_suffix_length))\n    longest_palindrome_string (take-while-less-than-predicate string string_length longest_palindrome_length)\n    longest_palindrome_string_length (length longest_palindrome_string)\n    longest_palindrome_string_prefix (take string_prefix string_prefix_length longest_palindrome_string_length)\n    longest_palindrome_string_suffix (drop string_suffix string_suffix_length longest_palindrome_string_length)\n    longest_palindrome_string_prefix_length (length longest_palindrome_string_prefix)\n    longest_palindrome_string_suffix_length (length longest_palindrome_string_suffix)\n    longest_palindrome_string_prefix_suffix (concat longest_palindrome_string_prefix longest_palindrome_string_suffix)\n    longest_palindrome_string_prefix_suffix_length (length longest_palindrome_string_prefix_suffix)\n    ",
    "  (let ((longest_palindrome (string_reverse (string_prefix (string_reverse string))))\n         (shortest_palindrome (string_prefix string)))\n    (if (string=? longest_palindrome shortest_palindrome)\n      (string_append longest_palindrome string)\n      (string_append shortest_palindrome string))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catac",
    "  (let ((longest (string-reverse string)))\n    (if (string-prefix? string longest)\n      string\n      (string-append string (string-prefix string longest))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaaaaaaaaa\")\n;; \"catac\"\n;; >>> (make_palindrome \"cataaaaaaaaaaaaa",
    "  (let* ([\n    longest_palindrome (string)\n    longest_palindrome_length (length of longest_palindrome)\n    longest_palindrome_index (index of longest_palindrome)\n    longest_palindrome_index_length (length of longest_palindrome_index)\n    longest_palindrome_index_index (index of longest_palindrome_index)\n    longest_palindrome_index_index_length (length of longest_palindrome_index_index)\n    longest_palindrome_index_index_index (index of longest_palindrome_index_index)\n    longest_palindrome_index_index_index_length (length of longest_palindrome_index_index_index)\n    longest_palindrome_index_index_index_index (index of longest_palindrome_index_index_index)\n    longest_palindrome_index_index_index_index_length (length of longest_palindrome_index_index_index_index)\n    longest_palindrome_index_index_index_index_index (index of longest_palindrome_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_length (length of longest_palindrome_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index (index of longest_palindrome_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index_length (length of longest_palindrome_index_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index_index (index of longest_palindrome_index_index_index_index_index_index)\n    longest_palindrome_index_index_index_index_index_index_index_length (length of longest_palindrome_index_index_index_index_index_index_index)\n    longest_palindrome_index_index_index_",
    "  (let ((result \"\"))\n    (let ((string (string)))\n      (while (string)\n        (if (string = reverse string)\n          (return result)\n          (result (append result string)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatac",
    "  (let* ([string (string)])\n    (if (string= string)\n      (string)\n      (let ([string_length (length string)])\n        (if (>= string_length 2)\n          (let* ([string_prefix (substring string 0 (- string_length 1))]\n                 [string_suffix (substring string 1 string_length)])\n            (if (string= string_prefix)\n              (string_suffix)\n              (let* ([string_reverse (reverse string_suffix)])\n                (concatenate/reverse string_prefix string_reverse))))))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catac",
    "  (let ((result \"\"))\n    (let ((string_length (length string)))\n      (let ((string_index 0))\n        (while (string_index < string_length)\n          (let ((string_index (string_index + 1)))\n            (if (string_index = 0)\n              (result (reverse string))\n            (else\n              (let ((string_prefix (substring string string_index)))\n                (if (string_prefix = (reverse string_prefix))\n                  (result (concatenate string_prefix string)))))))))))\n  (result string)))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac",
    "  (let ((string-length (string-length string))\n         (palindrome-length (string-length (make-string string-length/2))))\n    (let ((palindrome (make-string palindrome-length/2)))\n      (let ((i 0))\n        (while (< i string-length)\n          (let ((j (string-length - i)))\n            (let ((prefix (substring string i j)))\n              (let ((suffix (substring string (i + j))))\n                (if (equal? prefix suffix)\n                  (append prefix suffix)\n                  (append (reverse prefix) suffix))))\n            (set! i (i + j)))\n          (set! i (i + 1)))\n        (reverse palindrome))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat",
    "  (let ((string-length (string-length string)))\n    (let ((palindrome-length (string-length string)))\n      (let ((palindrome-string (string string-length palindrome-length)))\n        (string-copy string-length palindrome-length (- palindrome-length 1)))))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatac",
    "  (let ((longest (string-reverse (string-prefix string))))\n    (string-append string (string-reverse (string-prefix string))))\n)\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatacatacatacatac",
    "  (let ((longest (string-length string))\n         (prefix (string-copy string 0 longest/1))))\n  (let ((palindrome (string-copy string 0 longest)))\n    (string-copy string (string-length string) 0 longest)\n    (string-append prefix (string-reverse palindrome))))\n\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n;; >>> (make_palindrome \"catac\")\n;; \"catac\"\n;; >>> (make_palindrome \"catacat\")\n;; \"catacat\"\n;; >>> (make_palindrome \"catacatac\")\n;; \"catacatac\"\n;; >>> (make_palindrome \"catacatacat\")\n;; \"catacatacat\"\n;; >>> (make_palindrome \"catacatacatac\")\n;; \"catacatacatac\"\n;; >>> (make_palindrome \"catacatacatacat\")\n;; \"catacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatac\")\n;; \"catacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacat\")\n;; \"catacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatac\")\n;; \"catacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacat\")\n;; \"catacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatac\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacat\")\n;; \"catacatacatacatacatacatacat\"\n;; >>> (make_palindrome \"catacatacatacatacatacatacatac\")\n;; \"catacatacatacatacatacatacat"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}