{
  "name": "HumanEval_145_order_by_points",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which sorts the given list of integers\n;; in ascending order according to the sum of their digits.\n;; Note: if there are several items with similar sum of their digits,\n;; order them based on their index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )\n(define (order_by_points nums)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (x) (* 10 (string->number (number->string x)))) nums_sorted)))\n        (let ((nums_sorted_sorted (sort sum_digits)))\n          (if (null? nums_sorted_sorted)\n            (list)\n            (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n              (if (null? nums_sorted_sorted_sorted)\n                (list)\n                (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                  (if (null? nums_sorted_sorted_sorted_sorted)\n                    (list)\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                      (if (null? nums_sorted_sorted_sorted_sorted_sorted)\n                        (list)\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                          (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                            (list)\n                            (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                              (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                                (list)\n                                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"No unique solution\"))))))))))\n\n;; Test",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((> (car nums) (car (cdr nums)))\n          (car (cdr nums)))\n        ((< (car nums) (car (cdr nums)))\n          (car (cdr (cdr nums))))\n        (else\n          (car (cdr (cdr (cdr nums)))))))\n    (sort-by-points-aux (cdr nums)))\n  (sort-by-points nums))\n\n;; Test it",
    "  (let ((sum (reduce (lambda (x y) (+ (* x x) (* y y)))\n           (map (lambda (x) (* x x)) nums))))\n    (if (null? nums)\n      (list)\n      (let ((lesser (list)))\n        (let ((greater (list)))\n          (let ((i (0)))\n            (while (< i nums)\n              (let ((n (nth nums i)))\n                (if (< (sum n) sum)\n                  (let ((j (0)))\n                    (while (< j nums)\n                      (let ((n (nth nums j)))\n                        (if (< (sum n) sum)\n                          (set! lesser (append lesser n)\n                            (set! greater (append greater n)\n                              (list n j)))\n                          (set! j (1 + j)))))\n                    (set! i (1 + i))))))\n          (let ((result (append lesser greater)))\n            (if (null? lesser)\n              (list)\n              (list result))))))))))\n\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list ))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((sum-of-digits (map (lambda (n) (* 10 (digit n))))))\n        (let ((nums-sorted-sum-of-digits (map (lambda (n) (sum-of-digits n)))))\n          (let ((nums-sorted-sum-of-digits-sorted (sort nums-sorted-sum-of-digits)))\n            (if (null? nums-sorted-sum-of-digits-sorted)\n              (list)\n              (let ((nums-sorted-sum-of-digits-sorted-sorted (sort nums-sorted-sum-of-digits-sorted)))\n                (append nums-sorted-sum-of-digits-sorted-sorted nums-sorted-sum-of-digits-sorted-sorted))))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (if (empty? nums-sorted-sorted-sorted-sorted-sorted)\n                      nums-sorted-sorted-sorted-sorted-sorted\n                      (error \"Impossible\")))))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              nums_sorted_sorted)))))))\n",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums 0) (car nums))\n        ((< nums 0) (cdr nums))\n        ((= nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((< nums 0) (car nums))\n        ((>= nums 0) (cdr nums))\n        ((< nums 0) (car nums))",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy))\n          (nums_sorted_sorted (sort nums_sorted)))\n      (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted))\n            (nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n        (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted))\n              (nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted))\n                (nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted))\n                  (nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-points-helper nums)\n    (define (sort-by-points-helper-helper nums)\n      (define (sort-by-points-helper-helper-helper nums)\n        (define (sort-by-points-helper-helper-helper-helper nums)\n          (define (sort-by-points-helper-helper-helper-helper-helper nums)\n            (define (sort-by-points-helper-helper-helper-helper-helper-helper nums)\n              (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                              (define (sort-by-points-helper-helper",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted))))\n              nums_sorted_sorted_sorted_sorted)))))))\n\n;; Test",
    "  (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (car x))) 0)))\n         (sorted (mapcar (lambda (x) (list (car x) sum)) nums))))\n  (sorted (mapcar (lambda (x) (list (car x) (car x))) nums)))\n\n;; Write a function which sorts the given list of strings\n;; in ascending order based on the length of their strings.\n;; For example:\n;; >>> (order_by_length (list \"a\" \"bb\" \"ccc\"))\n;; (list \"ccc\" \"bb\" \"a\")\n;; >>> (order_by_length (list \"a\" \"bb\" \"ccc\" \"\"))\n;; (list \"ccc\" \"bb\" \"a\" \"\")",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux nums index)\n      (define (sort-by-sum-of-digits-index-aux-aux nums index)\n        (cond\n          ((= nums index)\n            (list index (sort-by-sum-of-digits-index-aux-aux (cdr nums) index)))\n          ((< nums index)\n            (sort-by-sum-of-digits-index-aux-aux (cdr nums) index))\n          (else\n            (sort-by-sum-of-digits-index-aux nums index))))\n    (sort-by-sum-of-digits-index-aux nums 0)))\n  (sort-by-sum-of-digits-index (nums)))\n\n;; Write a function which sorts the given list of integers\n;; in ascending order according to the sum of their digits.\n;; Note: if there are several items with similar sum of their digits,\n;; order them based on their index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )",
    "  (let ((sum (reduce (lambda (x y) (+ (* x x) (* y y)))\n              (map (lambda (x) (* x x)) nums))))\n    (if (null? nums)\n      (list)\n      (let ((lesser (list)))\n        (let ((greater (list)))\n          (let ((i (0)))\n            (while (< i nums)\n              (let ((item (nth nums i)))\n                (if (< item sum)\n                  (list item lesser)\n                  (list item greater)))\n              (set! i (+ i 1)))))\n        (let ((i (0)))\n          (while (< i nums)\n            (let ((item (nth nums i)))\n              (if (> item sum)\n                (list item lesser)\n                (list item greater)))\n            (set! i (+ i 1)))))\n      (let ((i (0)))\n        (while (< i nums)\n          (let ((item (nth nums i)))\n            (if (< item sum)\n              (list item lesser)\n              (list item greater)))\n          (set! i (+ i 1))))))))\n\n;; Test",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"No unique solution\"))))))))))\n\n;; Test",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux index)\n      (cond\n        ((> index 0)\n          (define (sort-by-sum-of-digits-index-aux index)\n            (sort-by-sum-of-digits-index (index - 1))))\n        ((= index 0)\n          (define (sort-by-sum-of-digits-index-aux index)\n            (sort-by-sum-of-digits-index (index + 1))))\n        (else\n          (define (sort-by-sum-of-digits-index-aux index)\n            (sort-by-sum-of-digits-index (index + 1)))))))\n  (define (sort-by-sum-of-digits-index index)\n    (sort-by-sum-of-digits-index-aux index)\n    (sort-by-sum-of-digits-index-aux (index + 1))))\n  (define (sort-by-sum-of-digits-index index)\n    (sort-by-sum-of-digits-index-aux index)\n    (sort-by-sum-of-digits-index-aux (index + 1))))\n\n;; Write a function which sorts the given list of integers\n;; in ascending order according to the sum of their digits.\n;; Note: if there are several items with similar sum of their digits,\n;; order them based on their index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums (car nums))\n          (cons (car nums) (sort-by-points-aux (cdr nums))))\n        ((< nums (car nums))\n          (cons (car nums) (sort-by-points-aux (cdr nums))))\n        (else\n          (cons (car nums) (sort-by-points-aux (cdr nums)))))))\n  (sort-by-points (nums)))\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_names (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (order_by_names (list \"a\" \"a\" \"c\"))\n;; (list \"a\" \"c\" \"a\")\n;; >>> (order_by_names (list \"a\" \"b\" \"a\"))\n;; (list \"a\" \"b\" \"a\")",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((sum-digits (map (lambda (x) (* 10 (number->string x))) nums-sorted)))\n        (if (empty? sum-digits)\n          nums-sorted\n          (let ((nums-sorted-sorted (sort nums-sorted)))\n            (if (empty? nums-sorted-sorted)\n              nums-sorted-sorted\n              (let ((sum-digits-sorted (map (lambda (x) (* 10 (number->string x))) nums-sorted-sorted)))\n                (if (empty? sum-digits-sorted)\n                  nums-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n                    (if (empty? nums-sorted-sorted-sorted)\n                      nums-sorted-sorted-sorted\n                      (let ((sum-digits-sorted-sorted (map (lambda (x) (* 10 (number->string x))) nums-sorted-sorted-sorted)))\n                        (if (empty? sum-digits-sorted-sorted)\n                          nums-sorted-sorted-sorted\n                          (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                            (if (empty? nums-sorted-sorted-sorted-sorted)\n                              nums-sorted-sorted-sorted-sorted\n                              (let ((sum-digits-sorted-sorted-sorted (map (lambda (x) (* 10 (number->string x))) nums-sorted-sorted-sorted-sorted)))\n                                (if (empty? sum-digits-sorted-sorted-sorted)\n                                  nums-sorted-sorted-sorted-sorted\n                                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (n) (* 10 (digit n))))))\n        (let ((nums_sorted_sorted (sort nums_sorted)))\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                  (if (null? nums_sorted_sorted_sorted_sorted_sorted)\n                    (list)\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                              (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted))))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted))))\n                    (error \"No unique solution\")\n                    (nums_sorted_sorted_sorted_sorted_sorted)))))))))))\n",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                          ",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"Impossible\")\n                  )))))))))))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (empty? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (empty? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (empty? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (empty? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (define (sort-by-sum-of-digits-index-of nums)\n    (define (sort-by-sum-of-digits-index-of-nums)\n      (define (sort-by-sum-of-digits-index-of-nums-aux)\n        (define (sort-by-sum-of-digits-index-of-nums-aux-aux)\n          (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux)\n            (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux)\n              (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux)\n                (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux-aux-aux)\n                  (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux)\n                    (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux)\n                      (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux)\n                        (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux)\n                          (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux)\n                            (define (sort-by-sum-of-digits-index-of-nums-aux-aux-aux-aux-aux-aux-aux-aux-",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"No unique value\"))))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (x) (* 10 (number->string x)))))\n            (sorted_nums (filter (lambda (x) (sum_digits x) > 0)))\n            (sorted_nums_sorted (sort sorted_nums)))\n        (append (map (lambda (x) (string->number x)) sorted_nums_sorted)\n             nums_sorted))))\n\n;; Test it",
    "  (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (car x))) 0)))\n         (sorted (mapcar (lambda (x) (car x)) nums))))\n  (order_by_points nums))\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_names (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (order_by_names (list \"a\" \"a\" \"a\"))\n;; (list \"a\" \"a\" \"a\")",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (let ((sum (reduce (lambda (a b) (+ (* 10 a) b)) 0 nums))))\n  (sort (map (lambda (n) (list n sum)) nums)\n       (lambda (a b) (if (< a b) -1 1))))\n\n;; Test it:",
    "  (define (sort-by-sum-of-digits-index-nums nums)\n    (define (sort-by-sum-of-digits-index-nums-aux nums)\n      (define (sort-by-sum-of-digits-index-nums-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-nums-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-nums-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-nums-",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums 0) (list 0))\n        ((< nums 0) (list -1))\n        ((= nums 0) (list ))\n        ((<= nums 0) (list -1))\n        ((> nums 0)\n          (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 x))) nums)))\n            (if (>= sum 0)\n                (list sum)\n                (sort-by-points-aux (cdr nums))))))))\n    (sort-by-points-aux nums)))\n\n;; Test it",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (n) (* 10 (digit n))))))\n        (let ((nums_sorted_sorted (sort nums_sorted)))\n          (let ((sum_digits_sorted (map (lambda (n) (* 10 (digit n))))))\n            (if (null? nums_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n                (let ((sum_digits_sorted_sorted (map (lambda (n) (* 10 (digit n))))))\n                  (list\n                    (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                      (let ((sum_digits_sorted_sorted_sorted (map (lambda (n) (* 10 (digit n))))))\n                        (if (null? nums_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                            (let ((sum_digits_sorted_sorted_sorted_sorted (map (lambda (n) (* 10 (digit n))))))\n                              (list\n                                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                                  (let ((sum_digits_sorted_sorted_sorted_sorted_sorted (map (lambda (n) (* 10 (digit n))))))\n                                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                                      (list)\n                                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted))))\n                (error \"No unique sum of digits found\"))))))))\n",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_copy (copy nums_sorted)))\n        (let ((nums_sorted_sorted (sort nums_sorted_copy)))\n          (let ((nums_sorted_sorted_copy (copy nums_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted_copy)))\n              (let ((nums_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_copy)))\n                  (let ((nums_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_copy)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_copy)))\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_copy)))\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-and-index nums)\n    (define (sort-by-sum-of-digits-and-index-aux nums)\n      (define (sort-by-sum-of-digits-and-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-and-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux",
    "  (define (sort-by-sum-of-digits-index index nums)\n    (define (sort-by-sum-of-digits-helper nums)\n      (define (sort-by-sum-of-digits-helper-helper nums)\n        (define (sort-by-sum-of-digits-helper-helper-helper nums)\n          (define (sort-by-sum-of-digits-helper-helper-helper-helper nums)\n            (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper nums)\n              (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_copy (copy nums_sorted)))\n        (let ((nums_sorted_sorted (sort nums_sorted_copy)))\n          (let ((nums_sorted_sorted_copy (copy nums_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted_copy)))\n              (let ((nums_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_copy))))\n                (let ((nums_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted))))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_copy))))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted))))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_copy))))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted_sorted))))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_copy))))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"No unique solution\"))))))))))\n)\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_names (list \"Alice\" \"Bob\" \"Alice\"))\n;; (list \"Alice\" \"Alice\" \"Bob\")",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"No unique solution\")\n                    (list))))))))))))\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_names (list \"Alice\" \"Bob\" \"Alice\"))\n;; (list \"Alice\" \"Alice\" \"Bob\")",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((sum-of-digits (map (lambda (x) (+ (* 10 x) (* x x)))) nums-sorted))\n        (let ((nums-sorted-sorted (sort nums-sorted)))\n          (if (null? nums-sorted-sorted)\n            (list)\n            (let ((sum-of-digits-sorted (map (lambda (x) (+ (* 10 x) (* x x)))) nums-sorted-sorted))\n              (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted)\n                  (list)\n                  (let ((sum-of-digits-sorted-sorted (map (lambda (x) (+ (* 10 x) (* x x)))) nums-sorted-sorted-sorted))\n                    (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                      (if (null? nums-sorted-sorted-sorted-sorted)\n                        (list)\n                        (let ((sum-of-digits-sorted-sorted-sorted (map (lambda (x) (+ (* 10 x) (* x x)))) nums-sorted-sorted-sorted-sorted))\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((sum-of-digits-sorted-sorted-sorted-sorted (map (lambda (x) (+ (* 10 x) (* x x)))) nums-sorted-sorted-sorted-sorted-sorted))\n                                (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-helper nums)\n      (cond\n        ((> (car nums) 0)\n          (let ((sum (sum (map (car nums))))))\n          (let ((index (car nums)))\n            (if (eq index (car nums))\n                (car nums)\n                (sort-by-points-helper (cdr nums))))))\n      (sort-by-points-helper nums)))\n  (sort-by-points nums)))\n",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-points-helper nums)\n    (define (sort-by-points-helper-helper nums)\n      (define (sort-by-points-helper-helper-helper nums)\n        (define (sort-by-points-helper-helper-helper-helper nums)\n          (define (sort-by-points-helper-helper-helper-helper-helper nums)\n            (define (sort-by-points-helper-helper-helper-helper-helper-helper nums)\n              (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                              (define (sort-by-points-helper-helper",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (n) (* 10 (modulo n 10))))))\n        (let ((nums_sorted_sorted (sort nums_sorted)))\n          (let ((sum_digits_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n            (if (null? nums_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n                (let ((sum_digits_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                  (if (null? nums_sorted_sorted_sorted)\n                    (list)\n                    (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                      (let ((sum_digits_sorted_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                        (if (null? nums_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                            (let ((sum_digits_sorted_sorted_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                              (if (null? nums_sorted_sorted_sorted_sorted_sorted)\n                                (list)\n                                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                                  (let ((sum_digits_sorted_sorted_sorted_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                                    (if (null? nums_sorted_s",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-helper index)\n      (cond\n        ((= index 0) (list))\n        ((< index (length nums))\n          (let ((sum-of-digits (sum-of-digits-index-helper (index - 1))))\n            (let ((index-of-sum-of-digits (index-of-sum-of-digits-helper sum-of-digits)))\n              (if (eq? index-of-sum-of-digits index)\n                (list index-of-sum-of-digits index)\n                (sort-by-sum-of-digits-index-helper (index - 1)))))))\n    (sort-by-sum-of-digits-index-helper nums)))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (n) (* 10 (modulo n 10))))))\n        (let ((nums_sorted_sorted (sort nums_sorted)))\n          (let ((sum_digits_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n            (if (null? nums_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n                (let ((sum_digits_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                  (if (null? nums_sorted_sorted_sorted)\n                    (list)\n                    (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                      (let ((sum_digits_sorted_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                        (if (null? nums_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                            (let ((sum_digits_sorted_sorted_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                              (if (null? nums_sorted_sorted_sorted_sorted_sorted)\n                                (list)\n                                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                                  (let ((sum_digits_sorted_sorted_sorted_sorted_sorted (map (lambda (n) (* 10 (modulo n 10))))))\n                                    (if (null? nums_sorted_s",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((sum (reduce (lambda (x y) (+ (* x x) (* y y)))\n           (map (lambda (x) (* x x)) nums))))\n    (if (null? nums)\n      (list)\n      (let ((lesser (list)))\n        (let ((greater (list)))\n          (let ((i (0)))\n            (while (< i nums)\n              (let ((n (nth nums i)))\n                (if (< (sum n) sum)\n                  (let ((j (0)))\n                    (while (< j nums)\n                      (let ((m (nth nums j)))\n                        (if (> (sum m) sum)\n                          (let ((k (0)))\n                            (while (< k nums)\n                              (let ((o (nth nums k)))\n                                (if (< (sum o) sum)\n                                  (set! lesser (append lesser n m o)\n                                    (set! greater (append greater n m o)\n                                      (list
    "  (let ((sum-nums (reduce (lambda (a b) (+ (* 10 a) b)) nums)))\n    (if (null? nums)\n      (list)\n      (let ((nums-sorted (sort nums (lambda (a b) (if (< a b) -1 (if (> a b) 1))))))\n        (if (null? nums-sorted)\n          (list)\n          (let ((nums-sorted-sorted (sort nums-sorted (lambda (a b) (if (< a b) -1 (if (> a b) 1))))))\n            (if (null? nums-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted (lambda (a b) (if (< a b) -1 (if (> a b) 1))))))\n                (if (null? nums-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted (lambda (a b) (if (< a b) -1 (if (> a b) 1))))))\n                    (if (null? nums-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted (lambda (a b) (if (< a b) -1 (if (> a b) 1))))))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted (lambda (a b) (if (< a b) -1 (if (> a b) 1))))))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                          ",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-and-index nums)\n    (define (sort-by-sum-of-digits-and-index-aux nums)\n      (define (sort-by-sum-of-digits-and-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-and-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux",
    "  (let ((sum (reduce (lambda (x y) (+ (* x x) (* y y)))\n           (map (lambda (x) (* x x)) nums))))\n    (if (null? nums)\n      (list)\n      (let ((lesser (cadr (sort nums))))\n        (if (null? lesser)\n          (list)\n          (let ((greater (cddr (sort lesser))))\n            (if (null? greater)\n              (list)\n              (let ((equal (caddr (sort greater))))\n                (if (null? equal)\n                  (list)\n                  (let ((lesser (cadr (sort lesser))))\n                    (if (null? lesser)\n                      (list)\n                      (let ((greater (cddr (sort lesser))))\n                        (if (null? greater)\n                          (list)\n                          (let ((equal (caddr (sort greater))))\n                            (if (null? equal)\n                              (list)\n                              (let ((lesser (cadr (sort lesser))))\n                                (if (null? lesser)\n                                  (list)\n                                  (let ((greater (cddr (sort lesser))))\n                                    (if (null? greater)\n                                      (list)\n                                      (let ((equal (caddr (sort greater))))\n                                        (if (null? equal)\n                                          (list)\n                                          (let ((lesser (cadr (sort lesser))))\n                                            (if (null? lesser)\n                                              (list)\n                                              (let ((greater (cddr (sort lesser))))\n                                                (if (null? greater)\n                                                  (list)\n                                                  (let ((equal (caddr (sort greater))))\n                                                    (if (null? equal)\n                                                      (list)\n                                                      (let ((lesser (cadr (sort lesser))))\n                                                        (if (null? lesser)\n                                                          (list)\n                                                          (let ((greater (cddr (sort lesser))))",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (if (empty? nums-sorted-sorted-sorted-sorted-sorted)\n                      nums-sorted-sorted-sorted-sorted-sorted\n                      (error \"Can't sort numbers\")))))))))))\n\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;;",
    "  (let ((nums_sorted (sort nums (lambda (a b) (string->number (string-append (string-append (string->number a) \"\") (string->number b))))) (nums_sorted_index (lambda (a b) (string->number (string-append (string-append (string->number a) \"\") (string->number b))))) (nums_sorted_index_fn (lambda (a b) (string->number (string-append (string-append (string->number a) \"\") (string->number b))))) (nums_sorted_index_fn_reverse (lambda (a b) (string->number (string-append (string-append (string->number a) \"\") (string->number b))))) (nums_sorted_index_fn_reverse_fn (lambda (a b) (string->number (string-append (string-append (string->number a) \"\") (string->number b))))) (nums_sorted_index_fn_reverse_fn_reverse (lambda (a b) (string->number (string-append (string-append (string->number a) \"\") (string->number b))))) (nums_sorted_index_fn_reverse_fn_reverse_fn (lambda (a b) (string->number (string-append (string-append (string->number a) \"\") (string->number b)))))))))\n  (nums_sorted_index_fn_reverse_fn_reverse_fn (nums)))\n\n;; Write a function which sorts the given list of strings\n;; in ascending order based on the length of their strings.\n;; For example:\n;; >>> (order_by_length (list \"a\" \"ab\" \"abc\"))\n;; (list \"abc\" \"ab\" \"a\")\n;; >>> (order_by_length (list \"a\" \"ab\" \"\"))\n;; (list \"a\" \"ab\")",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-helper nums)\n      (define (sort-by-sum-of-digits-helper-helper nums)\n        (define (sort-by-sum-of-digits-helper-helper-helper nums)\n          (define (sort-by-sum-of-digits-helper-helper-helper-helper nums)\n            (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper nums)\n              (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
    "  (define (sort-by-sum-of-digits nums)\n    (define (sort-by-index nums)\n      (define (sort-by-value nums)\n        (define (sort-by-value-index nums)\n          (define (sort-by-value-value nums)\n            (define (sort-by-value-value-index nums)\n              (define (sort-by-value-value-value nums)\n                (define (sort-by-value-value-value-index nums)\n                  (define (sort-by-value-value-value-value nums)\n                    (define (sort-by-value-value-value-value-index nums)\n                      (define (sort-by-value-value-value-value-value nums)\n                        (define (sort-by-value-value-value-value-value-index nums)\n                          (define (sort-by-value-value-value-value-value-value nums)\n                            (define (sort-by-value-value-value-value-value-value-index nums)\n                              (define (sort-by-value-value-value-value-value-value-value nums)\n                                (define (sort-by-value-value-value-value-value-value-value-index nums)\n                                  (define (sort-by-value-value-value-value-value-value-value-value nums)\n                                    (define (sort-by-value-value-value-value-value-value-value-value-index nums)\n                                      (define (sort-by-value-value-value-value-value-value-value-value-value nums)\n                                        (define (sort-by-value-value-value-value-value-value-value-value-value-index nums)\n                                          (define (sort-by-value-value-value-value-value-value-value-value-value-value nums)\n                                            (define (sort-by-value-value-value-value-value-value-value-value-value-value-index nums)\n                                              (",
    "  (let ((nums_sorted (sort nums (lambda (x y) (string->number (string-append (string->number x) (string->number y))))) (nums_sorted)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted (lambda (x y) (string->number (string-append (string->number x) (string->number y))))) (nums_sorted_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted (lambda (x y) (string->number (string-append (string->number x) (string->number y))))) (nums_sorted_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted (lambda (x y) (string->number (string-append (string->number x) (string->number y))))) (nums_sorted_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted (lambda (x y) (string->number (string-append (string->number x) (string->number y))))) (nums_sorted_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted (lambda (x y) (string->number (string-append (string->number x",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums 0) (list 0))\n        ((< nums 0) (list -1))\n        ((= nums 0) (list ))\n        ((= nums 1) (list 1))\n        ((= nums 2) (list 2))\n        ((= nums 3) (list 3))\n        ((= nums 4) (list 4))\n        ((= nums 5) (list 5))\n        ((= nums 6) (list 6))\n        ((= nums 7) (list 7))\n        ((= nums 8) (list 8))\n        ((= nums 9) (list 9))\n        ((= nums 10) (list 10))\n        ((= nums 11) (list 11))\n        ((= nums 12) (list 12))\n        ((= nums 13) (list 13))\n        ((= nums 14) (list 14))\n        ((= nums 15) (list 15))\n        ((= nums 16) (list 16))\n        ((= nums 17) (list 17))\n        ((= nums 18) (list 18))\n        ((= nums 19) (list 19))\n        ((= nums 20) (list 20))\n        ((= nums 21) (list 21))\n        ((= nums 22) (list 22))\n        ((= nums 23) (list 23))\n        ((= nums 24) (list 24))\n        ((= nums 25) (list 25))\n        ((= nums 26) (list 26))\n        ((= nums 27) (list 27))\n        ((= nums 28) (list 28))\n        ((= nums 29) (list 29))\n        ((= nums 30) (list 30))\n        ((= nums 31) (list 31))\n        ((= nums 32) (list 32))\n        ((= nums 33) (list 33))\n        ((= nums 34) (list 34))\n        ((= nums 35) (list 35))\n        ((= nums 36) (list 36))\n        ((= nums 37) (list 37))",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums (cdr nums))\n          (return (reverse (cons (car nums) (sort-by-points-aux (cdr nums))))))\n        ((< nums (car nums))\n          (return (reverse (cons (car nums) (sort-by-points-aux (cdr nums))))))\n        (else\n          (return (reverse (cons (car nums) (sort-by-points-aux (cdr nums))))))))\n    (sort-by-points-aux nums)))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"Impossible\"))))))))))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((sum-of-digits (map (lambda (x) (* 10 (integer->char x))) nums-sorted)))\n        (let ((sum-of-digits-sorted (sort sum-of-digits)))\n          (if (null? sum-of-digits-sorted)\n            (list)\n            (let ((index-of-sum-of-digits-sorted (index-of sum-of-digits-sorted)))\n              (list (take index-of-sum-of-digits-sorted)\n                   (drop index-of-sum-of-digits-sorted)\n                   (nums-sorted))))))))))\n\n;; Test it",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"Impossible\"))))))))))\n\n;; Test",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux index)\n      (cond\n        ((< index 0) 0)\n        ((= index 0) (car nums))\n        ((< index (length nums)) (car (cdr nums)))\n        (else (sort-by-sum-of-digits-index-aux (- index 1))))))\n  (define (sort-by-sum-of-digits-index-aux index)\n    (sort-by-sum-of-digits-index index))\n  (sort-by-sum-of-digits-index 0)))\n\n;; Write a function which sorts the given list of strings\n;; in ascending order based on the length of their first characters.\n;; For example:\n;; >>> (order_by_first_characters (list \"a\" \"bb\" \"ccc\"))\n;; (list \"a\" \"bb\" \"ccc\")\n;; >>> (order_by_first_characters (list \"a\" \"bb\" \"\"))\n;; (list \"a\" \"bb\")\n;; >>> (order_by_first_characters (list \"\" \"\" \"a\"))\n;; (list \"a\" \"\")\n;; >>> (order_by_first_characters (list \"a\" \"\" \"\"))\n;; (list \"a\" \"\")\n;; >>> (order_by_first_characters (list
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                          ",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted))))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted))))\n                    (error \"Impossible\"))))))))))\n\n;; Test",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (empty? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      nums_sorted_sorted_sorted_sorted_sorted_sorted\n                      (error \"No unique solution\"))))))))))))))))\n",
    "  (define (sort-by-sum-of-digits-index index nums)\n    (define (sort-by-sum-of-digits-helper index nums)\n      (cond\n        ((< index 0) (return nums))\n        ((= index 0) (return (sort-by-sum-of-digits-helper (- index 1) nums)))\n        ((< index 1) (return (sort-by-sum-of-digits-helper index nums)))\n        ((= index 1) (return (sort-by-sum-of-digits-helper (- index 2) nums)))\n        ((< index 2) (return (sort-by-sum-of-digits-helper index nums)))\n        ((= index 2) (return (sort-by-sum-of-digits-helper (- index 3) nums)))\n        ((< index 3) (return (sort-by-sum-of-digits-helper index nums)))\n        ((= index 3) (return (sort-by-sum-of-digits-helper (- index 4) nums)))\n        ((< index 4) (return (sort-by-sum-of-digits-helper index nums)))\n        ((= index 4) (return (sort-by-sum-of-digits-helper (- index 5) nums)))\n        ((< index 5) (return (sort-by-sum-of-digits-helper index nums)))\n        ((= index 5) (return (sort-by-sum-of-digits-helper (- index 6) nums)))\n        ((< index 6) (return (sort-by-sum-of-digits-helper index nums)))\n        ((= index 6) (return (sort-by-sum-of-digits-helper (- index 7) nums)))\n        ((< index 7) (return (sort-by-sum-of-digits-helper index nums)))\n        ((= index 7) (return (sort-by-sum-of-digits-helper (- index 8) nums)))\n        ((< index 8) (return (sort-by-sum-of-digits-helper index num",
    "  (define (sort-by-sum-of-digits-and-index nums)\n    (define (sort-by-sum-of-digits-and-index-aux nums)\n      (define (sort-by-sum-of-digits-and-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-and-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux",
    "  (define (sort-by-sum-of-digits-and-index nums)\n    (define (sort-by-sum-of-digits-and-index-aux nums)\n      (define (sort-by-sum-of-digits-and-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-and-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                          ",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums 0) (list 0))\n        ((< nums 0) (list nums))\n        ((= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))\n        ((>= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))\n        ((>= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))\n        ((>= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))\n        ((>= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))\n        ((>= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))\n        ((>= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))\n        ((>= nums 0) (list))\n        ((<= nums 0) (list))\n        ((> nums 0) (list))\n        ((= nums 0) (list))\n        ((< nums 0) (list))",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-helper nums)\n      (define (sort-by-sum-of-digits-helper-helper nums)\n        (define (sort-by-sum-of-digits-helper-helper-helper nums)\n          (define (sort-by-sum-of-digits-helper-helper-helper-helper nums)\n            (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper nums)\n              (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-sum-of-digits-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux num)\n      (cond\n        ((< num 0) 0)\n        ((= num 0) 1)\n        ((< num 1) 2)\n        ((= num 1) 3)\n        ((< num 2) 4)\n        ((= num 2) 5)\n        ((< num 3) 6)\n        ((= num 3) 7)\n        ((< num 4) 8)\n        ((= num 4) 9)\n        ((< num 5) 10)\n        ((= num 5) 11)\n        ((< num 6) 12)\n        ((= num 6) 13)\n        ((< num 7) 14)\n        ((= num 7) 15)\n        ((< num 8) 16)\n        ((= num 8) 17)\n        ((< num 9) 18)\n        ((= num 9) 19)\n        ((< num 10) 20)\n        ((= num 10) 21)\n        ((< num 11) 22)\n        ((= num 11) 23)\n        ((< num 12) 24)\n        ((= num 12) 25)\n        ((< num 13) 26)\n        ((= num 13) 27)\n        ((< num 14) 28)\n        ((= num 14) 29)\n        ((< num 15) 30)\n        ((= num 15) 31)\n        ((< num 16) 32)\n        ((= num 16) 33)\n        ((< num 17) 34)\n        ((= num 17) 35)\n        ((< num 18) 36)\n        ((= num 18) 37)\n        ((< num 19) 38)\n        ((= num 19) 39)\n        ((< num 20) 40)\n        ((= num 20) 41)\n        ((< num 21) 42)\n        ((= num 21) 43)\n        ((< num 22) 44)\n        ((= num 22) 45)\n        ((< num 23) 46)\n        ((= num 23) 47)\n        ((< num 24) 48)\n        ((= num 24) 49)\n        ((< num 25) 50)\n        ((= num 25) 51)\n",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (empty? nums-sorted-sorted-sorted-sorted-sorted)\n                      nums-sorted-sorted-sorted-sorted-sorted\n                      (error \"Impossible\")\n
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_copy (copy nums_sorted)))\n        (let ((nums_sorted_sorted (sort nums_sorted_copy)))\n          (let ((nums_sorted_sorted_copy (copy nums_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted_copy)))\n              (let ((nums_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_copy))))\n                (let ((nums_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_copy))))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_copy))))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_copy))))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted))))\n                  (error \"Should not happen\"))))))))))))\n",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux index)\n      (cond\n        ((< index 0) 0)\n        ((= index 0) (car nums))\n        ((< index (length nums)) (car (cdr nums)))\n        (else (sort-by-sum-of-digits-index-aux (- index 1))))))\n  (define (sort-by-sum-of-digits-index-aux index)\n    (cond\n      ((< index 0) 0)\n      ((= index 0) (car nums))\n      ((< index (length nums)) (car (cdr nums)))\n      (else (sort-by-sum-of-digits-index-aux (- index 1))))))\n  (define (sort-by-sum-of-digits-index-aux index)\n    (cond\n      ((< index 0) 0)\n      ((= index 0) (car nums))\n      ((< index (length nums)) (car (cdr nums)))\n      (else (sort-by-sum-of-digits-index-aux (- index 1))))))\n  (define (sort-by-sum-of-digits-index index)\n    (sort-by-sum-of-digits-index-aux index))\n  (sort-by-sum-of-digits-index 0 nums)))\n",
    "  (define (sort-by-points-helper nums)\n    (define (sort-by-points-helper-helper nums)\n      (define (sort-by-points-helper-helper-helper nums)\n        (define (sort-by-points-helper-helper-helper-helper nums)\n          (define (sort-by-points-helper-helper-helper-helper-helper nums)\n            (define (sort-by-points-helper-helper-helper-helper-helper-helper nums)\n              (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                              (define (sort-by-points-helper-helper",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-helper nums)\n      (define (sort-by-sum-of-digits-index-helper-helper nums)\n        (define (sort-by-sum-of-digits-index-helper-helper-helper nums)\n          (define (sort-by-sum-of-digits-index-helper-helper-helper-helper nums)\n            (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper nums)\n              (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-sum-of-digits-index-hel",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums 0) (car nums))\n        ((< nums 0) (cdr nums))\n        ((= nums 0) (car nums))\n        ((= nums 0) (cdr nums))\n        ((>= nums 0) (car (cdr nums)))\n        ((< nums 0) (cdr (cdr nums)))\n        ((= nums 0) (car (cdr (cdr nums))))\n        ((>= nums 0) (car (cdr (cdr (cdr nums)))))))\n    (sort-by-points-aux (cdr nums)))))\n",
    "  (let ((sum-nums (reduce (lambda (x y) (+ (* x y) (* 10 (car x))) 0) nums)))\n    (if (null? nums)\n      (list)\n      (let ((index (car nums)))\n        (if (null? (cdr nums))\n          (list index)\n          (let ((other-index (car (cdr nums))))\n            (if (null? (cdr (cdr nums)))\n              (list index)\n              (list index other-index))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((sum (reduce (lambda (x y) (+ (* x x) (* y y))) nums)))\n    (if (null? nums)\n      (list)\n      (let ((index (reduce (lambda (x y) (+ (* x x) (* y y))) nums)))\n        (let ((lesser (list)))\n          (let ((greater (list)))\n            (for-each (lambda (x)\n                        (if (eq? lesser (list))\n                          (let ((lesser (list)))\n                            (let ((greater (list)))\n                              (if (eq? lesser (list))\n                                (list)\n                                (if (eq? lesser (list))\n                                  (list)\n                                  (if (eq? lesser (list))\n                                    (list)\n                                    (if (eq? lesser (list))\n                                      (list)\n                                      (if (eq? lesser (list))\n                                        (list)\n                                        (if (eq? lesser (list))\n                                          (list)\n                                          (if (eq? lesser (list))\n                                            (list)\n                                            (if (eq? lesser (list))\n                                              (list)\n                                              (if (eq? lesser (list))\n                                                (list)\n                                                (if (eq? lesser (list))\n                                                  (list)\n                                                  (if (eq? lesser (list))\n                                                    (list)\n                                                    (if (eq? lesser (list))\n                                                      (list)\n                                                      (if (eq? lesser (list))\n                                                        (list)\n                                                        (if (eq? lesser (list))\n                                                          (list)\n                                                          (if (eq? lesser (list))\n                                                            (list)\n                                                            (if (eq? lesser (list))\n                                                              (list)\n                                                              (if (eq",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"Should not happen\"))))))))))))\n",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((sum-of-digits (reduce (lambda (x y) (+ (* x y) (* 10 (car x))) 0)))\n            (nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (n) (* 10 (digit n))))))\n        (let ((nums_sorted_sum_digits (map (lambda (n) (sum_digits n)))))\n          (let ((nums_sorted_sum_digits_sorted (sort nums_sorted_sum_digits)))\n            (if (null? nums_sorted_sum_digits_sorted)\n              (list)\n              (let ((nums_sorted_sum_digits_sorted_sorted (sort nums_sorted_sum_digits_sorted)))\n                (append nums_sorted_sum_digits_sorted_sorted\n                  (list (car nums_sorted_sum_digits_sorted_sorted)\n                     (cdr nums_sorted_sum_digits_sorted_sorted))))))))))))\n\n;; Test",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted))))\n                nums_sorted_sorted_sorted_sorted)))))))\n\n;; Test",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (define (sort-by-sum-of-digits-and-index nums)\n    (define (sort-by-sum-of-digits-and-index-aux nums)\n      (define (sort-by-sum-of-digits-and-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-and-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (if (empty? nums-sorted-sorted-sorted-sorted-sorted)\n                      nums-sorted-sorted-sorted-sorted-sorted\n                      (error \"No unique solution\")))))))))))\n))\n",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums_sorted (sort nums (lambda (a b) (string->number (string-append a b)))))\n         (nums_sorted_sorted (sort nums_sorted (lambda (a b) (string->number (string-append a b)))))\n         (nums_sorted_sorted_sorted (sort nums_sorted_sorted (lambda (a b) (string->number (string-append a b))))))\n  nums_sorted_sorted_sorted))\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_name (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux index)\n      (if (null? index)\n        (list index)\n        (sort-by-sum-of-digits-index-aux (cdr index)))))\n  (define (sort-by-sum-of-digits-index-aux index)\n    (if (null? index)\n      (list index)\n      (sort-by-sum-of-digits-index-aux (cdr index)))))\n  (define (sort-by-sum-of-digits-index index)\n    (sort-by-sum-of-digits-index-aux index))\n  (sort-by-sum-of-digits-index nums)))\n\n;; Write a function which sorts the given list of integers\n;; in ascending order according to the sum of their digits.\n;; Note: if there are several items with similar sum of their digits,\n;; order them based on their index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((sum_digits (map (lambda (n) (* 10 (digit n))))))\n        (let ((nums_sorted_sum_digits (map (lambda (n) (sum_digits n)))))\n          (let ((nums_sorted_sum_digits_sorted (sort nums_sorted_sum_digits)))\n            (if (null? nums_sorted_sum_digits_sorted)\n              (list)\n              (let ((nums_sorted_sum_digits_sorted_sorted (sort nums_sorted_sum_digits_sorted)))\n                (append nums_sorted_sum_digits_sorted_sorted\n                  (list (car nums_sorted_sum_digits_sorted_sorted)\n                     (cdr nums_sorted_sum_digits_sorted_sorted))))))))))))\n\n;; Test",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted))))\n              (error \"Can't sort numbers\")\n              ))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"The list is not sorted\")\n                  ))))))))))))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"Can't sort numbers\"))))))))))\n)\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_name (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (order_by_name (list \"a\" \"b\" \"c\" \"d\"))\n;; (list \"a\" \"b\" \"c\" \"d\")",
    "  (define (sort-by-sum-of-digits nums)\n    (define (sort-by-index nums)\n      (define (sort-by-index-aux nums)\n        (cond\n          [(< (length nums) 2) (return nums)]\n          [(= (car nums) (car (cdr nums))) (return (sort-by-index-aux (cdr nums)))]\n          [(> (car nums) (car (cdr nums))) (return (sort-by-index-aux (cdr nums)))]\n          [else (return (sort-by-index-aux (cdr nums)))]\n        )\n      )\n    (sort-by-index nums)\n    )\n    (sort-by-index-aux nums)\n  )\n  (sort-by-sum-of-digits nums)\n)\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                  (error \"No unique solution\")))))))))))))\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_names (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (order_by_names (list ))\n;; (list )",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((sum-of-digits (map (lambda (x) (* 10 (string->number x))))))\n        (let ((nums-sorted-sorted (sort nums-sorted)))\n          (if (null? nums-sorted-sorted)\n            (list)\n            (let ((sum-of-digits-sorted (map (lambda (x) (* 10 (string->number x))))))\n              (if (null? (filter (lambda (x) (eq sum-of-digits-sorted sum-of-digits))) nums-sorted-sorted)\n                (list)\n                (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n                  (if (null? nums-sorted-sorted-sorted)\n                    (list)\n                    (let ((sum-of-digits-sorted-sorted (map (lambda (x) (* 10 (string->number x))))))\n                      (if (null? (filter (lambda (x) (eq sum-of-digits-sorted-sorted sum-of-digits-sorted))) nums-sorted-sorted-sorted)\n                        (list)\n                        (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                          (if (null? nums-sorted-sorted-sorted-sorted)\n                            (list)\n                            (let ((sum-of-digits-sorted-sorted-sorted (map (lambda (x) (* 10 (string->number x))))))\n                              (if (null? (filter (lambda (x) (eq sum-of-digits-sorted-sorted-sorted sum-of-digits-sorted-sorted))) nums-sorted-sorted-sorted-sorted)\n                                (list)\n                                (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-helper index)\n      (cond\n        ((= index 0) (list))\n        ((< index (length nums) -1))\n        (else\n          (let ((sum-of-digits (sum-of-digits-index nums index)))\n            (if (eq? sum-of-digits (sum-of-digits-index-helper nums index))\n                (sort-by-sum-of-digits-index-helper (index + 1))\n                (else\n                  (list (index)\n                      (sort-by-sum-of-digits-index-helper (index + 1))))))))))\n  (sort-by-sum-of-digits-index 0 nums)))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (if (empty? nums-sorted-sorted-sorted-sorted-sorted)\n                      nums-sorted-sorted-sorted-sorted-sorted\n                      (error \"No unique solution\")))))))))))\n  ))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (let ((nums_copy nums))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                          (let",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"No unique order for numbers\"))))))))))\n\n;; Test",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"Can't sort numbers\"))))))))))\n\n;; Test",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      nums_sorted_sorted_sorted_sorted_sorted\n                      (error \"No unique solution\"))))))))))))))))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (number->string x))) 0) nums)))\n    (if (null? nums)\n      (list)\n      (let ((lesser (list)))\n        (let ((greater (list)))\n          (for-each (lambda (x)\n                      (if (eq? lesser (list))\n                        (if (eq? lesser (list))\n                          (if (eq? lesser (list))\n                            (if (eq? lesser (list))\n                              (if (eq? lesser (list))\n                                (if (eq? lesser (list))\n                                  (if (eq? lesser (list))\n                                    (if (eq? lesser (list))\n                                      (if (eq? lesser (list))\n                                        (if (eq? lesser (list))\n                                          (if (eq? lesser (list))\n                                            (if (eq? lesser (list))\n                                              (if (eq? lesser (list))\n                                                (if (eq? lesser (list))\n                                                  (if (eq? lesser (list))\n                                                    (if (eq? lesser (list))\n                                                      (if (eq? lesser (list))\n                                                        (if (eq? lesser (list))\n                                                          (if (eq? lesser (list))\n                                                            (if (eq? lesser (list))\n                                                              (if (eq? lesser (list))\n                                                                (if (eq? lesser (list))\n                                                                  (if (eq? lesser (list))\n                                                                    (if (eq? lesser (list))\n                                                                      (if (eq? lesser (list))\n                                                                        (if (eq? lesser (list))\n                                                                          (if (eq? lesser (list))\n                                                                            (if (eq? lesser (list))\n                                                                              (if (eq? lesser (list))\n                                                                                (if (eq? lesser (list))\n                                                                                  (if (eq? lesser (",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (define (sort-by-points-aux-aux nums)\n        (define (sort-by-points-aux-aux-aux nums)\n          (define (sort-by-points-aux-aux-aux-aux nums)\n            (define (sort-by-points-aux-aux-aux-aux-aux nums)\n              (define (sort-by-points-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                  (define (sort-by-points-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                    (define (sort-by-points-aux-aux-aux",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-helper nums)\n      (define (sort-by-sum-of-digits-index-helper-helper nums)\n        (define (sort-by-sum-of-digits-index-helper-helper-helper nums)\n          (define (sort-by-sum-of-digits-index-helper-helper-helper-helper nums)\n            (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper nums)\n              (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-sum-of-digits-index-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-sum-of-digits-index-hel",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((sum-of-digits (map (lambda (n) (* 10 (modulo n 10))))))\n        (let ((nums-sorted-sum-of-digits (map sum-of-digits nums-sorted)))\n          (if (null? nums-sorted-sum-of-digits)\n            (list)\n            (let ((nums-sorted-sum-of-digits-sorted (sort nums-sorted-sum-of-digits)))\n              (if (null? nums-sorted-sum-of-digits-sorted)\n                (list)\n                (let ((nums-sorted-sum-of-digits-sorted-sorted (sort nums-sorted-sum-of-digits-sorted)))\n                  (if (null? nums-sorted-sum-of-digits-sorted-sorted)\n                    (list)\n                    (let ((nums-sorted-sum-of-digits-sorted-sorted-sorted (sort nums-sorted-sum-of-digits-sorted-sorted)))\n                      (if (null? nums-sorted-sum-of-digits-sorted-sorted-sorted)\n                        (list)\n                        (let ((nums-sorted-sum-of-digits-sorted-sorted-sorted-sorted (sort nums-sorted-sum-of-digits-sorted-sorted-sorted)))\n                          (if (null? nums-sorted-sum-of-digits-sorted-sorted-sorted-sorted-sorted)\n                            (list)\n                            (let ((nums-sorted-sum-of-digits-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sum-of-digits-sorted-sorted-sorted-sorted-sorted)))\n                              (if (null? nums-sorted-sum-of-digits-sorted-",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux index)\n      (define (sort-by-sum-of-digits-index-aux-aux index)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux index)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux index)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux index)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux index)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux index)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux index)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux index)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux index)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux index)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux index)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux index)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux index)\n                                (define (sort-by-sum-of-digits-index-",
    "  (define (sort-by-sum-of-digits nums)\n    (define (sort-by-index nums)\n      (define (sort-by-index-aux nums)\n        (cond\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums))\n          ((> (car nums) 0) (car nums))\n          ((= (car nums) 0) (car nums))\n          ((< (car nums) 0) (car nums",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"No unique solution\")))))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((sum-digits (map (lambda (n) (* 10 (digit n))))))\n        (let ((nums-sorted-sum-digits (map sum-digits nums-sorted)))\n          (if (empty? nums-sorted-sum-digits)\n            nums-sorted-sum-digits\n            (let ((nums-sorted-sum-digits-sorted (sort nums-sorted-sum-digits)))\n              (if (empty? nums-sorted-sum-digits-sorted)\n                nums-sorted-sum-digits-sorted\n                (let ((nums-sorted-sum-digits-sorted-sorted (sort nums-sorted-sum-digits-sorted)))\n                  (if (empty? nums-sorted-sum-digits-sorted-sorted)\n                    nums-sorted-sum-digits-sorted-sorted\n                    (let ((nums-sorted-sum-digits-sorted-sorted-sorted (sort nums-sorted-sum-digits-sorted-sorted)))\n                      (if (empty? nums-sorted-sum-digits-sorted-sorted-sorted)\n                        nums-sorted-sum-digits-sorted-sorted-sorted\n                        (let ((nums-sorted-sum-digits-sorted-sorted-sorted-sorted (sort nums-sorted-sum-digits-sorted-sorted-sorted)))\n                          (if (empty? nums-sorted-sum-digits-sorted-sorted-sorted-sorted-sorted)\n                            nums-sorted-sum-digits-sorted-sorted-sorted-sorted-sorted\n                            (let ((nums-sorted-sum-digits-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sum-digits-sorted-sorted-",
    "  (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (car x))) 0) nums)))\n    (if (null? nums)\n      (list)\n      (let ((index (reduce (lambda (x y) (+ (* x y) 1) 0) nums)))\n        (if (null? index)\n          (list)\n          (list (car nums) (car index) (car (cdr index)) (car (cdr nums))))))))\n\n;; Test it",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"No unique solution\"))))))))))\n\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list ))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -11 -12))\n;;; (order_by_points (list 1 11 -1 -",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (if (empty? nums-sorted-sorted-sorted-sorted-sorted)\n                      nums-sorted-sorted-sorted-sorted-sorted\n                      (error \"Not unique numbers with same sum of digits\"))))))))))))))\n",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-aux nums)\n      (cond\n        ((>= nums 0) (car nums))\n        ((<= nums 0) (cdr nums))\n        ((= (car nums) (car (cdr nums)))\n          (cdr (cdr nums)))\n        (else (sort-by-points-aux (cdr nums))))))\n    (sort-by-points-aux nums)))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"Can't sort numbers\"))))))))))\n\n;; Test",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"Can't sort numbers\"))))))))))\n\n;; Test",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux index)\n      (cond\n        ((< index 0) 0)\n        ((= index 0) 0)\n        ((< index 1) 1)\n        ((= index 1) 1)\n        ((< index 2) 2)\n        ((= index 2) 2)\n        ((< index 3) 3)\n        ((= index 3) 3)\n        ((< index 4) 4)\n        ((= index 4) 4)\n        ((< index 5) 5)\n        ((= index 5) 5)\n        ((< index 6) 6)\n        ((= index 6) 6)\n        ((< index 7) 7)\n        ((= index 7) 7)\n        ((< index 8) 8)\n        ((= index 8) 8)\n        ((< index 9) 9)\n        ((= index 9) 9)\n        ((< index 10) 10)\n        ((= index 10) 10)\n        ((< index 11) 11)\n        ((= index 11) 11)\n        ((< index 12) 12)\n        ((= index 12) 12)\n        ((< index 13) 13)\n        ((= index 13) 13)\n        ((< index 14) 14)\n        ((= index 14) 14)\n        ((< index 15) 15)\n        ((= index 15) 15)\n        ((< index 16) 16)\n        ((= index 16) 16)\n        ((< index 17) 17)\n        ((= index 17) 17)\n        ((< index 18) 18)\n        ((= index 18) 18)\n        ((< index 19) 19)\n        ((= index 19) 19)\n        ((< index 20) 20)\n        ((= index 20) 20)\n        ((< index 21) 21)\n        ((= index 21) 21)\n        ((< index 22) 22)\n        ((= index 22) 22)\n        ((< index 23) 23)\n        ((= index 23) 23)\n        ((< index 24) 24)\n        ((= index 24) 24)\n        ((< index 25) 25)\n        ((= index 25) 25)\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"Can't sort numbers\"))))))))))\n\n;; Test",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              nums_sorted_sorted)))))))\n\n;; Write a function which sorts the given list of strings\n;; in alphabetical order.\n;; For example:\n;; >>> (order_by_names (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")",
    "  (define (sort-by-sum-of-digits nums)\n    (define (sort-by-index nums)\n      (define (sort-by-index-aux nums)\n        (cond\n          ((= (car nums) 0)\n            (car nums)\n          ((< (car nums) 0)\n            (car nums)\n          ((> (car nums) 0)\n            (car nums)\n          ((= (car nums) 0)\n            (car nums)\n          (else\n            (sort-by-index-aux (cdr nums))))))))\n    (sort-by-index-aux nums)))\n  (sort-by-index nums)))\n",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_copy (copy nums_sorted)))\n        (let ((nums_sorted_sorted (sort nums_sorted_copy)))\n          (let ((nums_sorted_sorted_copy (copy nums_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted_copy)))\n              (let ((nums_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_copy))))\n                (let ((nums_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_copy))))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted))))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_copy))))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted_sorted))))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_copy))))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_",
    "  (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (number->string x))) 0) nums)))\n    (if (null? nums)\n      (list)\n      (let ((i 0)\n            (result (make-vector 0 nums)))\n        (while (< i nums)\n          (let ((x nums[i]))\n            (if (string? x)\n              (let ((x_num (string->number x)))\n                (if (< x_num sum)\n                  (list x)\n                  (setf result (append result (list x))))))\n            (setf i (1+ i))))\n        (reverse result))))\n\n;; Test it",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((sum-digits (map (lambda (x) (* 10 x))) nums-sorted))\n        (let ((sum-digits-sorted (sort sum-digits)))\n          (if (null? sum-digits-sorted)\n            (list)\n            (let ((index-sorted (map (lambda (x) (index nums-sorted x))) sum-digits-sorted))\n              (list (map (lambda (x) (nums-sorted x)) index-sorted))))))))\n",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux index)\n      (cond\n        ((= index 0) (list))\n        ((< index (length nums))\n          (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (car y))) 0) nums)))\n            (if (eq sum (car nums))\n                (sort-by-sum-of-digits-index-aux (cdr nums) index)\n                (sort-by-sum-of-digits-index-aux nums index))))))\n    (sort-by-sum-of-digits-index-aux nums 0)))\n\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_copy (copy nums_sorted)))\n        (let ((nums_sorted_sorted (sort nums_sorted_copy)))\n          (let ((nums_sorted_sorted_copy (copy nums_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted_copy)))\n              (let ((nums_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_copy)))\n                  (let ((nums_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_copy))))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_copy))))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_copy))))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_copy (copy nums_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"No unique solution\"))))))))))\n",
    "  (let ((nums-sorted (sort nums)))\n    (if (null? nums-sorted)\n      (list)\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (null? nums-sorted-sorted)\n          (list)\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (null? nums-sorted-sorted-sorted)\n              (list)\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted)))\n                (if (null? nums-sorted-sorted-sorted-sorted)\n                  (list)\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted)))\n                    (if (null? nums-sorted-sorted-sorted-sorted-sorted)\n                      (list)\n                      (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted)))\n                        (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted)\n                          (list)\n                          (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted)))\n                            (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                              (list)\n                              (let ((nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                                (if (null? nums-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)\n                               ",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                                (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n              (error \"Shouldn't be here\")))))))\n)\n",
    "  (let ((sum (reduce (lambda (x y) (+ (* x x) (* y y)))\n           (map (lambda (x) (* x x)) nums))))\n    (if (null? nums)\n      (list)\n      (let ((index (reduce (lambda (x y) (+ (* x x) (* y y)))\n               (map (lambda (x) (+ (* x x) (* x x))) nums))))\n        (sort nums\n           (lambda (x y)\n             (cond ((= index x) (< index y))\n                   ((< index y) (< index x))\n                   ((= index x) (= index y))\n                   (else ()))\n           ))))))))\n",
    "  (define (sort-by-sum-of-digits-index index)\n    (define (sort-by-sum-of-digits-index-aux nums index)\n      (cond\n        ((>= nums index) (list index nums))\n        ((< nums index) (let ((n (car nums)))\n          (if (null? (cdr nums))\n            (sort-by-sum-of-digits-index-aux (cdr nums) (cdr index))\n            (sort-by-sum-of-digits-index-aux (cdr nums) index))))))\n    (sort-by-sum-of-digits-index-aux nums 0)))\n",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (define (sort-by-sum-of-digits-and-index nums)\n    (define (sort-by-sum-of-digits-and-index-aux nums)\n      (define (sort-by-sum-of-digits-and-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-and-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-and-index-aux-aux-aux-aux-aux",
    "  (let ((sum (reduce (lambda (x y) (+ (* x x) (* y y))) nums)))\n    (sort (map (lambda (x) (* x x)) nums)\n         (lambda (a b) (if (eqv? a b)\n                          (if (eqv? a b)\n                               (eqv? a b)\n                               (if (eqv? a b)\n                                   (eqv? a b)\n                                   (if (eqv? a b)\n                                       (eqv? a b)\n                                       (if (eqv? a b)\n                                           (eqv? a b)\n                                           (if (eqv? a b)\n                                               (eqv? a b)\n                                               (eqv? a b)))))))))))\n  )\n)\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted))))\n                (error \"Not unique\")\n              ))))))))\n",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                          ",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"order_by_points: sorting failed\")\n                  )))))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_",
    "  (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (car x))) 0)))\n         (order (map (lambda (x) (car x)) nums)))\n    (if (null? order)\n      (reverse nums)\n      (let ((index (reduce (lambda (x y) (+ (* x y) 1)) 0)))\n        (order (map (lambda (x) (car x)) nums)))))\n\n;; Test",
    "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 nums))))\n  (sort (map (lambda (x) (list (number->string x) sum)) nums)\n       (lambda (x y) (string->number (string->number x) +\n                      string->number (string->number y)))\n       (lambda (x y) (string->number (string->number x) -\n                      string->number (string->number y))))))\n",
    "  (let ((sum (reduce (lambda (x y) (+ (* x y) (* 10 (car x))) 0) nums)))\n    (if (null? nums)\n      (list)\n      (let ((i 0)\n            (result (list)))\n        (while (< i (length nums))\n          (let ((item (nth nums i)))\n            (if (null? item)\n              (append result (list))\n              (else\n                (let ((item_sum (reduce (lambda (x y) (+ (* x y) (* 10 (car item))) 0) item)))\n                  (if (< item_sum sum)\n                    (append result item)\n                    (append result item))))))\n          (set! i (+ i 1)))))\n    (reverse result)))\n\n;; Test it",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"No unique solution\")\n                    (nums-sorted-sorted-sorted-sorted-sorted))))))))))))\n",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_",
    "  (let ((nums-sorted (sort nums)))\n    (if (empty? nums-sorted)\n      nums-sorted\n      (let ((nums-sorted-sorted (sort nums-sorted)))\n        (if (empty? nums-sorted-sorted)\n          nums-sorted-sorted\n          (let ((nums-sorted-sorted-sorted (sort nums-sorted-sorted)))\n            (if (empty? nums-sorted-sorted-sorted)\n              nums-sorted-sorted-sorted\n              (let ((nums-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted))))\n                (if (empty? nums-sorted-sorted-sorted-sorted)\n                  nums-sorted-sorted-sorted-sorted\n                  (let ((nums-sorted-sorted-sorted-sorted-sorted (sort nums-sorted-sorted-sorted-sorted))))\n                    (error \"No unique solution\")\n                    (list))))))))))))\n",
    "  (define (sort-by-points nums)\n    (define (sort-by-points-helper nums)\n      (define (sort-by-points-helper-helper nums)\n        (define (sort-by-points-helper-helper-helper nums)\n          (define (sort-by-points-helper-helper-helper-helper nums)\n            (define (sort-by-points-helper-helper-helper-helper-helper nums)\n              (define (sort-by-points-helper-helper-helper-helper-helper-helper nums)\n                (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper nums)\n                  (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                    (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                      (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                        (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                          (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                            (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                              (define (sort-by-points-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper nums)\n                                (",
    "  (let ((nums_sorted (sort nums)))\n    (if (empty? nums_sorted)\n      nums_sorted\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (empty? nums_sorted_sorted)\n          nums_sorted_sorted\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (empty? nums_sorted_sorted_sorted)\n              nums_sorted_sorted_sorted\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (empty? nums_sorted_sorted_sorted_sorted)\n                  nums_sorted_sorted_sorted_sorted\n                  (error \"Cannot sort numbers\"))))))))))\n\n;; Test",
    "  (let ((nums_copy (copy nums)))\n    (let ((nums_sorted (sort nums_copy)))\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n          (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n            (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted)))\n                (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                    (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                          ",
    "  (define (sort-by-sum-of-digits-index nums)\n    (define (sort-by-sum-of-digits-index-aux nums)\n      (define (sort-by-sum-of-digits-index-aux-aux nums)\n        (define (sort-by-sum-of-digits-index-aux-aux-aux nums)\n          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux nums)\n            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux nums)\n              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux nums)\n                (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux nums)\n                  (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                    (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                      (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                        (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                          (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                            (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                              (define (sort-by-sum-of-digits-index-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux-aux nums)\n                                (define (sort-by-sum-of-digits",
    "  (let ((nums_sorted (sort nums)))\n    (if (null? nums_sorted)\n      (list)\n      (let ((nums_sorted_sorted (sort nums_sorted)))\n        (if (null? nums_sorted_sorted)\n          (list)\n          (let ((nums_sorted_sorted_sorted (sort nums_sorted_sorted)))\n            (if (null? nums_sorted_sorted_sorted)\n              (list)\n              (let ((nums_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted)))\n                (if (null? nums_sorted_sorted_sorted_sorted)\n                  (list)\n                  (let ((nums_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted)))\n                    (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted)\n                      (list)\n                      (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted)))\n                        (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                          (list)\n                          (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)))\n                            (if (null? nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n                              (list)\n                              (let ((nums_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted (sort nums_sorted_sorted_sorted_sorted_"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}