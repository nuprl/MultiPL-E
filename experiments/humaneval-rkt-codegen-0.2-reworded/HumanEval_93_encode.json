{
  "name": "HumanEval_93_encode",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes a message, and encodes in such a \n;; way that it swaps case of all letters, replaces all vowels in \n;; the message with the letter that appears 2 places ahead of that \n;; vowel in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> (encode \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n(define (encode message)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap encoded-message))))))\n",
    "  (let ((encoded-message (string-map (lambda (letter) (string-append (string-upcase (string-downcase letter)) (string-upcase (string-downcase (string-ref message (string-length message) - 2)))) (string-ref message (string-length message) - 1))))\n    (string-join \" \" (map encoded-message message))))\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref vowels 2))))) message))\n    (string-map-char encoded-message (lambda (letter) (string-ref vowels (string-index-of letter \"aeiou\")))))))\n\n;; Read a message, and decode it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char (lambda (char) (char (string-upcase (string-downcase (letter))) 0)) (lambda (char) (char (string-upcase (string-downcase (char))) 0)))) message)))\n    (string-append (string-map (lambda (letter) (string-map-char (lambda (char) (char (string-upcase (string-downcase (letter))) 0)) (lambda (char) (char (string-upcase (string-downcase (char))) 0)))) encoded-message) \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                        (let ((next-vowel-index (string-index-",
    "  (let ((encoded (string)))\n    (let ((letter (string)))\n      (let ((vowels (string)))\n        (let ((vowel (string)))\n          (let ((index (string)))\n            (let ((indexed (string)))\n              (let ((indexed2 (string)))\n                (let ((indexed3 (string)))\n                  (let ((indexed4 (string)))\n                    (let ((indexed5 (string)))\n                      (let ((indexed6 (string)))\n                        (let ((indexed7 (string)))\n                          (let ((indexed8 (string)))\n                            (let ((indexed9 (string)))\n                              (let ((indexed10 (string)))\n                                (let ((indexed11 (string)))\n                                  (let ((indexed12 (string)))\n                                    (let ((indexed13 (string)))\n                                      (let ((indexed14 (string)))\n                                        (let ((indexed15 (string)))\n                                          (let ((indexed16 (string)))\n                                            (let ((indexed17 (string)))\n                                              (let ((indexed18 (string)))\n                                                (let ((indexed19 (string)))\n                                                  (let ((indexed20 (string)))\n                                                    (let ((indexed21 (string)))\n                                                      (let ((indexed22 (string)))\n                                                        (let ((indexed23 (string)))\n                                                          (let ((indexed24 (string)))\n                                                            (let ((indexed25 (string)))\n                                                              (let ((indexed26 (string)))\n                                                                (let ((indexed27 (string)))\n                                                                  (let ((indexed28 (string)))\n                                                                    (let ((indexed29 (string)))\n                                                                      (let ((indexed30 (string)))\n                                                                        (let ((indexed31 (string)))\n                                                                          (let ((indexed32 (string)))\n                                                                            (let ((indexed33 (string)))\n                                                                              (let ((indexed34 (string)))\n                                                              ",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel encoded-message)))\n    encoded-message)))\n\n;; Decode the message. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap encoded-message))))))\n\n;; Decode the message.",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                        (let ((",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel #\\vowel-2-ahead) encoded-message)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MG",
    "  (let* ([encoded (map-char (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) message)])\n    (string->list encoded)))\n\n;; >>> (decode \"TGST\")\n;; \"TEST\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"THIS IS A MESSAGE\"",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowel (string)))\n        (let ((index (string)))\n          (let ((next-vowel (string)))\n            (let ((next-letter (string)))\n              (let ((next-index (string)))\n                (let ((next-next-vowel (string)))\n                  (let ((next-next-letter (string)))\n                    (let ((next-next-index (string)))\n                      (let ((next-next-next-vowel (string)))\n                        (let ((next-next-next-letter (string)))\n                          (let ((next-next-next-index (string)))\n                            (let ((next-next-next-next-vowel (string)))\n                              (let ((next-next-next-next-letter (string)))\n                                (let ((next-next-next-next-index (string)))\n                                  (let ((next-next-next-next-next-vowel (string)))\n                                    (let ((next-next-next-next-next-letter (string)))\n                                      (let ((next-next-next-next-next-index (string)))\n                                        (let ((next-next-next-next-next-next-vowel (string)))\n                                          (let ((next-next-next-next-next-next-letter (string)))\n                                            (let ((next-next-next-next-next-next-index (string)))\n                                              (let ((next-next-next-next-next-next-next-vowel (string)))\n                                                (let ((next-next-next-next-next-next-next-letter (string)))\n                                                  (let ((next-next-next-next-next-next-next-index (string)))\n                                                    (let ((next-next-next-next-next-next-next-next-vowel (string)))\n                                                      (let ((next-next-next-next-next-next-next-next-letter (string)))\n                                                        (let ((next-next",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list 'a 'e 'i 'o 'u)))\n        (let ((vowel (car vowels)))\n          (let ((vowel-index (car (cdr vowels))))\n            (let ((next-vowel (car (cdr (cdr vowels)))))\n              (let ((next-vowel-index (car (cdr (cdr (cdr vowels)))))\n                    (next-vowel-letter (car (cdr (cdr (cdr (cdr vowels)))))))\n                (set! letter (concat (substring (string) 0 (string-length (string)) - 1)\n                                     (substring (string) 0 (string-length (string)) - 1)))\n                (set! encoded-message (concat (substring (string) 0 (string-length (string)) - 1)\n                                       (substring (string) 0 (string-length (string)) - 1)))\n                (set! vowel (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append (string-split/lines encoded) \" \")))\n",
    "  (let ((encoded-message (string-map-char (string-map-char #\\a #\\A #\\e #\\E #\\i #\\I #\\o #\\O #\\u #\\U)\n                                          (string-map-char #\\b #\\B #\\c #\\C #\\d #\\D #\\f #\\F #\\g #\\G #\\h #\\H #\\j #\\J #\\k #\\K #\\l #\\L #\\m #\\M #\\n #\\N #\\p #\\P #\\r #\\R #\\s #\\S #\\t #\\T #\\v #\\V #\\w #\\W #\\x #\\X #\\y #\\Y #\\z #\\Z))))\n    (string-append (string-map (lambda (char) (string-ref encoded-message char)) message)\n                                  (string-map (lambda (char) (string-ref char 2)) encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>>",
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-sw",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list #\\a #\\e #\\i #\\o #\\u #\\y)))\n        (let ((vowel (car vowels)))\n          (let ((vowel-letter (car vowel)))\n            (setf (cdr vowel) (cdr letter))\n            (setf (car vowel) vowel-letter)\n            (setf (car letter) vowel-letter)\n            (setf encoded-message (concat encoded-message (string) (string)))\n            (setf letter (string)))\n          (setf vowels (cdr vowels)))))\n    (setf encoded-message (concat encoded-message (string) (string)))\n    (setf message (string)))\n  (string)))\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message))))\n  (string-append (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)) encoded-message))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (string)))\n        (let ((vowel (string)))\n          (let ((i (integer)))\n            (let ((j (integer)))\n              (let ((k (integer)))\n                (let ((l (integer)))\n                  (let ((m (integer)))\n                    (let ((n (integer)))\n                      (let ((o (integer)))\n                        (let ((p (integer)))\n                          (let ((q (integer)))\n                            (let ((r (integer)))\n                              (let ((s (integer)))\n                                (let ((t (integer)))\n                                  (let ((u (integer)))\n                                    (let ((v (integer)))\n                                      (let ((w (integer)))\n                                        (let ((x (integer)))\n                                          (let ((y (integer)))\n                                            (let ((z (integer)))\n                                              (let ((a (integer)))\n                                                (let ((b (integer)))\n                                                  (let ((c (integer)))\n                                                    (let ((d (integer)))\n                                                      (let ((e (integer)))\n                                                        (let ((f (integer)))\n                                                          (let ((g (integer)))\n                                                            (let ((h (integer)))\n                                                              (let ((i (integer)))\n                                                                (let ((j (integer)))\n                                                                  (let ((k (integer)))\n                                                                    (let ((l (integer)))\n                                                                      (let ((m (integer)))\n                                                                        (let ((n (integer)))\n                                                                          (let ((o (integer)))\n                                                                            (let ((p (integer)))\n                                                                              (let ((q (integer)))\n                                                                                (let ((r (integer)))\n                                                                                  (let ((s (integer)))\n                                                                                    (let ((t (integer)))\n                                                                                      (let ((u (integer)))\n                                                                                        (let ((v (integer)))\n                                                               ",
    "  (let* ([encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)])\n    (string-append (string-split/lines encoded \" \") \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message",
    "  (let ((encoded (mapcar (lambda (c) (if (char=c #\\\\a #\\\\e #\\\\i #\\\\o #\\\\u)\n                                          (char-upcase c)\n                                          (char-downcase c)))\n                                  message)))\n    (string->list encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (string-set! encoded-message (string-set! encoded-message (string-replace/all encoded-message vowel) (string-ref next-vowel vowel)))))\n        (string-set! encoded-message (string-replace/all encoded-message vowel) (string-ref next-vowel vowel)))))\n  encoded-message)\n\n;; Decode a message.\n;; Assume only letters.\n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"AEIOU\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref next-vowel-index)))\n                (let ((next-vowel-next-index (string-index-of vowels (string-ref next-vowel next-vowel)))\n                      (next-vowel-next (string-ref next-vowel-next-index)))\n                  (let ((next-vowel-next-next-index (string-index-of vowels (string-ref next-vowel-next next-vowel)))\n                        (next-vowel-next-next (string-ref next-vowel-next-next-index)))\n                    (let ((next-vowel-next-next-next-index (string-index-of vowels (string-ref next-vowel-next next-vowel next-vowel)))\n                          (next-vowel-next-next-next (string-ref next-vowel-next-next-next-index)))\n                      (let ((next-vowel-next-next-next-next-index (string-index-of vowels (string-ref next-vowel-next next-vowel next-vowel next-vowel)))\n                            (next-vowel-next-next-next-next (string-ref next-vowel-next-next-next-next-index)))\n                        (let ((next-vowel-next-next-next-next-next-index (string-index-of vowels (string-ref next-vowel-next next-vowel next-vowel next-vowel next-vowel)))\n                              (next-vowel-next-next",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char (lambda (char) (char (string-upcase (string-downcase (letter))) (string-char-at (string-upcase (string-downcase (char))) 2))) (string-char-at (string-upcase (string-downcase (char))) 2)))) message)))\n  (string-append (string-map (lambda (letter) (string-map-char (lambda (char) (char (string-upcase (string-downcase (letter))) (string-char-at (string-upcase (string-downcase (char))) 2))) (string-char-at (string-upcase (string-downcase (char))) 2)))) encoded-message \"\")\n)\n",
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-sw",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append (string-split/lines encoded) \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;;",
    "  (let* ([encoded (string-map (lambda (c) (if (string= c #\\a #\\e #\\i #\\o #\\u) #\\a #\\e #\\i #\\o #\\u) #\\a #\\e #\\i #\\o #\\u) (string-upcase c)))\n         (string-replace/all message #\"aeiou\" #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string-replace/all message #\\a #\\e #\\i #\\o #\\u)\n         (string",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list 'a 'e 'i 'o 'u)))\n        (let ((vowel (car vowels)))\n          (let ((next-vowel (cdr vowels)))\n            (let ((next-letter (car next-vowel)))\n              (let ((next-vowel (cdr next-vowel)))\n                (let ((next-letter (car next-vowel)))\n                  (let ((next-vowel (cdr next-vowel)))\n                    (let ((next-letter (car next-vowel)))\n                      (let ((next-vowel (cdr next-vowel)))\n                        (let ((next-letter (car next-vowel)))\n                          (let ((next-vowel (cdr next-vowel)))\n                            (let ((next-letter (car next-vowel)))\n                              (let ((next-vowel (cdr next-vowel)))\n                                (let ((next-letter (car next-vowel)))\n                                  (let ((next-vowel (cdr next-vowel)))\n                                    (let ((next-letter (car next-vowel)))\n                                      (let ((next-vowel (cdr next-vowel)))\n                                        (let ((next-letter (car next-vowel)))\n                                          (let ((next-vowel (cdr next-vowel)))\n                                            (let ((next-letter (car next-vowel)))\n                                              (let ((next-vowel (cdr next-vowel)))\n                                                (let ((next-letter (car next-vowel)))\n                                                  (let ((next-vowel (cdr next-vowel)))\n                                                    (let ((next-letter (car next-vowel)))\n                                                      (let ((next-vowel (cdr next-vowel)))\n                                                        (let ((next-letter (car next-vowel)))",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((i (1)))\n        (while (< i (length message))\n          (let ((c (aref message i)))\n            (if (member c vowels)\n              (setq encoded-message (concatenate \n                                     (list (aref encoded-message i - 2) \n                                         (aref encoded-message i - 1) \n                                         (aref encoded-message i)) \n                                     (list (aref encoded-message i - 1) \n                                         (aref encoded-message i))))\n              (setq i (i + 1)))\n          )\n        )\n      )\n      (format \"~a\" encoded-message)\n    )\n  )\n)\n",
    "  (let ((encoded-message (string-map (lambda (letter)\n    (string-map-char (lambda (vowel)\n      (string-ref (string-upcase (string-substring message 1)) vowel))\n      (string-ref (string-substring message 1) vowel))))\n    (string-upcase message)))\n    (string-append (string-map (lambda (letter)\n      (string-map-char (lambda (vowel)\n        (string-ref (string-substring (string-upcase message) 1) vowel))))\n      (string-upcase message)) \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase v) (string-index (string-upcase v) v) 2))) encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING123\")\n;; \"TGSTING123\"\n;; >>> (encode \"TESTING123456789\")\n;; \"TGSTING123456789\"\n;; >>> (encode \"TESTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n;; \"TGSTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n;; >>> (encode \"TESTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (let ((vowels (string-split \"aeiou\")))\n      (let ((vowel-positions (map (lambda (v) (string-index-of vowels v 2))))\n            (vowel-positions-length (length vowel-positions)))\n        (let ((vowel-positions-indexed (map (lambda (i) (string-ref encoded-message i))))\n              (vowel-positions-indexed-length (length vowel-positions-indexed)))\n          (let ((encoded-message-indexed (map (lambda (i) (string-join \" \" (list (take i vowel-positions-indexed) (drop i vowel-positions-indexed-length))))))\n            (let ((encoded-message-indexed-length (length encoded-message-indexed))\n                  (encoded-message-indexed-indexed (map (lambda (i) (string-ref encoded-message-indexed i))))\n                  (encoded-message-indexed-indexed-length (length encoded-message-indexed-indexed)))\n              (string-join \" \" (list (take encoded-message-indexed-length encoded-message-indexed-indexed) (drop encoded-message-indexed-length encoded-message-indexed-indexed)))\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message))))\n  (string-append (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)) encoded-message)))\n\n;; Read a message, and decode it.",
    "  (let* ([encoded (map-char (string-map (lambda (c) (string-upcase c)) message))])\n    (string-join \" \" encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;;",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                        (let ((next",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded-message \"aeiou\" #\"2\")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TEST\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING123\")\n;; \"TESTING123\"\n;; >>> (encode \"TESTING123abc\")\n;; \"TESTING123abc\"\n;; >>> (encode \"TESTING123abcdef\")\n;; \"TESTING123abcdef\"\n;; >>> (encode \"TESTING123abcdefghi\")\n;; \"TESTING123abcdefghi\"\n;; >>> (encode \"TESTING123abcdefghijklmnopqrstuvwxyz\")\n;; \"TESTING123abcdefghijklmnopqrstuvwxyz\"\n;; >>> (encode \"TESTING123abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n;; \"TESTING123abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n;; >>> (encode \"TESTING123abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\")\n;; \"TESTING123abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\"\n;; >>> (encode \"TESTING123abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789abcdef",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                        (let ((next-vowel-index (string-index-",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"aeiou\" \"AEIOU\")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase v) (string-index (string-upcase v) v) 2)) encoded))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING123\")\n;; \"TGSTING123\"\n;; >>> (encode \"TESTING123456789\")\n;; \"TGSTING123456789\"\n;; >>> (encode \"TESTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n;; \"TGSTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n;; >>> (encode \"TESTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list 'a 'e 'i 'o 'u)))\n        (let ((vowel (car (cdr vowels))))\n          (let ((vowel-index (string-index (string) vowel)))\n            (let ((next-vowel-index (string-index (string) (string) vowel)))\n              (let ((next-vowel (car (cdr vowels))))\n                (let ((next-vowel-index (string-index (string) next-vowel)))\n                  (let ((next-vowel-letter (string)))\n                    (let ((next-vowel-letter-index (string-index (string) next-vowel-letter)))\n                      (let ((next-vowel-letter-index-2 (string-index (string) (string) next-vowel-letter)))\n                        (let ((next-vowel-letter-index-3 (string-index (string) (string) (string) next-vowel-letter)))\n                          (let ((next-vowel-letter-index-4 (string-index (string) (string) (string) (string) next-vowel-letter)))\n                            (let ((next-vowel-letter-index-5 (string-index (string) (string) (string) (string) (string) next-vowel-letter)))\n                              (let ((next-vowel-letter-index-6 (string-index (string) (string) (string) (string) (string) (string) next-vowel-letter)))\n                                (let ((next-vowel-letter-index-7 (string-index (string) (string) (string) (string) (string) (string) (string) next-vowel-letter)))\n                                  (let ((next-vowel-letter-index-8 (string-index (string) (string) (string) (string) (string) (string) (string) (string) next-vowel-letter)))\n                                    (let ((next-vowel-letter-index-9 (string-index",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message))))\n  (string-map-char #\\vowels (string-map-char #\\vowels encoded-message))\n)\n",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref (string-split-at-char vowel) 2)))) message)))\n    (string-join-as-list encoded-message \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MG",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"AEIOU\")\n          (vowel-indexes (mapcar #'string-ci-less vowels)))\n      (for-each (lambda (vowel)\n                 (let ((index (string-ci-less (string-index-of vowel encoded-message) 2)))\n                   (let ((next-vowel (string-ci-less (string-index-of (string-ci-less (string-append vowel encoded-message)) index))))\n                     (string-set! encoded-message (string-append encoded-message (string-ci-less next-vowel))))))\n        vowels)))\n  encoded-message)\n\n;; Decode a message.\n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (char) (string-ci-swap char)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-sw",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded-message \"aeiou\" #\"2\")))\n",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append \" \" (string-map-char #\\vowels (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\vowel (string-map-char #\\lower #\\upper) (string-map-char #\\",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((next-vowel-index (string-index-of vowels (string-substring message (string-index-of vowels message) (string-length message) 2))))\n          (let ((next-vowel (string-substring message (string-index-of vowels next-vowel-index) (string-length message))))\n            (let ((next-vowel-index (string-index-of vowels (string-substring message (string-index-of vowels next-vowel-index) (string-length message) 2))))\n              (let ((next-vowel (string-substring message (string-index-of vowels next-vowel-index) (string-length message))))\n                (let ((next-vowel-index (string-index-of vowels (string-substring message (string-index-of vowels next-vowel-index) (string-length message) 2))))\n                  (let ((next-vowel (string-substring message (string-index-of vowels next-vowel-index) (string-length message))))\n                    (let ((next-vowel-index (string-index-of vowels (string-substring message (string-index-of vowels next-vowel-index) (string-length message) 2))))\n                      (let ((next-vowel (string-substring message (string-index-of vowels next-vowel-index) (string-length message))))\n                        (let ((next-vowel-index (string-index-of vowels (string-substring message (string-index-of vowels next-vowel-index) (string-length message) 2))))\n                          (let ((next-vowel (string-substring message (string-index-of vowels next-vowel-index) (string-length message))))\n                            (let ((next-vowel-index (string-index-of vowels (string-substring message (string-index-of vowels",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel #\\a) (string-map-char #\\vowel (string-map-char #\\a #\\vowel))))\n  encoded-message)\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let* ([encoded (string-map (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) message)])\n    (string->symbol encoded)))\n",
    "  (let ((encoded-message (string-map (lambda (letter) (string-append (string-upcase letter) (string-substring (string-downcase message) (string-index-of letter 2) 1))) (string-downcase message)))\n    (string-append (string-downcase message) (string-append (string-downcase encoded-message) \" \")))\n    (string-append \" \" (string-downcase (string-split-at-first-of encoded-message \" \"))))\n)\n\n;; Decode the message.",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou')))\n    (let ((vowel-index (string-index-of vowels message)))\n      (let ((vowel (string-ref message vowel-index)))\n        (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n          (let ((next-vowel-index (string-index-of vowels next-vowel)))\n            (let ((next-vowel (string-ref next-vowel-index)))\n              (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                  (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                    (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                      (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                        (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                          (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                            (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                              (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                  (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                    (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                      (let ((next-",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowel (string)))\n        (let ((next-vowel (string)))\n          (let ((next-letter (string)))\n            (let ((index (string)))\n              (let ((indexed-letter (string)))\n                (let ((indexed-vowel (string)))\n                  (let ((indexed-next-vowel (string)))\n                    (let ((indexed-next-letter (string)))\n                      (let ((indexed-encoded-message (string)))\n                        (let ((indexed-letter-index (string)))\n                          (let ((indexed-vowel-index (string)))\n                            (let ((indexed-next-vowel-index (string)))\n                              (let ((indexed-next-letter-index (string)))\n                                (let ((indexed-encoded-letter (string)))\n                                  (let ((indexed-encoded-vowel (string)))\n                                    (let ((indexed-encoded-next-vowel (string)))\n                                      (let ((indexed-encoded-next-letter (string)))\n                                        (let ((indexed-encoded-message-index (string)))\n                                          (let ((indexed-encoded-letter-index (string)))\n                                            (let ((indexed-encoded-vowel-index (string)))\n                                              (let ((indexed-encoded-next-vowel-index (string)))\n                                                (let ((indexed-encoded-next-letter-index (string)))\n                                                  (let ((indexed-encoded-message-index (string)))\n                                                    (let ((indexed-encoded-letter-index (string)))\n                                                      (let ((indexed-encoded-vowel-index (string)))\n                                                        (let ((indexed-encoded-next-vowel-index (string)))\n                                                          (let ((indexed-encoded-next-letter-index (string)))\n                                       ",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref (string-split-at-char vowel) 2)))) message)))\n    (string-join \" \" (string-split-at-char \" \" encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MG",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                        (let ((next-vowel-index (string-index-",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref vowels 2)))) message))\n         (vowels \"aeiou\")))\n  (string-append (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref vowels 2)))) encoded-message) \"-\")))\n\n;; Read a message, and decode it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-next-index (string-index-of vowels (string-ref message next-vowel-index) + 1)))\n                  (let ((next-vowel-next (string-ref message next-vowel-next-index)))\n                    (let ((next-vowel-next-next-index (string-index-of vowels (string-ref message next-vowel-next-index) + 1)))\n                      (let ((next-vowel-next-next (string-ref message next-vowel-next-next-index)))\n                        (let ((next-vowel-next-next-next-index (string-index-of vowels (string-ref message next-vowel-next-next-index) + 1)))\n                          (let ((next-vowel-next-next-next (string-ref message next-vowel-next-next-next-index)))\n                            (let ((next-vowel-next-next-next-next-index (string-index-of vowels (string-ref message next-vowel-next-next-next-index) + 1)))\n                              (let ((next-vowel-next-next-next-next (string-ref message next-vowel-next-next-next-next-index)))\n                                (let ((next-vowel-next-next-next-next-next-index (string-index-of vowels (string-ref message next-vowel-next-next-next-next-index) + 1)))\n                                  (let ((next-vowel",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list 'a 'e 'i 'o 'u)))\n        (let ((vowel (car vowels)))\n          (let ((vowel-index (car (cdr vowels))))\n            (let ((next-vowel (car (cdr (cdr vowels)))))\n              (let ((next-vowel-index (car (cdr (cdr (cdr vowels)))))\n                    (next-vowel-index-plus-two (cdr (cdr (cdr (cdr vowels))))))\n                (setf (car encoded-message) (car letter))\n                (setf (cdr encoded-message) (cdr letter))\n                (setf (car encoded-message) (car next-vowel))\n                (setf (cdr encoded-message) (cdr next-vowel))\n                (setf (car encoded-message) (car next-vowel-index))\n                (setf (cdr encoded-message) (cdr next-vowel-index))\n                (setf (car encoded-message) (car next-vowel-index-plus-two))\n                (setf (cdr encoded-message) (cdr next-vowel-index-plus-two))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-upcase (string-substring (string-downcase v) (string-index-of v \"a\") 2))) encoded))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;;",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                        (let ((next-vowel-index (string-index-",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (let ((letter (string)))\n        (cond\n          [(string-ci-equal? letter vowels)\n            (string-set! encoded-message\n              (string-append\n                (string-ci-swap letter)\n                (string-ci-swap (string-ci-next letter 2))\n                (string-ci-next letter 2))\n              encoded-message)\n            (else\n              (string-append encoded-message letter))]))\n    (string)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((encoded-vowel (string-ref encoded-message vowel-index)))\n                  (let ((next-encoded-vowel (string-ref encoded-message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-encoded-vowel-index (string-index-of vowels next-encoded-vowel)))\n                      (let ((next-encoded-vowel (string-ref encoded-message next-encoded-vowel-index)))\n                        (let ((encoded-vowel (string-ref encoded-message vowel-index)))\n                          (let ((next-encoded-vowel (string-ref encoded-message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-encoded-vowel-index (string-index-of vowels next-encoded-vowel)))\n                              (let ((next-encoded-vowel (string-ref encoded-message next-encoded-vowel-index)))\n                                (let ((encoded-vowel (string-ref encoded-message vowel-index)))\n                                  (let ((next-encoded-vowel (string-ref encoded-message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-encoded-vowel-index (string-index-of vowels next-encoded-vowel)))\n                                      (let ((next-encoded-vowel (string-ref encoded-message next-encoded-vowel-index)))\n",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message))))\n  (string-append (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)) encoded-message)))\n",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list #\\a #\\e #\\i #\\o #\\u #\\y)))\n        (let ((vowel (car vowels)))\n          (while (not (null? vowel))\n            (setq encoded-message (concat (cdr encoded-message) \n                                     (cdr letter) \n                                     (cdr vowel) \n                                     (car letter) \n                                     (car encoded-message))\n                       (setq letter (cdr letter))\n                       (setq vowel (car vowels))\n                       (setq vowels (cdr vowels))))))\n      (return encoded-message))))\n\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref (string-split-at-char vowel) 2)))) message)))\n    (string-join \" \" (string-split-at-char \" \" encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TEST\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING123\")\n;; \"TESTING123\"\n;; >>> (encode \"TESTING123456789\")\n;; \"TESTING123456789\"\n;; >>> (encode \"TESTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n;; \"TESTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n;; >>> (encode \"TESTING123456789ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQR",
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap encoded-message)))))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSC",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message)))\n    (string-append (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)) encoded-message)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded-message \"aeiou\" \"AEIOU\")))\n",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\lower #\\upper) encoded-message)) encoded-message)))\n\n;; Decode a message.\n;; Assume only letters.\n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref (string-split-at-char vowel) 2)))) message)))\n    (string-join-as-list encoded-message \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-join \" \" (map (lambda (c) (string-upcase (string-downcase (string-ref v c))) (string-ref v (string-length v) -1)) (string-ref v (string-length v) -2))) encoded-message)))\n  )\n)\n",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-join \" \" (map (lambda (c) (string-upcase (string-downcase (substring c (string-index v c) (string-index v (string-index c \"a\") + 1)))))) v))) encoded-message)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;;",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((i (0)))\n        (while (< i (length message))\n          (let ((c (aref message i)))\n            (if (member vowels c)\n              (setf encoded-message (concat (aref encoded-message 2) c))\n              (setf encoded-message (concat c (aref encoded-message 2)))))\n            (setf i (1+ i)))\n        (setf i (0)))\n      (string)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase v) (string-index-of v \"AEIOU\") 2)) encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list 'a 'e 'i 'o 'u)))\n        (let ((vowel (car vowels)))\n          (let ((vowel-position (cdr vowels)))\n            (setf (cdr letter) (car (cdr vowel-position)))\n            (setf (car letter) (car vowel))\n            (setf (cdr encoded-message) (concat (car letter) (cdr encoded-message)))\n            (setf (car encoded-message) (car letter))\n            (setf (cdr encoded-message) (concat (car (cdr letter)) (cdr encoded-message)))\n            (setf (car (cdr letter)) (car (cdr vowel-position)))\n            (setf (cdr (cdr letter)) (car (cdr vowel-position)))\n            (setf (car (cdr vowel-position)) (car letter)))\n          (setf (car vowel) (car letter))\n          (setf (cdr vowel) (cdr letter))\n          (setf (car letter) (car vowel))\n          (setf (cdr letter) (cdr vowel))\n          (setf (car (cdr letter)) (car (cdr vowel)))\n          (setf (cdr (cdr letter)) (car (cdr (cdr vowel))))\n          (setf (car (cdr (cdr letter))) (car (cdr (cdr vowel))))\n          (setf (cdr (cdr (cdr letter))) (car (cdr (cdr (cdr vowel))))))))\n      (setf (car encoded-message) (car message))\n      (setf (cdr encoded-message) (cdr message))))\n  (encoded-message)))\n\n;; Read a message, and decode it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou')))\n    (let ((vowel-index (string-index-of vowels encoded-message)))\n      (let ((vowel (string-ref encoded-message vowel-index)))\n        (let ((next-vowel (string-ref encoded-message (string-index-of vowels encoded-message) + 1)))\n          (let ((next-vowel-index (string-index-of vowels next-vowel)))\n            (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n              (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                  (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                    (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                      (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                        (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                          (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                            (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                              (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                  (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                    (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                      (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                        (let ((next-vowel (string-ref encoded-message next-vowel",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-upcase (string-substring v 2))) encoded-message))))\n)\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (for-each (lambda (letter)\n                 (if (member? letter vowels)\n                     (string-set! encoded-message (string-insert encoded-message (string-insert letter (string-index (string-to-list message) letter 2))))\n                     (string-set! encoded-message (string-insert encoded-message (string-insert letter letter))))\n                 (string-to-list message)))\n        encoded-message)))\n\n;; Decode the message.\n;; Assume only letters.\n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase v) (string-index (string-upcase v) v) 2))) (string-split \" \" encoded))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; >>> (encode \"",
    "  (let* ([encoded (string-map (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) message)])\n    (string->list encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TEST\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING123\")\n;; \"TESTING123\"\n;; >>> (encode \"TESTING123ABC\")\n;; \"TESTING123ABC\"\n;; >>> (encode \"TESTING123ABCDEF\")\n;; \"TESTING123ABCDEF\"\n;; >>> (encode \"TESTING123ABCDEFGHI\")\n;; \"TESTING123ABCDEFGHI\"\n;; >>> (encode \"TESTING123ABCDEFGHIJKL\")\n;; \"TESTING123ABCDEFGHIJKL\"\n;; >>> (encode \"TESTING123ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n;; \"TESTING123ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n;; >>> (encode \"TESTING123ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST",
    "  (let ((encoded (make-string (string-length message) #\\space)))\n    (let ((i 0))\n      (while (< i (string-length message))\n        (let ((c (string-ref message i)))\n          (if (string-ci=? c #\"AEIOU\")\n            (let ((vowel (string-ci=? c #\"AEIOU\")))\n              (let ((vowel-index (string-index-of c vowels)))\n                (string-set! encoded i (string-set! encoded i (+ 2 vowel-index)))\n                (string-set! encoded (+ i 1) c))\n              (set! i (+ i 1)))\n            (set! i (+ i 1)))\n          (set! encoded (+ i 1) c)))\n    encoded))\n\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"aeiou\" \"AEIOU\")))\n",
    "  (let* ([encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)])\n    (string-append (map char-code-alist encoded) \" \")))\n",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char (lambda (vowel) (string-ref (string-split-at-char vowel) 2)) (string-ref letter 2))) (string-map-char (lambda (letter) (string-ref letter 2)) (string-map-char (lambda (vowel) (string-ref letter 2)) (string-map-char (lambda (letter) (string-ref letter 2)) (lambda (vowel) (string-ref letter 2))))))))\n    (string-join-as-lines (string-map encoded-message message))))\n\n;; Decode the message.\n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap encoded-message))))\n",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase v) (string-index (string-upcase v) v) 2)) encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (string-replace/all encoded-message \"AEIOU\" \"AEIOU\")))\n",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel encoded-message))) encoded-message)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"t",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowel (string)))\n        (let ((next-vowel (string)))\n          (let ((next-letter (string)))\n            (let ((i (integer)))\n              (let ((j (integer)))\n                (let ((k (integer)))\n                  (let ((l (integer)))\n                    (let ((m (integer)))\n                      (let ((n (integer)))\n                        (let ((o (integer)))\n                          (let ((p (integer)))\n                            (let ((q (integer)))\n                              (let ((r (integer)))\n                                (let ((s (integer)))\n                                  (let ((t (integer)))\n                                    (let ((u (integer)))\n                                      (let ((v (integer)))\n                                        (let ((w (integer)))\n                                          (let ((x (integer)))\n                                            (let ((y (integer)))\n                                              (let ((z (integer)))\n                                                (let ((a (integer)))\n                                                  (let ((b (integer)))\n                                                    (let ((c (integer)))\n                                                      (let ((d (integer)))\n                                                        (let ((e (integer)))\n                                                          (let ((f (integer)))\n                                                            (let ((g (integer)))\n                                                              (let ((h (integer)))\n                                                                (let ((i (integer)))\n                                                                  (let ((j (integer)))\n                                                                    (let ((k (integer)))\n                                                                      (let ((l (integer)))\n                                                                        (let ((m (integer)))\n                                                                          (let ((n (integer)))\n                                                                            (let ((o (integer)))\n                                                                              (let ((p (integer)))\n                                                                                (let ((q (integer)))\n                                                                                  (let ((r (integer)))\n                                                                                    (let ((s (integer)))\n                                                                                      (let ((t (integer)))\n                                                                                        (let ((u (integer)))",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"aeiou\" \"AEIOU\")))\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (let ((letter (car (string-split/char encoded-message \" \"))))\n        (for-each (lambda (letter)\n                   (let ((vowel (car (cdr (string-split/char encoded-message \" \"))))\n                         (index (string-index/case vowels vowel)))\n                       (string-set! encoded-message\n                         (string-insert/dup encoded-message index letter)\n                         (string-delete encoded-message index))))\n                  letter))))\n  (string-join encoded-message \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n\n;; #lang scheme\n;; (define (encode message)\n;;   (let ((encoded-message (string)))\n;;     (let ((vowels 'aeiou'))\n;;       (let ((letter (car (string-split/char encoded-message \" \"))))\n;;         (for-each (lambda (letter)\n;;                  (let ((vowel (car (cdr (string-split/char encoded-message \" \"))))\n;;                       (index (string-index/case vowels vowel)))\n;;                     (string-set! encoded-message\n;;                       (string-insert/dup encoded-message index letter)\n;;                       (string-delete encoded-message index))))\n;;               letter))))\n;;   (string-join encoded-message \" \")))\n;;\n;; #lang racket\n;; (define (encode message)\n;;   (let ((encoded-message (string)))\n;;     (let ((vowels 'aeiou'))\n;;       (let ((letter (car (string-split/char encoded-message \" \"))))\n;;         (for-each (lambda (letter)\n;;                  (let ((vowel (car (cdr (string-split/char encoded-message \" \"))))\n;;                       (index (string-index/case vowels vowel)))\n;;                     (string-set! encoded-message\n;;                       (string-insert/dup encoded-message index letter)\n;;                       (",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (for-each (lambda (letter)\n                 (if (member? letter vowels)\n                     (let ((index (string-index-of letter vowels 2)))\n                         (string-set! encoded-message index (string-set! letter (string-ref encoded-message index))))\n                     (string-set! encoded-message (string-append encoded-message letter))))\n                message)))\n  encoded-message)\n\n;; Decode a message that has been encoded by encode. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOUAEIOU\")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase v) (string-index-of v \" \") 2)) encoded))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (let ((vowels (list \"aeiou\")))\n      (let ((vowel-index (string-index-of vowels encoded-message)))\n        (let ((vowel (string-ref encoded-message vowel-index)))\n          (let ((next-vowel (string-ref encoded-message (string-add vowel-index 2))))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                (let ((next-vowel-index (string-add next-vowel-index 2)))\n                  (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                    (let ((next-vowel-index (string-add next-vowel-index 2)))\n                      (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                        (let ((next-vowel-index (string-add next-vowel-index 2)))\n                          (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                            (let ((next-vowel-index (string-add next-vowel-index 2)))\n                              (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                (let ((next-vowel-index (string-add next-vowel-index 2)))\n                                  (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                    (let ((next-vowel-index (string-add next-vowel-index 2)))\n                                      (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                        (let ((next-vowel-index (string-add next-vowel-index 2)))\n                                          (let ((next-vowel (string-ref encoded",
    "  (let ((encoded (string-map (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) message)))\n    (string-map (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) (string-map (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) encoded))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS",
    "  (let ((encoded-message (string-map (lambda (char) (string-append (string-upcase char) (string-downcase (string-substring (string-downcase message) (string-index-of char 2) 1)))) (string-downcase message)))\n    (string-append (string-map (lambda (char) (string-index-of char 2)) (string-downcase message)) (string-map (lambda (char) (string-index-of char 2)) (string-upcase encoded-message))))\n    (string-append (string-map (lambda (char) (string-index-of char 2)) (string-upcase message)) (string-map (lambda (char) (string-index-of char 2)) (string-downcase encoded-message))))))\n\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let* ([encoded (map-char (string-map (lambda (c) (string-ci-swap c)) message))])\n    (string-append \" \" (map-char (lambda (c) (string-ci-swap c)) encoded))\n  )\n)\n",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"aeiou\" #\"2\")))\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou')))\n    (let ((vowels-2-ahead 'aeiou'))\n      (let ((i (1)))\n        (while (< i (length message))\n          (let ((c (aref message i)))\n            (if (member vowels c)\n              (setf (aref encoded-message i) (aref vowels-2-ahead c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref encoded-message i) (aref c))\n              (setf (aref",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append (string-split/lines encoded-message) \" \")))\n",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowel (string)))\n        (let ((index (string)))\n          (let ((next-vowel (string)))\n            (let ((next-letter (string)))\n              (let ((next-index (string)))\n                (let ((next-next-vowel (string)))\n                  (let ((next-next-letter (string)))\n                    (let ((next-next-index (string)))\n                      (let ((next-next-next-vowel (string)))\n                        (let ((next-next-next-letter (string)))\n                          (let ((next-next-next-index (string)))\n                            (let ((next-next-next-next-vowel (string)))\n                              (let ((next-next-next-next-letter (string)))\n                                (let ((next-next-next-next-index (string)))\n                                  (let ((next-next-next-next-next-vowel (string)))\n                                    (let ((next-next-next-next-next-letter (string)))\n                                      (let ((next-next-next-next-next-index (string)))\n                                        (let ((next-next-next-next-next-next-vowel (string)))\n                                          (let ((next-next-next-next-next-next-letter (string)))\n                                            (let ((next-next-next-next-next-next-index (string)))\n                                              (let ((next-next-next-next-next-next-next-vowel (string)))\n                                                (let ((next-next-next-next-next-next-next-letter (string)))\n                                                  (let ((next-next-next-next-next-next-next-index (string)))\n                                                    (let ((next-next-next-next-next-next-next-next-vowel (string)))\n                                                      (let ((next-next-next-next-next-next-next-next-letter (string)))\n                                                        (let ((next-next",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (string-replace/all encoded-message \"AEIOU\" \"AEIOUAEIOU\")))\n",
    "  (let ((encoded-message (string-map (lambda (char) (string-append (string-upcase char) (string-upcase (string-downcase (string-substring (string-downcase message) (string-index-of (string-downcase message) char) 2)))) (string-downcase (string-substring (string-downcase message) 0 (string-index-of (string-downcase message) char) 2))))))\n    (string-append (string-map (lambda (char) (string-append (string-upcase char) (string-upcase (string-downcase (string-substring (string-downcase message) (string-index-of (string-downcase message) char) 2)))) (string-downcase (string-substring (string-downcase message) 0 (string-index-of (string-downcase message) char) 2)))) encoded-message)))\n\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((letter (string)))\n        (cond\n          [(string-ci-equal? letter vowels)\n            (let ((index (string-index-of letter vowels)))\n              (let ((next-letter (string-ci-swap? letter (string-ref encoded-message index 2))))\n                (string-set! encoded-message (string-insert! encoded-message next-letter index))\n                (string-set! encoded-message (string-delete! encoded-message index))\n                (string-set! encoded-message (string-insert! encoded-message next-letter index))))\n            (else\n              (string-append! encoded-message letter))]))\n      (string)))\n  message))\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (mapcar (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) message)))\n    (string-map (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                        (let ((next",
    "  (let ((encoded (mapcar (lambda (c) (if (char=c #\\\\a) #\\\\b #\\\\c)) message)))\n    (string-map (lambda (c) (if (char=c #\\\\a) #\\\\b #\\\\c)) encoded)))\n",
    "  (let ((encoded-message (string-map (lambda (char)\n    (string-map (lambda (vowel)\n      (string-map (lambda (letter)\n        (if (eq? letter vowel)\n          (string-append (string-append (string-append (string-append \"A\" \"B\") \"C\") \"D\") \"E\")\n          (string-append (string-append \"F\" \"G\") \"H\") \"I\") \"J\")\n        (string-append \"K\" \"L\") \"M\") \"N\")\n      (string-append \"O\" \"P\") \"Q\") \"R\")\n    (string-append \"S\" \"T\") \"U\") \"V\"))\n    (string-append \"W\" \"X\") \"Y\") \"Z\"))\n    (string-append (string-map (lambda (vowel)\n      (string-map (lambda (letter)\n        (if (eq? letter vowel)\n          (string-append (string-append (string-append \"a\" \"b\") \"c\") \"d\")\n          (string-append (string-append \"f\" \"g\") \"h\") \"i\")\n        (string-append \"k\" \"l\") \"m\") \"n\")\n      (string-append \"o\" \"p\") \"q\") \"r\")\n    (string-append \"s\" \"t\") \"u\") \"v\"))\n    (string-append \"w\" \"x\") \"y\") \"z\"))\n    (string-append (string-map (lambda (vowel)\n      (string-map (lambda (letter)\n        (if (eq? letter vowel)\n          (string-append (string-append (string-append \"A\" \"B\") \"C\") \"D\")\n          (string-append (string-append \"F\" \"G\") \"H\") \"I\")\n        (string-append \"K\" \"L\") \"M\") \"N\")\n      (string-append \"O\" \"P\") \"Q\") \"R\")\n    (string-append \"S\" \"T\") \"U\") \"V\"))\n    (string-append \"W\" \"X\") \"Y\") \"Z\"))\n    message)))\n  (string-append (string-map (",
    "  (let ((encoded-message (string-map (lambda (char) (string-map (lambda (vowel) (if (char=vowel char) (char-upcase char) (char-downcase char))) (lambda (char) (char-upcase char)))) (string-map (lambda (char) (char-downcase char)) message))))\n    (string-append (string-map (lambda (char) (string-map (lambda (vowel) (if (char=vowel char) (char-upcase char) (char-downcase char))) (lambda (char) (char-upcase char)))) (string-map (lambda (char) (char-downcase char)) encoded-message))))\n)\n\n;; Decode a message that was encoded with encode. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-map (lambda (c) (string-upcase (string-downcase (string-ref encoded-message c)))) (string-split \" \" encoded-message))))\n)\n",
    "  (let ((encoded (string-map (lambda (char)\n    (if (char=? (string-ci char) #\"a\")\n      (if (char=? (string-ci char) #\"e\")\n        (if (char=? (string-ci char) #\"i\")\n          (if (char=? (string-ci char) #\"o\")\n            (if (char=? (string-ci char) #\"u\")\n              (string-ci (string-ci (string-ci (string-ci char))))\n              (string-ci char))\n            (string-ci (string-ci char))))\n          (string-ci char)))\n    (string-ci char))))\n  (string-append (map encoded message) \" \")))\n  (string-trim (string-split encoded \" \")))\n)\n\n;; Decode a message.\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append (string-split/lines encoded-message) \" \")))\n",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase (string-downcase (string-substring v 2))) v)) (string-split \"aeiou\" (string-downcase encoded-message)))))))\n\n;; Read a message, and decode it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase (string-downcase v)) 2)) encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref next-vowel-index)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref next-vowel-index)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref next-vowel-index)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref next-vowel-index)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref next-vowel-index)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref next-vowel-index)))\n                                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                          (let ((next-vowel (string-ref next-vowel-index)))\n                                            (let ((next-vowel-index (string-index-of vowels next-v",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-join \" \" (map (lambda (c) (string-upcase (string-downcase (string-ref encoded-message c 2))) (string-ref encoded-message c (string-length encoded-message) - 1))) v))) \" \")))\n)\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((next-vowel-index (string-index-of vowels (string-copy message (string-index-of vowels message) + 1))))\n          (let ((next-vowel (string-copy message (string-index-of vowels next-vowel-index))))\n            (let ((next-vowel-index (string-index-of vowels (string-copy message (string-index-of vowels next-vowel-index) + 1))))\n              (let ((next-vowel (string-copy message (string-index-of vowels next-vowel-index))))\n                (let ((next-vowel-index (string-index-of vowels (string-copy message (string-index-of vowels next-vowel-index) + 1))))\n                  (let ((next-vowel (string-copy message (string-index-of vowels next-vowel-index))))\n                    (let ((next-vowel-index (string-index-of vowels (string-copy message (string-index-of vowels next-vowel-index) + 1))))\n                      (let ((next-vowel (string-copy message (string-index-of vowels next-vowel-index))))\n                        (let ((next-vowel-index (string-index-of vowels (string-copy message (string-index-of vowels next-vowel-index) + 1))))\n                          (let ((next-vowel (string-copy message (string-index-of vowels next-vowel-index))))\n                            (let ((next-vowel-index (string-index-of vowels (string-copy message (string-index-of vowels next-vowel-index) + 1))))\n                              (let ((next-vowel (string-copy message (string-index-of vowels next-vowel-index))))\n                                (let ((next-vowel-index (string-index-of vowels (string-copy",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message next-vowel-index)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message next-vowel-index)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message next-vowel-index)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message next-vowel-index)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message next-vowel-index)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message next-vowel-index)))\n                                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                          (let ((next-vowel (string-ref message next-vowel-index)))\n                                            (let ((next-vowel-index (string-index",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list 'a 'e 'i 'o 'u)))\n        (let ((vowel (car vowels)))\n          (let ((next-vowel (cdr vowels)))\n            (let ((next-letter (car next-vowel)))\n              (let ((next-letter-index (string-index (car encoded-message) next-letter)))\n                (let ((next-letter-index-2 (string-index (car encoded-message) next-vowel)))\n                  (let ((next-letter-index-3 (string-index (car encoded-message) next-letter-index)))\n                    (let ((next-letter-index-4 (string-index (car encoded-message) next-letter-index-2)))\n                      (let ((next-letter-index-5 (string-index (car encoded-message) next-letter-index-3)))\n                        (let ((next-letter-index-6 (string-index (car encoded-message) next-letter-index-4)))\n                          (let ((next-letter-index-7 (string-index (car encoded-message) next-letter-index-5)))\n                            (let ((next-letter-index-8 (string-index (car encoded-message) next-letter-index-6)))\n                              (let ((next-letter-index-9 (string-index (car encoded-message) next-letter-index-7)))\n                                (let ((next-letter-index-10 (string-index (car encoded-message) next-letter-index-8)))\n                                  (let ((next-letter-index-11 (string-index (car encoded-message) next-letter-index-9)))\n                                    (let ((next-letter-index-12 (string-index (car encoded-message) next-letter-index-10)))\n                                      (let ((next-letter-index-13 (string-index (car encoded-message) next-letter-index-11)))\n                                        (let ((next-letter-index-14 (string-index (car encoded-message) next-letter-index-12)))\n                                          (let",
    "  (let ((encoded-message (string-map (lambda (letter)\n    (string-map-char (lambda (vowel)\n      (string-ref (string-upcase (string-append (string-downcase letter)\n                                  (string-ref vowel 2))) 2))))\n      (string-downcase message))))\n    (string-append \" \" (string-join \" \" (map encoded-message message))))\n)\n\n;; Read a message, and decode it.",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (for-each (lambda (letter)\n                 (if (member? letter vowels)\n                     (string-set! encoded-message (string-insert encoded-message (string-insert letter (string-index (string-to-list message) letter 2))))\n                     (string-set! encoded-message (string-insert encoded-message (string-insert letter (string-index (string-to-list message) letter)))))))\n        message)))\n\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)))))\n",
    "  (let ((encoded (string-map (lambda (c) (if (char=c #\\\\a #\\\\e #\\\\i #\\\\o #\\\\u) #\\\\2 #\\\\1)) message))\n        (result \"\")))\n  (string-append result encoded))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowel (string)))\n        (let ((next-vowel (string)))\n          (let ((next-letter (string)))\n            (let ((i (integer)))\n              (let ((j (integer)))\n                (let ((k (integer)))\n                  (let ((l (integer)))\n                    (let ((m (integer)))\n                      (let ((n (integer)))\n                        (let ((o (integer)))\n                          (let ((p (integer)))\n                            (let ((q (integer)))\n                              (let ((r (integer)))\n                                (let ((s (integer)))\n                                  (let ((t (integer)))\n                                    (let ((u (integer)))\n                                      (let ((v (integer)))\n                                        (let ((w (integer)))\n                                          (let ((x (integer)))\n                                            (let ((y (integer)))\n                                              (let ((z (integer)))\n                                                (let ((a (integer)))\n                                                  (let ((b (integer)))\n                                                    (let ((c (integer)))\n                                                      (let ((d (integer)))\n                                                        (let ((e (integer)))\n                                                          (let ((f (integer)))\n                                                            (let ((g (integer)))\n                                                              (let ((h (integer)))\n                                                                (let ((i (integer)))\n                                                                  (let ((j (integer)))\n                                                                    (let ((k (integer)))\n                                                                      (let ((l (integer)))\n                                                                        (let ((m (integer)))\n                                                                          (let ((n (integer)))\n                                                                            (let ((o (integer)))\n                                                                              (let ((p (integer)))\n                                                                                (let ((q (integer)))\n                                                                                  (let ((r (integer)))\n                                                                                    (let ((s (integer)))\n                                                                                      (let ((t (integer)))\n                                                                                        (let ((u (integer)))",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (let ((i (1)))\n        (while (< i (length message))\n          (let ((c (aref message i)))\n            (if (member c vowels)\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message i))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded-message (2 * i)))\n              (setf (aref encoded-message i) (aref encoded",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-map (lambda (c) (string-upcase (string-downcase c))) (string-split \" \" encoded-message)))\n    ))\n",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase (string-downcase (string-substring v 2))) v)) encoded))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"\n;; >>> (encode \"TESTING\")\n;; \"TGS T\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (for-each (lambda (letter)\n                  (let ((vowel (car (cdr vowels))))\n                    (if (member letter vowels)\n                        (setf (cdr (cdr encoded-message)) (car (cdr letter)))\n                        (setf (cdr (cdr encoded-message)) (car letter))))\n                    (cdr vowels))))\n    (car encoded-message)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tH",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-upcase (string-substring (string-downcase v) (string-index-of v \"a\") 2))) encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n",
    "  (let* ([encoded (map-char (string-map (lambda (c) (string-upcase (string-downcase c))) message))])\n    (string-append \" \" (string-join \" \" encoded)))\n)\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((encoded-vowel (string-ref encoded-message vowel-index)))\n                  (let ((next-encoded-vowel (string-ref encoded-message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-encoded-vowel-index (string-index-of vowels next-encoded-vowel)))\n                      (let ((next-encoded-vowel (string-ref encoded-message next-encoded-vowel-index)))\n                        (let ((encoded-vowel (string-ref encoded-message vowel-index)))\n                          (let ((next-encoded-vowel (string-ref encoded-message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-encoded-vowel-index (string-index-of vowels next-encoded-vowel)))\n                              (let ((next-encoded-vowel (string-ref encoded-message next-encoded-vowel-index)))\n                                (let ((encoded-vowel (string-ref encoded-message vowel-index)))\n                                  (let ((next-encoded-vowel (string-ref encoded-message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-encoded-vowel-index (string-index-of vowels next-encoded-vowel)))\n                                      (let ((next-encoded-vowel (string-ref encoded-message next-encoded-vowel-index)))\n",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-map (lambda (v) (string-upcase (string-substring (string-downcase v) (string-index-of v \"aeiou\") 2))) encoded)))\n)\n\n;; Read a message and decode it.\n;; Assume only letters.\n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"TEST\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref next-vowel-index)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref next-vowel-index)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref next-vowel-index)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref next-vowel-index)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref next-vowel-index)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref next-vowel-index)))\n                                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                          (let ((next-vowel (string-ref next-vowel-index)))\n                                            (let ((next-vowel-index (string-index-of vowels next-vow",
    "  (let ((encoded (mapcar (lambda (c) (string-upcase (string-downcase c)))))\n         (vowels \"aeiou\"))\n    (mapconcat (lambda (c) (string-swap-case c vowels)) message)))\n",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (let ((vowels (string-split \"aeiou\")))\n      (let ((vowel-indexes (map (lambda (v) (string-index (string-join \"\") v 2))))\n            (vowel-indexes-set! (vowel-indexes)))\n        (let ((vowel-indexes-set!-result (string-join \"\" (map (lambda (i) (string-join \"\" (string-map (lambda (v) (string-ref i v)) (vowel-indexes-set! vowel-indexes)))) vowel-indexes-set!))))\n          (string-join \"\") (string-join-ci encoded-message vowel-indexes-set!-result)))))))\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message next-vowel-index)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message next-vowel-index)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message next-vowel-index)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message next-vowel-index)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message next-vowel-index)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message next-vowel-index)))\n                                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                          (let ((next-vowel (string-ref message next-vowel-index)))\n                                            (let ((next-vowel-index (string-index",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                        (let ((next-vowel-index (string-index-",
    "  (let ((encoded-message (string-map (lambda (letter) (string-append (string-upcase (string-downcase letter)) (string-upcase (string-downcase (substring message 1 2)))) (substring message 1 2))))\n         (vowels \"aeiou\"))\n    (string-replace (string-replace encoded-message vowels) vowels \"\")\n    encoded-message))\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-downcase (string-substring encoded 2)))))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message)))\n    (string-append (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)) encoded-message)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel #\\a) (string-map-char #\\vowel (string-map-char #\\a #\\vowel))))\n  )\n)\n",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (let ((vowels (string-split \"aeiou\" \"\")))\n      (let ((vowel-index (lambda (v) (string-index (string-join \"\") v) 2)))\n        (let ((vowel-char (lambda (v) (string-ref (string-join \"\") vowel-index v))))\n          (string-replace encoded-message vowel-char (string-join \"\") (string-join \"\")))))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TSTG\"\n;; >>> (encode \"TESTING\")\n;; \"TST",
    "  (let* ([encoded (map-char (string-map-char #\\lower #\\upper) message))]\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel encoded)) encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"this is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this is a messagE\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"this",
    "  (let ((encoded (map-char (lambda (c) (if (char=c #\\\\a #\\\\e #\\\\i #\\\\o #\\\\u)\n                                            (char-upcase c)\n                                            (char-downcase c))))\n         (string-map encoded message)))\n    (string->symbol encoded)))\n",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append (string-split/lines encoded) \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;;",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel #\\a) (string-map-char #\\vowel (string-map-char #\\a #\\vowel))))\n  encoded-message)\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>>",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref (string-split-at-char vowel) 2)))) message)))\n    (string-join \" \" (string-split-at-char \" \" encoded-message))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowels (list 'a 'e 'i 'o 'u)))\n        (let ((vowel (car vowels)))\n          (let ((vowel-pos (cdr vowels)))\n            (let ((vowel-pos-2 (cdr vowel-pos)))\n              (let ((vowel-pos-3 (cdr vowel-pos-2)))\n                (let ((vowel-pos-4 (cdr vowel-pos-3)))\n                  (let ((vowel-pos-5 (cdr vowel-pos-4)))\n                    (let ((vowel-pos-6 (cdr vowel-pos-5)))\n                      (let ((vowel-pos-7 (cdr vowel-pos-6)))\n                        (let ((vowel-pos-8 (cdr vowel-pos-7)))\n                          (let ((vowel-pos-9 (cdr vowel-pos-8)))\n                            (let ((vowel-pos-10 (cdr vowel-pos-9)))\n                              (let ((vowel-pos-11 (cdr vowel-pos-10)))\n                                (let ((vowel-pos-12 (cdr vowel-pos-11)))\n                                  (let ((vowel-pos-13 (cdr vowel-pos-12)))\n                                    (let ((vowel-pos-14 (cdr vowel-pos-13)))\n                                      (let ((vowel-pos-15 (cdr vowel-pos-14)))\n                                        (let ((vowel-pos-16 (cdr vowel-pos-15)))\n                                          (let ((vowel-pos-17 (cdr vowel-pos-16)))\n                                            (let ((vowel-pos-18 (cdr vowel-pos-17)))\n                                              (let ((vowel-pos-19 (cdr vowel-pos-18)))\n                                                (let ((vowel-pos-20 (cdr vowel-pos-19)))\n                                                  (let ((vowel-pos-21 (cdr vowel-pos-20)))",
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap encoded-message)))))))\n",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-map (lambda (v) (string-upcase (string-substring v 2))) encoded)))\n)\n\n;; Decode a message.\n;; Assume only letters.\n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (letter) (string-append (string-upcase (string-ref message letter)) (string-ref message (string-index-of letter \"aeiou\") + 2)))) message)))\n  (string-append (string-map (lambda (letter) (string-ref message letter)) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") encoded-message))\n\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                        (let ((next-vowel-index (string-index-",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\lower #\\upper) encoded-message)) encoded-message)))\n\n;; Decode the message.\n;; Assume only letters.\n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((i (1)))\n        (while (< i (length message))\n          (let ((c (aref message i)))\n            (if (member vowels c)\n              (setf (aref encoded-message i) (aref encoded-message (2+ i v)))\n              (setf (aref encoded-message i) (aref encoded-message i)))))\n        (setf i (1+ i)))\n      (string)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING123\")\n;; \"TGSTING123\"\n;; >>> (encode \"TESTING123abc\")\n;; \"TGSTING123abc\"\n;; >>> (encode \"TESTING123abcdef\")\n;; \"TGSTING123abcdef\"\n;; >>> (encode \"TESTING123abcdefg\")\n;; \"TGSTING123abcdefg\"\n;; >>> (encode \"TESTING123abcdefgh\")\n;; \"TGSTING123abcdefgh\"\n;; >>> (encode \"TESTING123abcdefghi\")\n;; \"TGSTING123abcdefghi\"\n;; >>> (encode \"TESTING123abcdefghij\")\n;; \"TGSTING123abcdefghij\"\n;; >>> (encode \"TESTING123abcdefghijk\")\n;; \"TGSTING123abcdefghijk\"\n;; >>> (encode \"TESTING123abcdefghijkl\")\n;; \"TGSTING123abcdefghijkl\"\n;; >>> (encode \"TESTING123abcdefghijklm\")\n;; \"TGSTING123abcdefghijklm\"\n;; >>> (encode \"TESTING123abcdefghijklmn\")\n;; \"TGSTING123abcdefghijklmn\"\n;; >>> (encode \"TESTING123abcdef",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message))))\n    (string-append (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)) encoded-message)))\n\n;; Decode a message.",
    "  (let ((encoded-message (string-map-char (string-map-char #\\a #\\A #\\e #\\E #\\i #\\I #\\o #\\O #\\u #\\U)\n                                          (string-map-char #\\b #\\B #\\c #\\C #\\d #\\D #\\f #\\F #\\g #\\G #\\h #\\H #\\j #\\J #\\k #\\K #\\l #\\L #\\m #\\M #\\n #\\N #\\p #\\P #\\r #\\R #\\s #\\S #\\t #\\T #\\v #\\V #\\w #\\W #\\x #\\X #\\y #\\Y #\\z #\\Z)\n                                          message))))\n  (string-append (string-map-char #\\A #\\a)\n         (string-map-char #\\B #\\b)\n         (string-map-char #\\C #\\c)\n         (string-map-char #\\D #\\d)\n         (string-map-char #\\E #\\e)\n         (string-map-char #\\F #\\f)\n         (string-map-char #\\G #\\g)\n         (string-map-char #\\H #\\h)\n         (string-map-char #\\I #\\i)\n         (string-map-char #\\J #\\j)\n         (string-map-char #\\K #\\k)\n         (string-map-char #\\L #\\l)\n         (string-map-char #\\M #\\m)\n         (string-map-char #\\N #\\n)\n         (string-map-char #\\O #\\o)\n         (string-map-char #\\P #\\p)\n         (string-map-char #\\Q #\\q)\n         (string-map-char #\\R #\\r)\n         (string-map-char #\\S #\\s)\n         (string-map-char #\\T #\\t)\n         (string-map-char #\\U #\\u)\n         (",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou')))\n    (let ((vowels-indexes (mapcar (lambda (v) (string-index (string v) 0)) vowels)))\n      (let ((vowels-indexes-rev (reverse vowels-indexes)))\n        (let ((vowels-indexes-rev-indexes (mapcar (lambda (v) (string-index (string v) 0)) vowels-indexes-rev)))\n          (let ((encoded-message-rev (reverse encoded-message)))\n            (let ((encoded-message-rev-indexes (mapcar (lambda (v) (string-index (string v) 0)) encoded-message-rev)))\n              (let ((encoded-message-rev-indexes-rev (reverse encoded-message-rev-indexes)))\n                (let ((encoded-message-rev-indexes-rev-indexes (mapcar (lambda (v) (string-index (string v) 0)) encoded-message-rev-indexes-rev)))\n                  (let ((encoded-message-rev-indexes-rev-indexes-rev (reverse encoded-message-rev-indexes-rev-indexes)))\n                    (let ((encoded-message-rev-indexes-rev-indexes-rev-indexes (mapcar (lambda (v) (string-index (string v) 0)) encoded-message-rev-indexes-rev-indexes-rev)))\n                      (let ((encoded-message-rev-indexes-rev-indexes-rev-indexes-rev (reverse encoded-message-rev-indexes-rev-indexes-rev-indexes)))\n                        (let ((encoded-message-rev-indexes-rev-indexes-rev-indexes-rev-indexes (mapcar (lambda (v) (string-index (string v) 0)) encoded-message-rev-indexes-rev-indexes-rev-indexes-rev)))\n                          (let ((encoded-message-rev-indexes-rev-indexes-rev-indexes-rev-indexes-rev-indexes (reverse encoded-message-rev-indexes-rev-indexes-rev-",
    "  (let ((encoded (make-string (string-length message) #\\space)))\n    (let ((i 0))\n      (while (< i (string-length message))\n        (let ((c (string-ref message i)))\n          (if (string-ci=? c #\"AEIOU\")\n            (let ((vowel (string-ci=? c #\"AEIOU\")))\n              (string-set! encoded i (string-ci=? (string-ref encoded i) c)\n                                     (string-set! encoded i (string-ci=? c vowel)\n                                                         (string-ci=? vowel c))))\n            (string-set! encoded i c)))\n        (set! i (i + 1))))\n    (string->list encoded)))\n\n;; Decode a message that was encoded with encode.\n;; Assume only letters.\n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"aeiou\" \"AEIOU\")))\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (let ((i (1)))\n        (while (< i (length message))\n          (let ((c (char-at message i)))\n            (if (member c vowels)\n              (let ((v (char-at message (1+ i) )))\n                (set-char-at encoded-message i c v))\n              (set-char-at encoded-message i c c))\n            (set-char-at encoded-message i c c))\n          (set-char-at encoded-message i #\\space))\n        (append encoded-message message)))\n    encoded-message))\n\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (map-char (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) message)))\n    (string-append (map-char (lambda (c) (if (char=c #\\\\a) #\\\\2 #\\\\c)) message) encoded)))\n\n;; >>> (decode \"TGST\")\n;; \"TEST\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded-message \"AEIOU\" \"AEIOUY\")))\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((next-vowel-index (string-index-of vowels (string-substring message (string-index-of vowels message) (string-index-of vowels message) 2))))\n          (let ((letter (string-substring message (string-index-of vowels message) (string-index-of vowels message) 1)))\n            (let ((next-letter (string-substring message (string-index-of vowels next-vowel-index) (string-index-of vowels next-vowel-index) 1)))\n              (let ((swapped-letter (string-substring (string-replace/all letter \"\") \"\"))))\n                (string-replace/all encoded-message swapped-letter next-letter))))))))))\n",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowel (string)))\n        (let ((next-vowel (string)))\n          (let ((next-letter (string)))\n            (let ((i (integer)))\n              (let ((j (integer)))\n                (let ((k (integer)))\n                  (let ((l (integer)))\n                    (let ((m (integer)))\n                      (let ((n (integer)))\n                        (let ((o (integer)))\n                          (let ((p (integer)))\n                            (let ((q (integer)))\n                              (let ((r (integer)))\n                                (let ((s (integer)))\n                                  (let ((t (integer)))\n                                    (let ((u (integer)))\n                                      (let ((v (integer)))\n                                        (let ((w (integer)))\n                                          (let ((x (integer)))\n                                            (let ((y (integer)))\n                                              (let ((z (integer)))\n                                                (let ((a (integer)))\n                                                  (let ((b (integer)))\n                                                    (let ((c (integer)))\n                                                      (let ((d (integer)))\n                                                        (let ((e (integer)))\n                                                          (let ((f (integer)))\n                                                            (let ((g (integer)))\n                                                              (let ((h (integer)))\n                                                                (let ((i (integer)))\n                                                                  (let ((j (integer)))\n                                                                    (let ((k (integer)))\n                                                                      (let ((l (integer)))\n                                                                        (let ((m (integer)))\n                                                                          (let ((n (integer)))\n                                                                            (let ((o (integer)))\n                                                                              (let ((p (integer)))\n                                                                                (let ((q (integer)))\n                                                                                  (let ((r (integer)))\n                                                                                    (let ((s (integer)))\n                                                                                      (let ((t (integer)))\n                                                                                        (let ((u (integer)))",
    "  (let ((encoded-message (string)))\n    (let ((vowels 'aeiou'))\n      (let ((vowel-index (string-index-of vowels encoded-message)))\n        (let ((vowel (string-ref encoded-message vowel-index)))\n          (let ((next-vowel (string-ref encoded-message (string-index-of vowels encoded-message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref encoded-message next-vowel-index)))\n                                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                          (let ((next-vowel (string-ref encoded-message next-",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOUAEIOU\")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is",
    "  (let ((encoded-message (string-map (lambda (char)\n    (if (char=? char #\"a\" #\"A\")\n      (char #\"T\")\n      (char #\"t\")))\n    message)))\n    (string-append (map char encoded-message) \" \")))\n",
    "  (let ((encoded (make-string (length message) #\\space)))\n    (let ((i (0)))\n      (while (< i (length message))\n        (let ((c (aref message i)))\n          (setq encoded (concat (char-upcase c) (aref encoded i) \n                                   (char-downcase c) (aref encoded (i + 2))))\n          (setq i (i + 1)))\n        )\n      )\n    (encoded)\n    )\n  )\n)\n",
    "  (let* ([encoded (map-char (string-map (lambda (c) (string-upcase (string-downcase c))) message))])\n    (string-append (string-join \"\", encoded) \" \")))\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (for-each (lambda (letter)\n                 (if (member? letter vowels)\n                     (string-set! encoded-message (string-insert encoded-message (string-insert letter (string-index (string-to-list message) letter 2))))\n                     (string-set! encoded-message (string-insert encoded-message letter))))\n             message)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (en",
    "  (let ((encoded (make-string (length message) #\\space)))\n    (let ((i 0))\n      (while (< i (length message))\n        (let ((c (char-code (string-ref message i))))\n          (if (char-alphabetic? c)\n              (let ((vowel (char-vowel? c)))\n                (let ((vowel-pos (string-index (string-copy message) vowel)))\n                  (string-set! encoded i (+ (char-code (string-ref encoded vowel-pos)) (char-code (string-ref encoded (string-add vowel-pos (string-subtract i 1)))))))\n                (string-set! encoded i (+ (char-code (string-ref encoded (string-add i 1))) (char-code (string-ref encoded (string-add i 2))))))\n              (string-set! encoded i (+ (char-code (string-ref encoded i)) (char-code (string-ref encoded (string-add i 1))))))\n          (set! i (string-add i 1)))\n        (string-set! encoded i (char-code (string-ref message i))))\n    encoded))\n\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char (lambda (char) (char (string->char (string-upcase (string-downcase (letter))) 2))) (string->char (string-upcase (string-downcase (char)))) 2))) message)))\n  (string->list encoded-message)))\n\n;; Decode a message. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\lower #\\upper) encoded-message))\n      (string-map-char #\\vowel (string-map-char #\\vowel encoded-message))))\n)\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref message next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel) + 1)))\n                                        (let ((next-vowel-index (string-index-",
    "  (let ((encoded-message (string)))\n    (let ((letter (string)))\n      (let ((vowel (string)))\n        (let ((next-vowel (string)))\n          (let ((next-letter (string)))\n            (let ((i (integer)))\n              (let ((j (integer)))\n                (let ((k (integer)))\n                  (let ((l (integer)))\n                    (let ((m (integer)))\n                      (let ((n (integer)))\n                        (let ((o (integer)))\n                          (let ((p (integer)))\n                            (let ((q (integer)))\n                              (let ((r (integer)))\n                                (let ((s (integer)))\n                                  (let ((t (integer)))\n                                    (let ((u (integer)))\n                                      (let ((v (integer)))\n                                        (let ((w (integer)))\n                                          (let ((x (integer)))\n                                            (let ((y (integer)))\n                                              (let ((z (integer)))\n                                                (let ((a (integer)))\n                                                  (let ((b (integer)))\n                                                    (let ((c (integer)))\n                                                      (let ((d (integer)))\n                                                        (let ((e (integer)))\n                                                          (let ((f (integer)))\n                                                            (let ((g (integer)))\n                                                              (let ((h (integer)))\n                                                                (let ((i (integer)))\n                                                                  (let ((j (integer)))\n                                                                    (let ((k (integer)))\n                                                                      (let ((l (integer)))\n                                                                        (let ((m (integer)))\n                                                                          (let ((n (integer)))\n                                                                            (let ((o (integer)))\n                                                                              (let ((p (integer)))\n                                                                                (let ((q (integer)))\n                                                                                  (let ((r (integer)))\n                                                                                    (let ((s (integer)))\n                                                                                      (let ((t (integer)))\n                                                                                        (let ((u (integer)))",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lowercase #\\uppercase) message))))\n    (string-append (string-map-char #\\vowels (string-map-char #\\vowels encoded-message)) encoded-message)))\n",
    "  (let ((encoded (mapcar (lambda (x) (string-upcase x)) message)))\n    (let ((vowels (list \"aeiou\")))\n      (let ((vowel-positions (mapcar (lambda (v) \n                                      (string-index (string-downcase v) \n                                       \"aeiou\") 2))))\n        (let ((vowel-positions-2 (mapcar (lambda (v) \n                                          (string-index (string-downcase v) \n                                           \"aeiou\") 1))))\n          (let ((vowel-positions-3 (mapcar (lambda (v) \n                                           (string-index (string-downcase v) \n                                           \"aeiou\") 3))))\n            (let ((vowel-positions-4 (mapcar (lambda (v) \n                                             (string-index (string-downcase v) \n                                             \"aeiou\") 4))))\n              (let ((vowel-positions-5 (mapcar (lambda (v) \n                                               (string-index (string-downcase v) \n                                               \"aeiou\") 5))))\n                (let ((vowel-positions-6 (mapcar (lambda (v) \n                                                 (string-index (string-downcase v) \n                                                 \"aeiou\") 6))))\n                  (let ((vowel-positions-7 (mapcar (lambda (v) \n                                                   (string-index (string-downcase v) \n                                                   \"aeiou\") 7))))\n                    (let ((vowel-positions-8 (mapcar (lambda (v) \n                                                     (string-index (string-downcase v) \n                                                     \"aeiou\") 8))))\n                      (let ((vowel-positions-9 (mapcar (lambda (v) \n                                                      (string-index (string-downcase v) \n                                                      \"aeiou\") 9))))\n                        (let",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-ref encoded-message v)) \"aeiou\")))))\n",
    "  (let* ([encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)])\n    (string->list encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG\"\n;; >>> (encode \"TESTING\")\n;; \"TESTG",
    "  (let ((encoded-message (string-map (lambda (c) (string-ci-swap c)) message)))\n    (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-swap (string-ci-sw",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (let ((vowels (string-split \"aeiou\")))\n      (let ((vowel-index (string-index vowels encoded-message)))\n        (let ((vowel (string-ref encoded-message vowel-index))\n              (next-vowel (string-ref encoded-message (string-add vowel-index 2))))\n          (string-set! encoded-message vowel)\n          (string-set! encoded-message next-vowel))))))\n\n;; Decode a message. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref (string-split-at-char vowel) 2)))) message)))\n    (string-join-as-list encoded-message \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TEST",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-join \" \" (map (lambda (v) (string-substring (string-upcase (string-downcase (string-substring v 2))) v)) encoded))))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"",
    "  (let ((encoded (string-map (lambda (c) (string-upcase c)) message)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 2)))\n    (string-replace/all encoded \"aeiou\" \"AEIOU\" (string-upcase (string-substring encoded 1)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 3)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 4)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 5)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 6)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 7)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 8)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 9)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 10)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 11)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 12)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 13)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 14)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\" (string-upcase (string-substring encoded 15)))\n    (string-replace/all",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOUAEIOU\")))\n",
    "  (let ((encoded-message (string-map (lambda (letter)\n    (string-map (lambda (vowel)\n      (string-map (lambda (other-vowel)\n        (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (",
    "  (let ((encoded-message (string-map-char (string-map-char #\\a #\\A #\\e #\\E #\\i #\\I #\\o #\\O #\\u #\\U)\n                                          (string-map-char #\\b #\\B #\\d #\\D #\\f #\\F #\\n #\\N #\\r #\\R #\\s #\\S #\\t #\\T #\\v #\\V)\n                                          (string-map-char #\\x #\\X)\n                                          (string-map-char #\\y #\\Y)\n                                          (string-map-char #\\z #\\Z))))\n    (string-append (string-map (lambda (char) (string-ref encoded-message char)) message)\n                                      (string-map (lambda (char) (string-ref encoded-message char))\n                                          (string-map-char #\\a #\\A #\\e #\\E #\\i #\\I #\\o #\\O #\\u #\\U)))\n  ))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"This is a test\")",
    "  (let ((encoded-message (string-map (lambda (letter) (string-map-char letter (lambda (vowel) (string-ref (string-split-at-char vowel) 2)))) message)))\n    (string-join-as-list encoded-message \" \")))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TESTING\")\n;; \"TESTING\"\n;; >>> (encode \"TEST",
    "  (let* ([encoded (map-char (string-map (lambda (c) (string-upcase c)) message))])\n    (string-fold (lambda (acc acc) (string-append acc (string-downcase acc))) encoded)))\n\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n;; >>> (encode \"Test\")\n;; \"TGST\"\n;; >>> (encode \"TEST\")\n;; \"TGST\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>> (encode \"TESTING\")\n;; \"TGSTING\"\n;; >>>",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-map (lambda (v) (string-substring (string-upcase v) (string-index-of v \"AEIOU\") 2)) encoded-message)))\n)\n",
    "  (let ((encoded-message (string-map (lambda (c) (string-upcase c)) message)))\n    (let ((vowels (string-split \"aeiou\")))\n      (let ((vowel-position (string-index-of vowels encoded-message)))\n        (let ((vowel (string-ref encoded-message vowel-position)))\n          (let ((next-vowel (string-ref encoded-message (string-add 1 vowel-position))))\n            (let ((next-vowel-position (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref encoded-message next-vowel-position)))\n                (let ((next-vowel-position (string-add 1 next-vowel-position)))\n                  (let ((next-vowel (string-ref encoded-message next-vowel-position)))\n                    (let ((next-vowel-position (string-add 1 next-vowel-position)))\n                      (let ((next-vowel (string-ref encoded-message next-vowel-position)))\n                        (let ((next-vowel-position (string-add 1 next-vowel-position)))\n                          (let ((next-vowel (string-ref encoded-message next-vowel-position)))\n                            (let ((next-vowel-position (string-add 1 next-vowel-position)))\n                              (let ((next-vowel (string-ref encoded-message next-vowel-position)))\n                                (let ((next-vowel-position (string-add 1 next-vowel-position)))\n                                  (let ((next-vowel (string-ref encoded-message next-vowel-position)))\n                                    (let ((next-vowel-position (string-add 1 next-vowel-position)))\n                                      (let ((next-vowel (string-ref encoded-message next-vowel-position)))\n                                        (let ((next-vowel-position (string-add 1 next-vowel-position)))\n                                          (let ((next-vowel (string-",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((i (1)))\n        (while (< i (length message))\n          (let ((c (aref message i)))\n            (if (member c vowels)\n              (let ((vowel (aref vowels (string-index c 2))))\n                (setf (aref encoded-message vowel) (aref encoded-message (string-index c 2)))\n                (setf (aref encoded-message i) (aref encoded-message (string-index c 1)))\n                (setf (aref encoded-message (string-index c 1)) (aref encoded-message (string-index c 2)))\n                (setf (aref encoded-message (string-index c 2)) (aref encoded-message (string-index c 1)))\n                (setf (aref encoded-message (string-index c 1)) (aref encoded-message (string-index c 2)))\n                (setf (aref encoded-message (string-index c 2)) (aref encoded-message (string-index c 1)))\n                (setf (aref encoded-message (string-index c 1)) (aref encoded-message (string-index c 2)))\n                (setf (aref encoded-message (string-index c 2)) (aref encoded-message (string-index c 1)))\n                (setf (aref encoded-message (string-index c 1)) (aref encoded-message (string-index c 2)))\n                (setf (aref encoded-message (string-index c 2)) (aref encoded-message (string-index c 1)))\n                (setf (aref encoded-message (string-index c 1)) (aref encoded-message (string-index c 2)))\n                (setf (aref encoded-message (string-index c 2)) (aref encoded-message (string-index c 1)))\n                (setf (aref encoded-message (string-index c 1)) (aref encoded-message (string-index c 2)))\n                (setf (aref encoded-message (string-index c 2)) (aref encoded-message (string-index c 1)))\n                (",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel encoded-message))) encoded-message)))\n\n;; Decode a message.\n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded-message (string-map-char (string-map-char #\\lower #\\upper) message)))\n    (string-append (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map-char #\\vowel (string-map",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((letter (string)))\n        (cond\n          [(string-ci-equal? letter vowels)\n            (let ((index (string-ci-search/ignore vowels letter 2)))\n              (string-set! encoded-message\n                (string-insert/dup encoded-message index 2)\n                (string-insert/dup encoded-message index 1)\n                (string-delete encoded-message index)))\n            (else\n              (string-append encoded-message letter)))\n          [else\n            (string-append encoded-message letter)])\n      (string-append encoded-message \" \"))\n    encoded-message)\n)\n\n;; Write a function that takes a message, and decodes it. \n;; Assume only letters. \n;; Examples:\n;; >>> (decode \"TGST\")\n;; \"test\"\n;; >>> (decode \"tHKS KS C MGSSCGG\")\n;; \"This is a message\"",
    "  (let ((encoded (make-string (string-length message) #\\space)))\n    (let ((i 0))\n      (while (< i (string-length message))\n        (let ((c (string-ref message i)))\n          (if (string-ci=? c #\"a\" #\"A\")\n            (let ((vowel (string-ci=? c #\"a\" #\"e\" #\"i\" #\"o\" #\"u\")))\n              (let ((vowel-index (string-index-of c vowels)))\n                (string-set! encoded i (+ (vowel-index 2) vowel-index)))\n              (string-set! encoded i (+ (string-length encoded) 1)))\n            (string-set! encoded i (+ (string-length encoded) 1)))\n          (else\n            (string-set! encoded i (+ (string-length encoded) 1)))\n          (incf i)))))\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string-set! encoded (string-length encoded) #\\space)\n  (string-set! encoded 0 #\\space)\n  (string",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-replace/all encoded \"AEIOU\" \"AEIOU\")))\n",
    "  (let ((encoded-message (string)))\n    (let ((vowels \"aeiou\"))\n      (let ((vowel-index (string-index-of vowels message)))\n        (let ((vowel (string-ref message vowel-index)))\n          (let ((next-vowel (string-ref message (string-index-of vowels message) + 1)))\n            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n              (let ((next-vowel (string-ref next-vowel-index)))\n                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                        (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                          (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                            (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                              (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                  (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                    (let ((next-vowel-index (string-index-of vowels next-vowel)))\n                                      (let ((next-vowel (string-ref message (string-index-of vowels next-vowel-index) + 1)))\n                                        (let ((next",
    "  (let ((encoded (string-map (lambda (c) (string-upcase (string-downcase c))) message)))\n    (string-append \" \" (string-map (lambda (v) (string-upcase (string-substring (string-upcase v) (string-index-of v \"AEIOU\") 2))) encoded)))\n)\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}