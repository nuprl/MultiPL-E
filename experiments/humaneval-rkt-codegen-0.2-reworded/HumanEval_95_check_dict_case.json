{
  "name": "HumanEval_95_check_dict_case",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"))) #t)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\"))) #f)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f)\n    (check-equal? (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"))) #f)\n    (check-equal? (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\"))) #t)\n    (check-equal? (candidate #hash((\"fruit\" .  \"Orange\") (\"taste\" .  \"Sweet\"))) #t)\n    (check-equal? (candidate #hash()) #f)\n))\n\n(test-humaneval)",
  "completions": [
    "  (let* ((keys (keys-set dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->lower-case key))\n             (upper-case-key (string->upper-case key)))\n        (if (string=? lower-case-key upper-case-key)\n          #t\n          #f))))\n",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n             (cond\n               [(string? k)\n                 (string? v)\n                 (eqv? (string-upcase k) (string-upcase v))]\n               [else\n                 #f]))\n       dict)]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->key key))\n              (upper-case-key (string->key/case key)))\n        (if (string=? lower-case-key upper-case-key)\n          #t\n          #f)))\n    #f)))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->key key))\n              (upper-case-key (string->key/case key)))\n        (if (string=? lower-case-key upper-case-key)\n          #t\n          #f)))\n    #f)))\n",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n\t     (cond\n\t       [(string? k)\n\t\t (string? v)\n\t\t  (equal? (string->symbol k) (string->symbol v))\n\t\t  (equal? (string->symbol k) (string->symbol (string->symbol v)))\n\t\t  (equal? (string->symbol k) (string->symbol (string->symbol (string->symbol v))))\n\t\t  (equal? (string->symbol k) (string->symbol (string->symbol (string->symbol (string->symbol v)))))]\n\t       [(equal? k v)\n\t\t (equal? k (string->symbol v))\n\t\t  (equal? k (string->symbol (string->symbol v)))\n\t\t  (equal? k (string->symbol (string->symbol (string->symbol v))))\n\t\t  (equal? k (string->symbol (string->symbol (string->symbol (string->symbol v)))))]\n\t       [(equal? k (string->symbol v))\n\t\t (equal? k (string->symbol (string->symbol v)))\n\t\t  (equal? k (string->symbol (string->symbol (string->symbol v))))\n\t\t  (equal? k (string->symbol (string->symbol (string->symbol (string->symbol v)))))]\n\t       [(equal? k (string->symbol (string->symbol v)))\n\t\t (equal? k (string->symbol (string->symbol (string->symbol (string->symbol v)))))]\n\t       [(equal? k (string->symbol (string->symbol (string->symbol (string->symbol v)))))]\n\t       [(equal? k (string->symbol (string->symbol (string->symbol (string->symbol (string->symbol v)))))]\n\t       [(equal? k (string->symbol (string->symbol (string->symbol (string->symbol (string->symbol (string->symbol v))))))))]\n\t     [(equal? k (string->symbol (string->symbol",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-upcase (first (cdr dict)))))))\n    [else\n      #f]))\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all keys-are-strings? key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all keys-are-strings? key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower (string->symbol key))\n             (upper (string->symbol (string-upcase key))))\n        (if (string=? lower upper)\n          #t\n          #f)))\n    #f)))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (true)]\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (false)]\n    [(false)\n      (true)]\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? dict/:key)\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(not (empty? dict))\n      (false)]\n    [(true)\n      (true)]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n             (cond\n               [(string? k)\n                 (string? v)\n                 (eqv? (string->symbol k) (string->symbol v))\n                 #t]\n               [#f]))\n       dict)\n     ]\n    [#f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v)\n                  (and (string? k) (string? v)))\n        dict)\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (for-each (lambda (k v)\n                  (and (string? k) (string? v)))\n        dict)\n      (return #f)\n    ]\n    [else (error \"check_dict_case: invalid argument\")]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((lower-keys (map (lambda (k) (string->lowercase k))) keys))\n        (all keys-of lower-keys))))\n  dict)\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (false)]\n    ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->lower-case key)))\n            (if (string=? lower-case-key key)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all keys-in-lower-case? key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all keys-in-upper-case? key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))))\n      (return #t)\n    ]\n    [(else)\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))]\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))]\n    [(not (empty? dict))\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      (return #f)\n    ]\n    [else (error \"Invalid argument\")]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((keys (keys-of dict)))\n        (if (empty? keys)\n          #t\n          (let ((keys (keys-of dict)))\n            (if (empty? keys)\n              #t\n              (let ((keys (keys-of dict)))\n                (if (empty? keys)\n                  #t\n                  #f\n                  (let ((keys (keys-of dict)))\n                    (if (empty? keys)\n                      #t\n                      #f\n                      #f
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? dict/:key)\n          (eqv? (string->lowercase key) (string->uppercase key)))))\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (if (string? key)\n            (let ((value (dict/:key)))\n              (if (string? value)\n                  #t\n                  #f)))\n          #f)\n      (else\n        #f))\n  dict)\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string->symbol key) (string->symbol (first (cdr dict)))))))\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (true)\n      ]\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (false)\n      ]\n    ))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (return #t)\n    ]\n    [(else)\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((key-lower (string->keyword key))\n             (key-upper (string->keyword (string-upcase key))))\n        (if (string=? key-lower key-upper)\n          #t\n          #f)))\n    #f)))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key)))))\n    [(hash? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      (false)])\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(not (null? dict))\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n    [false]))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-key (string->key lowercase key)))\n            (if (member? lower-key keys)\n              #t\n              #f))))))))\n",
    "  (cond\n    ((null? dict) #f)\n    (else\n      (let ((keys (keys-of dict)))\n        (let ((keys-lower (mapcar (lambda (k) (string->lowercase k))) keys))\n          (let ((keys-upper (mapcar (lambda (k) (string->uppercase k))) keys))\n            (and keys-lower keys-upper)))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->key lower key)))\n            (if (string? lower)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v)\n                  (string? k)\n                  (string? v))\n        dict)\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (for-each (lambda (k v)\n                  (string? k)\n                  (string? v))\n        dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))))\n      (return #t)\n    ]\n    [(else)\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n\t     (cond\n\t       [(string? k)\n\t\t (string? v)\n\t\t  (eqv? (string-upcase k) (string-upcase v))\n\t\t  (eqv? (string-downcase k) (string-downcase v))]\n\t       [else\n\t\t (eqv? (string-upcase k) (string-downcase v))])))\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (first keys)))\n    (let* ((key-lower (string->key key))\n           (key-upper (string->key (string-upcase key))))\n      (if (null? keys)\n          #f\n          (if (string=? key-lower key-upper)\n              #t\n              #f)))\n  ))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->symbol key)))\n            (if (string? lower)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (and (string? k) (string? v))) dict)\n      (return #t)]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (and (string? k) (string? v))) dict)\n      (return #f)]\n    [else (error \"check_dict_case: invalid argument\")]))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->key key))\n              (upper-case-key (string->key/case key)))\n        (if (eqv? lower-case-key upper-case-key)\n          #t\n          #f)))\n    #f)))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->key lowercase key)))\n            (if (memq lower keys)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (if (empty? dict)\n    #f\n    (let ((keys (keys-of dict)))\n      (let ((keys-lower (mapcar (lambda (k) (string->lowercase k))) keys))\n        (let ((keys-upper (mapcar (lambda (k) (string->uppercase k))) keys))\n          (if (string=? keys-lower keys-upper)\n            #t\n            #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))\n          (eqv? (lower-case key) (first key))\n          (eqv? (upper-case key) (second key))\n        )\n        return #t\n        (return #f))))\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v)\n                  (string? k)\n                  (string? v))\n        dict)\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (for-each (lambda (k v)\n                  (string? k)\n                  (string? v))\n        dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all keys-are-lower-case? key)\n      )\n      (let ((key (upper-case key)))\n        (all keys-are-upper-case? key)\n      )\n    ]\n    [(empty? dict) #f]\n  )\n)\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (if (string? key)\n            (if (string? dict/:value)\n                (eq key (lower-case dict/:value))\n                (eq key (upper-case dict/:value)))\n            (else #f)))]\n    [else #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->lower-case key)))\n            (if (string=? lower-case-key key)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      (return #t)\n    ]\n    [(else)\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n             (cond\n               [(string? k)\n                 (string? v)\n                 (eqv? (string-upcase k) (string-upcase v))\n                 #t]\n               [#f]))\n       dict)\n     ]\n    [#f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((key-lower (string->keyword key))\n             (key-upper (string->keyword (string-upcase key))))\n        (if (eqv? key-lower key-upper)\n          #t\n          #f))))))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->symbol key)))\n            (if (string? lower)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (and (string? k) (string? v))) dict)\n      #t]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (and (string? k) (string? v))) dict)\n      #f]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->lower-case key))\n             (upper-case-key (string->upper-case key)))\n        (if (string=? lower-case-key upper-case-key)\n          #t\n          #f)))\n    #f))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(not (string? dict))\n      (false)]\n    [true]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->lower-case key))\n             (upper-case-key (string->upper-case key)))\n        (and (string=? lower-case-key upper-case-key)\n             (eqv? lower-case-key upper-case-key))))\n    #t))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (mapcar (lambda (k v) (cond [(string? k) (string? v)] [(string? k) (string->upper-case k)]))\n\t      dict/:1)\n      (not (empty? dict/:1))]\n    [#f]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(hash? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (if (empty? dict)\n      #f\n      (let ((keys (keys-of dict)))\n        (let ((lower-keys (map (lambda (k)\n                                (string->symbol (string->lower-case k))))\n               (upper-keys (map (lambda (k)\n                                  (string->symbol (string->upper-case k))))))\n          (all-keys (and lower-keys upper-keys)))))))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->keyword key)))\n            (if (string=? lower-case-key (keyword->string lower-case-key))\n              #t\n              #f))))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(hash? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(else)\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-and-values dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->key key))\n              (upper-case-key (string->key/casify key)))\n        (if (eqv? lower-case-key upper-case-key)\n          #t\n          #f)))\n    #f))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->key key))\n              (upper-case-key (string->key/case key)))\n        (if (string=? lower-case-key upper-case-key)\n          #t\n          #f)))\n    #f)))\n",
    "  (cond\n    ((null? dict) #f)\n    (else\n      (let ((keys (keys-of dict)))\n        (let ((lower-keys (mapcar (lambda (k) (string->symbol k)) keys)))\n          (let ((upper-keys (mapcar (lambda (k) (string->symbol (string-upcase k))) keys)))\n            (and (string=? lower-keys keys) (string=? upper-keys keys)))))))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->symbol key)))\n            (if (string? lower)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? dict/:key)\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->lower-case key)))\n            (if (string=? lower-case-key keys)\n              #t\n              #f))))))))\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all key? key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all key? key))]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict)\n      (mapcar (lambda (k v)\n               (cond\n                 [(string? k)\n                   (string? v)\n                   (eqv? (string-upcase k) (string-upcase v))\n                   #t]\n                 [#f]))\n         dict)\n      #t]\n    [#f]))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->key key))\n              (upper-case-key (string->key/case key)))\n        (if (eqv? lower-case-key upper-case-key)\n          #t\n          #f))))))\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #t]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #f]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n             (cond\n               [(string? k)\n                 (string? v)\n                 (eqv? (string-upcase k) (string-upcase v))]\n               [else\n                 #f]))\n       dict)\n     ]\n    [else\n      #f]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (if (string? (cdr key))\n        (string-equal? (string-upcase key) (string-downcase key))\n        #t)\n      #f)))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      true]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (let ((keys (keys-of dict)))\n        (for-each (lambda (k)\n                    (cond\n                      [(string? k)\n                        (return #t)\n                      [else\n                        (return #f)]]))\n          keys))]\n    [else\n      (return #f)])\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(not (string? dict))\n      (false)]\n    (true)))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string->symbol key) (string->symbol (first (cdr dict)))))))\n    [else\n      #f]))\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all keys-are-lower-case? key)\n        (or (string? dict/:key)\n            (string? dict/:key)))\n      (not (empty? dict))]\n    [#f]))\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (if (string? key)\n            (return #t)\n            (return #f)))\n      (return #f)\n    ]\n    [(hash-map? dict)\n      (let ((keys (hash-keys dict)))\n        (let ((keys (map (lambda (k) (lower-case k))))\n              (result (map (lambda (k) (if (string? k) (return #t) (return #f))))\n                keys)))\n        (return result)))\n    (else (return #f)))\n)\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all (map (lambda (k) (string? k)) (keys-of dict)) key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all (map (lambda (k) (string? k)) (keys-of dict)) key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (if (string? (cdr key))\n        (string-equal? (string->lowercase key) (string->uppercase key))\n        #t)\n      #f)))\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all (map (lambda (k) (string? k)) (keys-and-values dict)) key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all (map (lambda (k) (string? k)) (keys-and-values dict)) key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->symbol key)))\n            (if (string? lower)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (true)\n    ]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (false)\n    ]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all (map (lambda (k) (string? k)) (keys-of dict)) key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all (map (lambda (k) (string? k)) (keys-of dict)) key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key)))))\n    [else\n      (false)])\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->lower-case key)))\n            (if (string=? lower-case-key key)\n              #t\n              #f)))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n    [false]))\n",
    "  (let* ((keys (keys-of dict))\n         (len (length keys)))\n    (if (empty? keys)\n      #f\n      (if (all-of keys\n           (string?\n            (map (lambda (k) (string-upcase k)) keys)))\n        #t\n        #f)))\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    (else\n      (return #f))\n  )\n)\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->keyword key)))\n            (if (string? lower-case-key)\n              #t\n              #f))\n          #f))))))\n",
    "  (let* ((keys (keys-of dict))\n         (len (length keys))\n         (key (car keys)))\n    (if (null? key)\n      (return #f)\n      (if (string? key)\n        (if (string? (cdr key))\n          (return #t)\n          (return #f))\n        (return #f)))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (string->symbol key)))))\n    [(hash? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (string->symbol key))))\n      (false)])\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    ((null? dict) #f)\n    (string? (first dict))\n    (string? (second dict))\n    (else #t)\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (string? key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (string? key))]\n    [(not (string? dict/:key))\n      (false)]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(not (empty? dict))\n      (false)]\n    [true\n      true]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(hash-map? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [#f\n      (error \"check_dict_case: invalid argument\")]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all (map (lambda (k) (string? k)) (keys-of dict)) key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all (map (lambda (k) (string? k)) (keys-of dict)) key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (len (length keys)))\n    (if (not (empty? keys))\n      (if (all-of keys\n            (string?\n              (first keys)))\n        (return #t)\n        (return #f))))\n  nil)\n",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all keys-in-lower-case? key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all keys-in-upper-case? key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (let ((keys (keys-set dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-key (string->key key)))\n            (if (string? lower-key)\n              #t\n              #f\n              (let ((upper-key (string->key lower-key)))\n                (if (string? upper-key)\n                  #t\n                  #f\n                  #f))))))))))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->key lower-case key)))\n            (if (string? lower-case-key)\n              #t\n              #f))\n          #f))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (false)]))\n",
    "  (let* ((keys (keys-and-values dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower (string->lower key))\n              (upper (string->upper key)))\n        (if (string=? lower upper)\n          #t\n          #f)))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(not (empty? dict))\n      (false)]\n    [(true)\n      (true)]\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      true]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? dict/:key)\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    (else\n      (return #f))\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (string->symbol key))))\n      (not (empty? dict))]\n    [#f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(else)\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (true)\n      (false)\n    ]\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (false)\n      (true)\n    ]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (if (null? dict)\n      #f\n      (let ((keys (keys-of dict)))\n        (let ((lower-keys (map (lambda (k)\n                                (string->symbol (string->lowercase k))))\n               (upper-keys (map (lambda (k)\n                                  (string->symbol (string->uppercase k)))))))\n          (and (every keys lower-keys)\n               (every keys upper-keys))))))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (and (string? k) (string? v))) dict)\n      #t]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (and (string? k) (string? v))) dict)\n      #f]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (len (length keys)))\n    (if (null? keys)\n      #f\n      (let* ((lower (mapcar (lambda (k) (string->lowercase k))) keys)\n             (upper (mapcar (lambda (k) (string->uppercase k))) keys))\n        (if (all keys)\n          #t\n          (if (null? lower)\n            #f\n            (if (null? upper)\n              #f\n              #t)))))))\n",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n\t     (cond\n\t       [(string? k)\n\t\t (string? v)\n\t\t  (equal? (string-upcase k) (string-upcase v))\n\t\t  (equal? (string-downcase k) (string-downcase v))]\n\t       [#f #t])))\n      (equal? (length dict) 0)]\n    [#f #t]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (true)\n    ]\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (false)\n    ]\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict/:1)\n      (lambda (k)\n        (and\n          (string? k)\n          (string? dict/:2)\n          (eqv? (string-upcase k) (string-downcase k))\n          (eqv? (string-downcase k) (string-upcase k))))\n      (else\n        (return #f))]\n    [else\n      (return #t)]))\n",
    "  (cond\n    [(string? dict)\n      (let ((keys (keys-of dict)))\n        (for-each (lambda (k)\n                    (cond\n                      [(string? k)\n                        (return #t)\n                      [else\n                        (return #f)]]))\n          keys))]\n    [else\n      (return #f)])\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #t]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #f]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((key-lower (string->keyword key))\n             (key-upper (string->keyword (string-upcase key))))\n        (if (string=? key-lower key-upper)\n          #t\n          #f)))\n    #f)))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((lower-keys (map (lambda (k)\n                              (string->symbol (string->lowercase k))))\n             (upper-keys (map (lambda (k)\n                               (string->symbol (string->uppercase k))))))\n          (and (every keys lower-keys) (every keys upper-keys)))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (if (string? (cdr key))\n        (string-ci=? key (cdr key))\n        (string-ci=? key (car key)))\n      #f)))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key)\n        (return #t))]\n    [(hash-map? dict)\n      (foreach key (keys dict)\n        (string? key)\n        (return #t))]\n    [else (return #f)])\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:1)\n      (lambda (k)\n        (and\n          (string? k)\n          (string? dict/:2)\n          (eqv? (string-upcase k) (string-downcase k))\n          (eqv? (string-downcase k) (string-upcase k))))\n      (else\n        (return #f))]\n    [else\n      (return #t)]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key)))\n          (eqv? (first key) (second key))\n          (eqv? (first key) (first (first key)))\n          (eqv? (second key) (second (second key",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      true]\n    [false]))\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #t]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #f]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(hash? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key)))))\n    [(else)\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (map (lambda (k v)\n             (cond\n               [(string? k)\n                 (string? v)\n                 (eqv? (string-upcase k) (string-upcase v))\n                 (eqv? (string-downcase k) (string-downcase v))]\n               [else\n                 #f]))\n      dict)\n    [else\n      #f]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (return #t)\n    ]\n    [(else)\n      (return #f)\n    ]\n  )\n)\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->lower-case key)))\n            (if (memv lower-case-key keys)\n              #t\n              #f))\n          #f))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))))\n      true]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((lower-keys (mapcar (lambda (k) (string->lowercase k)) keys)))\n        (if (all keys-of lower-keys)\n          #t\n          (let ((upper-keys (mapcar (lambda (k) (string->uppercase k)) keys)))\n            (if (all keys-of upper-keys)\n              #t\n              #f))))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict/:key)\n      (let ((key (lower-case key)))\n        (all keys-in-lower-case? key))]\n    [(string? dict/:key)\n      (let ((key (upper-case key)))\n        (all keys-in-upper-case? key))]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-and-values dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower (string->lower key))\n              (upper (string->upper key)))\n        (if (eqv? lower upper)\n          #t\n          #f))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #t]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (true)\n    ]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (false)\n    ]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))\n      (not (empty? dict))]\n    [(not (string? dict))\n      (not (empty? dict))]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #t]\n    [(hash-map? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #f]\n    [else\n      #f]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(hash-map? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(else)\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((lower-keys (mapcar (lambda (k) (string->symbol (string->lowercase k))) keys)))\n        (if (all keys-of lower-keys)\n          #t\n          (let ((upper-keys (mapcar (lambda (k) (string->symbol (string->uppercase k))) keys)))\n            (if (all keys-of upper-keys)\n              #t\n              #f))))))))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->keyword key)))\n            (if (string? lower-case-key)\n              #t\n              #f))\n          #f))))))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((lower-keys (map (lambda (k) (string->lowercase k))) keys))\n        (if (all keys-of lower-keys)\n          #t\n          (let ((upper-keys (map (lambda (k) (string->uppercase k))) keys))\n            (if (all keys-of upper-keys)\n              #t\n              #f))))))))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->lower-case key))\n             (upper-case-key (string->upper-case key)))\n        (if (string=? lower-case-key upper-case-key)\n          #t\n          (else\n            #f\n            (print \"Keys in the dictionary are not all in lower or upper case\"))))\n      #f))\n",
    "  (cond\n    ((null? dict) #f)\n    (string? (first dict))\n    (string? (second dict))\n    (else #t)\n  )\n)\n",
    "  (cond\n    [(string? dict)\n      (for-each (lambda (k v) (string? k)) dict)\n      (for-each (lambda (k v) (string? v)) dict)\n      #t]\n    [else\n      #f]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-set dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->symbol key)))\n            (if (string? lower)\n              #t\n              #f))\n          #f))))))\n",
    "  (cond\n    [(string? dict/:keys)\n      (foreach key (dict/:keys)\n        (string? key))\n      (true)\n    ]\n    [(string? dict/:keys)\n      (foreach key (dict/:keys)\n        (string? key))\n      (false)\n    ]\n    [false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (let* ((keys (keys-set dict))\n         (key (first keys)))\n    (if (string? key)\n      (let* ((lower (string->lower key))\n              (upper (string->upper key)))\n        (if (string=? lower upper)\n          #t\n          #f))\n      #f)))\n",
    "  (cond\n    ((null? dict) #f)\n    ((string? (first dict)) #t)\n    ((string? (first (cdr dict))) #f)\n    (else #f)\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-case-key (string->key key))\n              (upper-case-key (string->key/case key)))\n        (if (string? lower-case-key)\n          (if (string? upper-case-key)\n            #t\n            #f)\n          #f))\n      #f)))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-case-key (string->lower-case key)))\n            (if (string=? lower-case-key key)\n              #t\n              #f)))))))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->symbol key)))\n            (if (string-ci=? lower key)\n              #t\n              #f))\n          #f))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))\n          (eqv? (string-upcase key) (string-downcase key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [(empty? dict)\n      (return #f)\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))]\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(hash? dict)\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower-key (string->key key))\n              (upper-key (string->key (string-upcase key))))\n        (if (eqv? lower-key upper-key)\n          #t\n          #f)))\n    #f)))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first (cdr dict)))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (string->symbol key))))\n      (not (empty? dict))]\n    [#t]))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-key (string->key lower key)))\n            (if (string=? lower-key key)\n              #t\n              #f))\n          #f))))))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(string? dict)\n      (foreach key (keys dict)\n        (string? key))]\n    [(not (empty? dict))\n      (false)]\n    [(true)]\n  ))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (if (string? key)\n            (string-upcase key)\n            (string-downcase key)))\n      (not (empty? dict))]\n    [#f]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and (string? key)\n             (string? (first key))\n             (string? (second key))\n             (eqv? (first key) (second key))))\n      (return #t)\n    ]\n    [else\n      (return #f)\n    ]))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((key-lower (string->keyword key))\n             (key-upper (string->keyword (string-upcase key))))\n        (if (string=? key-lower key-upper)\n          #t\n          #f)))\n    #f)))\n",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower (string->symbol key)))\n            (if (string-ci? lower)\n              #t\n              #f))\n          #f))))))\n",
    "  (let* ([keys (keys-set dict)])\n    (if (empty? keys)\n      #f\n      (let* ([lower-keys (map (lambda (k) (string->lowercase k)) keys)])\n        (if (all keys-set lower-keys)\n          #t\n          (let* ([upper-keys (map (lambda (k) (string->uppercase k)) keys)])\n            (if (all keys-set upper-keys)\n              #t\n              #f)))))))\n",
    "  (let* ((keys (keys-of dict))\n         (key (car keys)))\n    (if (string? key)\n      (let* ((lower (string->symbol key))\n              (upper (string->symbol (string-upcase key))))\n        (if (string=? lower upper)\n          #t\n          #f)))\n    #f)))\n",
    "  (cond\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (true)\n    ]\n    [(string? dict/:1)\n      (foreach key (keys dict)\n        (string? key))\n      (false)\n    ]\n    [false]))\n",
    "  (cond\n    [(string? dict)\n      (foreach key (keys dict)\n        (and\n          (string? key)\n          (string? (first key))\n          (string? (second key))\n          (eqv? (first key) (second key)))))\n    [else\n      #f]))\n",
    "  (cond\n    [(string? dict)\n      (let ((keys (keys-of dict)))\n        (all (map (lambda (k)\n                   (string? k)\n                   (cond\n                     [(string? k)\n                       (lower-case k)\n                       (upper-case k)]\n                     [else\n                       false])))\n          keys))]\n    [else\n      false]))\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t",
    "  (let ((keys (keys-of dict)))\n    (if (empty? keys)\n      #f\n      (let ((key (first keys)))\n        (if (string? key)\n          (let ((lower-key (string->key lowercase key)))\n            (if (member? lower-key keys)\n              #t\n              #f))))))))\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}