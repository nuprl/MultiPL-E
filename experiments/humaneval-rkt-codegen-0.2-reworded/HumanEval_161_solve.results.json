{
  "name": "HumanEval_161_solve",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (let ((s1 (string-copy s)))\n        (string-map (lambda (c)\n                     (cond\n                       ((char? c)\n                         (string-set! c\n                           (if (char-ci? c)\n                               (char-ci-upcase c)\n                               (char-ci-downcase c))))\n                       (else\n                         (string-set! c c))))\n          s1)))\n    (else\n      (string-copy s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp2sy7kpcm.rkt:19:9: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp2sy7kpcm.rkt:19:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n          (string-set! s i (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n        (string-set! s (string-join \" \" s))))\n    (string-downcase s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmponmljfxf.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\space))) (if (string? s (i)) (string-set! s i (string-set! s i (string-downcase s (i)))) (string-set! s i (string-upcase s (i)))) (string-set! s (string-join \" \" s))))\n  location...:\n   /tmp/tmponmljfxf.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map!\n          (lambda (c)\n            (if (char? c)\n              (string-ci? c)\n              (string-ci? c)\n              (string-ci? c)))\n          s)\n        (string-ci? s)))\n    (string-ci? s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp0m_dpweb.rkt:18:11: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmp0m_dpweb.rkt:18:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-char s i)\n            (string-set! s i #\\space)\n            (string-set! s i (string-char-upcase s i)))))\n      (string-set! s #\\space))\n    (string-set! s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpx1c134br.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpx1c134br.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (string-ci? s)\n      (string-ci-upcase s)\n      (string-ci-downcase s)))\n    (string-upcase s)\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpuc2a83xv.rkt:18:20: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmpuc2a83xv.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (let ((s1 (string-copy s)))\n        (string-map (lambda (c)\n          (cond\n            ((char? c)\n              (string-set! s1 (string-map (lambda (c2) (if (char? c2) (char-upcase c2) (char-downcase c2))) c)))\n            (else\n              (string-set! s1 (string-set! s1 (string-map (lambda (c2) (if (char? c2) (char-downcase c2) (char-upcase c2))) c))))\n          c))\n        s1)))\n    (else\n      (string-set! s (string-map (lambda (c) (if (char? c) (char-upcase c) (char-downcase c))) s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpp6u05t7k.rkt:15:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 30\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i (string-length s))\n            (string-set! s i)\n            (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-upcase x) (string-downcase x))) s)))))\n      (string-set! s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase x))) s)))\n    (string-set! s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase x))) s)))\n  s)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpntpf0nqu.rkt:26:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref s (string-length s) - 1)))) (string-ref s 0))) (string-copy s))]\n    [else (string-set! s (string-copy s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpq5irw3q8.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpq5irw3q8.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set! s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i #\\a))))\n          (string-set! s i (string-set! s i (string-set! s i #\\A))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmplmfy1t28.rkt:28:63: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpivsyvcyp.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpivsyvcyp.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (let ((s (string->list s)))\n        (if (null? s)\n          (string-copy s)\n          (let ((s (string->list s)))\n            (if (null? s)\n              (string-copy s)\n              (let ((s (string->list s)))\n                (if (null? s)\n                  (string-copy s)\n                  (let ((s (string->list s)))\n                    (if (null? s)\n                      (string-copy s)\n                      (let ((s (string->list s)))\n                        (if (null? s)\n                          (string-copy s)\n                          (let ((s (string->list s)))\n                            (if (null? s)\n                              (string-copy s)\n                              (let ((s (string->list s)))\n                                (if (null? s)\n                                  (string-copy s)\n                                  (let ((s (string->list s)))\n                                    (if (null? s)\n                                      (string-copy s)\n                                      (let ((s (string->list s)))\n                                        (if (null? s)\n                                          (string-copy s)\n                                          (let ((s (string->list s)))\n                                            (if (null? s)\n                                              (string-copy s)\n                                              (let ((s (string->list s)))\n                                                (if (null? s)\n                                                  (string-copy s)\n                                                  (let ((s (string->list s)))\n                                                    (if (null? s)\n                                                      (string-copy s)\n                                                      (let ((s (string->list s)))\n                                                        (if (null? s)\n                                                          (string-copy s)\n                                                          (let ((s (string->list s)))\n                                                            (if (null? s)\n                                                              (string-copy s)\n                                                              (let ((s\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpds3ptow8.rkt:60:68: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 61\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (string-length x) - 1) (string-ref x 0))) s))\n    (else (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (string-length x) - 1) (string-ref x 0))) s))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpki4527jc.rkt:15:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-length s)\n            (let ((j (string-index s #\\space)))\n              (if (string-length s)\n                (let ((k (string-index s #\\space)))\n                  (if (string-length s)\n                    (let ((l (string-index s #\\space)))\n                      (if (string-length s)\n                        (let ((m (string-index s #\\space)))\n                          (if (string-length s)\n                            (let ((n (string-index s #\\space)))\n                              (if (string-length s)\n                                (let ((o (string-index s #\\space)))\n                                  (if (string-length s)\n                                    (let ((p (string-index s #\\space)))\n                                      (if (string-length s)\n                                        (let ((q (string-index s #\\space)))\n                                          (if (string-length s)\n                                            (let ((r (string-index s #\\space)))\n                                              (if (string-length s)\n                                                (let ((s (string-index s #\\space)))\n                                                  (if (string-length s)\n                                                    (let ((t (string-index s #\\space)))\n                                                      (if (string-length s)\n                                                        (let ((u (string-index s #\\space)))\n                                                          (if (string-length s)\n                                                            (let ((v (string-index s #\\space)))\n                                                              (if (string-length s)\n                                                                (let ((w (string-index s #\\space)))\n                                                                  (if (string-length s)\n                                                                    (let ((x (string-index s #\\space)))\n                                                                      (if (string-length s)\n                                                                        (let ((y (string-\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpa5gkrdho.rkt:51:81: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (string-set! s i #\\A))\n          (string-set! s i (string-set! s i #\\a))))\n      (string-set! s #\\A))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpkb9qf573.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpkb9qf573.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (char=? #\"a\" s[i])\n            (string-set! s i #\"A\")\n            (string-set! s i #\"a\"))\n          (string-set! s i #\"#\")\n          (string-set! s i #\"@\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"@\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpq_qraeq6.rkt:29:32: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpotewroiq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpotewroiq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eqv? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A)))))\n  (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpg5y4krvd.rkt:24:22: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eqv? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp15b0jh0i.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eqv? (string-ref s i) #\\a) (string-set! s i #\\A) (string-set! s i #\\a)) (string-set! s i #\\A)) (string-set! s i #\\a)))\n  location...:\n   /tmp/tmp15b0jh0i.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpnwp133c4.rkt:25:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set! s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i #\\a)))\n            (string-set! s i (string-set! s i #\\A)))\n          (string-set! s i (string-set! s i #\\a)))\n        (string-set! s i #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp3do4s0jj.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s i (string-set! s i (string-set! s i #\\A))) (string-set! s i (string-set! s i (string-set! s i #\\a))) (string-set! s i (string-set! s i #\\A))) (strin...\n  location...:\n   /tmp/tmp3do4s0jj.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i (string-length s))\n            (string-set! s i)\n            (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmp8g4kxc3e.rkt:29:62: read-syntax: bad syntax `#\n`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpotewroiq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpotewroiq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (char-ci? s) (char-ci? s) (char-ci? s)))\n    (else (string-ci? s) (string-ci? s))\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1xi5i75l.rkt:18:20: char-ci?: unbound identifier\n  in: char-ci?\n  location...:\n   /tmp/tmp1xi5i75l.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? i)\n          (string-set! i (string-map (lambda (x) (if (char? x) (string-ref x #\\space) (string-ref x #\\space))) s))\n          (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x #\\space) (string-ref x #\\space))) s))))\n      (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x #\\space) (string-ref x #\\space))) s))))\n  \"\")\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmp5y4iyven.rkt:24:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-upcase x) (string-downcase x)))) (string-ref s (if (char? s) (string-upcase s) (string-downcase s)))) s)])\n    [else (solve (string-append (string-split s \"\") (string-join \"\") \"\"))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpv2crql2u.rkt:17:210: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i (string-length s))\n            (string-set! s i)\n            (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-upcase x) (string-downcase x))) s)))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase x))) s)))\n        (string-set! s i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpfht3c_s1.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i (string-length s)) (string-set! s i) (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-upcase x) (string-downcase x))) s))) (string-set! s i (string-ma...\n  location...:\n   /tmp/tmpfht3c_s1.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (let ((s1 (string-copy s)))\n        (let ((s2 (string-map (lambda (x)\n                               (cond\n                                 ((char? x)\n                                  (string-set! x (string-upcase (string-downcase x)))\n                                 )\n                                 (else\n                                  (string-set! x x)\n                                 )\n                                )\n                                s1)\n                               s2)))\n          (string-set! s s2)))\n      (else\n        (string-set! s (string-upcase (string-downcase s))))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpmlznysqp.rkt:31:6: else: not allowed as an expression\n  in: (else (string-set! s (string-upcase (string-downcase s))))\n  location...:\n   /tmp/tmpmlznysqp.rkt:31:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpee_p3z7r.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\space))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpee_p3z7r.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpmxen8gdx.rkt:26:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n          (let ((c (string-ref s i)))\n            (if (char-alphabetic? c)\n              (string-set! s i (char-upcase c))\n              (string-set! s i (char-downcase c)))))\n          (string-set! s i (char-upcase (string-ref s i))))\n        (string-set! s i (char-downcase (string-ref s i))))\n      (string-set! s (string-length s) #\\space))\n    (string-set! s (string-length s) #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpuek6e_dx.rkt:27:46: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eqv? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A)))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpeiwp320y.rkt:25:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpotewroiq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpotewroiq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1uw67zgq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp1uw67zgq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? i)\n          (let ((j (string-index s #\\space)))\n            (if (string? j)\n              (let ((k (string-index s #\\space)))\n                (if (string? k)\n                  (let ((l (string-index s #\\space)))\n                    (if (string? l)\n                      (let ((m (string-index s #\\space)))\n                        (if (string? m)\n                          (let ((n (string-index s #\\space)))\n                            (if (string? n)\n                              (let ((o (string-index s #\\space)))\n                                (if (string? o)\n                                  (let ((p (string-index s #\\space)))\n                                    (if (string? p)\n                                      (let ((q (string-index s #\\space)))\n                                        (if (string? q)\n                                          (let ((r (string-index s #\\space)))\n                                            (if (string? r)\n                                              (let ((s (string-index s #\\space)))\n                                                (if (string? s)\n                                                  (let ((t (string-index s #\\space)))\n                                                    (if (string? t)\n                                                      (let ((u (string-index s #\\space)))\n                                                        (if (string? u)\n                                                          (let ((v (string-index s #\\space)))\n                                                            (if (string? v)\n                                                              (let ((w (string-index s #\\space)))\n                                                                (if (string? w)\n                                                                  (let ((x (string-index s #\\space)))\n                                                                    (if (string? x)\n                                                                      (let ((y (string-index s #\\space)))\n                                                                        (if (string? y)\n                                                                          (let ((z (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmp0aq1r0vi.rkt:52:83: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 53\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-set! x (string-upcase x)) (string-set! x (string-downcase x)))) (string-ref x (if (char? x) (string-set! x (string-downcase x)) (string-set! x (string-upcase x)))))) s))]\n    [else (error \"Invalid string\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmptauochuv.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmptauochuv.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmp0943udmv.rkt:25:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpmc0waake.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? (string-ref s i) #\\a) (string-set! s i #\\A) (string-set! s i #\\a)) (string-set! s i #\\A)) (string-set! s i #\\a)))\n  location...:\n   /tmp/tmpmc0waake.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (- i 1)))\n      (string-set! s #\\a))\n    (string-set! s #\\a))\n  s)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpec9l3gli.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpec9l3gli.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string? (string->list s))\n        (string->list (string-map (lambda (x) (if (string? x) (string-upcase x) x)) s))\n        (string-map (lambda (x) (if (string? x) (string-downcase x) x)) s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmp075t1b5_.rkt:15:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref c #\"A-Z\")) s)) (string-copy s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpaeq3e3le.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpaeq3e3le.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c 0) (string-ref c 1))) s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c 0) (string-ref c 1))) s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp0zd6mftr.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp0zd6mftr.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\a))\n        (string-set! s i #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmptpl3xgnm.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? (string-ref s i) #\\a) (string-set! s i #\\A) (string-set! s i #\\a)) (string-set! s i #\\a)) (string-set! s i #\\a)))\n  location...:\n   /tmp/tmptpl3xgnm.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (- i 1)))\n      (string-set! s #\\a))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpycgwqdbw.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpycgwqdbw.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpivsyvcyp.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpivsyvcyp.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set! s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i #\\a))))\n          (string-set! s i (string-set! s i (string-set! s i #\\A))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmplmfy1t28.rkt:28:63: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (string-set! s i #\\A))\n          (string-set! s i (string-set! s i #\\a))))\n      (string-set! s #\\A)))\n  (string s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmp44qeuf9y.rkt:23:13: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-set! x (string-upcase x)) (string-set! x (string-downcase x)))) (string-ref x (if (char? x) (string-set! x (string-downcase x)) (string-set! x (string-upcase x)))))) s))]\n    [else (error \"Invalid argument\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpx2s64fl8.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpx2s64fl8.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (char? (string-ref s 0))\n        (string-ref s 0)\n        (string-ref s (string-length s) - 1))\n      (if (char? (string-ref s (string-length s) - 1))\n        (string-set! s\n          (string-ref s 0)\n          (string-ref s (string-length s) - 1))\n        (string-ref s (string-length s) - 1)))\n    (string-set! s (string-copy s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkc8bly5j.rkt:33:4\n\nstring-ref: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkc8bly5j.rkt:34:4\n\nstring-ref: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkc8bly5j.rkt:35:4\n\nstring-ref: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkc8bly5j.rkt:36:4\n\nstring-ref: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkc8bly5j.rkt:37:4\n\nstring-ref: arity mismatch;\n the exp",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpivsyvcyp.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpivsyvcyp.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpa450grfp.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpa450grfp.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1uw67zgq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp1uw67zgq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpee_p3z7r.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\space))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpee_p3z7r.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref s (string-length s) - 1)))) (string-ref s 0))) s)]\n    [else (string-set! s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref s (string-length s) - 1)))) (string-ref s 0))) s)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmppk9fsolk.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmppk9fsolk.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-upcase x) (string-downcase x)))) (string-ref s (if (char? s) (string-upcase s) (string-downcase s)))) s)])\n    [else (error \"s is not a string\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmp45_q3f1_.rkt:17:210: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (string-set! s i #\\A))\n          (string-set! s i (string-set! s i #\\a))))\n      (string-set! s #\\A)\n      (string-set! s #\\a)))\n  (string s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpsw5jx13h.rkt:24:13: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a)\n            (string-set! s #\\C))\n          (string-set! s #\\c))\n        (string-set! s #\\b)))\n    (string-set! s #\\b)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpikilgauw.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a) (string-set! s #\\C)) (string-set! s #\\c)) (string-set! s #\\b)))\n  location...:\n   /tmp/tmpikilgauw.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (let ((s1 (string-copy s)))\n        (let ((s2 (string-map (lambda (x) (if (char? x) (string-ci-upcase x) (string-ci-downcase x)))) s1))\n          (string-set! s1 s2)))\n      (else\n        (string-ci-upcase s)))\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpg9yevql7.rkt:21:6: else: not allowed as an expression\n  in: (else (string-ci-upcase s))\n  location...:\n   /tmp/tmpg9yevql7.rkt:21:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpse7r9mbn.rkt:28:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i (string-length s))\n            (string-set! s i)\n            (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-upcase x) (string-downcase x))) s)))))\n      (string-set! s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase x))) s)))\n    (string-set! s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase x))) s)))\n  s)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpntpf0nqu.rkt:26:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (string-length s)\n            (let ((j (string-index s #\\A)))\n              (if (string-length s)\n                (let ((k (string-index s #\\c)))\n                  (if (string-length s)\n                    (let ((l (string-index s #\\C)))\n                      (if (string-length s)\n                        (let ((m (string-copy s i j)))\n                          (let ((n (string-copy s i k)))\n                            (let ((o (string-copy s i l)))\n                              (let ((p (string-copy s i m)))\n                                (string-set! s i p)\n                                (string-set! s i n)\n                                (string-set! s i o)\n                                (string-set! s i m))))))))))))))))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpr93xox87.rkt:34:67: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref c #\"A-Z\")) s)) (string-copy s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpaeq3e3le.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpaeq3e3le.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpse7r9mbn.rkt:28:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-char s i)\n            (string-set! s i (string-set! (string-substring s i i) #\\space #\\space))\n            (string-set! s (string-substring s 0 i)))\n          (string-set! s (string-substring s 0 (string-length s))))\n        (string-set! s (string-substring s 0 (string-length s))))\n      (string-set! s (string-substring s 0 (string-length s))))\n    (string-set! s (string-substring s 0 (string-length s))))\n  s)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmp413kll6n.rkt:28:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1uw67zgq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp1uw67zgq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i (string-length s))\n          (string-set! s i (string-set! s i (string-downcase s i)))\n          (string-set! s i (string-upcase s i)))\n        (string-set! s i (string-upcase s i)))\n      (string-set! s (string-upcase s)))\n    (string-set! s (string-downcase s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpxk8lixg7.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpxk8lixg7.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a)\n            (string-set! s #\\c)\n            (string-set! s #\\C))\n          (string-set! s #\\b)\n          (string-set! s #\\B)\n          (string-set! s #\\d)\n          (string-set! s #\\D)\n          (string-set! s #\\e)\n          (string-set! s #\\E)\n          (string-set! s #\\f)\n          (string-set! s #\\F)\n          (string-set! s #\\g)\n          (string-set! s #\\G)\n          (string-set! s #\\h)\n          (string-set! s #\\H)\n          (string-set! s #\\i)\n          (string-set! s #\\I)\n          (string-set! s #\\j)\n          (string-set! s #\\J)\n          (string-set! s #\\k)\n          (string-set! s #\\K)\n          (string-set! s #\\l)\n          (string-set! s #\\L)\n          (string-set! s #\\m)\n          (string-set! s #\\M)\n          (string-set! s #\\n)\n          (string-set! s #\\N)\n          (string-set! s #\\o)\n          (string-set! s #\\O)\n          (string-set! s #\\p)\n          (string-set! s #\\P)\n          (string-set! s #\\q)\n          (string-set! s #\\Q)\n          (string-set! s #\\r)\n          (string-set! s #\\R)\n          (string-set! s #\\s)\n          (string-set! s #\\S)\n          (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmp5xz6qvdf.rkt:59:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 60\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpotewroiq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpotewroiq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpd7bxkskt.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpd7bxkskt.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpivsyvcyp.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpivsyvcyp.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpmc0waake.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? (string-ref s i) #\\a) (string-set! s i #\\A) (string-set! s i #\\a)) (string-set! s i #\\A)) (string-set! s i #\\a)))\n  location...:\n   /tmp/tmpmc0waake.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n          (string-set! s i (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n          (string-\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmph6xz5294.rkt:26:50: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s (string-map (lambda (c)\n                                (if (char? c)\n                                  (string-ref c 1)\n                                  (string-ref c 0)))\n                                s)\n          (string-copy s)))\n  s)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpop9fhsdb.rkt:16:2: if: missing an \"else\" expression\n  in: (if (string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c 1) (string-ref c 0))) s) (string-copy s)))\n  location...:\n   /tmp/tmpop9fhsdb.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-upcase x) (string-downcase x))))) s)]\n    [else (string-set! s (string-map (lambda (x) (if (char? x) (string-downcase x) (string-upcase x))))) s]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmp74uosg_0.rkt:17:142: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a)\n            (string-set! s #\\C)\n            (string-set! s #\\c)\n            (string-set! s #\\B)\n            (string-set! s #\\b)\n            (string-set! s #\\D)\n            (string-set! s #\\d)\n            (string-set! s #\\E)\n            (string-set! s #\\e)\n            (string-set! s #\\F)\n            (string-set! s #\\f)\n            (string-set! s #\\G)\n            (string-set! s #\\g)\n            (string-set! s #\\H)\n            (string-set! s #\\h)\n            (string-set! s #\\I)\n            (string-set! s #\\i)\n            (string-set! s #\\J)\n            (string-set! s #\\j)\n            (string-set! s #\\K)\n            (string-set! s #\\k)\n            (string-set! s #\\L)\n            (string-set! s #\\l)\n            (string-set! s #\\M)\n            (string-set! s #\\m)\n            (string-set! s #\\N)\n            (string-set! s #\\n)\n            (string-set! s #\\O)\n            (string-set! s #\\o)\n            (string-set! s #\\P)\n            (string-set! s #\\p)\n            (string-set! s #\\Q)\n            (string-set! s #\\q)\n            (string-set! s #\\R)\n            (string-set! s #\\r)\n            (string-set! s #\\S)\n            (string-set! s #\\s)\n            (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmp851t0ee8.rkt:59:12: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 60\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref c #\"A-Z\")) s)) (string-copy s)))\n    (else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpr5faktk2.rkt:18:31: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpr5faktk2.rkt:18:31\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (string-length s)\n            (if (< i 0)\n              (string-set! s i (- (string-length s) i)))\n            (string-set! s i (- i 1)))\n          (string-set! s i (- i 1))))\n      (string-set! s i (- (string-length s) i)))\n    (string-set! s i (- (string-length s) i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpbo6wqd5f.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpbo6wqd5f.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpnwp133c4.rkt:25:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (char? (string-ref s 0))\n        (string-ref s 0)\n        (string-ref s (string-length s) - 1))\n      (if (char? (string-ref s (string-length s) - 1))\n        (string-set! s\n          (string-ref s (string-length s) - 1)\n          (if (char? (string-ref s (string-length s) - 2))\n            (string-set! s\n              (string-ref s (string-length s) - 2)\n              (if (char? (string-ref s (string-length s) - 3))\n                (string-set! s\n                  (string-ref s (string-length s) - 3)\n                  (if (char? (string-ref s (string-length s) - 4))\n                    (string-set! s\n                      (string-ref s (string-length s) - 4)\n                      (if (char? (string-ref s (string-length s) - 5))\n                        (string-set! s\n                          (string-ref s (string-length s) - 5)\n                          (if (char? (string-ref s (string-length s) - 6))\n                            (string-set! s\n                              (string-ref s (string-length s) - 6)\n                              (if (char? (string-ref s (string-length s) - 7))\n                                (string-set! s\n                                  (string-ref s (string-length s) - 7)\n                                  (if (char? (string-ref s (string-length s) - 8))\n                                    (string-set! s\n                                      (string-ref s (string-length s) - 8)\n                                      (if (char? (string-ref s (string-length s) - 9))\n                                        (string-set! s\n                                          (string-ref s (string-length s) - 9)\n                                          (if (char? (string-ref s (string-length s) - 10))\n                                            (string-set! s\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpb23225q0.rkt:49:44: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 50\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-upcase x) (string-downcase x)))) (string-ref x (if (char? x) (string-downcase x) (string-upcase x)))) s))\n    (else (string-set! s (string-map (lambda (x) (if (char? x) (string-downcase x) (string-upcase x)))) s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpp_pr5dk1.rkt:15:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set! s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i #\\a)))\n            (string-set! s i (string-set! s i (string-set! s i #\\A))))\n          (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmphn9xmvjw.rkt:29:65: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpotewroiq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpotewroiq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (- i 1)))\n      (string-set! s #\\a)\n      (string-set! s #\\A)\n      (string-set! s #\\c)\n      (string-set! s #\\C)))\n    (string-set! s #\\a)\n    (string-set! s #\\A)\n    (string-set! s #\\c)\n    (string-set! s #\\C)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmprks_nk5i.rkt:30:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpd7bxkskt.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpd7bxkskt.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (string-set! s i (string-set! s i #\\A)))\n          (string-set! s i (string-set! s i #\\a))))\n      (string-set! s #\\A))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpqz9g4t8y.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpqz9g4t8y.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (let ((j (string-index s #\\A)))\n            (if (string-length s)\n              (let ((k (string-index s #\\c)))\n                (if (string-length s)\n                  (let ((l (string-index s #\\C)))\n                    (if (string-length s)\n                      (let ((m (string-index s #\\d)))\n                        (if (string-length s)\n                          (let ((n (string-index s #\\D)))\n                            (if (string-length s)\n                              (let ((o (string-index s #\\e)))\n                                (if (string-length s)\n                                  (let ((p (string-index s #\\E)))\n                                    (if (string-length s)\n                                      (let ((q (string-index s #\\f)))\n                                        (if (string-length s)\n                                          (let ((r (string-index s #\\F)))\n                                            (if (string-length s)\n                                              (let ((s (string-index s #\\g)))\n                                                (if (string-length s)\n                                                  (let ((t (string-index s #\\G)))\n                                                    (if (string-length s)\n                                                      (let ((u (string-index s #\\h)))\n                                                        (if (string-length s)\n                                                          (let ((v (string-index s #\\H)))\n                                                            (if (string-length s)\n                                                              (let ((w (string-index s #\\i)))\n                                                                (if (string-length s)\n                                                                  (let ((x (string-index s #\\I)))\n                                                                    (if (string-length s)\n                                                                      (let ((y (string-index s #\\j)))\n                                                                        (if\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpyplcsm07.rkt:51:72: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (let ((i (string-index s #\\a)))\n      (if (<= i 0)\n        (string-set! s i (string-set! s i #\\A))\n        (string-set! s i (string-set! s i #\\c))\n        (string-set! s i (string-set! s i #\\a))\n        (string-set! s i (string-set! s i #\\C))))\n    (string-set! s #\\A)\n    (string-set! s #\\c)\n    (string-set! s #\\a)\n    (string-set! s #\\C)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpqifvu90i.rkt:16:2: if: bad syntax\n  in: (if (string? s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (string-set! s i #\\A)) (string-set! s i (string-set! s i #\\c)) (string-set! s i (string-set! s i #\\a)) (string-set! s i (string-set! s i #\\C)))) (string-set! s #\\A) (string-se...\n  location...:\n   /tmp/tmpqifvu90i.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-set! x (string-upcase x)) (string-set! x (string-downcase x)))) (string-ref x (if (char? x) (string-set! x (string-downcase x)) (string-set! x (string-upcase x)))))) s))]\n    [else (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-set! x (string-upcase x)) (string-set! x (string-downcase x)))) (string-ref x (if (char? x) (string-set! x (string-downcase x)) (string-set! x (string-upcase x)))))) s))]))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpgejnh0k2.rkt:19:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpwnszrohe.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\space))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1)) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpwnszrohe.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (char-ci? s) (char-ci? (char-upcase s)) (char-ci? (char-downcase s))))\n    (else (string-ci? s) (string-ci? (string-upcase s)) (string-ci? (string-downcase s))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpyznl75hm.rkt:18:20: char-ci?: unbound identifier\n  in: char-ci?\n  location...:\n   /tmp/tmpyznl75hm.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1uw67zgq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp1uw67zgq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpbnbc8em2.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpbnbc8em2.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (string-set! s i (string-set! s i #\\A)))\n          (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n    (string-set! s #\\A))\n  s)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmp3m6lq5mj.rkt:26:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? i)\n          (let ((j (string-index s #\\space)))\n            (if (string? j)\n              (let ((k (string-index s #\\space)))\n                (if (string? k)\n                  (let ((l (string-index s #\\space)))\n                    (if (string? l)\n                      (let ((m (string-index s #\\space)))\n                        (if (string? m)\n                          (let ((n (string-index s #\\space)))\n                            (if (string? n)\n                              (let ((o (string-index s #\\space)))\n                                (if (string? o)\n                                  (let ((p (string-index s #\\space)))\n                                    (if (string? p)\n                                      (let ((q (string-index s #\\space)))\n                                        (if (string? q)\n                                          (let ((r (string-index s #\\space)))\n                                            (if (string? r)\n                                              (let ((s (string-index s #\\space)))\n                                                (if (string? s)\n                                                  (let ((t (string-index s #\\space)))\n                                                    (if (string? t)\n                                                      (let ((u (string-index s #\\space)))\n                                                        (if (string? u)\n                                                          (let ((v (string-index s #\\space)))\n                                                            (if (string? v)\n                                                              (let ((w (string-index s #\\space)))\n                                                                (if (string? w)\n                                                                  (let ((x (string-index s #\\space)))\n                                                                    (if (string? x)\n                                                                      (let ((y (string-index s #\\space)))\n                                                                        (if (string? y)\n                                                                          (let ((z (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmp0aq1r0vi.rkt:52:83: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 53\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c 0) (string-ref c 1))) s))]\n    [(char? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c 0) (string-ref c 1))) s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c 0) (string-ref c 1))) s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmph6bgdn9d.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmph6bgdn9d.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1)))\n      (string-set! s i 0)))\n  (s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpdhocwjzs.rkt:23:6: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x \"a\") (string-ref x \"A\"))) s))\n      (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x \"A\") (string-ref x \"a\"))) s))\n    )\n    (else (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x \"A\") (string-ref x \"a\"))) s))\n      (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x \"a\") (string-ref x \"A\"))) s))\n  ))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpnnv_o76e.rkt:18:22: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnnv_o76e.rkt:18:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref c #\"A-Z\")) s)) (string-copy s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpaeq3e3le.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpaeq3e3le.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1)))\n      (string-set! s i 0)))\n  (s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpdhocwjzs.rkt:23:6: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s (string-map (lambda (c)\n                                (if (char? c)\n                                  (if (char=? #\"a\" c)\n                                    (string-set! c #\"A\")\n                                    (string-set! c #\"a\"))\n                                  (string-set! c c))\n                                 (string-set! c c))\n                                s))\n    (string-set! s s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpggkhvh0j.rkt:17:20: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpggkhvh0j.rkt:17:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map (lambda (c) (if (char? c) (string-ci? c) (string-ci? c))) s)\n        (string-map (lambda (c) (if (char? c) (string-ci? c) (string-ci? c))) s))\n      s)\n    (string-set! s (if (string-ci? s) (string-ci? s) (string-ci? s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmp338r773y.rkt:15:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 24\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (char-ci? s) (string-ci-upcase s) (string-ci-downcase s)))\n    (else (string-upcase s) )\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpe2vzje26.rkt:18:20: char-ci?: unbound identifier\n  in: char-ci?\n  location...:\n   /tmp/tmpe2vzje26.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string? s)\n        (string-map!\n          (lambda (c)\n            (if (char? c)\n              (string-set! c\n                (if (char? c)\n                  (string-upcase c)\n                  (string-downcase c)))))\n            s))\n      (string-upcase s)))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpzukxdtu7.rkt:16:2: if: missing an \"else\" expression\n  in: (if (string? s) (string-set! s (if (string? s) (string-map! (lambda (c) (if (char? c) (string-set! c (if (char? c) (string-upcase c) (string-downcase c))))) s)) (string-upcase s)))\n  location...:\n   /tmp/tmpzukxdtu7.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpse7r9mbn.rkt:28:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpd7bxkskt.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpd7bxkskt.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-upcase x) (string-downcase x)))) (string-ref s (if (char? s) (string-upcase s) (string-downcase s)))) s)])\n    [else (string-set! s (string-map (lambda (x) (if (char? x) (string-upcase x) (string-downcase x)))) s)])\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmplfpcctvx.rkt:17:210: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1uw67zgq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp1uw67zgq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpee_p3z7r.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\space))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpee_p3z7r.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n          (let ((c (string-ref s i)))\n            (if (char-alphabetic? c)\n              (string-set! s i (string-upcase c))\n              (string-set! s i (string-downcase c))))\n          (string-set! s i (string-downcase (string-ref s i))))\n        (string-set! s i (string-upcase (string-ref s i))))\n      (string-set! s (string-downcase s))))\n  (string-set! s (string-upcase s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpt0cbb1o8.rkt:27:36: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i (string-length s))\n            (string-set! s i)\n            (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-upcase x) (string-downcase x))) s)))))\n      (string-set! s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase x))) s))))\n  (solve s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpo9sqgegu.rkt:24:12: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\")) s)) \"\")]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\")) s)) \"\")]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmp4qqzea1n.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp4qqzea1n.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s)) s)\n    (else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s)) s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmp_eii8k7t.rkt:18:31: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_eii8k7t.rkt:18:31\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpotewroiq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpotewroiq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map (lambda (x) (if (char? x) (string-ci? x) (string-ci? x))) s)\n        (string-map (lambda (x) (if (char? x) (string-upcase x) (string-downcase x))) s)\n      )\n      \"\")\n    (string-set! s (string-map (lambda (x) (if (char? x) (string-upcase x) (string-downcase x))) s)))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpnk02oqs4.rkt:18:11: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmpnk02oqs4.rkt:18:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1)))\n      (string-set! s i 0)))\n  (string s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmp1sk42l4c.rkt:23:13: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpbnbc8em2.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpbnbc8em2.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmp0943udmv.rkt:25:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1)))\n      (string-set! s i 0)))\n  (string s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmp1sk42l4c.rkt:23:13: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpivsyvcyp.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpivsyvcyp.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (+ i 1)))\n        (string-set! s i 0)))\n    (string-set! s #\\a)\n    s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmplwtg_zhx.rkt:25:6: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpbnbc8em2.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpbnbc8em2.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-length s)\n            (if (< i 0)\n              (string-set! s i (- (string-length s) i)))\n            (string-set! s i (- i 1)))\n          (string-set! s i (- i 1))))\n      (string-set! s i (- i 1))))\n  (s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpnab904c8.rkt:26:6: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (eqv? (string-ref s i) #\\a)\n          (string-set! s i #\\A)\n          (string-set! s i #\\a)\n          (s)))\n      (s)))\n  (s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpogq44_21.rkt:24:6: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? (car s))\n      (let ((c (char->integer (car s))))\n        (if (char-upcase? c)\n            (string-append (char-upcase c) (cdr s))\n            (string-append (char-downcase c) (cdr s))))\n      (string-append (char->string (car s)) (cdr s)))\n    (else\n      (let ((c (car s)))\n        (if (char-upcase? c)\n            (string-append (char-upcase c) (cdr s))\n            (string-append (char-downcase c) (cdr s)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmph0w5jh8a.rkt:20:13: char-upcase?: unbound identifier\n  in: char-upcase?\n  location...:\n   /tmp/tmph0w5jh8a.rkt:20:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpmxen8gdx.rkt:26:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map (lambda (x) (if (string-ci? x) (string-ci-upcase x) (string-ci-downcase x))) s)\n        (string-ci-upcase s)\n      )\n      (string-upcase s)\n    )\n    (string-downcase s)\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpycygxs20.rkt:18:11: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmpycygxs20.rkt:18:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (string-length s)\n            (string-set! s i (string-set! s i (string-ref s i) #\\A))\n            (string-set! s i (string-set! s i (string-ref s i) #\\a))\n            (string-set! s i (string-ref s i) #\\A))\n          (string-set! s i (string-ref s i) #\\a)))\n        (string-set! s i (string-ref s i) #\\a)))\n  (string s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmp2lxoz4rw.rkt:26:13: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpmc0waake.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? (string-ref s i) #\\a) (string-set! s i #\\A) (string-set! s i #\\a)) (string-set! s i #\\A)) (string-set! s i #\\a)))\n  location...:\n   /tmp/tmpmc0waake.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string? (string->list s))\n        (string->list (string-map (lambda (x) (if (char? x) (string-upcase x) (string-downcase x))) s))\n        (string-map (lambda (x) (if (char? x) (string-downcase x) (string-upcase x))) s))))\n  (solve \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpmbi77yqn.rkt:16:2: if: missing an \"else\" expression\n  in: (if (string? s) (string-set! s (if (string? (string->list s)) (string->list (string-map (lambda (x) (if (char? x) (string-upcase x) (string-downcase x))) s)) (string-map (lambda (x) (if (char? x) (string-downcase x) (string-upcase x))) s))))\n  location...:\n   /tmp/tmpmbi77yqn.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map (lambda (c) (if (char? c) (string-ci? c) (string-ci? c))) s)\n        (string-map (lambda (c) (if (char? c) (string-ci? c) (string-ci? c))) s)\n      )\n      \"\")\n    (string-set! s (string-ci? s) (string-ci? s))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmp_hhkrtjz.rkt:18:11: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmp_hhkrtjz.rkt:18:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpd7bxkskt.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1))))\n  location...:\n   /tmp/tmpd7bxkskt.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set! s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i #\\a))))\n          (string-set! s i (string-set! s i (string-set! s i #\\A))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmplmfy1t28.rkt:28:63: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (char-ci? s) (string-ci-upcase s) (string-ci-downcase s)))\n    (else (string-upcase s))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpsaz37vzw.rkt:18:20: char-ci?: unbound identifier\n  in: char-ci?\n  location...:\n   /tmp/tmpsaz37vzw.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpivsyvcyp.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpivsyvcyp.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (char-ci? s) (string-ci-upcase s) (string-ci-downcase s)))\n    (else (string-upcase s) )\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpe2vzje26.rkt:18:20: char-ci?: unbound identifier\n  in: char-ci?\n  location...:\n   /tmp/tmpe2vzje26.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (string-ci? s)\n      (string-ci-upcase s)\n      (string-ci-downcase s)))\n    (else\n      (string-upcase s)\n      (string-downcase s)))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmp3ck93z2y.rkt:18:20: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmp3ck93z2y.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i 0)))\n    (string-set! s #\\a)\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmp8cz4u63i.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1)) (string-set! s i 0))) (string-set! s #\\a) (string-set! s #\\A))\n  location...:\n   /tmp/tmp8cz4u63i.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (let ((i (string-index s #\\space)))\n          (if (< i 0)\n            (string-set! s i (- (string-length s) i)))\n          (let ((i (string-index s #\\space)))\n            (if (< i 0)\n              (string-set! s i (- (string-length s) i)))\n            (let ((i (string-index s #\\space)))\n              (if (< i 0)\n                (string-set! s i (- (string-length s) i)))\n              (let ((i (string-index s #\\space)))\n                (if (< i 0)\n                  (string-set! s i (- (string-length s) i)))\n                (let ((i (string-index s #\\space)))\n                  (if (< i 0)\n                    (string-set! s i (- (string-length s) i)))\n                  (let ((i (string-index s #\\space)))\n                    (if (< i 0)\n                      (string-set! s i (- (string-length s) i)))\n                    (let ((i (string-index s #\\space)))\n                      (if (< i 0)\n                        (string-set! s i (- (string-length s) i)))\n                      (let ((i (string-index s #\\space)))\n                        (if (< i 0)\n                          (string-set! s i (- (string-length s) i)))\n                        (let ((i (string-index s #\\space)))\n                          (if (< i 0)\n                            (string-set! s i (- (string-length s) i)))\n                          (let ((i (string-index s #\\space)))\n                            (if (< i 0)\n                              (string-set! s i (- (string-length s) i)))\n                            (let ((i (string-index s #\\space)))\n                              (if (< i 0)\n                                (string-set! s i (- (string-length s) i)))\n                              \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpivd9018x.rkt:51:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 55\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (if (string-length s)\n        (string-map\n          (lambda (c)\n            (cond\n              ((char=? c #\\space)\n                (string-set! s #\\space)\n              ((char=? c #\\a)\n                (string-set! s #\\A)\n              ((char=? c #\\b)\n                (string-set! s #\\B)\n              ((char=? c #\\c)\n                (string-set! s #\\C)\n              ((char=? c #\\d)\n                (string-set! s #\\D)\n              ((char=? c #\\e)\n                (string-set! s #\\E)\n              ((char=? c #\\f)\n                (string-set! s #\\F)\n              ((char=? c #\\g)\n                (string-set! s #\\G)\n              ((char=? c #\\h)\n                (string-set! s #\\H)\n              ((char=? c #\\i)\n                (string-set! s #\\I)\n              ((char=? c #\\j)\n                (string-set! s #\\J)\n              ((char=? c #\\k)\n                (string-set! s #\\K)\n              ((char=? c #\\l)\n                (string-set! s #\\L)\n              ((char=? c #\\m)\n                (string-set! s #\\M)\n              ((char=? c #\\n)\n                (string-set! s #\\N)\n              ((char=? c #\\o)\n                (string-set! s #\\O)\n              ((char=? c #\\p)\n                (string-set! s #\\P)\n              ((char=? c #\\q)\n                (string-set! s #\\Q)\n              ((char=? c #\\r)\n                (string-set! s #\\R)\n              ((char=? c #\\s)\n                (string-set! s #\\S)\n              ((char=? c #\\t)\n                (string\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpr_yjolih.rkt:63:16: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 64\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (string-ci? s) (string-ci-upcase s) (string-ci-downcase s)))\n    (else (string-upcase s) (string-downcase s))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpr4d_t67p.rkt:18:20: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmpr4d_t67p.rkt:18:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpse7r9mbn.rkt:28:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-index s #\\space)\n            (string-set! s i (string-map (lambda (c) (if (char? c) (string-ref c #\\space) (string-ref c #\\space)) (string-ref s i))) (string-set! s i (string-length s))))\n          (string-set! s (string-length s))))\n    (string-set! s (string-length s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpggz6nwlm.rkt:15:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 25\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1uw67zgq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp1uw67zgq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref c #\"A-Z\")) s)) (string-copy s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpaeq3e3le.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpaeq3e3le.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (string-index s #\\A)\n            (string-set! s i (string-set! s i #\\A))\n            (string-set! s i (string-set! s i #\\a)))\n          (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i #\\a)))\n  (string s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmp5t0q82eg.rkt:25:13: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpdpe_d1nb.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpdpe_d1nb.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    (else\n      (let ((i (string-index s 0)))\n        (if (string-ci? s i)\n          (string-set! s i (string-ci? s i) (string-upcase s i))\n          (string-set! s i (string-ci? s i) (string-downcase s i)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmppy0wyu4n.rkt:19:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmppy0wyu4n.rkt:19:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n          (string-set! s i (string-set! (string-ref s i) #\\space #\\space) (string-ref s i))\n          (string-set! s i (string-set! (string-ref s i) #\\space #\\space) (string-ref s i)))\n        (string-set! s (string-length s) #\\space)))\n    (string-set! s (string-length s) #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpkdbd2hrs.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\space))) (if (string? s (i)) (string-set! s i (string-set! (string-ref s i) #\\space #\\space) (string-ref s i)) (string-set! s i (string-set! (string-ref s i) #\\space #\\space) (string-ref s i))) (string-se...\n  location...:\n   /tmp/tmpkdbd2hrs.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "/tmp/tmpmxen8gdx.rkt:26:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp1uw67zgq.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp1uw67zgq.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp036r5oon.rkt:16:2: if: bad syntax\n  in: (if (string? s) (if (string-length s) (let ((i (string-index s #\\a))) (if (string-length s) (if (eq? i 0) (string-set! s #\\A) (string-set! s #\\a)) (string-set! s #\\A) (string-set! s #\\a)))) (string-set! s #\\A) (string-set! s #\\a))\n  location...:\n   /tmp/tmp036r5oon.rkt:16:2\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (+ i 1))))\n    (string-set! s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpxvnefnge.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\space))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i (- i 1)) (string-set! s i (+ i 1))))\n  location...:\n   /tmp/tmpxvnefnge.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((null? s) \"\")\n    ((char? s) (if (string-ci=? #\"a-zA-Z\" s) (string-ci-upcase s) (string-ci-downcase s)))\n    (string-ci-upcase s)\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmp78yykn9a.rkt:18:46: string-ci-upcase: unbound identifier\n  in: string-ci-upcase\n  location...:\n   /tmp/tmp78yykn9a.rkt:18:46\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    ((string? s)\n      (if (string-length s)\n        (string-map\n          (lambda (c)\n            (cond\n              ((char=? c #\\\\a)\n                (string-set! c #\\\\A)\n              ((char=? c #\\\\A)\n                (string-set! c #\\\\a)\n              ((char=? c #\\\\a)\n                (string-set! c #\\\\A)))\n              (else\n                (string-set! c c))))\n          s)))\n    (else\n      (string-set! s #\\\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpz98j3_d1.rkt:16:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 34\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (let ((j (string-index s #\\A)))\n            (if (string-length s)\n              (let ((k (string-index s #\\c)))\n                (if (string-length s)\n                  (let ((l (string-index s #\\C)))\n                    (if (string-length s)\n                      (let ((m (string-index s #\\d)))\n                        (if (string-length s)\n                          (let ((n (string-index s #\\D)))\n                            (if (string-length s)\n                              (let ((o (string-index s #\\e)))\n                                (if (string-length s)\n                                  (let ((p (string-index s #\\E)))\n                                    (if (string-length s)\n                                      (let ((q (string-index s #\\f)))\n                                        (if (string-length s)\n                                          (let ((r (string-index s #\\F)))\n                                            (if (string-length s)\n                                              (let ((s (string-index s #\\g)))\n                                                (if (string-length s)\n                                                  (let ((t (string-index s #\\G)))\n                                                    (if (string-length s)\n                                                      (let ((u (string-index s #\\h)))\n                                                        (if (string-length s)\n                                                          (let ((v (string-index s #\\H)))\n                                                            (if (string-length s)\n                                                              (let ((w (string-index s #\\i)))\n                                                                (if (string-length s)\n                                                                  (let ((x (string-index s #\\I)))\n                                                                    (if (string-length s)\n                                                                      (let ((y (string-index s #\\j)))\n                                                                        (if\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "/tmp/tmpyplcsm07.rkt:51:72: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-upcase x) (string-downcase x))))) s)]\n    [else (string-set! s (string-map (lambda (x) (if (char? x) (string-downcase x) (string-upcase x))))) s]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpeh2ty98r.rkt:17:142: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map!\n          (lambda (c)\n            (if (char? c)\n              (string-ci? c)\n              (string-ci? (char->integer c))))\n          s)\n        (string-ci? s)))\n    s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmp6z6ndo6o.rkt:18:11: string-ci?: unbound identifier\n  in: string-ci?\n  location...:\n   /tmp/tmp6z6ndo6o.rkt:18:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref c #\"A-Z\"))) s)]\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s)]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s) \"\")]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpb9izx07l.rkt:17:118: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-char s i)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n            (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmpqkgj7gzn.rkt:56:12: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 57\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmpivsyvcyp.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (<= i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmpivsyvcyp.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A)))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "/tmp/tmphtadgvl8.rkt:25:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (let ((i (string-index s #\\space)))\n      (if (string? s)\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set! s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmp05u8wyfu.rkt:17:14: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmp05u8wyfu.rkt:17:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref s (string-length s) - 1)))) (string-ref s 0))) (string-copy s))]\n    [else (string-set! s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref s (string-length s) - 1)))) (string-ref s 0))) (string-copy s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmpne53u3gc.rkt:17:33: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpne53u3gc.rkt:17:33\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (let ((c (string-ref s i)))\n          (if (char-alphabetic? c)\n            (string-set! c (if (char-lower-case? c) #\\upcase #\\downcase) c)\n            (string-set! s (string-copy! s i (+ i 1))))))))\n  (s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmp7q36jy66.rkt:23:61: read-syntax: bad character constant `#\\downcase`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-char s i)\n            (string-set! s i (string-set! (string-substring s i) #\\space #\\space))\n            (string-set! s (string-substring s 0 i)))\n          (string-set! s (string-substring s 0 i))))\n      (string-set! s (string-substring s 0 (string-length s))))\n    (string-set! s (string-substring s 0 (string-length s))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "/tmp/tmptm9m0_j2.rkt:18:16: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmptm9m0_j2.rkt:18:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)",
      "timestamp": 1664292678,
      "stdout": "",
      "stderr": "/tmp/tmp9d4rxhp9.rkt:17:4: if: missing an \"else\" expression\n  in: (if (string-length s) (let ((i (string-index s #\\a))) (if (< i 0) (string-set! s i (- (string-length s) i))) (string-set! s i i)))\n  location...:\n   /tmp/tmp9d4rxhp9.rkt:17:4\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}