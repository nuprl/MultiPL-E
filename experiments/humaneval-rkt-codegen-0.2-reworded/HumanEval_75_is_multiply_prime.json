{
  "name": "HumanEval_75_is_multiply_prime",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n(define (is_multiply_prime a)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n    (check-equal? (candidate 5) #f)\n    (check-equal? (candidate 30) #t)\n    (check-equal? (candidate 8) #t)\n    (check-equal? (candidate 10) #f)\n    (check-equal? (candidate 125) #t)\n    (check-equal? (candidate 105) #t)\n    (check-equal? (candidate 126) #f)\n    (check-equal? (candidate 729) #f)\n    (check-equal? (candidate 891) #f)\n    (check-equal? (candidate 1001) #t)\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((p (find_prime a)))\n    (and\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      ",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i (sqrt n)))\n        (if (zero? i)\n          #f\n          (let ((j (modulo i 3)))\n            (if (zero? j)\n              #f\n              (let ((k (modulo (i * j) 3)))\n                (if (zero? k)\n                  #f\n                  (#t)))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (if (zero? p)\n            (if (zero? q)\n              #t\n              (not (modulo (div a 15)))\n            )\n            #f\n            #f\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (if (zero? (modulo (modulo n 3)))\n        (if (zero? (modulo (modulo n 5)))\n          #t\n          #f\n          (if (zero? (modulo (modulo n 7)))\n            #t\n            #f\n            (if (zero? (modulo (modulo n 11)))\n              #t\n              #f\n              (if (zero? (modulo (modulo n 13)))\n                #t\n                #f\n                (if (zero? (modulo (modulo n 17)))\n                  #t\n                  #f\n                  (if (zero? (modulo (modulo n 19)))\n                    #t\n                    #f\n                    (if (zero? (modulo (modulo n 23)))\n                      #t\n                      #f\n                      (if (zero? (modulo (modulo n 29)))\n                        #t\n                        #f\n                        (if (zero? (modulo (modulo n 31)))\n                          #t\n                          #f\n                          (if (zero? (modulo (modulo n 37)))\n                            #t\n                            #f\n                            (if (zero? (modulo (modulo n 41)))\n                              #t\n                              #f\n                              (if (zero? (modulo (modulo n 43)))\n                                #t\n                                #f\n                                (if (zero? (modulo (modulo n 47)))\n                                  #t\n                                  #f\n                                  (if (zero? (modulo (modulo n 53)))\n                                    #t\n                                    #f\n                                    (if (zero? (modulo (modulo n 59)))\n                                      #t\n                                      #f\n                                      (if (zero? (modulo (modulo n 61)))\n                                        #t\n                                        #f\n                                        (if (zero? (modulo (modulo n 67)))\n                                          #t\n                                          #f\n                                          (if (zero? (modulo (modulo n 71)))\n                                            #t\n                                            ",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo n 3) 2)))\n            (q (modulo (modulo (modulo n 5) 2)))\n            (r (modulo (modulo (modulo n 7) 2)))\n            (s (modulo (modulo (modulo n 11) 2)))\n            (t (modulo (modulo (modulo (modulo n 13) 2)))\n            (u (modulo (modulo (modulo (modulo (modulo n 17) 2)))))\n            (v (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo i n))\n            (return #f)\n            (set! i (i (+ i 1)))\n          )\n        )\n        (return #t)\n      )\n    )\n  )\n)\n",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-count (count prime-list)))\n      (if (= a (* prime-list 3))\n        (if (= prime-count 3)\n          #t\n          #f))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((p (car prime-list)))\n        (and\n          (= p 3)\n          (let ((q (car (cdr prime-list))) (r (car (cdr (cdr prime-list))))))\n          (= q (car (cdr (cdr (cdr prime-list))))))\n        (= r (car (cdr (cdr (cdr (cdr prime-list)))))))\n      (= a (car (cdr prime-list))))))\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (if (zero? (modulo n 3))\n        (if (zero? (modulo n 5))\n          (if (zero? (modulo n 7))\n            (return #t)\n            (return #f))\n          (return #f))\n        (return #f))\n      (return #f)))\n  )\n)\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (for-each (lambda (prime)\n                   (and\n                     (= prime-list-length prime-list)\n                     (>= prime-list-length prime-list)\n                     (= (modulo prime prime) 1)))\n          prime-list)\n        (= a (mul prime-list-length prime-list)))))))\n",
    "  (let ((p (divisor_sieve a)))\n    (and (map (lambda (x) (and (not (modulo a x)) (not (modulo x a)))) p)\n         (map (lambda (x) (and (not (modulo a x)) (not (modulo x a)))) p))))\n",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (if (not (zero? (modulo n 2)))\n        (if (not (zero? (modulo n 3)))\n          (if (not (zero? (modulo n 5)))\n            (if (not (zero? (modulo n 7)))\n              (if (not (zero? (modulo n 11)))\n                (if (not (zero? (modulo n 13)))\n                  (if (not (zero? (modulo n 17)))\n                    (if (not (zero? (modulo n 19)))\n                      (if (not (zero? (modulo n 23)))\n                        (if (not (zero? (modulo n 29)))\n                          (return #t
    "  (let ((p (find_prime a)))\n    (and (not (null? p))\n         (= (car p) 3)\n         (= (cdr p) (list 2 3 5))\n         (= (car (cdr p)) (car (cdr (cdr p))))\n         (= (car (cdr (cdr p))) (car (cdr (cdr (cdr p))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((i (quotient n 3)))\n        (if (zero? (modulo i 3))\n          (if (zero? (modulo (quotient i 5)))\n            #t\n            #f\n            (is_multiply_prime (modulo (quotient i 3)))))\n          #f)))\n  )\n)\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (for-each (lambda (prime)\n                  (and\n                    (= prime 3)\n                    (= prime-prime prime)\n                    (> prime-prime 2)))\n          prime-list\n        (= a (* prime-prime prime-prime)))\n      (= a (* prime-prime prime)))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i 1))\n        (while (< i n)\n          (if (zero? (modulo (modulo (modulo i 3) 3) 3))\n            (return #f)\n            (set! i (+ i 1)))))\n      #t))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i 0))\n        (while (not (zero? (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 3) 2)))\n            (if (zero? q)\n              (let ((r (modulo (modulo n 5) 2)))\n                (if (zero? r)\n                  #t\n                  (else\n                    #f))))))))))))\n",
    "  (let ((n (floor a)))\n    (if (not (modulo n 3))\n      (if (not (modulo (mul n 3) 7))\n        (if (not (modulo (mul n 5) 11))\n          (if (not (modulo (mul n 7) 13))\n            (return #t)\n            (return #f))))\n      (return #f))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;;",
    "  (let ((p (find_prime a)))\n    (if (null? p)\n      #f\n      (let ((b (find_prime (mul a p))))\n        (if (null? b)\n          #f\n          (let ((c (find_prime (mul a b))))\n            (if (null? c)\n              #f\n              (let ((d (find_prime (mul a c))))\n                (if (null? d)\n                  #f\n                  (let ((e (find_prime (mul a d))))\n                    (if (null? e)\n                      #f\n                      (let ((f (find_prime (mul a e))))\n                        (if (null? f)\n                          #f\n                          (let ((g (find_prime (mul a f))))\n                            (if (null? g)\n                              #f\n                              (let ((h (find_prime (mul a g))))\n                                (if (null? h)\n                                  #f\n                                  (let ((i (find_prime (mul a h))))\n                                    (if (null? i)\n                                      #f\n                                      (let ((j (find_prime (mul a i))))\n                                        (if (null? j)\n                                          #f\n                                          (let ((k (find_prime (mul a j))))\n                                            (if (null? k)\n                                              #f\n                                              (let ((l (find_prime (mul a k))))\n                                                (if (null? l)\n                                                  #f\n                                                  (let ((m (find_prime (mul a l))))\n                                                    (if (null? m)\n                                                      #f\n                                                      (let ((n (find_prime (mul a m))))\n                                                        (if (null? n)\n                                                          #f\n                                                          (let ((o (find_prime (mul a n))))\n                                                            (if (null?",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (let ((p (prime? n)))\n        (if (and (not (zero? p))\n               (= (modulo n p) 0))\n          (and (not (zero? (modulo n (p * p))))\n               (= (modulo n (p * p * p)) 0))\n          (and (not (zero? (modulo n (p * p * p * p))))\n               (= (modulo n (p * p * p * p * p)) 0))\n          (and (not (zero? (modulo n (p * p * p * p * p * p))))\n               (= (modulo n (p * p * p * p * p * p * p)) 0))\n          (and (not (zero? (modulo n (p * p * p * p * p * p * p * p))))\n               (= (modulo n (p * p * p * p * p * p * p * p * p)) 0))\n          (and (not (zero? (modulo n (p * p * p * p * p * p * p * p * p * p))))\n               (= (modulo n (p * p * p * p * p * p * p * p * p * p * p)) 0))\n          (and (not (zero? (modulo n (p * p * p * p * p * p * p * p * p * p * p * p))))\n               (= (modulo n (p * p * p * p * p * p * p * p * p * p * p * p * p)) 0))\n          (and (not (zero? (modulo n (p * p * p * p * p * p * p * p * p * p * p * p * p * p))))\n               (= (modulo n (p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p)) 0))\n          (and (not (zero? (modulo n (p * p * p * p * p * p * p * p * p * p * p * p * p * p",
    "  (let ((prime_list (make-prime-list a)))\n    (let ((prime_count (length prime_list)))\n      (if (= prime_count 3)\n        (progn\n          (define (is_prime p)\n            (if (modulo p 2)\n              (not (modulo p 3))\n              (not (modulo p 5))\n              (not (modulo p 7))\n              (not (modulo p 11))\n              (not (modulo p 13))\n              (not (modulo p 17))\n              (not (modulo p 19))\n              (not (modulo p 23))\n              (not (modulo p 29))\n              (not (modulo p 31))\n              (not (modulo p 37))\n              (not (modulo p 41))\n              (not (modulo p 43))\n              (not (modulo p 47))\n              (not (modulo p 53))\n              (not (modulo p 59))\n              (not (modulo p 61))\n              (not (modulo p 67))\n              (not (modulo p 71))\n              (not (modulo p 73))\n              (not (modulo p 79))\n              (not (modulo p 83))\n              (not (modulo p 89))\n              (not (modulo p 97))\n              (not (modulo p 101))))\n          (if (not (is_prime p))\n            (return #f)\n            (progn\n              (define (is_prime p)\n                (if (modulo p 2)\n                  (not (modulo p 3))\n                  (not (modulo p 5))\n                  (not (modulo p 7))\n                  (not (modulo p 11))\n                  (not (modulo p 13))\n                  (not (modulo p 17))\n                  (not (modulo p 19))\n                  (not (modulo p 23))\n                  (not (modulo p 29))\n                  (not (modulo p 31))\n                  (not (modulo p 37))\n                  (not (modulo p 41))\n                  (not (modulo p 43))\n                  (not (modulo p 47))\n                  (not (modulo p 53))\n                  (not",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo (quotient n i) 3))\n            (return #f)\n            (set! i (+ i 1)))\n          )\n        )\n      )\n    )\n  )\n\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5 * 7\n;; >>> (is_multiply_prime 1000)\n;; #f\n;; 1000 = 2 * 3 * 5 * 7 * 11\n;; >>> (is_multiply_prime 1000000)\n;; #f\n;; 1000000 = 2 * 3 * 5 * 7 * 11 * 13\n;; >>> (is_multiply_prime 100000000)\n;; #f\n;; 100000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n;; >>> (is_multiply_prime 1000000000000)\n;; #f\n;; 1000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n;; >>> (is_multiply_prime 1000000000000000)\n;; #f\n;; 1000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n;; >>> (is_multiply_prime 10000000000000000000)\n;; #f\n;; 10000000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n;; >>> (is_multiply_prime 100000000000000000)\n;; #f\n;; 100000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n;; >>> (is_multiply_prime 10000000000000000)\n;; #f\n;; 10000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n;; >>> (is_multiply_prime 1000000000000000)\n;; #f\n;; 1000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 *",
    "  (let ((prime-list (make-prime-list a)))\n    (let ((prime-count (count prime-list)))\n      (and (>= prime-count 3)\n           (every? (lambda (p)\n                    (and (= (modulo a p) 0)\n                          (= (car prime-list) p)))\n             prime-list))))\n)\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i 1))\n        (while (< i n)\n          (if (zero? (modulo (modulo i 3) 100))\n            (return #f)\n            (set! i (+ i 1)))))\n      #t)))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo n 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 5) 2)))\n            (if (zero? q)\n              #t\n              (else\n               (not (is_multiply_prime (modulo (modulo (modulo n 3) 5)))))\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (and\n          (>= prime-list-length 3)\n          (for-each (lambda (prime)\n                     (and\n                       (>= prime 3)\n                       (>= prime (modulo a prime))\n                       (= (modulo a prime) 0)))\n            prime-list)))\n      (= a (* prime-list-length 3))))\n)\n",
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((p (prime-n)))\n        (if (and (p 3) (p 5) (p 7))\n          (return (= n (* p p p))))))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (and (not p) (is_prime? n))\n          (let ((m (floor (quotient n 3)))\n                (b (modulo n 3)))\n            (if (zero? m)\n              #t\n              (if (zero? b)\n                #t\n                (let ((q (floor (quotient (quotient n b) 3)))\n                      (r (modulo (quotient n b) 3)))\n                  (if (zero? q)\n                    #t\n                    (if (zero? r)\n                      #t\n                      #f
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((p (modulo n 3)))\n        (if (= p 0)\n          (let ((q (modulo n 5)))\n            (if (= q 0)\n              (let ((r (modulo n 7)))\n                (if (= r 0)\n                  (return #t)\n                  (return #f)))))))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (let ((prime-count (count prime-list)))\n      (and (>= prime-count 3)\n           (every? (lambda (p)\n                    (and (= p prime-list)\n                          (not (modulo p prime-count))))\n             prime-list))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #f\n;; 100 = 2 * 3 * 5 * 7\n;; >>> (is_multiply_prime 1000)\n;; #f\n;; 1000 = 2 * 3 * 5 * 7 * 11\n;; >>> (is_multiply_prime 1000000)\n;; #f\n;; 1000000 = 2 * 3 * 5 * 7 * 11 * 13\n;; >>> (is_multiply_prime 1000000000000)\n;; #f\n;; 1000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n;; >>> (is_multiply_prime 1000000000000000)\n;; #f\n;; 1000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n;; >>> (is_multiply_prime 10000000000000000)\n;; #f\n;; 10000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n;; >>> (is_multiply_prime 100000000000000000)\n;; #f\n;; 100000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n;; >>> (is_multiply_prime 10000000000000000000)\n;; #f\n;; 10000000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n;; >>> (is_multiply_prime 100000000000000000)\n;; #f\n;; 100000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n;; >>> (is_multiply_prime 10000000000000000000)\n;; #f\n;; 10000000000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n;; >>>",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (if (not (zero? (modulo n 2)))\n        (if (not (zero? (modulo n 3)))\n          (if (not (zero? (modulo n 5)))\n            (return #t)\n            (return #f))))\n      (return #f)))\n  )\n)\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo n 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 5) 2)))\n            (if (zero? q)\n              #t\n              (not (and (modulo (modulo n 3) 2) (modulo (modulo n 5) 2)))\n              #f))))))))\n",
    "  (let ((p (prime-factors a)))\n    (and (map (lambda (x) (and (not (modulo a x)) (not (modulo x a)))) p)\n         (>= a 3))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      (return #t)\n      (else\n        (let ((p (modulo a 3)))\n          (let ((q (modulo a 5)))\n            (if (zero? p)\n              (return #t)\n              (else\n                (if (zero? q)\n                  (return #t)\n                  (else\n                    (return (and (not (modulo a 7))\n                               (not (modulo a 11))\n                               (not (modulo a 13))))))))))))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (for-each\n          (lambda (prime)\n            (and\n              (>= prime prime-list-length)\n              (not (modulo prime prime-list))))\n          prime-list\n          prime-list-length)))\n    (>= a prime-list-length)))\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i (quotient n 2)))\n        (if (zero? i)\n          #f\n          (let ((j (quotient n 3)))\n            (if (zero? j)\n              #f\n              (let ((k (quotient n 5)))\n                (if (zero? k)\n                  #f\n                  (#t\n                    (and (modulo i 2) (modulo j 2) (modulo k 2))))))))))))))\n",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-list-length (length prime-list)))\n      (let ((i (0)))\n        (while (< i prime-list-length)\n          (if (= (modulo a prime-list[i]) 0)\n            (return #f)\n          (setq i (1+ i)))\n        (return #t)))))))\n\n;;; (is_multiply_prime 30)\n;;; #t\n;;; 30 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 1000)\n;;; #f\n;;; 1000 = 2 * 3 * 5\n;;; (is_multiply_prime 10000)\n;;; #f\n;;; 10000 = 2 * 3 * 5\n;;; (is_multiply_prime 100000)\n;;; #f\n;;; 100000 = 2 * 3 * 5\n;;; (is_multiply_prime 1000000)\n;;; #f\n;;; 1000000 = 2 * 3 * 5\n;;; (is_multiply_prime 10000000)\n;;; #f\n;;; 10000000 = 2 * 3 * 5\n;;; (is_multiply_prime 100000000)\n;;; #f\n;;; 100000000 = 2 * 3 * 5\n;;; (is_multiply_prime 1000000000)\n;;; #f\n;;; 1000000000 = 2 * 3 * 5\n;;; (is_multiply_prime 10000000000)\n;;; #f\n;;; 10000000000 = 2 * 3 * 5\n;;; (is_multiply_prime 100000000000)\n;;; #f\n;;; 100000000000 = 2 * 3 * 5\n;;; (is_multiply_prime 1000000000000)\n;;; #f\n;;; 1000000000000 = 2 * 3 * 5\n;;; (is_multiply_prime 10000000000000)\n;;; #f\n;;; 10000000000000 = 2 * 3 * 5\n;;; (is_multiply_prime 100000000000000)\n;;; #f\n;;; 100000000000000 = 2 *",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (is_prime i)\n            (if (modulo a i)\n              #f\n              (return #t))\n            (set! i (+ i 1)))\n          (set! i (- i 1)))\n        #f)))\n  ))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 3) 2)))\n            (if (zero? q)\n              (let ((r (modulo (modulo n 5) 2)))\n                (if (zero? r)\n                  #t\n                  (else\n                    #f))))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (if (zero? (modulo (div a 2)))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))) (not (modulo (div a 7))) (not (modulo (div a 11))) (not (modulo (div a 13))) (not (modulo (div a 17))) (not (modulo (div a 19))) (not (modulo (div a 23))) (not (modulo (div a 29))) (not (modulo (div a 31))) (not (modulo (div a 37))) (not (modulo (div a 41))) (not (modulo (div a 43))) (not (modulo (div a 47))) (not (modulo (div a 53))) (not (modulo (div a 59))) (not (modulo (div a 61))) (not (modulo (div a 67))) (not (modulo (div a 71))) (not (modulo (div a 73))) (not (modulo (div a 79))) (not (modulo (div a 83))) (not (modulo (div a 89))) (not (modulo (div a 97))) (not (modulo (div a 101))))\n            #t\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))) (not (modulo (div a 7))) (not (modulo (div a 11))) (not (modulo (div a 13))) (not (modulo (div a 17))) (not (modulo (div a 19))) (not (modulo (div a 23))) (not (modulo (div a 29))) (not (modulo (div a 31))) (not (modulo (div a 37))) (not (modulo (div a 41))) (not (modulo (div a 43))) (not (modulo (div a 47))) (not (modulo (div a 53))) (not (modulo (div a 59))) (not (modulo (div a 61))) (not (modulo (div a 67))) (not (",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo a 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo a 5) 2)))\n            (if (zero? q)\n              #t\n              (else\n               (not (is_multiply_prime (modulo (modulo a 3) (modulo (modulo a 5) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 5) (modulo (modulo a 7) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 7) (modulo (modulo a 11) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 11) (modulo (modulo a 13) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 13) (modulo (modulo a 17) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 17) (modulo (modulo a 19) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 19) (modulo (modulo a 23) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 23) (modulo (modulo a 29) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 29) (modulo (modulo a 31) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 31) (modulo (modulo a 37) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 37) (modulo (modulo a 41) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 41) (modulo (modulo a 43) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 43) (modulo (modulo a 47) 2)))\n                 (not (is_multiply_prime",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (and\n          (let ((prime-list-index (index prime-list)))\n            (and\n              (let ((prime-list-index-2 (modulo prime-list-index 2)))\n                (= prime-list-index-2 0)))\n              (let ((prime-list-index-3 (modulo prime-list-index 3)))\n                (= prime-list-index-3 0)))\n            (let ((prime-list-index-5 (modulo prime-list-index 5)))\n              (= prime-list-index-5 0)))\n          (= prime-list-length 3))))))\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((p (find_prime a)))\n    (and (= a (* p p))\n         (= a (* p p))\n         (= a (* p p)))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (first (primes n))))\n        (if (zero? (modulo n p))\n          (let ((q (second (primes n))))\n            (if (zero? (modulo n q))\n              (let ((r (third (primes n))))\n                (if (zero? (modulo n r))\n                  #t\n                  (else\n                    (not (is_multiply_prime (quotient n r) (quotient n q) (quotient n p)))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (not (zero? (modulo n 2)))\n               (not (zero? (modulo n 3)))\n               (not (zero? (modulo n 5)))\n               (not (zero? (modulo n 7)))\n               (not (zero? (modulo n 11)))\n               (not (zero? (modulo n 13)))\n               (not (zero? (modulo n 17)))\n               (not (zero? (modulo n 19))))\n            #t\n            (not (zero? (modulo n 23)))\n            #t)))))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo a 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo a 5) 2)))\n            (if (zero? q)\n              #t\n              (else\n               (not (is_multiply_prime (modulo (modulo a 3) (modulo (modulo a 5) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 5) (modulo (modulo a 7) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 7) (modulo (modulo a 11) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 11) (modulo (modulo a 13) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 13) (modulo (modulo a 17) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 17) (modulo (modulo a 19) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 19) (modulo (modulo a 23) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 23) (modulo (modulo a 29) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 29) (modulo (modulo a 31) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 31) (modulo (modulo a 37) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 37) (modulo (modulo a 41) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 41) (modulo (modulo a 43) 2)))\n                 (not (is_multiply_prime (modulo (modulo a 43) (modulo (modulo a 47) 2)))\n                 (not (is_multiply_prime",
    "  (let ((prime_list (make-prime-list a)))\n    (let ((prime_count (count prime_list)))\n      (and (= prime_count 3)\n           (every? (lambda (p)\n                    (and (= (modulo a p) 0)\n                         (= (car prime_list) p)))\n               prime_list))))\n)\n",
    "  (let ((prime_list (make-prime-list)))\n    (let ((prime_count (count prime_list)))\n      (let ((prime_index (index prime_list a)))\n        (return (eq prime_count 3)))))\n)\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (quotient a 10))))\n        (if (zero? (modulo (quotient p 10)))\n          (if (zero? (modulo (quotient (quotient p 10) 10)))\n            (if (zero? (modulo (quotient (quotient (quotient p 10) 10) 10)))\n              (if (zero? (modulo (quotient (quotient (quotient (quotient p 10) 10) 10) 10)))\n                (if (zero? (modulo (quotient (quotient (quotient (quotient (quotient p 10) 10) 10) 10) 10)))\n                  (if (zero? (modulo (quotient (quotient (quotient (quotient (quotient (quotient p 10) 10) 10) 10) 10) 10)))\n                    (if (zero? (modulo (quotient (quotient (quotient (quotient (quotient (quotient (quotient p 10) 10) 10) 10) 10) 10) 10)))\n                      (if (zero? (modulo (quotient (quotient (quotient (quotient (quotient (quotient (quotient (quotient p 10) 10) 10) 10) 10) 10) 10) 10)))\n                        (if (zero? (modulo (quotient (quotient (quotient (quotient (quotient (quotient (quotient (quotient (quotient p 10) 10) 10) 10) 10) 10) 10) 10) 10)))\n                          (if (zero? (modulo (quotient (quotient (quotient (quotient (quotient (quotient (quotient (quotient (quotient (quotient p 10) 10) 10) 10) 10) 10) 10) 10) 10) 10)))\n                            (if (zero? (modulo (quotient (quotient (quotient (quotient (quotient (qu",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i 0))\n        (while (< i 3)\n          (if (modulo (multiply i 3) a)\n            (return #f)\n            (set! i (+ i 1)))\n          )\n        )\n      )\n    )\n  )\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      (return #t)\n      (else\n        (let ((p (modulo (modulo a 3) 2)))\n          (if (zero? p)\n            (return #t)\n            (else\n              (let ((q (modulo (modulo a 5) 2)))\n                (if (zero? q)\n                  (return #t)\n                  (else\n                    (return #f)))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (if (zero? (modulo (div p 3)))\n            (if (zero? (modulo (div q 5)))\n              #t\n              #f\n              (is_multiply_prime (a - 1)))\n            #f\n            (is_multiply_prime (a - 2)))\n          #f)))\n      #f)))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? (modulo n 3)))\n          (if (not (zero? (modulo n 5)))\n            (if (not (zero? (modulo n 7)))\n              (if (not (zero? (modulo n 11)))\n                (if (not (zero? (modulo n 13)))\n                  (if (not (zero? (modulo n 17)))\n                    (if (not (zero? (modulo n 19)))\n                      (if (not (zero? (modulo n 23)))\n                        (if (not (zero? (modulo n 29)))\n                          #t\n                          #f
    "  (let ((n (floor a)))\n    (if (not (modulo n 3))\n      (if (not (modulo n 5))\n        (if (not (modulo n 7))\n          (return #t)\n          (return #f))\n        (return #f))\n      (return #f))\n    (return #f)))\n",
    "  (let ((i (sqrt a)))\n    (if (zero? i)\n      (let ((j (sqrt (a / i))))\n        (if (zero? j)\n          (let ((k (sqrt (a / i / j))))\n            (if (zero? k)\n              (return #t)\n              (else (return #f))))))))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo n i))\n            (return #f)\n            (set! i (i (+ i 1)))))))\n    #t))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo a 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo a 5) 2)))\n            (if (zero? q)\n              #t\n              (not (and (modulo a 3) (modulo a 5)))\n              #f))))))))\n",
    "  (let ((prime_list (make-prime-list)))\n    (let ((prime_list_length (length prime_list)))\n      (let ((i (0)))\n        (while (< i prime_list_length)\n          (if (= (car prime_list) (mul a (car (cdr prime_list))))\n            (return #t)\n            (setq i (i + 1)))\n          (setq prime_list (cdr prime_list)))))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo a 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo a 5) 2)))\n            (if (zero? q)\n              #t\n              (not (modulo (modulo a 7) 2))))))))\n  )\n)\n",
    "  (let ((p (prime_numbers)))\n    (and\n      (<= a (car p))\n      (= (car p) a)\n      (= (cdr p) (list 2 3 5))\n      (= (car (cdr p)) (cadr (cdr p)))\n      (= (car (cdr (cdr p))) (cddr (cdr p)))\n      (= (car (cdr (cdr (cdr p)))) (caddr (cdr p)))\n      (= (car (cdr (cdr (cdr (cdr p))))) (cadddr (cdr p)))\n      (= (car (cdr (cdr (cdr (cdr (cdr p))))) (caddddr (cdr p))))\n      (= (car (cdr (cdr (cdr (cdr (cdr (cdr p))))))) (cadddddr (cdr p))))\n      (= (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr p)))))))) (caddddddr (cdr p))))\n      (= (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr p)))))))) (cadddddddr (cdr p))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (modulo a 100)))\n    (and\n      (not (modulo (modulo n 3) 2))\n      (not (modulo (modulo n 5) 2))\n      (not (modulo (modulo n 7) 2))\n      (not (modulo (modulo n 11) 2))\n      (not (modulo (modulo n 13) 2))\n      (not (modulo (modulo n 17) 2))\n      (not (modulo (modulo n 19) 2))\n      (not (modulo (modulo n 23) 2))\n      (not (modulo (modulo n 29) 2))\n      (not (modulo (modulo n 31) 2))\n      (not (modulo (modulo n 37) 2))\n      (not (modulo (modulo n 41) 2))\n      (not (modulo (modulo n 43) 2))\n      (not (modulo (modulo n 47) 2))\n      (not (modulo (modulo n 53) 2))\n      (not (modulo (modulo n 59) 2))\n      (not (modulo (modulo n 61) 2))\n      (not (modulo (modulo n 67) 2))\n      (not (modulo (modulo n 71) 2))\n      (not (modulo (modulo n 73) 2))\n      (not (modulo (modulo n 79) 2))\n      (not (modulo (modulo n 83) 2))\n      (not (modulo (modulo n 89) 2))\n      (not (modulo (modulo n 97) 2))))\n  #t\n)\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((p (find_prime a)))\n    (and (not (null? p))\n         (= (car p) 3)\n         (= (cdr p) (list 2 3 5)))))\n",
    "  (let ((prime-list (make-prime-list)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (and\n          (let ((prime-list-index (modulo a prime-list-length)))\n            (= prime-list-index 0))\n          (let ((prime-list-index-2 (modulo (sub1 a) prime-list-length)))\n            (= prime-list-index-2 0))\n          (let ((prime-list-index-3 (modulo (sub1 (sub1 a)) prime-list-length)))\n            (= prime-list-index-3 0))\n          (let ((prime-list-index-4 (modulo (sub1 (sub1 (sub1 a))) prime-list-length)))\n            (= prime-list-index-4 0)))))))\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (modulo (modulo (modulo n 3) 2) 5))))\n        (if (zero? p)\n          #f\n          (if (zero? (modulo (modulo (modulo (modulo n 5) 3) 2)))\n            #t\n            (if (zero? (modulo (modulo (modulo (modulo n 7) 5) 3)))\n              #t\n              #f))))))))\n",
    "  (let ((p (prime? a)))\n    (and (not (null? p))\n         (= (car p) 3)\n         (= (cdr p) (list 2 3 5))\n         (= (car (cdr p)) (car (cdr (cdr p))))\n         (= (car (cdr (cdr p))) (car (cdr (cdr (cdr p))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo n 3) 2)))\n            (q (modulo (modulo (modulo n 5) 2)))\n            (r (modulo (modulo (modulo n 7) 2)))\n            (s (modulo (modulo (modulo n 11) 2)))\n            (t (modulo (modulo (modulo (modulo n 13) 2)))\n            (u (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (not (zero? (modulo n p)))\n               (not (modulo n (multiply p 3))))\n          #f))))))\n",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (not (zero? (modulo n 3)))\n               (not (zero? (modulo n 5)))\n               (not (zero? (modulo n 7)))\n               (not (zero? (modulo n 11)))\n               (not (zero? (modulo n 13)))\n               (not (zero? (modulo n 17)))\n               (not (zero? (modulo n 19)))\n               (not (zero? (modulo n 23)))\n               (not (zero? (modulo n 29)))\n               (not (zero? (modulo n 31)))\n               (not (zero? (modulo n 37)))\n               (not (zero? (modulo n 41)))\n               (not (zero? (modulo n 43)))\n               (not (zero? (modulo n 47)))\n               (not (zero? (modulo n 53)))\n               (not (zero? (modulo n 59)))\n               (not (zero? (modulo n 61)))\n               (not (zero? (modulo n 67)))\n               (not (zero? (modulo n 71)))\n               (not (zero? (modulo n 73)))\n               (not (zero? (modulo n 79)))\n               (not (zero? (modulo n 83)))\n               (not (zero? (modulo n 89)))\n               (not (zero? (modulo n 97)))\n               (not (zero? (modulo n 101))))\n          (not (zero? (modulo n 103))))\n        (not (zero? (modulo n 107))))\n      (not (zero? (modulo n 109))))\n    (not (zero? (modulo n 113))))\n  #t))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (is_prime p)\n               (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n",
    "  (let ((i (sqrt a)))\n    (if (<= i a)\n      (let ((p (div a i)))\n        (if (and (mod a i) (mod p i))\n          (= (mod a i) (mod p i))\n          (= (mod a p) (mod i p))\n          (= (mod p i) (mod i p))\n          (= (mod p p) (mod i i))\n          (= (mod i i) (mod p p))\n          (= (mod i p) (mod p p))\n          (= (mod i i) (mod p i))\n          (= (mod i i) (mod i i))\n          (= (mod p p) (mod i p))\n          (= (mod p p) (mod p p))\n          (= (mod i i) (mod p i))\n          (= (mod i i) (mod i i))\n          (= (mod p p) (mod i p))\n          (= (mod p p) (mod p p))\n          (= (mod i i) (mod p i))\n          (= (mod i i) (mod i i))\n          (= (mod p p) (mod i p))\n          (= (mod p p) (mod p p))\n          (= (mod i i) (mod p i))\n          (= (mod i i) (mod i i))\n          (= (mod p p) (mod i p))\n          (= (mod p p) (mod p p))\n          (= (mod i i) (mod p i))\n          (= (mod i i) (mod i i))\n          (= (mod p p) (mod i p))\n          (= (mod p p) (mod p p))\n          (= (mod i i) (mod p i))\n          (= (mod i i) (mod i i))\n          (= (mod p p) (mod i p))\n          (= (mod p p) (mod p p))\n          (= (mod i i) (mod p i))\n          (= (mod i i) (mod i i))\n          (= (mod p p) (mod i p))\n          (=",
    "  (let ((prime-list (make-prime-list a)))\n    (let ((prime-list-length (length prime-list)))\n      (if (prime-list-length 3)\n        (let ((i 0))\n          (while (< i prime-list-length)\n            (if (= (prime-list i) (multiply prime-list (sub1 i)))\n              (return #t)\n              (setf i (add1 i)))\n            (setf i (add1 prime-list-length)))\n          (return #f)))))))\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo n 3)))\n            (if (zero? q)\n              (let ((r (modulo n 5)))\n                (if (zero? r)\n                  #t\n                  (else\n                    (not (and (is_prime p) (is_prime q) (is_prime r))))))))))))))\n",
    "  (let ((p (prime-factors a)))\n    (and (car p) (cdr p) (car (cdr p)) (cdr (cdr p))))\n  )\n\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;;",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo n 3) 2) 3) 5) 7) 11)))\n        (if (zero? p)\n          #t\n          (let ((q (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo n 5) 3) 7) 11) 13) 17) 19) 23) 29)))\n            (if (zero? q)\n              #t\n              (let ((r (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((prime-list (make-prime-list a)))\n    (let ((prime-list-length (length prime-list)))\n      (if (prime-list-length 3)\n        (let ((i 0))\n          (while (< i prime-list-length)\n            (if (= (prime-list i) (multiply prime-list (sub1 i)))\n              (return #t)\n              (setq i (add1 i)))))\n        (return #f))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (is_prime p)\n               (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo n 3) 2)))\n            (q (modulo (modulo (modulo n 5) 2)))\n            (r (modulo (modulo (modulo n 7) 2)))\n            (s (modulo (modulo (modulo n 11) 2)))\n            (t (modulo (modulo (modulo (modulo n 13) 2)))\n            (u (modulo (modulo (modulo (modulo (modulo n 17) 2)))))\n            (v (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 3) 2)))\n            (if (zero? q)\n              (let ((r (modulo (modulo (modulo n 5) 3) 2)))\n                (if (zero? r)\n                  #t\n                  (else\n                    #f))))))))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and (car prime-list) (cdr prime-list) (car (cdr prime-list)))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (is_prime p)\n               (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo a 3)))\n        (let ((q (modulo a 5)))\n          (if (zero? n)\n            #t\n            (if (zero? (modulo a p))\n              #f\n              (if (zero? (modulo a q))\n                #t\n                (if (zero? (modulo a (modulo a p) * (modulo a q)))\n                  #f\n                  #t))))))))))))\n",
    "  (let ((p (lambda (n) (if (eq n 0) 1 (is_prime n))))\n        (let ((n (abs a)))\n          (if (eq n 0)\n            (if (eq (p n) 1)\n              (if (eq (p (p n)) 1)\n                (if (eq (p (p (p n))) 1)\n                  (true)\n                  (false))))\n            (false))))\n  )\n\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5 * 7\n;; >>> (is_multiply_prime 1000)\n;; #t\n;; 1000 = 2 * 3 * 5 * 7 * 11\n;; >>> (is_multiply_prime 1000000)\n;; #f\n;; 1000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n;; >>> (is_multiply_prime 1000000000000)\n;; #f\n;; 1000000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71 * 73 * 79 * 83 * 89 * 97 * 101 * 103 * 107 * 109 * 113 * 127 * 131 * 137 * 139 * 149 * 151 * 157 * 163 * 167 * 173 * 179 * 181 * 191 * 193 * 197 * 199 * 211 * 223 * 227 * 229 * 233 * 239 * 241 * 251 * 257 * 263 * 269 * 271 * 277 * 281 * 283 * 293 * 307 * 311 * 313 * 317 * 331 * 337 * 347 * 349 * 353 * 359 * 367 * 373 * 379 * 383 * 389 * 397 * 401 * 409 * 419 * 421 * 431 * 433 * 439 * 443 * 449 * 457 * 461 * 463 * 467 * 479 * 487 * 491 * 499 * 503 * 509 * 521 * 523 * 541 * 547 * 557 * 563 * 569 * 571 * 577 * 587 * 593 * 599 * 601 * 607 * 613 * 617 * 619 * 631 * 641 * 643",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo a 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo a 5) 2)))\n            (if (zero? q)\n              #t\n              (not (and (modulo a 3) (modulo a 5)))\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (not (zero? (modulo n p)))\n               (not (zero? (modulo n (p + 1))))\n               (not (zero? (modulo n (p - 1))))\n               (not (zero? (modulo n (p * 2))))))))))))\n",
    "  (let ((i (sqrt a)))\n    (and\n      (>= i 1)\n      (let ((p (mod a i)))\n        (and\n          (>= p 1)\n          (not (and\n            (= p 2)\n            (= p 3)\n            (= p 5)\n            (= p 7)\n            (= p 11)\n            (= p 13)\n            (= p 17)\n            (= p 19)\n            (= p 23)\n            (= p 29)\n            (= p 31)\n            (= p 37)\n            (= p 41)\n            (= p 43)\n            (= p 47)\n            (= p 53)\n            (= p 59)\n            (= p 61)\n            (= p 67)\n            (= p 71)\n            (= p 73)\n            (= p 79)\n            (= p 83)\n            (= p 89)\n            (= p 97))))))))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 *",
    "  (let ((n (floor a)))\n    (if (not (even? n))\n      (let ((p (prime? n)))\n        (if (not (and (p 3) (p 5) (p 7)))\n          (return #f)\n          (return #t))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((i (quotient n 3)))\n        (if (zero? (modulo i 2))\n          (if (zero? (modulo (quotient i 3)))\n            #t\n            (is_multiply_prime (modulo (quotient i 3)))))\n          #f))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #f\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 1000)\n;; #f\n;; 1000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 2000)\n;; #f\n;; 2000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 3000)\n;; #f\n;; 3000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 4000)\n;; #f\n;; 4000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 5000)\n;; #f\n;; 5000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 6000)\n;; #f\n;; 6000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 7000)\n;; #f\n;; 7000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 8000)\n;; #f\n;; 8000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 9000)\n;; #f\n;; 9000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 10000)\n;; #f\n;; 10000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 11000)\n;; #f\n;; 11000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 12000)\n;; #f\n;; 12000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 13000)\n;; #f\n;; 13000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 14000)\n;; #f",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (for-each (lambda (prime)\n                  (and\n                    (>= prime 2)\n                    (>= prime 3)\n                    (>= prime 5)\n                    (= (modulo prime 2) 0)\n                    (= (modulo prime 3) 0)\n                    (= (modulo prime 5) 0)))\n                prime-list\n              (not (= (car prime-list) 0)))\n      (= (car prime-list) 0))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo n 3) 2) 5)))\n            (q (modulo (modulo (modulo (modulo n 5) 3) 5)))\n            (r (modulo (modulo (modulo (modulo n 7) 3) 7)))\n            (s (modulo (modulo (modulo (modulo n 11) 5) 11)))\n            (t (modulo (modulo (modulo (modulo (modulo n 13) 7) 11) 13)))\n            (u (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (quotient n 2))))\n        (if (zero? p)\n          (let ((q (modulo (quotient n 3))))\n            (if (zero? q)\n              (let ((r (modulo (quotient n 5))))\n                (if (zero? r)\n                  #t\n                  (else\n                    (not (is_multiply_prime (quotient (quotient n 3) 2)\n                           (quotient (quotient n 5) 2)\n                           (quotient (quotient n 7) 2))))))))))))))))\n",
    "  (let ((n (floor a)))\n    (if (not (modulo n 3))\n      (if (not (modulo (modulo n 2) 7))\n        (if (not (modulo (modulo n 5) 11))\n          (if (not (modulo (modulo n 3) 13))\n            (if (not (modulo (modulo n 7) 17))\n              (if (not (modulo (modulo n 11) 19))\n                (if (not (modulo (modulo n 13) 23))\n                  (if (not (modulo (modulo n 17) 29))\n                    (if (not (modulo (modulo n 19) 31))\n                      (if (not (modulo (modulo n 23) 37))\n                        (if (not (modulo (modulo n 29) 41))\n                          (if (not (modulo (modulo n 31) 43))\n                            (if (not (modulo (modulo n 37) 47))\n                              (if (not (modulo (modulo n 41) 53))\n                                (if (not (modulo (modulo n 43) 59))\n                                  (if (not (modulo (modulo n 47) 61))\n                                    (if (not (modulo (modulo n 53) 67))\n                                      (if (not (modulo (modulo n 59) 71))\n                                        (if (not (modulo (modulo n 61) 73))\n                                          (if (not (modulo (modulo n 67) 79))\n                                            (if (not (modulo (modulo n 71) 83))\n                                              (if (not (modulo (modulo n 73) 89))\n                                                (if (not (modulo (modulo n 79) 97))\n                                                  (if (not (modulo (modulo n 83) 101))\n                                                    (if (not (modulo (modulo n 89) 107))\n                                                      (if (not (modulo (modulo n 97) 113))\n                                                        (if (not (modulo (modulo n 101) 127))\n                                     ",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (and (not (zero? p)) (not (zero? q))))))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (is_prime p)\n               (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n p)))\n          (not (is_prime (modulo n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 3) 2)))\n            (if (zero? q)\n              (let ((r (modulo (modulo (modulo n 5) 3) 2)))\n                (if (zero? r)\n                  #t\n                  (else\n                    #f))))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo n 3) 2)))\n            (q (modulo (modulo (modulo n 5) 2)))\n            (r (modulo (modulo (modulo n 7) 2)))\n            (s (modulo (modulo (modulo n 11) 2)))\n            (t (modulo (modulo (modulo (modulo n 13) 2)))\n            (u (modulo (modulo (modulo (modulo (modulo n 17) 2)))\n            (v (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((p (find_prime a)))\n    (if (null? p)\n      #f\n      (let ((b (car p)))\n        (let ((c (cdr p)))\n          (if (null? c)\n            #t\n            (let ((d (car c)))\n              (if (null? d)\n                #t\n                (let ((e (cdr d)))\n                  (if (null? e)\n                    #t\n                    (let ((f (car e)))\n                      (if (null? f)\n                        #t\n                        (if (eq? b c)\n                          #t\n                          (if (eq? c d)\n                            #t\n                            (if (eq? d e)\n                              #t\n                              (if (eq? e f)\n                                #t\n                                #f
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (not (zero? (modulo n p)))\n               (not (modulo n (multiply p 3))))\n          #f))))))\n",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-list-length (length prime-list)))\n      (if (eq? prime-list-length 3)\n        (let ((prime-list-index 0))\n          (if (eq? (modulo a prime-list-index) 0)\n            (let ((prime-list-index (1+ prime-list-index)))\n              (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                (let ((prime-list-index (1+ prime-list-index)))\n                  (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                    (let ((prime-list-index (1+ prime-list-index)))\n                      (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                        (let ((prime-list-index (1+ prime-list-index)))\n                          (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                            (let ((prime-list-index (1+ prime-list-index)))\n                              (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                                (let ((prime-list-index (1+ prime-list-index)))\n                                  (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                                    (let ((prime-list-index (1+ prime-list-index)))\n                                      (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                                        (let ((prime-list-index (1+ prime-list-index)))\n                                          (if (eq? (modulo (modulo a prime-list-index) prime-list-index) 0)\n                                            (let ((prime-list-index (1+ prime-list-index)))\n                                              (if (eq? (modulo (modulo a prime-list-index) prime-list",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (for-each\n          (lambda (prime)\n            (and\n              (>= prime prime-list-length)\n              (>= prime prime-list-length)\n              (= (modulo prime prime-list) 0)))\n          prime-list)\n        (= a (product prime-list)))\n      (>= a prime-list-length))))\n",
    "  (let ((p (find_prime a)))\n    (if (null? p)\n      #f\n      (let ((m (multiply p 3)))\n        (if (null? (find_prime m))\n          #t\n          (let ((n (multiply p 5)))\n            (if (null? (find_prime n))\n              #t\n              #f))))))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (else\n        (let ((i (sqrt a)))\n          (if (zero? i)\n            #f\n            (else\n              (let ((j (modulo i 2)))\n                (if (zero? j)\n                  #f\n                  (else\n                    (let ((k (modulo (i * j) 2)))\n                      (if (zero? k)\n                        #f\n                        (else\n                          #t))))))))))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((p (car prime-list)))\n        (and\n          (= p 2)\n          (let ((q (car (cdr prime-list))))\n            (and\n              (= q 3)\n              (let ((r (car (cdr (cdr prime-list))))\n                    (= r 5))\n                (= a (* p q r)))))))))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo a 3)))\n        (if (zero? p)\n          (let ((q (modulo a 5)))\n            (if (zero? q)\n              #t\n              (not (and (eq? n 0) (eq? p 0) (eq? q 0))))))))))))\n",
    "  (let ((i (floor a / 100)))\n    (if (zero? i)\n      (return #t)\n      (else\n        (let ((p (modulo a 100)))\n          (if (zero? p)\n            (return #t)\n            (else\n              (if (is_prime p)\n                (if (is_prime (modulo (quotient a 100)))\n                  (return #t)\n                  (else\n                    (return #f))))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (+ n 3))))\n        (if (zero? p)\n          #f\n          (let ((q (modulo (+ n 5))))\n            (if (zero? q)\n              #f\n              (let ((r (modulo (+ n 7))))\n                (if (zero? r)\n                  #f\n                  (#t))))))))))))\n",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (and\n        (not (zero? (modulo n 2)))\n        (not (zero? (modulo n 3)))\n        (not (zero? (modulo n 5)))\n        (= (modulo n 2) 0)\n        (= (modulo n 3) 0)\n        (= (modulo n 5) 0)\n        (= (modulo (modulo n 2) 3) 0)\n        (= (modulo (modulo n 3) 5) 0)\n        (= (modulo (modulo n 5) 2) 0)\n        (= (modulo (modulo (modulo n 2) 3) 5) 0)\n        (= (modulo (modulo (modulo n 3) 5) 2) 0)\n        (= (modulo (modulo (modulo n 5) 2) 3) 0)\n        (= (modulo (modulo (modulo (modulo n 2) 3) 5) 2) 0)\n        (= (modulo (modulo (modulo (modulo n 3) 5) 2) 3) 0)\n        (= (modulo (modulo (modulo (modulo n 5) 2) 3) 5) 0)\n        (= (modulo (modulo (modulo (modulo (modulo n 2) 3) 5) 2) 3) 0)\n        (= (modulo (modulo (modulo (modulo (modulo n 3) 5) 2) 3) 5) 0)\n        (= (modulo (modulo (modulo (modulo (modulo n 5) 2) 3) 5) 2) 0)\n        (= (modulo (modulo (modulo (modulo (modulo (modulo n 2) 3) 5) 2) 3) 5) 0)\n        (= (modulo (modulo (modulo (modulo (modulo (modulo n 3) 5) 2) 3) 5) 2) 0)\n        (= (modulo (modulo (modulo (modulo (modulo (modulo n 5) 2) 3) 5) 2) 3) 0)\n        (= (modulo (",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-list-length (length prime-list)))\n      (let ((prime-list-index (make-prime-list-index)))\n        (let ((prime-list-index-length (length prime-list-index)))\n          (let ((prime-list-index-index (make-prime-list-index-index)))\n            (let ((prime-list-index-index-length (length prime-list-index-index)))\n              (let ((prime-list-index-index-index (make-prime-list-index-index-index)))\n                (let ((prime-list-index-index-index-length (length prime-list-index-index-index)))\n                  (let ((prime-list-index-index-index-index (make-prime-list-index-index-index-index)))\n                    (let ((prime-list-index-index-index-index-length (length prime-list-index-index-index-index)))\n                      (let ((prime-list-index-index-index-index-index (make-prime-list-index-index-index-index-index)))\n                        (let ((prime-list-index-index-index-index-index-length (length prime-list-index-index-index-index-index)))\n                          (let ((prime-list-index-index-index-index-index-index (make-prime-list-index-index-index-index-index-index)))\n                            (let ((prime-list-index-index-index-index-index-index-length (length prime-list-index-index-index-index-index-index)))\n                              (let ((prime-list-index-index-index-index-index-index-index (make-prime-list-index-index-index-index-index-index-index)))\n                                (let ((prime-list-index-index-index-index-index-index-index-length (length prime-list-index-index-index-index-index-index-index)))\n                                  (let ((prime-list-index-index-index-index-index-index-index-index (make-prime-list-index-index-index-index-",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo n 3)))\n            (if (zero? q)\n              (let ((r (modulo n 5)))\n                (if (zero? r)\n                  #t\n                  (else\n                    (not (and (eq? p q) (eq? q r) (eq? r n))))))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (and\n      (not (zero? n))\n      (not (zero? (modulo (+ n 3) 100)))\n      (not (zero? (modulo (+ n 5) 100)))\n      (not (zero? (modulo (+ n 7) 100)))\n      (not (zero? (modulo (+ n 11) 100)))\n      (not (zero? (modulo (+ n 13) 100)))\n      (not (zero? (modulo (+ n 17) 100)))\n      (not (zero? (modulo (+ n 19) 100)))\n      (not (zero? (modulo (+ n 23) 100)))\n      (not (zero? (modulo (+ n 29) 100)))\n      (not (zero? (modulo (+ n 31) 100)))\n      (not (zero? (modulo (+ n 37) 100)))\n      (not (zero? (modulo (+ n 41) 100)))\n      (not (zero? (modulo (+ n 43) 100)))\n      (not (zero? (modulo (+ n 47) 100)))\n      (not (zero? (modulo (+ n 53) 100)))\n      (not (zero? (modulo (+ n 59) 100)))\n      (not (zero? (modulo (+ n 61) 100)))\n      (not (zero? (modulo (+ n 67) 100)))\n      (not (zero? (modulo (+ n 71) 100)))\n      (not (zero? (modulo (+ n 73) 100)))\n      (not (zero? (modulo (+ n 79) 100)))\n      (not (zero? (modulo (+ n 83) 100)))\n      (not (zero? (modulo (+ n 89) 100)))\n      (not (zero? (modulo (+ n 97) 100)))\n      (not (zero? (modulo (+ n 101) 100))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (+ n 3))))\n        (if (zero? p)\n          #t\n          (let ((q (modulo (+ n 5))))\n            (if (zero? q)\n              #t\n              (let ((r (modulo (+ n 7))))\n                (if (zero? r)\n                  #t\n                  (not (and (modulo (+ n 3)) (modulo (+ n 5)) (modulo (+ n 7))))))))))))))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      (return #t)\n      (else\n        (let ((p (modulo a 3)))\n          (if (zero? p)\n            (return #t)\n            (else\n              (let ((q (modulo a 5)))\n                (if (zero? q)\n                  (return #t)\n                  (else\n                    (return (and (not (modulo a 7)) (not (modulo a 11)) (not (modulo a 13))))))))))))))\n",
    "  (let ((p (prime? a)))\n    (and (not (null? p))\n         (= (car p) 3)\n         (= (car (cdr p)) 2)\n         (= (car (cdr (cdr p))) 5)\n         (= (car (cdr (cdr (cdr p)))) 7)\n         (= (car (cdr (cdr (cdr (cdr p)))))) 11))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      (return #t)\n      (else\n        (if (zero? (modulo (modulo n 3)))\n          (return #t)\n          (else\n            (if (zero? (modulo (modulo (modulo n 5))))\n              (return #t)\n              (else\n                (return #f))))))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 *",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (is_prime i)\n            (if (modulo a i)\n              #f\n              (return #t))\n            (set! i (+ i 1)))\n          (set! i (+ i 1)))\n        #f))))))\n\n;; (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; (is_multiply_prime 100)\n;; #f\n;; 100 = 2 * 3 * 5 * 7\n;; (is_multiply_prime 1000)\n;; #f\n;; 1000 = 2 * 3 * 5 * 7 * 11\n;; (is_multiply_prime 10000)\n;; #f\n;; 10000 = 2 * 3 * 5 * 7 * 11 * 13\n;; (is_multiply_prime 100000)\n;; #f\n;; 100000 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n;; (is_multiply_prime 1000000)\n;; #f\n;; 1000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n;; (is_multiply_prime 10000000)\n;; #f\n;; 10000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n;; (is_multiply_prime 100000000)\n;; #f\n;; 100000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n;; (is_multiply_prime 1000000000)\n;; #f\n;; 1000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n;; (is_multiply_prime 10000000000)\n;; #f\n;; 10000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n;; (is_multiply_prime 100000000000)\n;; #f\n;; 100000000000 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n;; (is_multiply_prime 1000000000000)",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (and (is_prime n)\n           (let ((m (floor (quotient n 3)))\n                 (p (modulo n 3)))\n             (and (not (zero? m))\n                  (is_prime m)\n                  (is_prime p))))\n        (not (zero? (modulo n 3))))))\n",
    "  (let ((i (sqrt a)))\n    (if (zero? i)\n      (return #t)\n      (else\n        (for-each (lambda (p)\n                    (if (zero? (mod a p))\n                        (return #f)\n                        (else\n                          (and (is_prime p)\n                               (is_prime (mod a p)))))\n                   (range (+ i 2)))\n          (return #f)))\n      )\n    )\n  )\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (for-each (lambda (prime)\n                  (and\n                    (>= prime 3)\n                    (>= prime 5)\n                    (<= prime 100)))\n        prime-list\n        (= prime 3)\n      )\n      (for-each (lambda (prime)\n                  (and\n                    (>= prime 3)\n                    (>= prime 5)\n                    (<= prime 100)))\n        prime-list\n        (= prime 5)\n      )\n    )\n  )\n)\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< n i)\n          (if (zero? (modulo n i))\n            #f\n            (set! i (+ i 1)))))\n      #f)))\n",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (if (not (zero? (modulo n 2)))\n        (if (not (zero? (modulo n 3)))\n          (if (not (zero? (modulo n 5)))\n            (if (not (zero? (modulo n 7)))\n              (if (not (zero? (modulo n 11)))\n                (if (not (zero? (modulo n 13)))\n                  (if (not (zero? (modulo n 17)))\n                    (if (not (zero? (modulo n 19)))\n                      (if (not (zero? (modulo n 23)))\n                        (if (not (zero? (modulo n 29)))\n                          (if (not (zero? (modulo n 31)))\n                            (if (not (zero? (modulo n 37)))\n                              (if (not (zero? (modulo n 41)))\n                                (if (not (zero? (modulo n 43)))\n                                  (if (not (zero? (modulo n 47)))\n                                    (if (not (zero? (modulo n 53)))\n                                      (if (not (zero? (modulo n 59)))\n                                        (if (not (zero? (modulo n 61)))\n                                          (if (not (zero? (modulo n 67)))\n                                            (if (not (zero? (modulo n 71)))\n                                              (if (not (zero? (modulo n 73)))\n                                                (if (not (zero? (modulo n 79)))\n                                                  (if (not (zero? (modulo n 83)))\n                                                    (if (not (zero? (modulo n 89)))\n                                                      (if (not (zero? (modulo n 97)))\n                                                        (if (not (zero? (modulo n 101)))\n                                                          (if (not (zero? (modulo n103)))\n                                                            (if (not (zero? (modulo n107)))\n                                                              (if (not (zero? (modulo",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (and\n          (let ((prime-list-index (index prime-list)))\n            (and\n              (let ((prime-list-prime (prime-list-index)))\n                (and\n                  (let ((prime-list-prime-index (index prime-list-prime)))\n                    (and\n                      (let ((prime-list-prime-prime (prime-list-prime-index)))\n                        (and\n                          (let ((prime-list-prime-prime-index (index prime-list-prime-prime)))\n                            (and\n                              (let ((prime-list-prime-prime-prime (prime-list-prime-prime-index)))\n                                (and\n                                  (let ((prime-list-prime-prime-prime-index (index prime-list-prime-prime-prime)))\n                                    (and\n                                      (let ((prime-list-prime-prime-prime-prime (prime-list-prime-prime-prime-index)))\n                                        (and\n                                          (let ((prime-list-prime-prime-prime-prime-index (index prime-list-prime-prime-prime-prime)))\n                                            (and\n                                              (let ((prime-list-prime-prime-prime-prime-prime (prime-list-prime-prime-prime-prime-index)))\n                                                (and\n                                                  (let ((prime-list-prime-prime-prime-prime-prime-index (index prime-list-prime-prime-prime-prime-prime)))\n                                                    (and\n                                                      (let ((prime-list-prime-prime-prime-prime-prime-prime (prime-list-prime-prime-prime-prime-prime-index)))\n                                                        (and\n                                                          (let ((prime-list-prime-prime-prime-prime-prime-prime-index (index prime-list-prime-prime-prime-prime-prime-prime)))\n                                                            (and\n                                                              (",
    "  (let ((prime_list (make-prime-list)))\n    (let ((prime_list_length (length prime_list)))\n      (let ((i (0)))\n        (while (< i prime_list_length)\n          (if (= (car prime_list) (mul a (car (cdr prime_list))))\n            (return #t)\n            (setq i (1+ i)))\n          (setq prime_list (cdr prime_list)))))))\n\n;;; (is_multiply_prime 30)\n;;; #t\n;;; 30 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #t\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #t\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #t\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #t\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #t\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #t\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_prime 100)\n;;; #f\n;;; 100 = 2 * 3 * 5\n;;; (is_multiply_",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((i (quotient n 3)))\n        (if (zero? (modulo i 2))\n          (if (zero? (modulo (quotient i 3)))\n            (if (zero? (modulo (quotient (quotient i 3) 5)))\n              (if (zero? (modulo (quotient (quotient i 3) 7)))\n                (if (zero? (modulo (quotient (quotient i 3) 11)))\n                  (if (zero? (modulo (quotient (quotient i 3) 13)))\n                    (if (zero? (modulo (quotient (quotient i 3) 17)))\n                      (if (zero? (modulo (quotient (quotient i 3) 19)))\n                        (if (zero? (modulo (quotient (quotient i 3) 23)))\n                          (if (zero? (modulo (quotient (quotient i 3) 29)))\n                            #t\n                            #f
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (not (zero? (modulo n p)))\n               (not (zero? (modulo n (p + 1))))\n               (not (zero? (modulo n (p - 1))))\n               (not (zero? (modulo n (p * 2))))))\n          #f\n          (is_multiply_prime (a + 1)))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((prime-list-length (length prime-list)))\n        (if (eq prime-list-length 3)\n          (let ((prime-list-length-2 (length prime-list-2)))\n            (and\n              (let ((prime-list-2-length (length prime-list-2)))\n                (and\n                  (let ((prime-list-2-length-2 (length prime-list-2-2)))\n                    (and\n                      (let ((prime-list-2-2-length (length prime-list-2-2)))\n                        (and\n                          (let ((prime-list-2-2-length-2 (length prime-list-2-2-2)))\n                            (and\n                              (let ((prime-list-2-2-2-length (length prime-list-2-2-2-2)))\n                                (and\n                                  (let ((prime-list-2-2-2-2-length-2 (length prime-list-2-2-2-2-2)))\n                                    (and\n                                      (let ((prime-list-2-2-2-2-2-length-2 (length prime-list-2-2-2-2-2-2)))\n                                        (and\n                                          (let ((prime-list-2-2-2-2-2-2-length-2 (length prime-list-2-2-2-2-2-2-2)))\n                                            (and\n                                              (let ((prime-list-2-2-2-2-2-2-length-2-2 (length prime-list-2-2-2-2-2-2-2)))\n                                                (and\n                                                  (let ((prime-list-2-2-2-2-2-2-length-2-2-2 (length prime-list-2-2-2-2-2-2-2-2)))\n                                                    (and\n                                                      (let ((prime-list-2-2-2-2-2-2-length-2",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i 1))\n        (while (< i n)\n          (if (zero? (modulo (quotient a (quotient i 3)) 100)))\n            (set! i (+ i 1))\n          (else\n            (set! i (- i 1)))))\n      (not (zero? n))))\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((n (modulo a 100)))\n    (and\n      (>= n 0)\n      (and\n        (>= n 3)\n        (>= n 5)\n        (>= n 7)\n        (< n 13)\n        (not (modulo (mul n 3) 100))\n        (not (modulo (mul n 5) 100))\n        (not (modulo (mul n 7) 100))\n      )\n      (not (modulo (mul n 3) 100))\n      (not (modulo (mul n 5) 100))\n      (not (modulo (mul n 7) 100))\n    )\n  )\n)\n",
    "  (let ((prime_list (make-prime-list)))\n    (let ((prime_list_length (length prime_list)))\n      (let ((prime_list_index (index prime_list)))\n        (let ((prime_list_index_2 (index prime_list_index)))\n          (let ((prime_list_index_3 (index prime_list_index_2)))\n            (let ((prime_list_index_4 (index prime_list_index_3)))\n              (let ((prime_list_index_5 (index prime_list_index_4)))\n                (let ((prime_list_index_6 (index prime_list_index_5)))\n                  (let ((prime_list_index_7 (index prime_list_index_6)))\n                    (let ((prime_list_index_8 (index prime_list_index_7)))\n                      (let ((prime_list_index_9 (index prime_list_index_8)))\n                        (let ((prime_list_index_10 (index prime_list_index_9)))\n                          (let ((prime_list_index_11 (index prime_list_index_10)))\n                            (let ((prime_list_index_12 (index prime_list_index_11)))\n                              (let ((prime_list_index_13 (index prime_list_index_12)))\n                                (let ((prime_list_index_14 (index prime_list_index_13)))\n                                  (let ((prime_list_index_15 (index prime_list_index_14)))\n                                    (let ((prime_list_index_16 (index prime_list_index_15)))\n                                      (let ((prime_list_index_17 (index prime_list_index_16)))\n                                        (let ((prime_list_index_18 (index prime_list_index_17)))\n                                          (let ((prime_list_index_19 (index prime_list_index_18)))\n                                            (let ((prime_list_index_20 (index prime_list_index_19)))\n                                              (let ((prime_list_index_21 (index prime_list_index_20)))\n                                                (let ((prime_",
    "  (let ((p (prime? a)))\n    (and (not (null? p))\n         (= (car p) 3)\n         (= (cdr p) (list 2 3 5))\n         (= (car (cdr p)) (car (cdr (cdr p))))\n         (= (car (cdr (cdr p))) (car (cdr (cdr (cdr p))))))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;;",
    "  (let ((i (floor a / 3)))\n    (if (zero? i)\n      (return #t)\n      (else\n        (let ((p (modulo a 3)))\n          (if (zero? p)\n            (return #t)\n            (else\n              (let ((q (modulo (modulo a 3) 3)))\n                (if (zero? q)\n                  (return #t)\n                  (else\n                    (return #f))))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (and (not (zero? p)) (not (zero? q))\n            (= (modulo (mul a 3)) (modulo (mul a 5)))\n            (= (modulo (mul a 5)) (modulo (mul a 3)))))))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (let ((prime-count (count prime-list)))\n      (if (= prime-count 3)\n        (progn\n          (define (prime-multiply a b)\n            (if (= (modulo a b) 0)\n              (progn\n                (define (prime-multiply a b)\n                  (if (= (modulo a b) 0)\n                    (progn\n                      (define (prime-multiply a b)\n                        (if (= (modulo a b) 0)\n                          (progn\n                            (define (prime-multiply a b)\n                              (if (= (modulo a b) 0)\n                                (progn\n                                  (define (prime-multiply a b)\n                                    (if (= (modulo a b) 0)\n                                      (progn\n                                        (define (prime-multiply a b)\n                                          (if (= (modulo a b) 0)\n                                            (progn\n                                              (define (prime-multiply a b)\n                                                (if (= (modulo a b) 0)\n                                                  (progn\n                                                   (define (prime-multiply a b)\n                                                     (if (= (modulo a b) 0)\n                                                       (progn\n                                                        (define (prime-multiply a b)\n                                                         (if (= (modulo a b) 0)\n                                                           (progn\n                                                            (define (prime-multiply a b)\n                                                              (if (= (modulo a b) 0)\n                                                                (progn\n                                                                  (define (prime-multiply a b)\n                                                                    (if (= (modulo a b) 0)\n                                                                      (progn\n                                                                        (define (prime-multiply a b)\n                                                                          (if (= (modulo a b) 0)\n                                                                            (pro",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo n 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 5) 2)))\n            (if (zero? q)\n              #t\n              (not (modulo (modulo (modulo n 7) 2)))))\n          (not (modulo (modulo (modulo n 11) 2)))))\n      (not (modulo (modulo (modulo n 13) 2)))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 3) 2)))\n            (if (zero? q)\n              (let ((r (modulo (modulo (modulo n 5) 3) 2)))\n                (if (zero? r)\n                  #t\n                  (else\n                    #f))))))))))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo n i))\n            (return #f)\n            (set! i (+ i 1)))))\n        #t))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (and (not (zero? p)) (not (zero? q))\n            (= (modulo (mul a 3)) (modulo (mul a 5)))\n            (= (modulo (mul a 5)) (modulo (mul a 3)))\n            (= (modulo (mul a 3)) (modulo (mul a 5)))\n            (= (modulo (mul a 5)) (modulo (mul a 3)))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((i 0))\n        (while (< i 3)\n          (if (zero? (modulo (modulo (modulo i n) 100)))\n            #f\n            (set! i (+ i 1)))))\n      #t))))\n",
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((p (prime? n)))\n        (if (and (p 3) (p 5) (p 7))\n          (return (= n (p * 3) * (p * 5) * (p * 7))))\n        (return #f))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((prime_list (make-prime-list)))\n    (let ((prime_list_length (length prime_list)))\n      (let ((i (0)))\n        (while (< i prime_list_length)\n          (if (= (car prime_list) (* a (car (cdr prime_list))))\n            (return #t)\n            (setq i (i + 1))\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 3) 2)))\n            (if (zero? q)\n              (let ((r (modulo (modulo n 5) 2)))\n                (if (zero? r)\n                  #t\n                  (else\n                    #f))))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (and\n      (>= n 0)\n      (>= (modulo (modulo n 3)) 0)\n      (>= (modulo (modulo (modulo n 5)) 3))\n      (= (modulo (modulo (modulo n 7)) 5))\n      (= (modulo (modulo (modulo n 11)) 7))\n      (= (modulo (modulo (modulo n 13)) 11))\n      (= (modulo (modulo (modulo n 17)) 13))\n      (= (modulo (modulo (modulo n 19)) 17))\n      (= (modulo (modulo (modulo n 23)) 19))\n      (= (modulo (modulo (modulo n 29)) 23))\n      (= (modulo (modulo (modulo n 31)) 29))\n      (= (modulo (modulo (modulo n 37)) 31))\n      (= (modulo (modulo (modulo n 41)) 37))\n      (= (modulo (modulo (modulo n 43)) 41))\n      (= (modulo (modulo (modulo n 47)) 43))\n      (= (modulo (modulo (modulo n 53)) 47))\n      (= (modulo (modulo (modulo n 59)) 53))\n      (= (modulo (modulo (modulo n 61)) 59))\n      (= (modulo (modulo (modulo n 67)) 61))\n      (= (modulo (modulo (modulo n 71)) 67))\n      (= (modulo (modulo (modulo n 73)) 71))\n      (= (modulo (modulo (modulo n 79)) 73))\n      (= (modulo (modulo (modulo n 83)) 79))\n      (= (modulo (modulo (modulo n 89)) 83))\n      (= (modulo (modulo (modulo n 97)) 89))\n      (= (modulo (modulo (modulo n 101)) 97))))\n  #f))\n",
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((i 0))\n        (while (< (modulo n i) 0)\n          (set! i (+ i 1))\n          (if (= (modulo n (multiply i 3)) 0)\n            (return #t)\n          )\n        )\n        (return #f)\n      )\n      (return #f)\n    )\n  )\n)\n",
    "  (let ((prime-list (make-prime-list a)))\n    (let ((prime-count (count prime-list)))\n      (and (>= prime-count 3)\n           (every?\n             (lambda (p)\n               (and (= (modulo p a) 0)\n                     (not (member p prime-list))))\n             prime-list))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo n 3) 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 5) 2)))\n            (if (zero? q)\n              #t\n              (else\n                (not (is_multiply_prime (modulo (modulo (modulo n 3) 2) (modulo (modulo n 5) 2)))\n                  (not (is_multiply_prime (modulo (modulo (modulo n 5) 2) (modulo (modulo n 3) 2)))\n                    (not (is_multiply_prime (modulo (modulo (modulo n 3) 2) (modulo (modulo n 7) 2)))\n                      (not (is_multiply_prime (modulo (modulo (modulo n 7) 2) (modulo (modulo n 3) 2)))\n                        (not (is_multiply_prime (modulo (modulo (modulo n 7) 2) (modulo (modulo n 5) 2)))\n                          (not (is_multiply_prime (modulo (modulo (modulo n 5) 2) (modulo (modulo n 7) 2)))\n                            (not (is_multiply_prime (modulo (modulo (modulo n 7) 2) (modulo (modulo n 5) 2)))\n                              (not (is_multiply_prime (modulo (modulo (modulo n 5) 2) (modulo (modulo n 7) 2)))\n                                (not (is_multiply_prime (modulo (modulo (modulo n 7) 2) (modulo (modulo n 5) 2)))\n                                  (not (is_multiply_prime (modulo (modulo (modulo n 5) 2) (modulo (modulo n 7) 2)))\n                                    (not (is_multiply_prime (modulo (modulo (modulo n 7) 2) (modulo (modulo n 5) 2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((prime_list (make-prime-list a)))\n    (and\n      (let ((prime_list_length (length prime_list)))\n        (if (= prime_list_length 3)\n          (let ((prime_list_head prime_list))\n            (if (= prime_list_head (+ prime_list_head prime_list_head))\n              (let ((prime_list_tail prime_list))\n                (if (= prime_list_tail (+ prime_list_tail prime_list_tail))\n                  (let ((prime_list_tail_tail prime_list_tail))\n                    (if (= prime_list_tail_tail (+ prime_list_tail_tail prime_list_tail_tail))\n                      (return #t)))))))))))))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo n (car i)))\n            (return #f)\n            (set! i (car i) (cdr i)))))\n      #t))))\n",
    "  (let ((i (sqrt a)))\n    (and\n      (let ((p (modulo i 2)))\n        (and\n          (= p 0)\n          (not (modulo i 3))\n          (not (modulo i 5))\n          (not (modulo i 7))\n          (not (modulo i 11))\n          (not (modulo i 13))\n          (not (modulo i 17))\n          (not (modulo i 19))\n          (not (modulo i 23))\n          (not (modulo i 29))))\n      (= i a))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;;",
    "  (let ((p (find_prime a)))\n    (and\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      (= a (* p p))\n      ",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo a 3) 2)))\n            (q (modulo (modulo (modulo a 5) 2)))\n            (r (modulo (modulo (modulo a 7) 2)))\n            (s (modulo (modulo (modulo a 11) 2)))\n            (t (modulo (modulo (modulo a 13) 2)))\n            (u (modulo (modulo (modulo a 17) 2)))\n            (v (modulo (modulo (modulo a 19) 2)))\n            (w (modulo (modulo (modulo a 23) 2)))\n            (x (modulo (modulo (modulo a 29) 2)))\n            (y (modulo (modulo (modulo a 31) 2)))\n            (z (modulo (modulo (modulo (modulo a 37) 2)))\n            (aa (modulo (modulo (modulo (modulo a 41) 2)))\n            (ab (modulo (modulo (modulo (modulo (modulo a 43) 2)))\n            (ac (modulo (modulo (modulo (modulo (modulo (modulo a 47) 2)))\n            (ad (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((p (find_prime_factors a)))\n    (and (map (lambda (x) (eq (car x) 3)) p)\n         (map (lambda (x) (eq (car x) 2)) p)\n         (map (lambda (x) (eq (car x) 5)) p))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((i (quotient n 3)))\n        (if (zero? i)\n          #f\n          (let ((j (quotient n 5)))\n            (if (zero? j)\n              #f\n              (let ((k (quotient n 7)))\n                (if (zero? k)\n                  #f\n                  (return #t)))))))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (if (zero? (modulo (div a 2)))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3",
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((p (prime-n)))\n        (if (and (not (modulo n p))\n               (not (modulo n (p + 1)))\n               (not (modulo n (p + 2)))\n               (not (modulo n (p + 3))))\n          (return #t)\n          (else (return #f)))))))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo n 2)))\n        (if (zero? p)\n          (let ((q (modulo (modulo n 3) 2)))\n            (if (zero? q)\n              (let ((r (modulo (modulo n 5) 2)))\n                (if (zero? r)\n                  #t\n                  (else\n                    #f))))))))))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      (return #t)\n      (else\n        (let ((p (modulo (modulo (modulo a 3) 2) 2)))\n          (if (zero? p)\n            (return #t)\n            (else\n              (let ((q (modulo (modulo (modulo (modulo a 5) 3) 2) 2)))\n                (if (zero? q)\n                  (return #t)\n                  (else\n                    (return #f))))))))))))\n",
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((p (prime? n)))\n        (and (and (not (modulo n 2)) (not (modulo n 3)) (not (modulo n 5)))\n             (= (modulo (mul n 3)) 0)\n             (= (modulo (mul n 5)) 0)\n             (= (modulo (mul n 7)) 0)\n             (= (modulo (mul n 11)) 0)\n             (= (modulo (mul n 13)) 0)\n             (= (modulo (mul n 17)) 0)\n             (= (modulo (mul n 19)) 0)\n             (= (modulo (mul n 23)) 0)\n             (= (modulo (mul n 29)) 0)\n             (= (modulo (mul n 31)) 0)\n             (= (modulo (mul n 37)) 0)\n             (= (modulo (mul n 41)) 0)\n             (= (modulo (mul n 43)) 0)\n             (= (modulo (mul n 47)) 0)\n             (= (modulo (mul n 53)) 0)\n             (= (modulo (mul n 59)) 0)\n             (= (modulo (mul n 61)) 0)\n             (= (modulo (mul n 67)) 0)\n             (= (modulo (mul n 71)) 0)\n             (= (modulo (mul n 73)) 0)\n             (= (modulo (mul n 79)) 0)\n             (= (modulo (mul n 83)) 0)\n             (= (modulo (mul n 89)) 0)\n             (= (modulo (mul n 97)) 0))))\n      #f\n      #t))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((p (find_prime a)))\n    (and\n      (>= a (car p))\n      (= (car p) 3)\n      (= (cdr p) (list 2 3 5))\n      (= (car (cdr p)) (car (cdr (cdr p))))\n      (= (car (cdr (cdr p))) (car (cdr (cdr (cdr p)))))))\n  )\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #f\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 1000)\n;; #f\n;; 1000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 1000000)\n;; #f\n;; 1000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100000000)\n;; #f\n;; 100000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 1000000000)\n;; #f\n;; 1000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 10000000000)\n;; #f\n;; 10000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100000000000)\n;; #f\n;; 100000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 1000000000000)\n;; #f\n;; 1000000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 10000000000000)\n;; #f\n;; 10000000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100000000000000)\n;; #f\n;; 100000000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 1000000000000000)\n;; #f\n;; 1000000000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 10000000000000000)\n;; #f\n;; 10000000000000000 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100000000000000000)\n;; #f\n;; 100000000000000000 = 2 * 3 * 5\n;; >>> (is_multiply",
    "  (let ((prime_list (make-prime-list)))\n    (let ((prime_list_length (length prime_list)))\n      (let ((i (0)))\n        (while (< i prime_list_length)\n          (if (= (modulo a prime_list[i]) 0)\n            (return #f)\n            (set! i (+ i 1)))\n        )\n        (return #t))))\n)\n",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-list-length (length prime-list)))\n      (let ((i (0)))\n        (while (< i prime-list-length)\n          (if (and (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime-list) (* (car prime-list) (car prime-list)))\n                (= (cdr prime-list) (cdr prime-list))\n                (= (car prime",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (quotient n 3))))\n        (if (zero? p)\n          #f\n          (let ((q (modulo (quotient p 3))))\n            (if (zero? q)\n              #f\n              (let ((r (modulo (quotient q 3))))\n                (if (zero? r)\n                  #f\n                  (if (and (not (modulo (quotient r 3)))\n                         (not (modulo (quotient (quotient r 3) 3)))\n                         (not (modulo (quotient (quotient r 3) 2)))\n                         (not (modulo (quotient (quotient r 3) 1)))\n                         (not (modulo (quotient (quotient r 3) 0)))\n                         (not (modulo (quotient (quotient r 3) -1)))\n                         (not (modulo (quotient (quotient r 3) -2)))\n                         (not (modulo (quotient (quotient r 3) -3)))\n                         (not (modulo (quotient (quotient r 3) -4)))\n                         (not (modulo (quotient (quotient r 3) -5)))\n                         (not (modulo (quotient (quotient r 3) -6)))\n                         (not (modulo (quotient (quotient r 3) -7)))\n                         (not (modulo (quotient (quotient r 3) -8)))\n                         (not (modulo (quotient (quotient r 3) -9)))\n                         (not (modulo (quotient (quotient r 3) -10)))\n                         (not (modulo (quotient (quotient r 3) -11)))\n                         (not (modulo (quotient (quotient r 3) -12)))\n                         (not (modulo (quotient (quotient r 3) -13)))\n                         (not (modulo (quotient (quotient r 3) -14)))\n                         (not (modulo (qu",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? (modulo n 3)))\n          (if (not (zero? (modulo n 5)))\n            (if (not (zero? (modulo n 7)))\n              (if (not (zero? (modulo n 11)))\n                (if (not (zero? (modulo n 13)))\n                  (if (not (zero? (modulo n 17)))\n                    (if (not (zero? (modulo n 19)))\n                      (if (not (zero? (modulo n 23)))\n                        (if (not (zero? (modulo n 29)))\n                          #t\n                          #f
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (for-each (lambda (prime)\n                  (and\n                    (>= prime 3)\n                    (>= prime 5)\n                    (>= prime 7)))\n        prime-list)\n      (= a (* prime-list))))\n)\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (and (not (zero? p)) (not (zero? q))))))))\n",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-list-length (length prime-list)))\n      (let ((i (0)))\n        (while (< i prime-list-length)\n          (if (= (modulo a prime-list[i]) 0)\n            (return #f)\n            (setq i (+ i 1)))))\n      (return #t))))\n",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-list-length (length prime-list)))\n      (if (eq prime-list-length 3)\n        (let ((p1 (car prime-list)))\n          (let ((p2 (car (cdr prime-list)))\n                (p3 (car (cdr (cdr prime-list))))\n                (p1-prime-factor (car (car prime-list)))\n                (p2-prime-factor (car (car (cdr prime-list))))\n                (p3-prime-factor (car (car (cdr (cdr prime-list)))))))\n          (if (= (car (car prime-list)) p1-prime-factor)\n            (if (= (car (car (cdr prime-list))) p2-prime-factor)\n              (if (= (car (car (cdr (cdr prime-list)))) p3-prime-factor)\n                (if (= (car (car (cdr (cdr (cdr prime-list)))) p1-prime-factor)\n                     (if (= (car (car (cdr (cdr (cdr prime-list)))) p2-prime-factor)\n                          (if (= (car (car (cdr (cdr (cdr prime-list)))) p3-prime-factor)\n                                  (if (= (car (car (cdr (cdr (cdr (cdr prime-list)))) p1-prime-factor))\n                                      (if (= (car (car (cdr (cdr (cdr (cdr prime-list)))) p2-prime-factor))\n                                          (if (= (car (car (cdr (cdr (cdr (cdr prime-list)))) p3-prime-factor))\n                                              #t\n                                              #f))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((n (modulo a 100)))\n    (and\n      (>= n 0)\n      (< n 100)\n      (= (modulo (mul n 3)) 1)\n      (= (modulo (mul n 5)) 1)\n      (= (modulo (mul n 7)) 1)\n      (= (modulo (mul n 11)) 1)\n      (= (modulo (mul n 13)) 1)\n      (= (modulo (mul n 17)) 1)\n      (= (modulo (mul n 19)) 1)\n      (= (modulo (mul n 23)) 1)\n      (= (modulo (mul n 29)) 1)\n      (= (modulo (mul n 31)) 1)\n      (= (modulo (mul n 37)) 1)\n      (= (modulo (mul n 41)) 1)\n      (= (modulo (mul n 43)) 1)\n      (= (modulo (mul n 47)) 1)\n      (= (modulo (mul n 53)) 1)\n      (= (modulo (mul n 59)) 1)\n      (= (modulo (mul n 61)) 1)\n      (= (modulo (mul n 67)) 1)\n      (= (modulo (mul n 71)) 1)\n      (= (modulo (mul n 73)) 1)\n      (= (modulo (mul n 79)) 1)\n      (= (modulo (mul n 83)) 1)\n      (= (modulo (mul n 89)) 1)\n      (= (modulo (mul n 97)) 1)\n      (= (modulo (mul n 101)) 1)\n      (= (modulo (mul n 103)) 1)\n      (= (modulo (mul n 107)) 1)\n      (= (modulo (mul n 109)) 1)\n      (= (modulo (mul n 113)) 1)\n      (= (modulo (mul n 127)) 1)\n      (= (modulo (mul n 131)) 1)\n      (= (modulo (mul n 137)) 1)\n      ",
    "  (let ((i (sqrt a)))\n    (if (zero? i)\n      (return #t)\n      (else\n        (and\n          (is_prime i)\n          (is_prime (a / i))\n          (is_prime (a / (i * i)))\n          (is_prime (a / (i * i * i)))\n          (is_prime (a / (i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i * i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i * i * i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i * i * i * i * i * i * i)))\n          (is_prime (a / (i * i * i * i * i * i * i * i * i * i * i * i))))\n        (return #f)))))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #f\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (",
    "  (let ((n (floor a)))\n    (if (not (zero? n))\n      (if (not (zero? (modulo n 2)))\n        (if (not (zero? (modulo n 3)))\n          (if (not (zero? (modulo n 5)))\n            (return #t)\n            (return #f))))\n      (return #f)))\n  )\n)\n",
    "  (let ((p (lambda (n) (if (eq n 0) 1 (is_prime n))))\n        (if (eq a 0)\n            #f\n            (let ((b (lambda (n) (if (eq n 0) 1 (is_prime (- n 1))))\n                   (c (lambda (n) (if (eq n 0) 1 (is_prime (- n 2)))))))\n              (if (eq a 1)\n                  #f\n                  (let ((d (lambda (n) (if (eq n 0) 1 (is_prime (- n 3))))))\n                    (if (eq a 2)\n                        #f\n                        (let ((e (lambda (n) (if (eq n 0) 1 (is_prime (- n 4))))))\n                          (if (eq a 3)\n                              #f\n                              (let ((f (lambda (n) (if (eq n 0) 1 (is_prime (- n 5))))))\n                                (if (eq a 4)\n                                    #f\n                                    (let ((g (lambda (n) (if (eq n 0) 1 (is_prime (- n 6))))))\n                                      (if (eq a 5)\n                                          #f\n                                          (let ((h (lambda (n) (if (eq n 0) 1 (is_prime (- n 7))))))\n                                            (if (eq a 6)\n                                                #f\n                                                (let ((i (lambda (n) (if (eq n 0) 1 (is_prime (- n 8))))))\n                                                  (if (eq a 7)\n                                                      #f\n                                                      (let ((j (lambda (n) (if (eq n 0) 1 (is_prime (- n 9))))))\n                                                        (if (eq a 8)\n                                                            #f\n                                                            (let ((k (lambda (n) (if (eq n 0) 1 (is_prime (- n 10))))))\n                                                              (if (eq a 9)\n                                                                  #f\n                                                                  (let ((l (lambda (n) (",
    "  (let ((n (modulo a 100)))\n    (and\n      (not (= n 0))\n      (not (= n 1))\n      (not (= n 2))\n      (not (= n 3))\n      (not (= n 4))\n      (not (= n 5))\n      (not (= n 6))\n      (not (= n 7))\n      (not (= n 8))\n      (not (= n 9))\n      (not (= n 10))\n      (not (= n 11))\n      (not (= n 12))\n      (not (= n 13))\n      (not (= n 14))\n      (not (= n 15))\n      (not (= n 16))\n      (not (= n 17))\n      (not (= n 18))\n      (not (= n 19))\n      (not (= n 20))\n      (not (= n 21))\n      (not (= n 22))\n      (not (= n 23))\n      (not (= n 24))\n      (not (= n 25))\n      (not (= n 26))\n      (not (= n 27))\n      (not (= n 28))\n      (not (= n 29))\n      (not (= n 30))))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 7\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 7\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 11\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 11\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 13\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 13\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 17\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 17\n;; >>> (is_multiply_prime 30)",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (div a 3))))\n        (let ((q (modulo (div a 5))))\n          (if (zero? (modulo (div a 2)))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 2))) (not (modulo (div a 5))))\n            (and (not (modulo (div a 3",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (first (primes n))))\n        (if (zero? (modulo n p))\n          (let ((q (second p)))\n            (if (zero? (modulo n q))\n              (let ((r (third p)))\n                (if (zero? (modulo n r))\n                  #t\n                  (else\n                    (not (is_multiply_prime (quotient n r) (quotient n q) (quotient n p))))))))))))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((p (car prime-list)))\n        (and\n          (let ((p2 (cdr p)))\n            (and\n              (let ((p3 (cdr p2)))\n                (and\n                  (let ((p4 (cdr p3)))\n                    (and\n                      (let ((p5 (cdr p4)))\n                        (and\n                          (let ((p6 (cdr p5)))\n                            (and\n                              (let ((p7 (cdr p6)))\n                                (and\n                                  (let ((p8 (cdr p7)))\n                                    (and\n                                      (let ((p9 (cdr p8)))\n                                        (and\n                                          (let ((p10 (cdr p9)))\n                                            (and\n                                              (let ((p11 (cdr p10)))\n                                                (and\n                                                  (let ((p12 (cdr p11)))\n                                                    (and\n                                                      (let ((p13 (cdr p12)))\n                                                        (and\n                                                          (let ((p14 (cdr p13)))\n                                                            (and\n                                                              (let ((p15 (cdr p14)))\n                                                                (and\n                                                                  (let ((p16 (cdr p15)))\n                                                                    (and\n                                                                      (let ((p17 (cdr p16)))\n                                                                        (and\n                                                                          (let ((p18 (cdr p17)))\n                                                                            (and\n                                                                              (let ((p19 (cdr p18)))\n                                                                                (and\n                                                                                    (let ((p20 (cdr p19)))\n                                                                                      (and\n                                                                                        (let ((p21 (cdr p20)))\n                                                                                          (and\n                                                                                             (let ((p22 (cdr p21)))\n                                                                                               (and\n                                                                                                (let ((p23",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i 0))\n        (while (< i 3)\n          (if (modulo (multiply i 3) a)\n            (return #f)\n            (set! i (add 1 i)))\n          (set! i (add 1 i)))\n        #t))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((i (sqrt n)))\n        (if (zero? i)\n          #t\n          (let ((j (modulo (modulo i 3) 2)))\n            (if (zero? j)\n              #t\n              (let ((k (modulo (modulo i 5) 2)))\n                (if (zero? k)\n                  #t\n                  (#t))))))))))))\n",
    "  (let ((prime-list (make-prime-list a)))\n    (and\n      (let ((p (car prime-list)))\n        (and\n          (= p 3)\n          (let ((q (cdr prime-list)))\n            (and\n              (= q (car q))\n              (= (car q) 2)\n              (= (car q) 3)\n              (= (car q) 5)\n              (= (car q) 7)\n              (= (car q) 11)\n              (= (car q) 13)\n              (= (car q) 17)\n              (= (car q) 19)\n              (= (car q) 23)\n              (= (car q) 29)\n              (= (car q) 31)\n              (= (car q) 37)\n              (= (car q) 41)\n              (= (car q) 43)\n              (= (car q) 47)\n              (= (car q) 53)\n              (= (car q) 59)\n              (= (car q) 61)\n              (= (car q) 67)\n              (= (car q) 71)\n              (= (car q) 73)\n              (= (car q) 79)\n              (= (car q) 83)\n              (= (car q) 89)\n              (= (car q) 97))))))))))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #f\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply_prime 100)\n;; #t\n;; 100 = 2 * 3 * 5\n;; >>> (is_multiply",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #f\n      (let ((i (sqrt n)))\n        (if (zero? i)\n          #f\n          (let ((j (modulo i 3)))\n            (if (zero? j)\n              #f\n              (let ((k (modulo (i * j) 3)))\n                (if (zero? k)\n                  #f\n                  (#t\n                    (and (modulo (i * j) 5) (modulo (i * k) 5) (modulo (j * k) 5)))\n                  #f))))))))))))))\n",
    "  (let ((i (sqrt a)))\n    (if (zero? i)\n      (return #t)\n      (else\n        (let ((p (car i)))\n          (if (zero? p)\n            (return #f)\n            (else\n              (let ((q (cdr i)))\n                (if (zero? q)\n                  (return #f)\n                  (else\n                    (let ((r (car q)))\n                      (if (zero? r)\n                        (return #f)\n                        (else\n                          (return (and (eq? p q) (eq? p r) (eq? q r)))))\n                    (else\n                      (return #f))))))))))))))\n",
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((p (divisors n)))\n        (and (map (lambda (x) (modulo x n)) p)\n             (map (lambda (x) (not (modulo x n))) p)))\n      #t\n    )\n  )\n)\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo a 3)))\n        (let ((q (modulo a 5)))\n          (if (zero? n)\n            #t\n            (if (zero? (modulo (modulo a 3) 2))\n              (if (zero? (modulo (modulo a 5) 2))\n                #t\n                (if (zero? (modulo (modulo a 5) 3))\n                  #t\n                  (if (zero? (modulo (modulo a 3) 5))\n                    #t\n                    #f
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (+ n 3))))\n        (if (zero? p)\n          #t\n          (let ((q (modulo (+ n 5))))\n            (if (zero? q)\n              #t\n              (let ((r (modulo (+ n 7))))\n                (if (zero? r)\n                  #t\n                  (not (and (not (modulo (+ n 3))) (not (modulo (+ n 5))) (not (modulo (+ n 7))))))))))))))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      (return #t)\n      (else\n        (let ((p (modulo (modulo a 3) 2)))\n          (if (zero? p)\n            (return #t)\n            (else\n              (let ((q (modulo (modulo a 5) 2)))\n                (if (zero? q)\n                  (return #t)\n                  (else\n                    (return #f)))))))))))\n",
    "  (let ((p (prime_numbers)))\n    (and\n      (<= a (car p))\n      (>= a (car (cdr p)))\n      (= (car (car p)) (car (car (cdr p))))\n      (= (car (car (cdr p))) (car (car (cdr (cdr p))))))))\n\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 5\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n;; #f\n;; 30 = 2 * 3 * 5\n;; >>> (is_multiply_prime 30)\n",
    "  (let ((prime_list (make-prime-list a)))\n    (and\n      (for-each (lambda (p)\n                  (and\n                    (>= p a)\n                    (>= p (car prime_list))\n                    (>= (car prime_list) p)\n                    (>= (cdr prime_list) p)))\n                (lambda (p)\n                  (and\n                    (>= p a)\n                    (>= p (car prime_list))\n                    (>= (car prime_list) p)\n                    (>= (cdr prime_list) p)))\n                (lambda (p)\n                  (and\n                    (>= p a)\n                    (>= p (car prime_list))\n                    (>= (car prime_list) p)\n                    (>= (cdr prime_list) p))))\n      (= (car prime_list) 3)))\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo n i))\n            (return #f)\n            (set! i (+ i 1)))))\n      #t))))\n",
    "  (let ((prime-list (make-prime-list)))\n    (let ((prime-list-length (length prime-list)))\n      (let ((i (0)))\n        (while (< i prime-list-length)\n          (if (= (car prime-list) (mul a (car (cdr prime-list))))\n            (return #t)\n            (setq i (i + 1))\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((n (floor a)))\n    (if (< n 100)\n      (let ((p (prime-n)))\n        (and (not (modulo n p))\n             (not (modulo n (p + 1)))\n             (not (modulo n (p + 2)))\n             (not (modulo n (p + 3))))\n          (return #t)\n        (else (return #f))))\n    (else (return #f))))\n",
    "  (let ((n (modulo a 2)))\n    (if (zero? n)\n      (return #t)\n      (else\n        (if (zero? (modulo (modulo n 3) 2))\n          (return #t)\n          (else\n            (if (zero? (modulo (modulo (modulo n 5) 2)))))\n          (else\n            (return #f))))))\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5",
    "  (let ((i (floor a)))\n    (if (i < 0)\n      (return #f)\n    (if (i % 2 == 0)\n      (return #f)\n    (if (i % 3 == 0)\n      (return #f)\n    (if (i % 5 == 0)\n      (return #f)\n    (if (i % 7 == 0)\n      (return #f)\n    (if (i % 11 == 0)\n      (return #f)\n    (if (i % 13 == 0)\n      (return #f)\n    (if (i % 17 == 0)\n      (return #f)\n    (if (i % 19 == 0)\n      (return #f)\n    (if (i % 23 == 0)\n      (return #f)\n    (if (i % 29 == 0)\n      (return #f)\n    (if (i % 31 == 0)\n      (return #f)\n    (if (i % 37 == 0)\n      (return #f)\n    (if (i % 41 == 0)\n      (return #f)\n    (if (i % 43 == 0)\n      (return #f)\n    (if (i % 47 == 0)\n      (return #f)\n    (if (i % 53 == 0)\n      (return #f)\n    (if (i % 59 == 0)\n      (return #f)\n    (if (i % 61 == 0)\n      (return #f)\n    (if (i % 67 == 0)\n      (return #f)\n    (if (i % 71 == 0)\n      (return #f)\n    (if (i % 73 == 0)\n      (return #f)\n    (if (i % 79 == 0)\n      (return #f)\n    (if (i % 83 == 0)\n      (return #f)\n    (if (i % 89 == 0)\n      (return #f)\n    (if (i % 97 == 0)\n      (return #f)\n    (if (i % 101 == 0)\n      (return #f)\n    (if (i % 103 == 0)\n      (return #f)\n",
    "  (let ((n (floor a)))\n    (if (zero? n)\n      #t\n      (let ((p (prime? n)))\n        (if (not (zero? p))\n          (and (not (zero? (modulo n p)))\n               (not (zero? (modulo n (multiply n p))))\n               (not (zero? (modulo n (multiply n (multiply n p)))))))\n          #f\n          (is_multiply_prime (add n 1)))))))\n",
    "  (let ((n (modulo a 100)))\n    (if (zero? n)\n      #t\n      (let ((p (modulo (modulo (modulo (modulo n 3) 2) 5)))\n            (q (modulo (modulo (modulo (modulo n 5) 3) 5)))\n            (r (modulo (modulo (modulo (modulo n 7) 3) 7)))\n            (s (modulo (modulo (modulo (modulo n 11) 5) 11)))\n            (t (modulo (modulo (modulo (modulo (modulo n 13) 7) 11) 13)))\n            (u (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (mod"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}