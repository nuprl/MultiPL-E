{
  "name": "HumanEval_57_monotonic",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t\n(define (monotonic l)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((prev (car l))\n         (result #t))\n    (while (not (null? l))\n      (if (eq? prev (car l))\n          (return result)\n          (result = (not result)\n                     (if (lt? prev (car l))\n                          (return #f)\n                          (return #t))))\n      (setq prev (car l))\n      (setq l (cdr l))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (let* ([p (l)])\n    (if (null? p)\n      #t\n      (let* ([q (l)])\n        (if (null? q)\n          #t\n          (let* ([r (l)])\n            (if (null? r)\n              #t\n              (let* ([s (l)])\n                (if (null? s)\n                  #t\n                  (let* ([t (l)])\n                    (if (null? t)\n                      #t\n                      (let* ([u (l)])\n                        (if (null? u)\n                          #t\n                          (let* ([v (l)])\n                            (if (null? v)\n                              #t\n                              (let* ([w (l)])\n                                (if (null? w)\n                                  #t\n                                  (let* ([x (l)])\n                                    (if (null? x)\n                                      #t\n                                      (let* ([y (l)])\n                                        (if (null? y)\n                                          #t\n                                          (let* ([z (l)])\n                                            (if (null? z)\n                                              #t\n                                              (let* ([a (l)])\n                                                (if (null? a)\n                                                  #t\n                                                  (let* ([b (l)])\n                                                    (if (null? b)\n                                                      #t\n                                                      (let* ([c (l)])\n                                                        (if (null? c)\n                                                          #t\n                                                          (let* ([d (l)])\n                                                            (if (null? d)\n                                                              #t\n                                                              (let* ([e (l)])\n                                                                (if (null? e)\n                                                                  #t\n                                                                  (let* ([f (l)])\n                                                                    (if (null? f)\n                                                                      #t",
    "  (let ((i 0))\n    (if (null? l)\n      #t\n      (if (eq? (car l) (cdr l))\n        (if (null? (cdr l))\n          #t\n          (if (eq? (car l) (cdr l))\n            #t\n            (if (< (car l) (cdr l))\n              #t\n              (if (> (car l) (cdr l))\n                #f\n                #t))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          (car l)\n          (car (cdr l))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l)))))))\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (let ((n (length l))\n         (i 0))\n    (while (< i n)\n      (if (< l/:i/:i-1)\n        (return #f)\n      (set! i (+ i 1))))\n    (return #t)))\n\n;; Return #t is list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                #t\n                (else\n                  (if (< (car p) (car (cdr p)))\n                      #t\n                      (else\n                        #f))))\n            (else\n              (if (< (car p) (car (cdr p)))\n                  #t\n                  (else\n                    #f))))))))))\n",
    "  (let ((result #t))\n    (if (null? l)\n      result\n    (else\n      (if (<= (car l) (cdr l))\n        result\n      (else\n        (result #f))))))\n",
    "  (let ((p (car l)) (q (car (cdr l))))\n    (cond\n      ((>= p q) #t)\n      ((<= p q) #f)\n      ((< p q) (if (<= p q) #t (if (>= p q) #f #t)))\n      ((> p q) (if (>= p q) #t (if (<= p q) #f #t)))\n      (else #f)\n    )\n  )\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (let ((p (car l)))\n    (if (null? (cdr l))\n      (if (null? (cdr p))\n        (car p)\n        (car p))\n      (if (null? (cdr p))\n        (car p)\n        (car p))\n      (car p))\n    (monotonic (cdr l)))\n  l)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #t\n        (if (< (car l) (car (cdr l))) #t\n          (if (< (car l) (car (cdr l))) #t\n            #f\n            (car (cdr l)))))\n      (car l)]))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p)) #f\n          (if (null? (cdr (cdr p))) #t\n            (if (< (car p) (car (cdr p))) #t\n              (if (< (car (cdr p)) (car (cdr (cdr p)))) #f\n                (if (< (car (cdr (cdr p))) (car (cdr (cdr (cdr p)))) #t) #f)\n                  #f)))))))))\n  ))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (cond\n        [(null? (cdr (cdr l))) #t]\n        [(car (cdr (cdr l)))\n          (cond\n            [(car (cdr (cdr (cdr l)))) < (car (cdr l))]\n            [(car (cdr (cdr (cdr l)))) > (car (cdr l))]\n            [#t]\n            [#f]\n            )\n          )\n        ]\n        )\n      ]\n    )\n)\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #f\n        (if (< (car l) (car (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #f #t)\n          #f))\n      (if (< (car l) (car (cdr l))) #t\n        (if (> (car l) (car (cdr l))) #f #t)\n        #f))]))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          (car l)\n          (car (cdr l))))))\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n\t  (car l)\n\t  (car (cdr l))))))\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (let ((p (car l)))\n    (if (null? l)\n      #t\n      (if (null? (cdr l))\n        #t\n        (if (< (car (cdr l)) (car p))\n          #f\n          (if (< (car (cdr p)) (car (cdr l)))\n            #t\n            #f))))))\n",
    "  (let ((i 0))\n    (if (null? l)\n      #t\n      (if (<= (car l) (cdr l))\n        #t\n        (if (<= (car l) (cdr l))\n          #t\n          (if (<= (car l) (cdr l))\n            #t\n            (if (<= (car l) (cdr l))\n              #t\n              #f))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((l1 (car l)))\n        (let ((l2 (car (cdr l))))\n          (cond\n            ((>= l1 l2) #t)\n            ((<= l1 l2) #f)\n            ((< l1 l2)\n              (let ((l3 (cdr l2)))\n                (cond\n                  ((>= l1 l3) #t)\n                  ((< l1 l3) #f)\n                  (else #f))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          #t\n          (if (< (car l) (cdr l))\n              #f\n              (monotonic (cdr l)))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #t)\n        (let ((q (car p)))\n          (cond\n            ((null? q) #f)\n            ((null? (cdr q)) #t)\n            (let ((r (car q)))\n              (cond\n                ((null? r) #f)\n                ((null? (cdr r)) #t)\n                (let ((s (car r)))\n                  (cond\n                    ((null? s) #f)\n                    ((null? (cdr s)) #t)\n                    (let ((t (car s)))\n                      (cond\n                        ((null? t) #f)\n                        ((null? (cdr t)) #t)\n                        (let ((u (car t)))\n                          (cond\n                            ((null? u) #f)\n                            ((null? (cdr u)) #t)\n                            (let ((v (car u)))\n                              (cond\n                                ((null? v) #f)\n                                ((null? (cdr v)) #t)\n                                (let ((w (car v)))\n                                  (cond\n                                    ((null? w) #f)\n                                    ((null? (cdr w)) #t)\n                                    (let ((x (car w)))\n                                      (cond\n                                        ((null? x) #f)\n                                        ((null? (cdr x)) #t)\n                                        (let ((y (car x)))\n                                          (cond\n                                            ((null? y) #f)\n                                            ((null? (cdr y)) #t)\n                                            (let ((z (car y)))\n                                              (cond\n                                                ((null? z) #f)\n                                                ((null? (cdr z)) #t)\n                                                (let ((a (car z)))\n                                                  (cond\n                                                    ((null? a) #f)\n                                                    ((null?",
    "  (let ((i 0))\n    (if (null? l)\n      #t\n      (else\n        (if (<= l (car l))\n          (if (<= l (cdr l))\n            #t\n            (else (return #f))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (if (null? (cdr p))\n          (if (null? (cdr (cdr p)))\n              (car (cdr (cdr p)))\n              (car (cdr p)))\n          (car p))\n      (monotonic (cdr l))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing? (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing? (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing? (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                (car (cdr (cdr p)))\n                (car (cdr p)))\n              (car p))\n          (monotonic (cdr p)))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #t",
    "  (let ((prev (car l))\n         (result #t))\n    (while (not (null? l))\n      (if (not (null? (cdr l)))\n          (if (lt? prev (car l))\n              (result #f))\n          (if (lt? (car l) prev)\n              (result #f))\n          (prev (car l)))))\n  result)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (car (cdr l))\n          (monotonic (cdr l)))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l)))\n          (car l)\n          (car (cdr l)))\n        (((car l) >= (car (cdr l)))\n          (car (cdr l))\n          (car l))\n        (else\n          #f\n          (car (cdr l)))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (car p)\n                (car l)\n                (car p))\n            (else\n              (if (car p)\n                  (car l)\n                  (if (car l)\n                      (car p)\n                      (car l)))))\n        (monotonic (cdr l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #f)\n        (let ((q (car p)))\n          (cond\n            ((null? q) #f)\n            ((null? (cdr q)) #f)\n            (let ((r (car q)))\n              (cond\n                ((null? r) #f)\n                ((null? (cdr r)) #f)\n                (let ((s (car r)))\n                  (cond\n                    ((null? s) #f)\n                    ((null? (cdr s)) #f)\n                    (let ((t (car s)))\n                      (cond\n                        ((null? t) #f)\n                        ((null? (cdr t)) #f)\n                        (let ((u (car t)))\n                          (cond\n                            ((null? u) #f)\n                            ((null? (cdr u)) #f)\n                            (let ((v (car u)))\n                              (cond\n                                ((null? v) #f)\n                                ((null? (cdr v)) #f)\n                                (let ((w (car v)))\n                                  (cond\n                                    ((null? w) #f)\n                                    ((null? (cdr w)) #f)\n                                    (let ((x (car w)))\n                                      (cond\n                                        ((null? x) #f)\n                                        ((null? (cdr x)) #f)\n                                        (let ((y (car x)))\n                                          (cond\n                                            ((null? y) #f)\n                                            ((null? (cdr y)) #f)\n                                            (let ((z (car y)))\n                                              (cond\n                                                ((null? z) #f)\n                                                ((null? (cdr z)) #f)\n                                                (let ((a (car z)))\n                                                  (cond\n                                                    ((null? a) #f)\n                                                    ((null?",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (eq? (car l) (car (cdr l)))\n          (car (cdr l))\n          (car (cdr (cdr l)))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #f)\n        (let ((q (car p)))\n          (cond\n            ((< q (car (cdr p))) #t)\n            ((< q (car (cdr (cdr p)))) #f)\n            (else #f)\n          )\n        )\n      )\n    )\n  )\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #f)\n        (let ((q (car p)))\n          (cond\n            ((< q (car (cdr p))) #t)\n            ((> q (car (cdr p))) #f)\n            (else #f)\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((p (car l)))\n    (if (null? l)\n      #t\n      (if (null? (cdr l))\n        #t\n        (if (< p (car (cdr l)))\n          #t\n          (if (> p (car (cdr (cdr l))))\n            #f\n            #t))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))\n  )\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l))))))\n",
    "  (let* ([p (l)])\n    (if (null? p)\n      #t\n      (let* ([s (car p)])\n        (if (null? s)\n          #t\n          (let* ([n (cdr s)])\n            (if (null? n)\n              #t\n              (let* ([d (cdr n)])\n                (if (null? d)\n                  #t\n                  (let* ([r (cdr d)])\n                    (if (null? r)\n                      #t\n                      (let* ([i (car r)])\n                        (if (null? i)\n                          #t\n                          (let* ([j (cdr i)])\n                            (if (null? j)\n                              #t\n                              (let* ([k (cdr j)])\n                                (if (null? k)\n                                  #t\n                                  (let* ([l (cdr k)])\n                                    (if (null? l)\n                                      #t\n                                      (let* ([m (cdr l)])\n                                        (if (null? m)\n                                          #t\n                                          (let* ([n (cdr m)])\n                                            (if (null? n)\n                                              #t\n                                              (let* ([o (cdr n)])\n                                                (if (null? o)\n                                                  #t\n                                                  (let* ([p (cdr o)])\n                                                   (if (null? p)\n                                                      #t\n                                                      (let* ([q (cdr p)])\n                                                        (if (null? q)\n                                                          #t\n                                                          (let* ([r (cdr q)])\n                                                           (if (null? r)\n                                                              #t\n                                                              (let* ([s (cdr r)])\n                                                                (if (null? s)\n                                                                  #t\n                                                                  (let",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          (car l)\n          (car (cdr l)))))\n)\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          #t\n          (if (< (car l) (cdr l))\n              #f\n              (monotonic (cdr l))))))))\n",
    "  (let ((result #f))\n    (for-each (lambda (x) (set! result (and (eq? x x) (not result)))) l))\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((>= (car l) (car (cdr l))) #t)\n        ((<= (car l) (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (cond\n              ((>= (car p) (car (cdr p))) #t)\n              ((<= (car p) (car (cdr p))) #f)\n              (else\n                (let ((q (car (cdr p))))\n                  (cond\n                    ((>= (car q) (car (cdr q))) #t)\n                    ((<= (car q) (car (cdr q))) #f)\n                    (else\n                      (let ((r (car (cdr q))))\n                        (cond\n                          ((>= (car r) (car (cdr r))) #t)\n                          ((<= (car r) (car (cdr r))) #f)\n                          (else\n                            (let ((s (car (cdr r))))\n                              (cond\n                                ((>= (car s) (car (cdr s))) #t)\n                                ((<= (car s) (car (cdr s))) #f)\n                                (else\n                                  (let ((t (car (cdr s))))\n                                    (cond\n                                      ((>= (car t) (car (cdr t))) #t)\n                                      ((<= (car t) (car (cdr t))) #f)\n                                      (else\n                                        (let ((u (car (cdr t))))\n                                          (cond\n                                            ((>= (car u) (car (cdr u))) #t)\n                                            ((<= (car u) (car (cdr u))) #f)\n                                            (else\n                                              (let ((v (car (cdr u))))\n                                                (cond\n                                                  ((>= (car v) (car (cdr v))) #t)\n                                                  ((<= (car v) (",
    "  (let ((prev (car l))\n         (result #t))\n    (while (not (null? l))\n      (if (lt? prev (car l))\n          (result #f)\n          (if (lt? (car l) prev)\n              (result #f)\n              (prev (car l))))\n      (set! prev (car l))))\n  result)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((x (car l)))\n      (if (null? (cdr l)) #f\n          (if (> x (car (cdr l))) #t\n              (if (< x (car (cdr l))) #t\n                  #f)))\n          (if (< x (car (cdr l))) #t\n              (if (> x (car (cdr l))) #f\n                  #t)))))\n  l)\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t if the list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (let ((prev (car l)))\n    (if (null? l)\n      #t\n      (else\n        (if (null? prev)\n          #f\n          (else\n            (if (<= prev (car l))\n              #t\n              (else\n                #f))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                #t\n                (else (cdr (cdr p)))))\n          (if (null? (cdr (cdr l)))\n              (if (null? (cdr (cdr (cdr l))))\n                  #t\n                  (else (cdr (cdr (cdr l))))))\n            (else (cdr (cdr (cdr l))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((c (car l)))\n        (if (null? (cdr l)) #f\n            (else\n              (if (null? (cdr (cdr l))) #f\n                  (else\n                    (if (eq? (car (cdr (cdr l))) (car (cdr (cdr (cdr l))))))\n                      #t\n                    (else\n                      #f))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (car (cdr l)))\n      (monotonic (cdr l))))\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) < (car (cdr l))) #t)\n        (((car l) > (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (cdr lst)))\n            (if (null? next)\n              (if (null? prev)\n                #t\n                (if (< prev next)\n                  #t\n                  (if (< next prev)\n                    #t\n                    #f))))))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #t\n        (if (null? (cdr (cdr l))) #f\n          (if (< (car l) (car (cdr l))) #t\n            (if (< (car (cdr l)) (car (cdr (cdr l)))) #f\n              #t))))\n        (if (< (car l) (car (cdr l))) #f\n          #t))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #f",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (cdr lst)))\n            (if (null? next)\n              (if (null? prev)\n                #t\n                (if (< prev next)\n                  #t\n                  (if (< next prev)\n                    #t\n                    #f))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (let ((p (car l)))\n    (if (null? (cdr l))\n      (if (null? p)\n        #t\n        (else (if (< p (car (cdr p)))\n                 #t\n                 (else #f))))\n      (else (if (< p (car (cdr (cdr p))))\n               #t\n               (else #f))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (let ((l1 (cdr l)))\n            (cond\n              ((> (car l1) (car (cdr l1))) #t)\n              ((< (car l1) (car (cdr l1))) #f)\n              (else\n                (let ((l2 (cdr l1)))\n                  (cond\n                    ((> (car l2) (car (cdr l2))) #t)\n                    ((< (car l2) (car (cdr l2))) #f)\n                    (else\n                      (#t))))))))))))))\n",
    "  (let ((result #t))\n    (if (null? l)\n      result\n    (else\n      (if (null? (cdr l))\n        (if (> (car l) (car (cdr l))) result)\n        (if (< (car l) (car (cdr l))) result)\n        (let ((next (car l)))\n          (if (null? (cdr l))\n            (if (> next (car (cdr l))) result)\n            (if (< next (car (cdr l))) result)\n            (result #f))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l) (cdr l)]\n    [(car l) (cdr l)]\n    [#f #f]\n  )\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (let ((q (car p)))\n              (if (null? (cdr q))\n                  (let ((r (car q)))\n                    (if (< r (car (cdr l)))\n                        #t\n                        (else\n                          #f))))\n                (else\n                  (let ((r (car (cdr q))))\n                    (if (< r (car (cdr l)))\n                        #t\n                        (else\n                          #f))))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (if (null? (cdr (cdr (cdr l))))\n              (car (cdr l))\n              (car (cdr (cdr (cdr l)))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing? (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing? (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing? (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((>= (car l) (car (cdr l))) #t)\n        ((<= (car l) (car (cdr l))) #f)\n        (else\n          (car l)\n          (cdr l)\n          (monotonic (cdr l))\n          (car l)\n          (cdr l)\n          (monotonic (cdr l))\n          #f)\n        )\n      )\n    )\n  )\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n\t  (car l)\n\t  (car (cdr l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((c (car l)))\n        (if (null? (cdr l)) #t\n          (else\n            (if (null? (cdr (cdr l))) #t\n              (else (not (lt (car (cdr l)) (car (cdr (cdr l))))))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l) (cdr l) (cons (car l) (monotonic (cdr l)))]\n    [#f #f]\n  )\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                #t\n                (else\n                  (if (> (car p) (car (cdr p)))\n                      #t\n                      (else\n                        #f))))\n            (else\n              (if (< (car p) (car (cdr p)))\n                  #t\n                  (else\n                    #f))))))))))\n",
    "  (let ((result #f))\n    (for-each (lambda (x) (set! result (and (eq? x x) (not result))))\n       l))\n  result)\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (let ((i 0))\n    (if (null? l)\n      #t\n      (if (<= l (car l))\n        (if (<= (cdr l) (car l))\n          #t\n          (if (<= (cdr l) (cdr l))\n            #t\n            (if (<= (cdr l) (cdr l))\n              #t\n              #f))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #f)\n        (let ((q (car p)))\n          (cond\n            ((<= q (car (cdr p))) #t)\n            ((>= q (car (cdr p))) #f)\n            (else #f)\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (cond\n        [(null? (cdr (cdr l))) #t]\n        [(car (cdr (cdr l)))\n          (cond\n            [(null? (cdr (cdr (cdr l)))) #t]\n            [(car (cdr (cdr (cdr l))))\n              (cond\n                [(null? (cdr (cdr (cdr (cdr l)))))) #t]\n                [(car (cdr (cdr (cdr (cdr l)))))) #f]\n                [#f]\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (cdr lst)))\n            (if (null? next)\n              (if (null? prev)\n                #t\n                (if (<= prev prev)\n                  #t\n                  (if (<= prev next)\n                    #t\n                    (if (<= next next)\n                      #t\n                      (if (<= next prev)\n                        #t\n                        #f))))))))))))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (cond\n        [(null? (cdr (cdr l))) #t]\n        [(car (cdr (cdr l)))\n          (cond\n            [(car (cdr (cdr (cdr l)))) < (car (cdr l))]\n            [(car (cdr (cdr (cdr l)))) > (car (cdr l))]\n            [#t]\n            [#f]\n            )\n          )\n        ]\n        )\n      )\n    )\n  )\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l)))\n          (return #t))\n        (((car l) >= (car (cdr l)))\n          (return #f))\n        (else\n          (return (car l) (car (cdr l))))))))\n",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (cdr lst)))\n            (if (null? next)\n              (if (null? prev)\n                #t\n                (if (<= prev prev)\n                  #t\n                  (if (<= prev next)\n                    #t\n                    (if (<= next next)\n                      #t\n                      #f))))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (if (null? (cdr p))\n          (if (null? (cdr (cdr p)))\n              (car (cdr (cdr p)))\n              (car (cdr p)))\n          (car p))\n      (monotonic (cdr l))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #t\n        (if (null? (cdr (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #t\n            (if (< (car l) (car (cdr l))) #t\n              #f\n              #f)))))]))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l)))\n          (car l)\n          (car (cdr l)))\n        (((car l) >= (car (cdr l)))\n          (car (cdr l))\n          (car l))\n        (else\n          #f\n          (car (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          #t\n          (if (< (car l) (cdr l))\n              #f\n              (monotonic (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (eq? (car l) (car (cdr l)))\n          (car (cdr l))\n          (monotonic (cdr l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          #t\n        (else\n          (if (< (car l) (cdr l))\n              #t\n            (else\n              #f))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          (car l)\n          (car (cdr l)))\n    )\n  )\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) < (car (cdr l))) #t)\n        (((car l) > (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n        (car l)\n        (car (cdr l)))))\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((>= (car l) (car (cdr l))) #t)\n        ((<= (car l) (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (cond\n              ((>= p (car (cdr l))) #t)\n              ((<= p (car (cdr l))) #f)\n              (else\n                (let ((q (car (cdr l))))\n                  (cond\n                    ((>= q (car (cdr (cdr l)))) #t)\n                    ((<= q (car (cdr (cdr l)))) #f)\n                    (else\n                      #f))))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          (car (cdr l))\n          (car l)))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p)) #t\n          (else\n            (if (null? (cdr (cdr p))) #t\n              (else (not (eqv? (car p) (car (cdr p))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          (car l)\n          (car (cdr l))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #f",
    "  (let ((p (car l)))\n    (if (null? (cdr l))\n      (if (null? (cdr p))\n        (car p)\n        (car p))\n      (cdr p))\n    l))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                #t\n                (else\n                  (if (> (car p) (car (cdr p)))\n                      #t\n                      (else\n                        #f))))\n          (else\n            (if (< (car p) (car (cdr p)))\n                #t\n                (else\n                  #f))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) < (car (cdr l))) #t)\n        (((car l) > (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) < (car (cdr l))) #t)\n        (((car l) > (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (car (cdr l))\n          (car (cdr (cdr l)))\n          (car (cdr (cdr (cdr l))))\n          (car (cdr (cdr (cdr (cdr l))))))\n      (car (cdr (cdr (cdr (cdr (cdr l))))))))\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (if (null? (cdr p))\n          (if (null? (cdr (cdr p)))\n              (car (cdr (cdr p)))\n              (car (cdr p)))\n          (car p))\n        (monotonic (cdr l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #f\n          (if (null? prev)\n            #t\n            (if (< (car lst) (car prev))\n              #f\n              (if (< (car lst) (car prev))\n                #t\n                (if (< (car lst) (car prev))\n                  #f\n                  #t))))))))))\n",
    "  (let ((prev (car l)))\n    (if (null? l)\n      #t\n      (if (null? prev)\n        #f\n        (if (<= prev (car l))\n          #t\n          (if (<= (car l) (car prev))\n            #f\n            #t))))))\n",
    "  (let ((lst (list)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #f\n          (if (null? lst)\n            #t\n            (if (< prev (car lst))\n              #f\n              #t))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) < (car (cdr l))) #t)\n        (((car l) > (car (cdr l))) #f)\n        (else #t))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((>= (car l) (car (cdr l))) #t)\n        ((<= (car l) (car (cdr l))) #f)\n        (else\n          (car l)\n          (cdr l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car (cdr l))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l)))\n          (car l)\n          (car (cdr l)))\n        (((car l) >= (car (cdr l)))\n          (car (cdr l))\n          (car l))\n        (else\n          #f\n          (car (cdr l))))))\n)\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (let ((p (car l)))\n    (if (null? (cdr l))\n      (if (null? (cdr p))\n        #t\n        (else (if (< (car p) (car (cdr p))) #f #t))))\n      (else (if (< (car p) (car (cdr p))) #t #f))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #t",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (cond\n        [(null? (cdr (cdr l))) #t]\n        [(car (cdr (cdr l)))\n          (cond\n            [(null? (cdr (cdr (cdr l)))) #t]\n            [(car (cdr (cdr (cdr l))))\n              (cond\n                [(< (car (cdr (cdr (cdr l)))) (car (cdr (cdr (cdr l)))))]\n                [(> (car (cdr (cdr (cdr l)))) (car (cdr (cdr (cdr l)))))]\n                [#f]\n              )\n            )\n          )\n        ]\n        [#f]\n      )\n    ]\n  )\n)\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #f\n        (if (null? (cdr (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #t\n            (if (< (car l) (car (cdr l))) #f #t))))\n      (if (null? (cdr (cdr l))) #f\n        (if (< (car l) (car (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #f #t))))\n      (car (cdr l))]))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))\n  )\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing? (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing? (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing? (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (cond\n              ((null? (cdr (cdr l))) #t)\n              ((null? (cdr (cdr (cdr l)))) #f)\n              (else\n                (let ((q (car (cdr (cdr l))))\n                      (r (car (cdr (cdr (cdr l))))))\n                  (cond\n                    (((car (cdr p)) <= (car (cdr q))) #t)\n                    (((car (cdr p)) >= (car (cdr q))) #f)\n                    (else\n                      (let ((s (car (cdr (cdr (cdr l))))))\n                        (cond\n                          (((car (cdr (cdr (cdr p)))) <= (car (cdr (cdr (cdr q))))) #t)\n                          (((car (cdr (cdr (cdr p)))) >= (car (cdr (cdr (cdr q))))) #f)\n                          (else\n                            (let ((t (car (cdr (cdr (cdr (cdr l)))))),\n                                  (u (car (cdr (cdr (cdr (cdr (cdr l))))))))\n                              (cond\n                                (((car (cdr (cdr (cdr (cdr p))))) <= (car (cdr (cdr (cdr (cdr q))))) #t)\n                                 (((car (cdr (cdr (cdr (cdr p))))) >= (car (cdr (cdr (cdr (cdr q))))) #f)\n                                  (else\n                                    (let ((v (car (cdr (cdr (cdr (cdr (cdr l)))))),\n                                            w (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n                                        ",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((a (car l)))\n      (if (null? (cdr l))\n          (if (> a (car (cdr l))) #t)\n          (if (< a (car (cdr l))) #t)\n          #f)))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #f\n          (if (< (car l) (car (cdr l))) #t\n              (if (< (car l) (car (cdr l))) #t\n                  #f\n                  (car (cdr l)))))]\n    [#f #f]\n  )\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((x (car l)))\n      (if (null? (cdr l)) #f\n          (if (< x (car (cdr l))) #t\n              (if (> x (car (cdr l))) #f #t)\n              #f))\n          (if (< x (car (cdr l))) #f\n              (if (> x (car (cdr l))) #t #f)\n              #t))))))\n",
    "  (let ((p (car l)))\n    (if (null? (cdr l))\n      (if (eq? p (car (cdr p)))\n        (car (cdr p))\n        (car p))\n      (car p))\n    (monotonic (cdr l))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((a (car l)))\n      (if (null? (cdr (cdr l)))\n          (if (> a (car (cdr (cdr l))))\n              #t\n              #f)\n          (if (< a (car (cdr (cdr l))))\n              #t\n              #f))\n          (if (null? (cdr (cdr (cdr l))))\n              (if (< a (car (cdr (cdr (cdr l)))))\n                  #t\n                  #f)\n              (if (> a (car (cdr (cdr (cdr l)))))\n                  #t\n                  #f))\n              #f))))))\n",
    "  (let ((prev (car l))\n         (result #t))\n    (while (not (null? l))\n      (if (not (null? (cdr l)))\n          (if (lt? prev (car l))\n              (result #f)\n              (result #t))\n          (if (lt? (car l) prev)\n              (result #f)\n              (result #t)))\n        (setq prev (car l))\n        (setq l (cdr l))))\n  result)\n\n;; Return #t if the list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                #t\n                (if (< (car (cdr p)) (car p))\n                    #f\n                    #t))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          (car (cdr l))\n          (car l)))))\n",
    "  (let ((prev (car l)))\n    (if (null? l)\n      #t\n      (else\n        (if (null? prev)\n          #f\n          (else\n            (if (>= prev (car l))\n                #t\n                (else\n                  #f))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #t)\n        (let ((q (car p)))\n          (cond\n            ((null? q) #f)\n            ((null? (cdr q)) #t)\n            (let ((r (car q)))\n              (cond\n                ((null? r) #f)\n                ((null? (cdr r)) #t)\n                (let ((s (car r)))\n                  (cond\n                    ((null? s) #f)\n                    ((null? (cdr s)) #t)\n                    (let ((t (car s)))\n                      (cond\n                        ((null? t) #f)\n                        ((null? (cdr t)) #t)\n                        (let ((u (car t)))\n                          (cond\n                            ((null? u) #f)\n                            ((null? (cdr u)) #t)\n                            (let ((v (car u)))\n                              (cond\n                                ((null? v) #f)\n                                ((null? (cdr v)) #t)\n                                (let ((w (car v)))\n                                  (cond\n                                    ((null? w) #f)\n                                    ((null? (cdr w)) #t)\n                                    (let ((x (car w)))\n                                      (cond\n                                        ((null? x) #f)\n                                        ((null? (cdr x)) #t)\n                                        (let ((y (car x)))\n                                          (cond\n                                            ((null? y) #f)\n                                            ((null? (cdr y)) #t)\n                                            (let ((z (car y)))\n                                              (cond\n                                                ((null? z) #f)\n                                                ((null? (cdr z)) #t)\n                                                (let ((a (car z)))\n                                                  (cond\n                                                    ((null? a) #f)\n                                                    ((null?",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((>= (car l) (car (cdr l))) #t)\n        ((<= (car l) (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (cond\n              ((>= (car p) (car (cdr p))) #t)\n              ((<= (car p) (car (cdr p))) #f)\n              (else\n                (let ((q (car (cdr p))))\n                  (cond\n                    ((>= (car q) (car (cdr q))) #t)\n                    ((<= (car q) (car (cdr q))) #f)\n                    (else\n                      (let ((r (car (cdr q))))\n                        (cond\n                          ((>= (car r) (car (cdr r))) #t)\n                          ((<= (car r) (car (cdr r))) #f)\n                          (else\n                            (let ((s (car (cdr r))))\n                              (cond\n                                ((>= (car s) (car (cdr s))) #t)\n                                ((<= (car s) (car (cdr s))) #f)\n                                (else\n                                  (let ((t (car (cdr s))))\n                                    (cond\n                                      ((>= (car t) (car (cdr t))) #t)\n                                      ((<= (car t) (car (cdr t))) #f)\n                                      (else\n                                        (#f))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (cond\n        [(null? (cdr (cdr l))) #t]\n        [(car (cdr (cdr l)))\n          (cond\n            [(car (cdr (cdr (cdr l)))) < (car (cdr l))]\n            [(car (cdr (cdr (cdr l)))) > (car (cdr l))]\n            [#t]\n            [#f]\n            )\n          ]\n        )\n      ]\n    )\n  )\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (car p)\n                (if (car l)\n                    (if (< (car p) (car l)) #t)\n                    (if (> (car p) (car l)) #f))\n                (if (< (car p) (car l)) #t)\n                (if (> (car p) (car l)) #f))\n            (if (car p)\n                (if (< (car p) (car l)) #t)\n                (if (> (car p) (car l)) #f))\n            #f)))))\n  ))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (cond\n              ((> p (car (cdr l))) #t)\n              ((< p (car (cdr l))) #f)\n              (else\n                (let ((q (car (cdr (cdr l))))\n                      (r (car (cdr (cdr (cdr l))))))\n                  (cond\n                    ((> q r) #t)\n                    ((< q r) #f)\n                    (else\n                      (let ((p (car (cdr (cdr (cdr (cdr l)))))))\n                        (cond\n                          ((> p q) #t)\n                          ((< p q) #f)\n                          (else\n                            (let ((q (car (cdr (cdr (cdr (cdr (cdr l))))))))\n                              (cond\n                                ((> q r) #t)\n                                ((< q r) #f)\n                                (else\n                                  #f
    "  (let ((lst (list)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #f\n          (if (null? lst)\n            #t\n            (if (< prev (car lst))\n              #f\n              #t))))))))\n",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (cdr lst)))\n            (if (null? next)\n              (if (null? prev)\n                #t\n                (if (<= prev prev)\n                  #t\n                  (if (<= prev next)\n                    #t\n                    (if (<= next next)\n                      #t\n                      #f))))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #f)\n        (let ((q (car p)))\n          (cond\n            ((< q (car (cdr p))) #t)\n            ((> q (car (cdr p))) #f)\n            (else #f)\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #f)\n        (let ((q (car p)))\n          (cond\n            ((null? q) #f)\n            ((null? (cdr q)) #f)\n            (let ((r (car q)))\n              (cond\n                ((null? r) #f)\n                ((null? (cdr r)) #f)\n                (let ((s (car r)))\n                  (cond\n                    ((null? s) #f)\n                    ((null? (cdr s)) #f)\n                    (let ((t (car s)))\n                      (cond\n                        ((null? t) #f)\n                        ((null? (cdr t)) #f)\n                        (let ((u (car t)))\n                          (cond\n                            ((null? u) #f)\n                            ((null? (cdr u)) #f)\n                            (let ((v (car u)))\n                              (cond\n                                ((null? v) #f)\n                                ((null? (cdr v)) #f)\n                                (let ((w (car v)))\n                                  (cond\n                                    ((null? w) #f)\n                                    ((null? (cdr w)) #f)\n                                    (let ((x (car w)))\n                                      (cond\n                                        ((null? x) #f)\n                                        ((null? (cdr x)) #f)\n                                        (let ((y (car x)))\n                                          (cond\n                                            ((null? y) #f)\n                                            ((null? (cdr y)) #f)\n                                            (let ((z (car y)))\n                                              (cond\n                                                ((null? z) #f)\n                                                ((null? (cdr z)) #f)\n                                                (let ((a (car z)))\n                                                  (cond\n                                                    ((null? a) #f)\n                                                    ((null?",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l))))))\n",
    "  (let ((result #f))\n    (for-each (lambda (x) (set! result #t)) l)\n    result))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((x (car l)))\n        (if (null? (cdr l))\n            (if (> x (car (cdr l))) #t)\n            (if (< x (car (cdr l))) #t)\n            (else #f))\n        (monotonic (cdr l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((>= (car l) (car (cdr l))) #t)\n        ((<= (car l) (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (cond\n              ((>= p (car (cdr l))) #t)\n              ((<= p (car (cdr l))) #f)\n              (else\n                (let ((q (car (cdr l))))\n                  (cond\n                    ((>= q (car (cdr (cdr l)))) #t)\n                    ((<= q (car (cdr (cdr l)))) #f)\n                    (else\n                      #f))))))))))))))\n",
    "  (let ((result #t))\n    (for-each (lambda (x) (set! result (not (lt x (car l))))) l))\n    result)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((x (car l)))\n        (if (eq? (car (cdr l)) x)\n            (if (eqv? (cdr (cdr l)) (cdr x)) #t)\n            (else #f))))))\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (let ((n (length l)))\n    (if (< n 1)\n      #f\n      (let ((i 0))\n        (while (< i n)\n          (if (lt l/:i/:i-1)\n            #f\n            (set! i (+ i 1)))))\n      #t))))\n",
    "  (let ((result #f))\n    (if (null? l)\n      result\n    (else\n      (let ((prev (car l)))\n        (if (null? l)\n          result\n        (else\n          (if (null? prev)\n            result\n          (else\n            (if (null? (cdr l))\n              (if (null? (cdr prev))\n                result\n              (else\n                (if (< (car l) (car prev))\n                  result\n                (else\n                  (if (< (car prev) (car l))\n                    result\n                  (else\n                    (result #f))))))))))))))))))\n",
    "  (let* ([s (string->list l)])\n    (if (null? s)\n      #t\n      (let* ([p (first s)]\n             [q (second s)]\n             [r (third s)]\n             [pq (cons p q)]\n             [ps (string->list p)]\n             [qs (string->list q)]\n             [rs (string->list r)]\n             [psqs (cons ps qs)]\n             [psqsrs (cons ps qs rs)]\n             [psqsrsr (cons ps qs rs r)]\n             [psqsrsrq (cons ps qs rs r q)]\n             [psqsrsrqr (cons ps qs rs r q r)]\n             [psqsrsrqrq (cons ps qs rs r q r q)]\n             [psqsrsrqrqr (cons ps qs rs r q r q r)]\n             [psqsrsrqrqrq (cons ps qs rs r q r q r q)]\n             [psqsrsrqrqrqr (cons ps qs rs r q r q r q r)]\n             [psqsrsrqrqrqrq (cons ps qs rs r q r q r q r q)]\n             [psqsrsrqrqrqrqr (cons ps qs rs r q r q r q r q r)]\n             [psqsrsrqrqrqrqrq (cons ps qs rs r q r q r q r q r q)]\n             [psqsrsrqrqrqrqrqr (cons ps qs rs r q r q r q r q r q r)]\n             [psqsrsrqrqrqrqrqrq (cons ps qs rs r q r q r q r q r q r q)]\n             [psqsrsrqrqrqrqrqrqr (cons ps qs rs r q r q r q r q r q r q r)]\n             [psqsrsrqrqrqrqrqrqrq (cons ps qs rs r q r q r q r q r q r q r q)]\n             [",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          #t\n          (if (< (car l) (car (cdr l)))\n              #f\n              (monotonic (cdr l)))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #f\n        (if (< (car l) (car (cdr l))) #t\n          (if (< (car l) (car (cdr l))) #t\n            #f\n            (if (< (car (cdr l)) (car (cdr (cdr l)))) #t\n              #f\n              #f)))\n        (if (< (car l) (car (cdr l))) #t\n          #f\n          (if (< (car (cdr l)) (car (cdr (cdr l)))) #t\n            #f\n            #f)))\n      #f)\n    #f)\n  )\n)\n",
    "  (let ((prev (car l))\n         (result #t))\n    (while (not (null? l))\n      (if (null? (cdr l))\n        (return result)\n        (if (not (eqv? prev (car l)))\n          (return #f)\n          (prev (car l)))))\n    (return result)))\n",
    "  (let* ([lst (list l)])\n    (if (null? lst)\n      #t\n      (let* ([head (car lst)])\n        (if (null? (cdr lst))\n          #t\n          (let* ([tail (cdr lst)]\n                 [prev (car (cdr tail))])\n            (if (null? tail)\n              (if (eq? head prev)\n                #t\n                (if (eqv? head prev)\n                  #t\n                  (if (eqv? head prev)\n                    #t\n                    (if (eqv? head prev)\n                      #t\n                      (if (eqv? head prev)\n                        #t\n                        (if (eqv? head prev)\n                          #t\n                          (if (eqv? head prev)\n                            #t\n                            (if (eqv? head prev)\n                              #t\n                              (if (eqv? head prev)\n                                #t\n                                #f
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (cond\n              ((null? (cdr p)) #t)\n              ((null? (cdr (cdr p))) #f)\n              (else\n                (let ((q (car (cdr p))))\n                  (cond\n                    ((> (car q) (car (cdr q))) #t)\n                    ((< (car q) (car (cdr q))) #f)\n                    (else\n                      (let ((r (car (cdr q))))\n                        (cond\n                          ((> (car r) (car (cdr r))) #t)\n                          ((< (car r) (car (cdr r))) #f)\n                          (else\n                            (let ((s (car (cdr r))))\n                              (cond\n                                ((> (car s) (car (cdr s))) #t)\n                                ((< (car s) (car (cdr s))) #f)\n                                (else\n                                  (let ((t (car (cdr s))))\n                                    (cond\n                                      ((> (car t) (car (cdr t))) #t)\n                                      ((< (car t) (car (cdr t))) #f)\n                                      (else\n                                        (#f
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (eq? (car l) (car (cdr l)))\n          (car (cdr l))\n          (monotonic (cdr l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l)))\n          (car l)\n          (car (cdr l)))\n        (((car l) >= (car (cdr l)))\n          (car (cdr l))\n          (car l))\n        (else\n          #f\n          (car (cdr l))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          #t\n          (if (< (car l) (cdr l))\n              #f\n              (monotonic (cdr l))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #f\n          (if (null? (cdr (cdr l))) #t\n              (if (< (car (cdr l)) (car (cdr (cdr l)))) #t #f)\n              (if (< (car (cdr (cdr l))) (car (cdr (cdr (cdr l)))) #t #f)\n                  (if (< (car (cdr (cdr (cdr l)))) (car (cdr (cdr (cdr (cdr l)))))) #t #f)\n                    #f))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) < (car (cdr l))) #t)\n        (((car l) > (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (let ((p (car l)))\n    (if (null? (cdr l))\n      (if (null? p)\n        #t\n        (if (< p (car (cdr p)))\n          #f\n          (if (< (car (cdr (cdr p))) (car p))\n            #t\n            (if (< (car (cdr (cdr (cdr p)))) (car (cdr p)))\n              #f\n              #t))))))\n    (if (null? (cdr l))\n      #t\n      (if (null? p)\n        #f\n        (if (< p (car (cdr p)))\n          #f\n          (if (< (car (cdr (cdr p))) (car p))\n            #f\n            #t))))))\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #t\n        (if (< (car l) (car (cdr l))) #t\n          (if (< (car l) (car (cdr l))) #t\n            (if (< (car l) (car (cdr l))) #t\n              #f\n              #t))))]))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          #t\n          (if (< (car l) (car (cdr l)))\n              #f\n              (monotonic (cdr l)))))))\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (car (cdr l))\n          (if (null? (cdr (cdr (cdr l))))\n              (car (cdr (cdr l)))\n              (car (cdr (cdr (cdr l))))\n              (car (cdr (cdr (cdr (cdr l)))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #t\n        (if (null? (cdr (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #t\n            (if (< (car l) (car (cdr l))) #t\n              #f\n              #f)))))]))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((x (car l)))\n      (cond\n        ((null? (cdr (cdr l))) #t)\n        ((null? (cdr (cdr (cdr l)))) #f)\n        (let ((y (car (cdr (cdr l))))\n               (less (car l) y)\n               (greater (car l) y))\n          (cond\n            ((less) #t)\n            ((greater) #f)\n            ((=) #t)\n          ))\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((prev (car l)))\n    (if (null? l)\n      #t\n      (else\n        (if (null? prev)\n          #f\n          (else\n            (if (eq? (car l) (car prev))\n              (if (eqv? (cdr l) (cdr prev))\n                #t\n                (else\n                  #f))\n              #f))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l) < (cdr l) ? #t : #f]\n    [#f]))\n",
    "  (let ((prev (car l)))\n    (if (null? l)\n      #t\n      (else\n        (if (null? prev)\n          #f\n          (else\n            (if (>= prev (car l))\n                #t\n                (else\n                  #f))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l)))\n          (return #t))\n        (((car l) >= (car (cdr l)))\n          (return #f))\n        (else\n          (return (car l) (car (cdr l))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #t\n        (if (null? (cdr (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #t\n            (if (< (car l) (car (cdr l))) #t\n              #f\n              #f)))))]))\n",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (car lst)))\n            (if (<= prev next)\n              #t\n              (if (<= next prev)\n                #t\n                (if (<= prev prev)\n                  #t\n                  #f))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))\n  )\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #t)\n        (let ((q (car p)))\n          (cond\n            ((null? q) #f)\n            ((null? (cdr q)) #t)\n            (let ((r (car q)))\n              (cond\n                ((null? r) #f)\n                ((null? (cdr r)) #t)\n                (let ((s (car r)))\n                  (cond\n                    ((null? s) #f)\n                    ((null? (cdr s)) #t)\n                    (let ((t (car s)))\n                      (cond\n                        ((null? t) #f)\n                        ((null? (cdr t)) #t)\n                        (let ((u (car t)))\n                          (cond\n                            ((null? u) #f)\n                            ((null? (cdr u)) #t)\n                            (let ((v (car u)))\n                              (cond\n                                ((null? v) #f)\n                                ((null? (cdr v)) #t)\n                                (let ((w (car v)))\n                                  (cond\n                                    ((null? w) #f)\n                                    ((null? (cdr w)) #t)\n                                    (let ((x (car w)))\n                                      (cond\n                                        ((null? x) #f)\n                                        ((null? (cdr x)) #t)\n                                        (let ((y (car x)))\n                                          (cond\n                                            ((null? y) #f)\n                                            ((null? (cdr y)) #t)\n                                            (let ((z (car y)))\n                                              (cond\n                                                ((null? z) #f)\n                                                ((null? (cdr z)) #t)\n                                                (let ((a (car z)))\n                                                  (cond\n                                                    ((null? a) #f)\n                                                    ((null?",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) < (car (cdr l))) #t)\n        (((car l) > (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #t\n        (if (null? (cdr (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #t\n            (if (< (car l) (car (cdr l))) #f\n              #t\n              #f)))))]))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing? (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing? (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing? (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                #t\n                (else (cdr (cdr p)))))\n          (else (cdr p))))))\n",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (cdr lst)))\n            (if (null? next)\n              (if (null? prev)\n                #t\n                (if (<= prev prev)\n                  #t\n                  (if (<= prev next)\n                    #t\n                    (if (<= next next)\n                      #t\n                      #f))))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((c (car l)))\n        (if (null? (cdr l)) #t\n          (else\n            (if (null? (cdr (cdr l))) #t\n              (else (not (eqv? (car l) (car (cdr l))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((x (car l)))\n      (if (null? (cdr l))\n          (if (> x (car (cdr l))) #t)\n          (if (< x (car (cdr l))) #t)\n          #f)))))\n",
    "  (let ((result #t))\n    (for-each (lambda (x) (set! result (and (eq? x x) (eq? (car l) (cdr l)))))\n       l))\n  result)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((p (car l)))\n      (cond\n        ((null? p) #f)\n        ((null? (cdr p)) #t)\n        (let ((q (car p)))\n          (cond\n            ((null? q) #f)\n            ((null? (cdr q)) #t)\n            (let ((r (car q)))\n              (cond\n                ((null? r) #f)\n                ((null? (cdr r)) #t)\n                (let ((s (car r)))\n                  (cond\n                    ((null? s) #f)\n                    ((null? (cdr s)) #t)\n                    (let ((t (car s)))\n                      (cond\n                        ((null? t) #f)\n                        ((null? (cdr t)) #t)\n                        (let ((u (car t)))\n                          (cond\n                            ((null? u) #f)\n                            ((null? (cdr u)) #t)\n                            (let ((v (car u)))\n                              (cond\n                                ((null? v) #f)\n                                ((null? (cdr v)) #t)\n                                (let ((w (car v)))\n                                  (cond\n                                    ((null? w) #f)\n                                    ((null? (cdr w)) #t)\n                                    (let ((x (car w)))\n                                      (cond\n                                        ((null? x) #f)\n                                        ((null? (cdr x)) #t)\n                                        (let ((y (car x)))\n                                          (cond\n                                            ((null? y) #f)\n                                            ((null? (cdr y)) #t)\n                                            (let ((z (car y)))\n                                              (cond\n                                                ((null? z) #f)\n                                                ((null? (cdr z)) #t)\n                                                (let ((a (car z)))\n                                                  (cond\n                                                    ((null? a) #f)\n                                                    ((null?",
    "  (let* ([p (first l)])\n    (if (null? l)\n      #t\n      (let* ([q (first (rest l))])\n        (if (null? (rest l))\n          #t\n          (if (lt? p q)\n            #t\n            (if (lt? q p)\n              #f\n              #t))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (car (cdr l))\n          (if (null? (cdr (cdr (cdr l))))\n              (car (cdr (cdr l)))\n              (car (cdr (cdr (cdr l))))\n              (car (cdr (cdr (cdr (cdr l)))))))))\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((>= (car l) (car (cdr l))) #t)\n        ((<= (car l) (car (cdr l))) #f)\n        (else\n          (let ((p (car l)))\n            (if (>= (car p) (car (cdr p)))\n              (let ((q (car (cdr p))))\n                (if (<= (car q) (car (cdr q)))\n                  (let ((r (car (cdr q))))\n                    (if (<= (car r) (car (cdr r)))\n                      (let ((s (car (cdr r))))\n                        (if (<= (car s) (car (cdr s)))\n                          (let ((t (car (cdr s))))\n                            (if (<= (car t) (car (cdr t)))\n                              (let ((u (car (cdr t))))\n                                (if (<= (car u) (car (cdr u)))\n                                  (let ((v (car (cdr u))))\n                                    (if (<= (car v) (car (cdr v)))\n                                      (let ((w (car (cdr v))))\n                                        (if (<= (car w) (car (cdr w)))\n                                          (let ((x (car (cdr w))))\n                                            (if (<= (car x) (car (cdr x)))\n                                              (let ((y (car (cdr x))))\n                                                (if (<= (car y) (car (cdr y)))\n                                                  (let ((z (car (cdr y))))\n                                                    (if (<= (car z) (car (cdr z)))\n                                                      (let ((a (car (cdr z))))\n                                                        (if (<= (car a) (car (cdr a)))\n                                                          (let ((b (car (cdr a))))\n                                                           (if (<= (car",
    "  (let ((result #t))\n    (if (null? l)\n      result\n    (else\n      (if (null? (cdr l))\n        (if (< (car l) (car (cdr l))) result)\n        (else (result #f)))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (car (cdr l))\n          (monotonic (cdr l))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          (car l)\n          (car (cdr l)))\n    )\n  )\n)\n",
    "  (let ((prev (car l)))\n    (if (null? l)\n      #t\n      (else\n        (if (eq? prev (car l))\n            (if (null? (cdr l))\n                #t\n                (else (eq? (car (cdr l)) (car l)))))\n          (monotonic (cdr l))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (eq? (car l) (car (cdr l)))\n          (car l)\n          (car (cdr l))\n          (monotonic (cdr l))))))\n",
    "  (let ((prev (car l)))\n    (if (null? l)\n      #t\n      (else\n        (if (null? (cdr l))\n          #t\n          (else\n            (if (eq? prev (car (cdr l)))\n                #t\n                (else\n                  #f\n                  (error \"non-monotonic list\"))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n\t  #t\n\t  (if (< (car l) (cdr l))\n\t    #f\n\t    (monotonic (cdr l)))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l)))\n          (return #t))\n        (((car l) >= (car (cdr l)))\n          (return #f))\n        (else\n          (return #f)))\n      )\n    )\n  )\n)\n",
    "  (let ((lst (list l)))\n    (if (null? lst)\n      #t\n      (let ((prev (car lst)))\n        (if (null? lst)\n          #t\n          (let ((next (cdr lst)))\n            (if (null? next)\n              (if (null? prev)\n                #t\n                (if (<= prev prev)\n                  #t\n                  (if (<= prev next)\n                    #t\n                    (if (<= next next)\n                      #t\n                      (if (<= next prev)\n                        #t\n                        #f))))))))))))))))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        (((car l) <= (car (cdr l))) #t)\n        (((car l) >= (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))\n  )\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic-increasing (list 1 2 4 20))\n;; #t\n;; >>> (monotonic-increasing (list 1 20 4 10))\n;; #f\n;; >>> (monotonic-increasing (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n                #t\n                (else (cdr (cdr p)))))\n          (else (cdr (cdr p)))))\n  )\n)\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (let ((p (car l)))\n        (if (null? (cdr p))\n            (if (car p)\n                (if (car l)\n                    (if (< (car p) (car l)) #t)\n                    (if (> (car p) (car l)) #f))\n                (if (< (car p) (car l)) #f)\n                (if (> (car p) (car l)) #t))\n            (if (car p)\n                (if (< (car p) (car l)) #f)\n                (if (> (car p) (car l)) #t))\n            #f)))\n      (car l)))\n)\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n\n;; Return #t if list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (cdr l))\n          (car l)\n          (car (cdr l)))))\n)\n\n;; Return #t if the list elements are monotonically increasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #f",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) #t)\n        ((< (car l) (car (cdr l))) #f)\n        (else\n          (car l)\n          (monotonic (cdr l))))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l) (cdr l)]\n    [(car l) (cdr l)]\n    [#f #f]\n  )\n)\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (> (car l) (car (cdr l)))\n          #t\n          (if (< (car l) (car (cdr l)))\n              #f\n              (monotonic (cdr l))))))))\n",
    "  (let ((result #f))\n    (for-each (lambda (x) (set! result #t)) l)\n    result))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (cond\n        [(null? (cdr (cdr l))) #t]\n        [(car (cdr (cdr l)))\n          (cond\n            [(null? (cdr (cdr (cdr l)))) #t]\n            [(car (cdr (cdr (cdr l))))\n              (cond\n                [(null? (cdr (cdr (cdr (cdr l)))))) #t]\n                [(car (cdr (cdr (cdr (cdr l)))))) #f]\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l)\n      (if (null? (cdr l)) #f\n        (if (null? (cdr (cdr l))) #t\n          (if (> (car l) (car (cdr l))) #t\n            (if (< (car l) (car (cdr l))) #f\n              #t\n              #f))))\n      #f)]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #f]\n    [(car l) (cdr l) (if (< (car l) (cdr l)) #t) (if (> (car l) (cdr l)) #f)]\n  )\n)\n",
    "  (let ((i (car l)))\n    (if (null? (cdr l))\n      (if (eq? i (car (cdr l)))\n          (return #t)\n          (return #f))\n      (if (eq? i (car (cdr (cdr l))))\n          (return #t)\n          (return #f))\n      (return #f))\n    (if (eq? i (car (cdr (cdr (cdr l))))))\n      (return #t)\n      (return #f)))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (let ((a (car l)))\n      (if (null? (cdr l))\n          (if (> a (car (cdr l))) #t)\n          (if (< a (car (cdr l))) #t)\n          #f)))))\n",
    "  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    (else\n      (if (eq? (car l) (car (cdr l)))\n          (car (cdr l))\n          (car (cdr (cdr l)))))))\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}