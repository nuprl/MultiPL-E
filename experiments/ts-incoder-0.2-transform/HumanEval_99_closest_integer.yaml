name: HumanEval_99_closest_integer
language: ts
prompt: "//Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer(value: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
  10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
  -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
  0\"),0);\n}\n\ntest();"
completions: ["  const num = Number(value);\n  const min = Math.min(Math.abs(num),\
    \ Math.abs(num - 10));\n  const max = Math.max(Math.abs(num), Math.abs(num - 10));\n\
    \  if (min === max) {\n    return min;\n  }\n  return num < 0 ? Math.ceil(num)\
    \ : Math.floor(num);\n}\n", "  const num = parseFloat(value);\n  const isNegative\
    \ = num < 0;\n  const isPositive = num > 0;\n  const isEquidistant = Math.abs(num\
    \ - Math.round(num)) < 0.1;\n  if (isEquidistant) {\n    return num;\n  }\n  if\
    \ (isNegative) {\n    return Math.ceil(num);\n  }\n  return Math.floor(num);\n\
    }\n", "  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const\
    \ absNum = Math.abs(num);\n  const closestNum = Math.ceil(absNum);\n  if (closestNum\
    \ === absNum) {\n    return num;\n  }\n  if (closestNum > absNum) {\n    return\
    \ isNegative ? closestNum - 1 : closestNum;\n  }\n  return isNegative ? closestNum\
    \ + 1 : closestNum;\n}\n", "  const number = parseFloat(value);\n  const diff\
    \ = closest_integer(Math.abs(number));\n  return diff > 0 ? number + diff : -diff;\n\
    }\n", "  const [int1, int2] = value.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n \
    \ const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");\n  const [int1Int, int2Int] = int1Int.split(\".\");\n\
    \  const [int1Int, int2Int] = int1Int.split(\".\");\n  const [int1Int, int2Int]\
    \ = int1Int.split(\".\");", "  let closest;\n  let diff;\n  let diffAbs;\n  let\
    \ closestAbs;\n  let closestDiff;\n  let closestDiffAbs;\n  let closestInteger;\n\
    \  let closestIntegerAbs;\n  let closestIntegerDiff;\n  let closestIntegerDiffAbs;\n\
    \  let closestIntegerDiffAbs2;\n  let closestIntegerDiffAbs3;\n  let closestIntegerDiffAbs4;\n\
    \  let closestIntegerDiffAbs5;\n  let closestIntegerDiffAbs6;\n  let closestIntegerDiffAbs7;\n\
    \  let closestIntegerDiffAbs8;\n  let closestIntegerDiffAbs9;\n  let closestIntegerDiffAbs10;\n\
    \  let closestIntegerDiffAbs11;\n  let closestIntegerDiffAbs12;\n  let closestIntegerDiffAbs13;\n\
    \  let closestIntegerDiffAbs14;\n  let closestIntegerDiffAbs15;\n  let closestIntegerDiffAbs16;\n\
    \  let closestIntegerDiffAbs17;\n  let closestIntegerDiffAbs18;\n  let closestIntegerDiffAbs19;\n\
    \  let closestIntegerDiffAbs20;\n  let closestIntegerDiffAbs21;\n  let closestIntegerDiffAbs22;\n\
    \  let closestIntegerDiffAbs23;\n  let closestIntegerDiffAbs24;\n  let closestIntegerDiffAbs25;\n\
    \  let closestIntegerDiffAbs26;\n  let closestIntegerDiffAbs27;\n  let closestIntegerDiffAbs28;\n\
    \  let closestIntegerDiffAbs29;\n  let closestIntegerDiffAbs30;\n  let closestIntegerDiffAbs31;\n\
    \  let closestIntegerDiffAbs32;\n  let closestIntegerDiffAbs33;\n  let closestIntegerDiffAbs34;\n\
    \  let closestIntegerDiffAbs35;\n  let closestIntegerDiffAbs36;\n  let closestIntegerDiffAbs37;\n\
    \  let closestIntegerDiffAbs38;\n  let closestIntegerDiffAbs39;\n  let closestIntegerDiffAbs40;\n\
    \  let closestIntegerDiffAbs41;\n  let closestIntegerDiffAbs42;\n  let closestIntegerDiffAbs43;\n\
    \  let closestIntegerDiffAbs44;\n  let closestIntegerDiffAbs45;\n  let closestIntegerDiffAbs46;\n\
    \  let closestIntegerDiffAbs47;\n  let closestIntegerDiffAbs48;\n  let closestIntegerDiffAbs49;\n\
    \  let closestIntegerDiffAbs50;\n  let closestIntegerDiffAbs51;\n  let closestIntegerDiffAbs52;\n\
    \  let closestIntegerDiffAbs53;\n  let closestIntegerDiffAbs54;\n  let closestInteger",
  "  const num = Number(value);\n  if (Number.isNaN(num)) {\n    throw new Error(`Invalid\
    \ number ${value}`);\n  }\n  const diff = num - Math.floor(num);\n  if (diff >\
    \ 0) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n}\n", "  const\
    \ num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if\
    \ (diff > 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n\
    }\n", "  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n\
    \  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n\
    }\n", "  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n\
    \  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n\
    }\n", "  const [integer, decimal] = value.split('.');\n  const [integerPart, decimalPart]\
    \ = integer.split('');\n  const [integerPart2, decimalPart2] = decimal.split('');\n\
    \  const [integerPart3, decimalPart3] = decimalPart.split('');\n  const [integerPart4,\
    \ decimalPart4] = decimalPart2.split('');\n  const [integerPart5, decimalPart5]\
    \ = decimalPart3.split('');\n  const [integerPart6, decimalPart6] = decimalPart4.split('');\n\
    \  const [integerPart7, decimalPart7] = decimalPart5.split('');\n  const [integerPart8,\
    \ decimalPart8] = decimalPart6.split('');\n  const [integerPart9, decimalPart9]\
    \ = decimalPart7.split('');\n  const [integerPart10, decimalPart10] = decimalPart8.split('');\n\
    \  const [integerPart11, decimalPart11] = decimalPart9.split('');\n  const [integerPart12,\
    \ decimalPart12] = decimalPart10.split('');\n  const [integerPart13, decimalPart13]\
    \ = decimalPart11.split('');\n  const [integerPart14, decimalPart14] = decimalPart12.split('');\n\
    \  const [integerPart15, decimalPart15] = decimalPart13.split('');\n  const [integerPart16,\
    \ decimalPart16] = decimalPart14.split('');\n  const [integerPart17, decimalPart17]\
    \ = decimalPart15.split('');\n  const [integerPart18, decimalPart18] = decimalPart16.split('');\n\
    \  const [integerPart19, decimalPart19] = decimalPart17.split('');\n  const [integerPart20,\
    \ decimalPart20] = decimalPart18.split('');\n  const [integerPart21, decimalPart21]\
    \ = decimalPart19.split('');\n  const [integerPart22, decimalPart22] = decimalPart20.split('');\n\
    \  const [integerPart23, decimalPart23] = decimalPart21.split('');\n  const [integerPart24,\
    \ decimalPart24] = decimalPart22.split('');\n  const [integerPart25, decimalPart25]\
    \ = decimalPart23.split('');\n  const [integerPart26, decimalPart26] = decimalPart24.split('');\n\
    \  const [integerPart27, decimalPart27] = decimalPart25.split('');\n  const [integerPart28,\
    \ decimalPart28] = decimalPart26.split('');\n  const [integerPart29, decimalPart29]\
    \ = decimalPart27.split('');\n  const [integerPart30, decimalPart30] = decimalPart28.split('');\n\
    \  const [integerPart31, decimalPart31] = decimalPart29.split('');\n  const [integerPart32,\
    \ decimalPart32] = decimalPart30.split('');\n  const [integerPart33, decimalPart33]\
    \ = decimalPart31.split('');\n  const [integerPart34, decimalPart34] = decimalPart32.split('');",
  "  const num = parseFloat(value);\n  const isNegative = num < 0;\n  if (isNegative)\
    \ {\n    return Math.floor(Math.abs(num));\n  }\n  return Math.ceil(Math.abs(num));\n\
    }\n", "  const [integer, decimal] = value.split('.');\n  const [integerPart, decimalPart]\
    \ = integer.split('');\n  const [integerPart2, decimalPart2] = decimal.split('');\n\
    \n  // If the two integers are equidistant, round away from zero.\n  if (Math.abs(integerPart\
    \ - integerPart2) <= Math.abs(decimalPart - decimalPart2)) {\n    return Math.ceil(parseInt(integerPart,\
    \ 10));\n  }\n\n  return Math.floor(parseInt(decimalPart, 10));\n}\n", "  const\
    \ num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n\
    \  const closestNum = Math.ceil(absNum);\n  if (closestNum === absNum) {\n   \
    \ return num;\n  }\n  if (closestNum > absNum) {\n    return isNegative ? closestNum\
    \ - 1 : closestNum;\n  }\n  return isNegative ? closestNum + 1 : closestNum;\n\
    }\n", "  const num = Number(value);\n  if (num === NaN) {\n    throw new Error(`Invalid\
    \ number ${value}`);\n  }\n  if (num === 0) {\n    return 0;\n  }\n  if (Math.abs(num)\
    \ < 1) {\n    return num;\n  }\n  if (Math.abs(num - Math.floor(num)) < 1) {\n\
    \    return Math.floor(num);\n  }\n  const diff = num - Math.floor(num);\n  if\
    \ (diff > 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n\
    }\n", "  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const\
    \ isPositive = num > 0;\n  if (isNegative && isPositive) {\n    return num;\n\
    \  }\n  if (isNegative) {\n    return num - 1;\n  }\n  if (isPositive) {\n   \
    \ return num + 1;\n  }\n  return num;\n}\n", "  const num = parseFloat(value);\n\
    \  const sign = num < 0 ? -1 : 1;\n  const absNum = Math.abs(num);\n  const absNumFloor\
    \ = Math.floor(absNum);\n  const absNumCeil = Math.ceil(absNum);\n  if (absNumFloor\
    \ === absNumCeil) {\n    return sign * absNum;\n  }\n  const diff = absNumFloor\
    \ - absNumCeil;\n  return sign * (absNumCeil + diff);\n}\n", "  const num = parseFloat(value);\n\
    \  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const closestNum\
    \ = Math.ceil(absNum);\n  if (closestNum === absNum) {\n    return num;\n  }\n\
    \  if (closestNum > absNum) {\n    return isNegative ? closestNum - 1 : closestNum;\n\
    \  }\n  return isNegative ? closestNum + 1 : closestNum;\n}\n", "  const num =\
    \ parseFloat(value);\n  const diff = num - Math.floor(num);\n  if (Math.abs(diff)\
    \ < Number.EPSILON) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n\
    }\n", "  const number = parseFloat(value);\n  const integers = Math.floor(number).toString().split(\"\
    .\");\n  const integer1 = parseInt(integers[0]);\n  const integer2 = parseInt(integers[1]);\n\
    \  if (Math.abs(integer1 - integer2) <= 1) {\n    return integer1;\n  }\n  return\
    \ integer2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
