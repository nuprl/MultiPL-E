name: HumanEval_119_match_parens
language: ts
prompt: "//You are given a list of two strings, both strings consist of open\n// parentheses\
  \ '(' or close parentheses ')' only.\n// Your job is to check if it is possible\
  \ to concatenate the two strings in\n// some order, that the resulting string will\
  \ be good.\n// A string S is considered to be good if and only if all parentheses\
  \ in S\n// are balanced. For example: the string '(())()' is good, while the string\n\
  // '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\
  \n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst: string[]):\
  \ string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\"\
  , \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"\
  ]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n\
  \  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"\
  ]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  )(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n\
  \  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();"
completions: ["  const stack: Stack<string> = new Stack<string>();\n  const stacks:\
    \ Stack<string>[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str\
    \ = lst[i];\n    if (str === \"(\") {\n      stack.push(str);\n      stacks.push(stack);\n\
    \    } else if (str === \")\") {\n      if (stacks.length === 0) {\n        return\
    \ \"No\";\n      }\n      const s = stacks.pop();\n      if (stacks.length ===\
    \ 0) {\n        return \"Yes\";\n      }\n      if (s.peek() !== str) {\n    \
    \    return \"No\";\n      }\n      stack.pop();\n    } else {\n      if (stacks.length\
    \ === 0) {\n        return \"No\";\n      }\n      const s = stacks.pop();\n \
    \     if (stacks.length === 0) {\n        return \"Yes\";\n      }\n      if (s.peek()\
    \ !== str) {\n        return \"No\";\n      }\n      stack.push(str);\n    }\n\
    \  }\n  return \"No\";\n}\n", "  const stack: Stack<string> = new Stack<string>();\n\
    \  const result: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  const char = lst[i];\n    if (char === '(') {\n      stack.push(char);\n  \
    \  } else if (char === ')') {\n      if (stack.isEmpty()) {\n        result.push(char);\n\
    \      } else {\n        const top = stack.pop();\n        if (top !== char) {\n\
    \          result.push(char);\n        }\n      }\n    }\n  }\n  return result.length\
    \ === lst.length ? \"Yes\" : \"No\";\n}\n", "  const stack: string[] = [];\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == \"(\") {\n      stack.push(lst[i]);\n\
    \    } else if (lst[i] == \")\") {\n      if (stack.length == 0) {\n        return\
    \ \"No\";\n      }\n      const top = stack.pop();\n      if (top != lst[i]) {\n\
    \        return \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "  if (lst.length\
    \ < 2) {\n    return \"No\";\n  }\n  const stack = new Stack();\n  const stack1\
    \ = new Stack();\n  const stack2 = new Stack();\n  const stack3 = new Stack();\n\
    \  const stack4 = new Stack();\n  const stack5 = new Stack();\n  const stack6\
    \ = new Stack();\n  const stack7 = new Stack();\n  const stack8 = new Stack();\n\
    \  const stack9 = new Stack();\n  const stack10 = new Stack();\n  const stack11\
    \ = new Stack();\n  const stack12 = new Stack();\n  const stack13 = new Stack();\n\
    \  const stack14 = new Stack();\n  const stack15 = new Stack();\n  const stack16\
    \ = new Stack();\n  const stack17 = new Stack();\n  const stack18 = new Stack();\n\
    \  const stack19 = new Stack();\n  const stack20 = new Stack();\n  const stack21\
    \ = new Stack();\n  const stack22 = new Stack();\n  const stack23 = new Stack();\n\
    \  const stack24 = new Stack();\n  const stack25 = new Stack();\n  const stack26\
    \ = new Stack();\n  const stack27 = new Stack();\n  const stack28 = new Stack();\n\
    \  const stack29 = new Stack();\n  const stack30 = new Stack();\n  const stack31\
    \ = new Stack();\n  const stack32 = new Stack();\n  const stack33 = new Stack();\n\
    \  const stack34 = new Stack();\n  const stack35 = new Stack();\n  const stack36\
    \ = new Stack();\n  const stack37 = new Stack();\n  const stack38 = new Stack();\n\
    \  const stack39 = new Stack();\n  const stack40 = new Stack();\n  const stack41\
    \ = new Stack();\n  const stack42 = new Stack();\n  const stack43 = new Stack();\n\
    \  const stack44 = new Stack();\n  const stack45 = new Stack();\n  const stack46\
    \ = new Stack();\n  const stack47 = new Stack();\n  const stack48 = new Stack();\n\
    \  const stack49 = new Stack();\n  const stack50 = new Stack();\n  const stack51\
    \ = new Stack();\n  const stack52 = new Stack();\n  const stack53 = new Stack();\n\
    \  const stack54 = new Stack();\n  const stack55 = new Stack();\n  const stack56\
    \ = new Stack();\n  const stack57 = new Stack();\n  const stack58 = new Stack();\n\
    \  const stack59 = new Stack();\n  const stack60 = new Stack();\n  const stack61\
    \ = new Stack();\n  const stack62 = new Stack();\n  const stack63 = new Stack();\n\
    \  const stack64 = new Stack();\n  const stack65 = new Stack();\n  const stack66\
    \ = new Stack();\n  const stack67 = new Stack();\n  const stack68 = new Stack();\n\
    \  const stack69 = new Stack", "  const stack = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const char = lst[i];\n    if (char === '(') {\n      stack.push(char);\n\
    \    } else if (char === ')') {\n      if (stack.length === 0) {\n        return\
    \ 'No';\n      }\n      const top = stack.pop();\n      if (top !== char) {\n\
    \        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n", "  let stack:\
    \ string[] = [];\n  let result: string = \"\";\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] == \"(\") {\n      stack.push(lst[i]);\n    } else if\
    \ (lst[i] == \")\") {\n      if (stack.length == 0) {\n        return \"No\";\n\
    \      }\n      stack.pop();\n    } else {\n      if (stack.length != 0) {\n \
    \       return \"No\";\n      }\n    }\n  }\n  if (stack.length != 0) {\n    return\
    \ \"No\";\n  }\n  return \"Yes\";\n}\n", "  const stack: Stack<string> = new Stack<string>();\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    if (str\
    \ === '(') {\n      stack.push(str);\n    } else if (str === ')') {\n      if\
    \ (stack.isEmpty()) {\n        return 'No';\n      }\n      const top = stack.pop();\n\
    \      if (top !== str) {\n        return 'No';\n      }\n    }\n  }\n  return\
    \ 'Yes';\n}\n", "  let stack: string[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] == \"(\") {\n      stack.push(lst[i]);\n    } else if\
    \ (lst[i] == \")\") {\n      if (stack.length == 0) {\n        return \"No\";\n\
    \      }\n      stack.pop();\n    } else {\n      if (stack.length != 0) {\n \
    \       return \"No\";\n      }\n    }\n  }\n  if (stack.length != 0) {\n    return\
    \ \"No\";\n  }\n  return \"Yes\";\n}\n", "  const stack: number[] = [];\n  const\
    \ result: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ char = lst[i];\n    if (char === '(') {\n      stack.push(i);\n    } else if\
    \ (char === ')') {\n      if (stack.length === 0) {\n        result.push(char);\n\
    \      } else {\n        const top = stack.pop();\n        if (top === i) {\n\
    \          result.push(char);\n        } else {\n          result.push(char);\n\
    \        }\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return 'No';\n\
    \  }\n  return result.join('');\n}\n", "  const stack: string[] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] === \"(\") {\n      stack.push(\"\
    (\");\n    } else if (lst[i] === \")\") {\n      if (stack.length === 0) {\n \
    \       return \"No\";\n      }\n      stack.pop();\n    } else {\n      if (stack.length\
    \ === 0) {\n        return \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}\n",
  "  let stack: string[] = [];\n  let open = 0;\n  let close = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] == '(') {\n      open++;\n      stack.push(lst[i]);\n\
    \    } else if (lst[i] == ')') {\n      close++;\n      if (open > close) {\n\
    \        stack.push(lst[i]);\n      }\n    } else if (open > close) {\n      stack.push(lst[i]);\n\
    \    }\n  }\n  return stack.length == 0;\n}\n", "  let stack: string[] = [];\n\
    \  let index = 0;\n  let result: string = \"\";\n  while (index < lst.length)\
    \ {\n    if (lst[index] === \"(\") {\n      stack.push(lst[index]);\n      index++;\n\
    \    } else if (lst[index] === \")\") {\n      if (stack.length === 0) {\n   \
    \     return \"No\";\n      }\n      result = result + stack.pop();\n      index++;\n\
    \    } else {\n      result = result + lst[index];\n      index++;\n    }\n  }\n\
    \  return \"Yes\";\n}\n", "  let stack: Stack<string> = new Stack<string>();\n\
    \  let result: string = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] == \"(\") {\n      stack.push(lst[i]);\n    } else if (lst[i] == \"\
    )\") {\n      while (stack.length && lst[stack.length - 1] != \"(\") {\n     \
    \   result += stack.pop();\n      }\n      stack.pop();\n    } else {\n      result\
    \ += lst[i];\n    }\n  }\n  return stack.length ? \"No\" : \"Yes\";\n}\n", " \
    \ let stack: string[] = [];\n  let result: string = \"\";\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i] === \"(\") {\n      stack.push(lst[i]);\n\
    \    } else if (lst[i] === \")\") {\n      if (stack.length === 0) {\n       \
    \ return \"No\";\n      }\n      result = result + stack.pop();\n    } else {\n\
    \      result = result + lst[i];\n    }\n  }\n  return \"Yes\";\n}\n", "  let\
    \ stack: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ == '(') {\n      stack.push(i);\n    } else if (lst[i] == ')') {\n      if (stack.length\
    \ === 0) {\n        return 'No';\n      }\n      let top = stack.pop();\n    \
    \  if (lst[top] != '(') {\n        return 'No';\n      }\n    }\n  }\n  return\
    \ 'Yes';\n}\n", "  const stack: Stack<string> = new Stack<string>();\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    if (str === \"(\"\
    ) {\n      stack.push(str);\n    } else if (str === \")\") {\n      if (stack.isEmpty())\
    \ {\n        return \"No\";\n      }\n      const top = stack.pop();\n      if\
    \ (top !== str) {\n        return \"No\";\n      }\n    }\n  }\n  return \"Yes\"\
    ;\n}\n", "  let stack: string[] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] == \"(\") {\n      stack.push(lst[i]);\n    } else if (lst[i]\
    \ == \")\") {\n      if (stack.length == 0) {\n        return \"No\";\n      }\n\
    \      stack.pop();\n    } else {\n      if (stack.length != 0) {\n        return\
    \ \"No\";\n      }\n    }\n  }\n  if (stack.length != 0) {\n    return \"No\"\
    ;\n  }\n  return \"Yes\";\n}\n", "  let stack: string[] = [];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] == \"(\") {\n      stack.push(lst[i]);\n\
    \    } else if (lst[i] == \")\") {\n      if (stack.length == 0) {\n        return\
    \ \"No\";\n      }\n      stack.pop();\n    } else {\n      if (stack.length !=\
    \ 0) {\n        return \"No\";\n      }\n    }\n  }\n  if (stack.length != 0)\
    \ {\n    return \"No\";\n  }\n  return \"Yes\";\n}\n", "  let stack: Stack<string>\
    \ = new Stack<string>();\n  let result: string = \"\";\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] == \"(\") {\n      stack.push(lst[i]);\n\
    \    } else if (lst[i] == \")\") {\n      while (stack.length > 0 && lst[stack.length\
    \ - 1] != \"(\") {\n        result += stack.pop();\n      }\n      if (stack.length\
    \ == 0) {\n        result += \"()\";\n      } else {\n        result += \"()\"\
    ;\n      }\n      stack.pop();\n    } else {\n      result += lst[i];\n    }\n\
    \  }\n  return result;\n}\n", "  let stack: Stack<string> = new Stack<string>();\n\
    \  let result: string = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] === \"(\") {\n      stack.push(lst[i]);\n    } else if (lst[i] === \"\
    )\") {\n      if (stack.isEmpty()) {\n        result += \"No\";\n        break;\n\
    \      } else {\n        result += \"Yes\";\n        stack.pop();\n      }\n \
    \   } else {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
