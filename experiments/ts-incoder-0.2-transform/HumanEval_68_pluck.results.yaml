language: ts
name: HumanEval_68_pluck
results:
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return [];\n  return\
    \ evens.reduce((acc, curr, index) => {\n    if (acc === undefined) return [curr,\
    \ index];\n    if (curr < acc[0]) return [curr, index];\n    return acc;\n  },\
    \ undefined);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpef5ppl0i.ts(29,3): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number[]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n"
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, val, i) => {\n    const index = arr.indexOf(val);\n\
    \    if (index === 0) return [val, i];\n    if (index === arr.length - 1) return\
    \ [val, i];\n    return acc;\n  }, []);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpe0gaqm5f.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe0gaqm5f.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpudnkz0l4.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpudnkz0l4.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ge9rmoq.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ge9rmoq.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return [];\n  const\
    \ smallestEven = evens.reduce((a, b) => Math.min(a, b));\n  const index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ge9rmoq.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ge9rmoq.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const len =\
    \ arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let minIndex = 0;\n\
    \  let minValue = arr[0];\n  for (let i = 1; i < len; i++) {\n    if (arr[i] <\
    \ minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return\
    \ [minValue, minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp31t1ha3a.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp31t1ha3a.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const minIndex = evenValues.reduce((prev, curr, index) => {\n    if (curr\
    \ < prev) return index;\n    return prev;\n  }, Number.MAX_SAFE_INTEGER);\n  return\
    \ evenValues.map(node => [node, minIndex]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp95x2imz8.ts(32,13): error TS2339: Property 'MAX_SAFE_INTEGER'\
    \ does not exist on type 'NumberConstructor'.\n../../../../../tmp/tmp95x2imz8.ts(33,3):\
    \ error TS2322: Type 'any[][]' is not assignable to type 'number[]'.\n  Type 'any[]'\
    \ is not assignable to type 'number'.\n"
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((prev, curr, i, arr) => {\n    if (curr < prev) return\
    \ curr;\n    return arr[i];\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_c7ss2xh.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, cur, index) => {\n    if (index === evenValues.length\
    \ - 1) return [cur, index];\n    if (cur < evenValues[index + 1]) return [cur,\
    \ index + 1];\n    return [cur, evenValues[index + 1]];\n  }, []);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpnr2ka_12.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnr2ka_12.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue\
    \ = sortedEvenValues[0];\n  const indexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, indexOfSmallestEvenValue];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpspuuogck.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpspuuogck.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((prev, curr, i, arr) => {\n    if (curr\
    \ < prev) {\n      return curr;\n    }\n    return arr[i];\n  }, evenValues[0]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpubvceabj.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const result\
    \ = [];\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] === minValue) {\n      if (minIndex === -1)\
    \ {\n        minIndex = i;\n      } else if (arr[i] !== minValue) {\n        minIndex\
    \ = i;\n      }\n    }\n  }\n  if (minIndex === -1) {\n    return result;\n  }\n\
    \  result.push(minValue);\n  result.push(minIndex);\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpxf53jj3i.js:50:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxf53jj3i.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((prev, curr) => {\n    const index = arr.indexOf(curr);\n\
    \    if (index === 0) return [curr, index];\n    if (prev[0] < curr) return [curr,\
    \ index];\n    return [prev[0], prev[1]];\n  }, [evenValues[0], 0]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpny8mpc_4.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpny8mpc_4.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndex =\n\
    \    evenValues.findIndex(\n      v => v === smallestEvenValue && v % 2 === 0\n\
    \    ) || evenValues.length;\n  return [smallestEvenValue, smallestIndex];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmiwp8vzw.ts(31,16): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    '
  timestamp: 1659738698
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((prev, curr) => {\n    const index = prev.findIndex(node\
    \ => node === curr);\n    if (index === -1) return [curr, curr];\n    return [index\
    \ > prev.length ? prev[index] : curr, index];\n  }, []);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjjmcdjxu.ts(30,24): error TS2339: Property ''findIndex''
    does not exist on type ''any[]''.

    '
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.sort((a, b) => a - b).slice(0, 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpbwqstpa6.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbwqstpa6.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const minValue = evenValues.reduce((a, b) => a < b ? a :\
    \ b);\n  const minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6ejwz0h3.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6ejwz0h3.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n\
    \  const smallestIndex =\n    evenValues.findIndex(node => node === smallestEvenValue)\
    \ + 1;\n  return [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmndbld88.ts(31,16): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    '
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    return\
    \ curr < acc ? i : acc;\n  }, 0);\n  return evenValues.map(n => [n, minIndex]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp83lr6ede.ts(34,3): error TS2322: Type 'number[][]'\
    \ is not assignable to type 'number[]'.\n  Type 'number[]' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const smallestEven = evens.reduce((a, b) => Math.min(a, b));\n  const\
    \ index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ smallestIndex = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const smallest = evens.reduce((prev, curr) => {\n    if (prev === undefined\
    \ || prev > curr) {\n      return curr;\n    }\n    return prev;\n  }, undefined);\n\
    \  const index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjx8e5dc6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx8e5dc6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const len =\
    \ arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const minIndex = Math.min(...arr.map(node\
    \ => node % 2));\n  const minValue = arr[minIndex];\n  const evens = arr.filter(node\
    \ => node % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  return\
    \ evens.map(node => node === minValue ? minIndex : minValue);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpyqwm7b97.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyqwm7b97.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 4 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const result\
    \ = [];\n  let smallestEven = Number.MAX_SAFE_INTEGER;\n  let smallestIndex =\
    \ 0;\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n  \
    \  if (value % 2 === 0) {\n      if (value < smallestEven) {\n        smallestEven\
    \ = value;\n        smallestIndex = i;\n      }\n    }\n  }\n  if (smallestEven\
    \ === Number.MAX_SAFE_INTEGER) {\n    return [];\n  }\n  result.push(smallestEven,\
    \ smallestIndex);\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpynl94puv.ts(28,29): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpynl94puv.ts(39,31): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < acc)\
    \ return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  return evenValues.map(v\
    \ => [v,minIndex]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp6roeqilo.ts(32,13): error TS2339: Property 'MAX_SAFE_INTEGER'\
    \ does not exist on type 'NumberConstructor'.\n../../../../../tmp/tmp6roeqilo.ts(33,3):\
    \ error TS2322: Type 'any[][]' is not assignable to type 'number[]'.\n  Type 'any[]'\
    \ is not assignable to type 'number'.\n"
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, v, i) => {\n    if (v < acc[0]) {\n\
    \      return [v, i];\n    }\n    return acc;\n  }, [evenValues[0]]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp3ku5hel0.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3ku5hel0.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpedzztpxy.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpedzztpxy.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = arr.findIndex(node => node === smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsair8awo.ts(30,21): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    '
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, val, i) => {\n    if (val < acc[0]) {\n    \
    \  return [val, i];\n    }\n    return acc;\n  }, []);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp4fc9wdf5.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp4fc9wdf5.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((a, b) => a < b ? a : b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbzjndvh8.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvxtp4o84.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvxtp4o84.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, cur, idx) => {\n    if (acc === null || cur\
    \ < acc[0]) {\n      return [cur, idx];\n    }\n    return acc;\n  }, null);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpz836l_w0.ts(29,3): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number[]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n"
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minValue = evenValues[0];\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp3y9urmn0.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3y9urmn0.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr\
    \ < acc) {\n      return curr;\n    }\n    return i;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  return evenValues.map(n => [n, minIndex]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp84r5_9j6.ts(36,13): error TS2339: Property 'MAX_SAFE_INTEGER'\
    \ does not exist on type 'NumberConstructor'.\n../../../../../tmp/tmp84r5_9j6.ts(37,3):\
    \ error TS2322: Type 'any[][]' is not assignable to type 'number[]'.\n  Type 'any[]'\
    \ is not assignable to type 'number'.\n"
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const result\
    \ = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i <\
    \ arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpprxcid1x.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpprxcid1x.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < acc)\
    \ return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue\
    \ = evenValues[minIndex];\n  const index = evenValues.indexOf(minValue);\n  return\
    \ [minValue, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp5o8nn2x.ts(32,13): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, v, i) => {\n    if (v < acc.min) {\n      acc.min\
    \ = v;\n      acc.index = i;\n    }\n    return acc;\n  }, { min: Number.MAX_SAFE_INTEGER,\
    \ index: -1 });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo547xbnw.ts(29,3): error TS2740: Type ''{ min: any;
    index: number; }'' is missing the following properties from type ''number[]'':
    length, pop, push, concat, and 16 more.

    ../../../../../tmp/tmpo547xbnw.ts(35,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798398
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const smallestEven = evens.reduce((a, b) => a < b ? a : b);\n  const index\
    \ = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((prev, curr, index) => {\n    if (prev === undefined\
    \ || prev > curr) return index;\n    return prev;\n  }, undefined);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqb2rlv5r.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798400
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const min = evens.reduce((a, b) => Math.min(a, b));\n  const index = evens.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6neg712x.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6neg712x.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  return evenValues.reduce((prev, curr, i, arr) => {\n   \
    \ if (prev === undefined || prev > curr) {\n      return curr;\n    }\n    return\
    \ arr[i];\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp81o8uzji.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798400
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp68tx09w4.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp68tx09w4.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpe7pfowhf.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe7pfowhf.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(v => v % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const min = evens.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmphnv98jn6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmphnv98jn6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpq4rfx58m.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq4rfx58m.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, curr, i, arr) => {\n    if (i ===\
    \ 0) {\n      return [curr, arr[i]];\n    }\n    if (curr < arr[i]) {\n      return\
    \ [curr, arr[i]];\n    }\n    return [arr[i-1], arr[i]];\n  }, []);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpugo6261k.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpugo6261k.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, cur, idx) => {\n    if (idx === 0)\
    \ {\n      return cur;\n    }\n    return Math.min(acc, cur);\n  }, evenValues[0]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph218gt_z.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndexOfSmallestEvenValue\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndexOfSmallestEvenValue];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp0sc5bg4h.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0sc5bg4h.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((prev, curr) => {\n    const index = arr.indexOf(curr);\n\
    \    if (index === 0) return [prev, curr];\n    if (prev[0] < curr) prev[1] =\
    \ index;\n    return prev;\n  }, [evenValues[0], 0]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpqdppqkqe.ts(29,3): error TS2322: Type '(number |\
    \ number[])[]' is not assignable to type 'number[]'.\n  Type 'number | number[]'\
    \ is not assignable to type 'number'.\n    Type 'number[]' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const result\
    \ = [];\n  const minIndex = 0;\n  const minValue = arr[0];\n  for (let i = 1;\
    \ i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa44tmt4x.ts(32,7): error TS2588: Cannot assign to
    ''minValue'' because it is a constant.

    ../../../../../tmp/tmpa44tmt4x.ts(33,7): error TS2588: Cannot assign to ''minIndex''
    because it is a constant.

    '
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(minValue);\n\
    \  return [minValue, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp2lecvs5y.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2lecvs5y.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.sort((a, b) => a - b).slice(0, 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpawkbh6ao.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpawkbh6ao.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.sort((a, b) => a - b).slice(0, 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpzel80zok.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzel80zok.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const smallestIndex = getIndexOfSmallestEvenValue(arr,\
    \ smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg9pwb4_j.ts(32,25): error TS2304: Cannot find name
    ''getIndexOfSmallestEvenValue''.

    '
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ge9rmoq.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ge9rmoq.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const smallestEven = evens.reduce((a, b) => a < b ? a : b);\n  const index\
    \ = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((prev, curr, i, arr) => {\n    if (i ===\
    \ 0) {\n      return [prev, curr];\n    }\n    if (curr < prev) {\n      return\
    \ [curr, i];\n    }\n    return [prev, i - 1];\n  }, [evenValues[0]]);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpvg1pat5v.ts(31,3): error TS2322: Type '(number |\
    \ number[])[]' is not assignable to type 'number[]'.\n  Type 'number | number[]'\
    \ is not assignable to type 'number'.\n    Type 'number[]' is not assignable to\
    \ type 'number'.\n../../../../../tmp/tmpvg1pat5v.ts(35,9): error TS2365: Operator\
    \ '<' cannot be applied to types 'number' and 'number[]'.\n"
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  return sortedEvenValues.reduce((acc,\
    \ cur, idx) => {\n    if (idx === 0) return cur;\n    if (cur % 2 === 0) return\
    \ cur;\n    return acc;\n  }, 0);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeqo20a4q.ts(30,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minValue\
    \ = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpuhjggzws.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuhjggzws.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minValue\
    \ = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpuhjggzws.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuhjggzws.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, index) => {\n    if (curr < acc[0]) {\n\
    \      return [curr, index];\n    }\n    return acc;\n  }, evenValues[0]);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmperopbxuy.ts(29,3): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number[]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n"
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n\
    \    if (curr < acc) {\n      return curr;\n    }\n    return i;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  return [minValue, minIndex];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkzjn1uvx.ts(36,13): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798402
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minValue\
    \ = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpuhjggzws.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuhjggzws.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvxtp4o84.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvxtp4o84.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((prev, curr, index) => {\n    if (prev\
    \ === undefined || curr < prev) {\n      return curr;\n    }\n    return index;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp96_9s8xq.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798403
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const len =\
    \ arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue = arr[0];\n\
    \  const minIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dgw9jpa.ts(35,7): error TS2588: Cannot assign to
    ''minValue'' because it is a constant.

    ../../../../../tmp/tmp5dgw9jpa.ts(36,7): error TS2588: Cannot assign to ''minIndex''
    because it is a constant.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const result\
    \ = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i <\
    \ arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  result.push(minValue);\n  result.push(minIndex);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp99g9ir_y.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp99g9ir_y.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((a, b) => a < b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp45xrd15x.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, i, arr) => {\n    if (i === 0) return\
    \ [curr, arr[i]];\n    if (curr < arr[i]) return [curr, arr[i]];\n    return [arr[i],\
    \ curr];\n  }, [evenValues[0], evenValues[0]]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp4xpegqzs.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4xpegqzs.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp5ec0rgtz.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5ec0rgtz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const minIndex = evenValues.reduce((prev, curr) => {\n \
    \   return Math.min(prev, curr);\n  });\n  const minValue = evenValues[minIndex];\n\
    \  const minEvenValue = minValue % 2 === 0;\n  return evenValues.filter(node =>\
    \ node === minValue || node === minEvenValue ? node : undefined);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfzbyownb.ts(36,57): error TS2367: This condition
    will always return ''false'' since the types ''number'' and ''boolean'' have no
    overlap.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minValue = Math.min(...evenValues);\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpa6447dcb.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa6447dcb.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n\
    \  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpewul5gny.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpewul5gny.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const min = evens.reduce((a, b) => Math.min(a, b));\n  const index = evens.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6neg712x.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6neg712x.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minValue = evenValues.reduce((a, b) => Math.min(a, b));\n\
    \  const minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpqy65ftv_.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqy65ftv_.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minIndex = evenValues.reduce((acc, val, i) => {\n    if (val < acc) return\
    \ i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n\
    \  return evenValues.filter(n => n === minValue);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp749cyqs.ts(32,13): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, v, i) => {\n    if (v < acc[0]) {\n      return\
    \ [v, i];\n    } else if (v === acc[0]) {\n      return [acc[1], acc[0]];\n  \
    \  }\n    return acc;\n  }, [evenValues[0], 0]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpqmnyh1ap.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqmnyh1ap.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 4 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const minIndex:\
    \ number[] = [];\n  let minValue: number = Number.MAX_SAFE_INTEGER;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex.push(i);\n    } else if (arr[i] === minValue) {\n\
    \      minIndex.push(i);\n    }\n  }\n  return minIndex;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt60bylth.ts(28,33): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const minValue\
    \ = Math.min(...arr);\n  const minIndex = arr.indexOf(minValue);\n  return [minValue,\
    \ minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpznu_z87o.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpznu_z87o.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const result\
    \ = [];\n  const minValue = arr[0];\n  const minIndex = 0;\n  for (let i = 1;\
    \ i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  result.push(minValue);\n  result.push(minIndex);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0ya11qss.ts(32,7): error TS2588: Cannot assign to
    ''minValue'' because it is a constant.

    ../../../../../tmp/tmp0ya11qss.ts(33,7): error TS2588: Cannot assign to ''minIndex''
    because it is a constant.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ge9rmoq.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ge9rmoq.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((a, b) => a < b ? a : b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp45xrd15x.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjx8e5dc6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx8e5dc6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minValue = Math.min(...evenValues);\n  const minIndexes = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndexes];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9fuarblf.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9fuarblf.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, i, arr) => {\n    if (i === 0) {\n   \
    \   return [curr, arr[i]];\n    }\n    if (arr[i] < curr) {\n      return [curr,\
    \ arr[i]];\n    }\n    return [arr[i], arr[i + 1]];\n  }, [evenValues[0], 0]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvqtloetw.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvqtloetw.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, undefined\
    \ ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const minValue = Math.min(...evenValues);\n  const minIndex\
    \ = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp2b45pbw2.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2b45pbw2.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798404
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp68tx09w4.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp68tx09w4.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n\
    \  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798404
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjx8e5dc6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx8e5dc6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ge9rmoq.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ge9rmoq.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, cur, idx) => {\n    if (acc === null\
    \ || cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, null);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2x2del6a.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjx8e5dc6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx8e5dc6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((acc, node, index) => {\n    if (acc.length\
    \ === 0 || acc[acc.length - 1] < node) return [node, index];\n    return acc;\n\
    \  }, []);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpnph1brj4.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnph1brj4.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const minValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp1dzevbe9.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1dzevbe9.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, index) => {\n    if (curr !== 0) return\
    \ [curr];\n    if (index === evenValues.length - 1) return [curr];\n    return\
    \ [curr];\n  }, []);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvd93439_.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvd93439_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798405
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndexOfSmallestEvenValue\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndexOfSmallestEvenValue];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpmurqq394.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmurqq394.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798405
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const minValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const minIndex = evenValues.indexOf(minValue);\n  return [minValue,\
    \ minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpwzou8bqp.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwzou8bqp.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798405
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjx8e5dc6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx8e5dc6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minValue = Math.min(...evenValues);\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsgoekhvy.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsgoekhvy.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798405
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  return evenValues.reduce((prev, curr) => {\n    if (prev\
    \ === undefined || prev < curr) {\n      return curr;\n    }\n    return prev;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgrnfn4hr.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798405
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((acc, curr, index) => {\n    if (acc === undefined)\
    \ return [curr, index];\n    if (curr < acc[0]) return [curr, index];\n    return\
    \ [acc[0], index];\n  }, undefined);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmph_uumkw5.ts(29,28): error TS2769: No overload matches\
    \ this call.\n  Overload 1 of 3, '(callbackfn: (previousValue: number, currentValue:\
    \ number, currentIndex: number, array: number[]) => number, initialValue: number):\
    \ number', gave the following error.\n    Argument of type '(acc: number, curr:\
    \ number, index: number) => any[]' is not assignable to parameter of type '(previousValue:\
    \ number, currentValue: number, currentIndex: number, array: number[]) => number'.\n\
    \      Type 'any[]' is not assignable to type 'number'.\n  Overload 2 of 3, '(callbackfn:\
    \ (previousValue: number, currentValue: number, currentIndex: number, array: number[])\
    \ => number, initialValue: number): number', gave the following error.\n    Argument\
    \ of type '(acc: number, curr: number, index: number) => any[]' is not assignable\
    \ to parameter of type '(previousValue: number, currentValue: number, currentIndex:\
    \ number, array: number[]) => number'.\n      Type 'any[]' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1659798405
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  let smallestEvenValue = Math.min(...evenValues);\n  let index =\
    \ evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_ettxjrk.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_ettxjrk.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((prev, curr, i) => {\n    if (prev === undefined ||\
    \ curr < prev) {\n      return curr;\n    }\n    return prev;\n  }, undefined);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp621qttgf.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmphnv98jn6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmphnv98jn6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798406
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((prev, curr, i) => {\n    if (curr\
    \ < prev) return curr;\n    return prev;\n  }, Number.MAX_SAFE_INTEGER);\n  const\
    \ smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy8z59yrj.ts(32,13): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpczgkm669.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpczgkm669.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a, b));\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpbpkcal6n.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbpkcal6n.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n\
    \  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798404
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((prev, curr) => {\n    if (prev === undefined\
    \ || prev < curr) return curr;\n    return prev;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjx5rrdjk.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798406
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const result\
    \ = [];\n  const minIndex = arr.findIndex(node => node % 2 === 0);\n  if (minIndex\
    \ === -1) {\n    return result;\n  }\n  const minValue = arr[minIndex];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i]\
    \ < minValue) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n\
    \    }\n  }\n  result.push(minValue, minIndex);\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb5fnwx6j.ts(28,24): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpb5fnwx6j.ts(36,9): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../../tmp/tmpb5fnwx6j.ts(37,9): error TS2588: Cannot assign to ''minIndex''
    because it is a constant.

    '
  timestamp: 1659798406
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((prev, curr, i, arr) => {\n    if (curr < prev) return\
    \ curr;\n    return arr[i];\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf9c83n7j.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798406
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((prev, curr) => {\n    if (prev === undefined\
    \ || prev[0] < curr) {\n      return [curr, curr];\n    }\n    return prev;\n\
    \  }, undefined);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp10kp4q2j.ts(29,3): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number[]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n"
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, cur, idx) => {\n    if (idx < evenValues.length\
    \ && cur < evenValues[idx]) {\n      acc.push(cur);\n      return acc;\n    }\n\
    \    if (idx === evenValues.length - 1) {\n      acc.push(cur);\n      return\
    \ acc;\n    }\n    if (cur < evenValues[idx]) {\n      acc.push(cur);\n      return\
    \ acc;\n    }\n    acc.push(evenValues[idx]);\n    return acc;\n  }, []);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpzy240gfx.js:50:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzy240gfx.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const minValue = evenValues.reduce((a, b) => a < b ? a :\
    \ b);\n  const minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6ejwz0h3.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6ejwz0h3.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minValue = evenValues.reduce((a, b) => a < b ? a : b);\n \
    \ const minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp4k5ip9s2.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4k5ip9s2.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minValue = evenValues.reduce((a, b) => Math.min(a, b));\n\
    \  const index = evenValues.indexOf(minValue);\n  return [minValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_a6k3rnr.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_a6k3rnr.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798406
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const minIndex:\
    \ number[] = [];\n  const minValue: number = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex.push(i);\n\
    \    } else if (arr[i] === minValue) {\n      minIndex.push(i);\n    }\n  }\n\
    \  return minIndex;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfuzyaa2m.ts(31,7): error TS2588: Cannot assign to
    ''minValue'' because it is a constant.

    '
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjx8e5dc6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx8e5dc6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const minEven\
    \ = arr.reduce((prev, curr) => {\n    if (prev === undefined || prev === null\
    \ || prev % 2 !== 0) {\n      return prev;\n    }\n    return curr;\n  }, undefined);\n\
    \  if (minEven === undefined) {\n    return [];\n  }\n  return arr.filter(node\
    \ => node === minEven);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpqmjch152.js:41:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpqmjch152.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, val, i) => {\n    if (val < acc[0])\
    \ {\n      return [val, i];\n    }\n    return acc;\n  }, [evenValues[0]]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpw59p02ac.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw59p02ac.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, val, i) => {\n    if (val < acc[0]) {\n    \
    \  return [val, i];\n    }\n    return acc;\n  }, [evenValues[0], 0]);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp67oobgbz.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp67oobgbz.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798408
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, cur, index) => {\n    if (acc ===\
    \ null || cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, null);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe36k2v0i.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp5ec0rgtz.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5ec0rgtz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798403
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr\
    \ < acc) {\n      return curr;\n    }\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  return [minValue, minIndex];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw02eyhg3.ts(36,13): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798408
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  return evenValues.reduce((prev, curr) => {\n    return prev\
    \ < curr ? prev : curr;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp87s3dop7.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798408
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((prev, curr, i, arr) => {\n    if (curr < prev) return\
    \ curr;\n    return arr[i] === arr[i + 1] ? arr[i] : arr[i + 1];\n  });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3yp8b8ov.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n\
    \  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const len =\
    \ arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const evens = arr.filter(v\
    \ => v % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ min = evens[0];\n  const minIndex = arr.indexOf(min);\n  return [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6x38a4je.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6x38a4je.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, index) => {\n    if (curr < acc[0]) {\n\
    \      return [curr, index];\n    } else if (curr === acc[0]) {\n      return\
    \ [acc[1], acc[1] === 0 ? index : acc[1] + 1];\n    }\n    return acc;\n  }, [evenValues[0],\
    \ 0]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmphsyu0872.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmphsyu0872.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const minValue\
    \ = Math.min(...arr);\n  const minIndex = arr.indexOf(minValue);\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  if (minIndex === -1) return evenValues;\n  return [minValue, minIndex];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmph00_1a7r.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmph00_1a7r.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798408
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((a, b) => a < b ? a : b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbzjndvh8.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr\
    \ < acc) {\n      return curr;\n    }\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  return evenValues.map(v => [v, minIndex]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpn4rxo25b.ts(36,13): error TS2339: Property 'MAX_SAFE_INTEGER'\
    \ does not exist on type 'NumberConstructor'.\n../../../../../tmp/tmpn4rxo25b.ts(38,3):\
    \ error TS2322: Type 'any[][]' is not assignable to type 'number[]'.\n  Type 'any[]'\
    \ is not assignable to type 'number'.\n"
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a, b));\n  const\
    \ index = arr.findIndex(n => n === smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0jazob0z.ts(30,21): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    '
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_xn6d1q_.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xn6d1q_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798409
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minValue = evenValues.reduce((a, b) => Math.min(a, b));\n  const minIndex\
    \ = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpnljb01d1.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnljb01d1.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798409
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ smallestIndex = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, curr, i) => {\n    if (acc === null\
    \ || curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, null);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbor_kipt.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const indexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, indexOfSmallestEvenValue];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpz1oxhu8c.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz1oxhu8c.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798408
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((prev, curr, index) => {\n    if (prev\
    \ === undefined || prev[0] < curr) {\n      return [curr, index];\n    }\n   \
    \ return prev;\n  }, undefined);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp7fbbr8k2.ts(31,3): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number[]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n"
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvxtp4o84.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvxtp4o84.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, val, i) => {\n    if (val < acc[0]) {\n    \
    \  return [val, i];\n    }\n    return acc;\n  }, [evenValues[0], 0]);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp67oobgbz.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp67oobgbz.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmphnv98jn6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmphnv98jn6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, v, i) => {\n    if (v < acc[0]) {\n\
    \      return [v, i];\n    }\n    return acc;\n  }, evenValues[0]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp2i1t_a8t.ts(31,3): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number[]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n"
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvxtp4o84.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvxtp4o84.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const len =\
    \ arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n  if (minIndex === -1) {\n    return [];\n  }\n  const\
    \ minValue = arr[minIndex];\n  const result = [minValue, minIndex];\n  for (let\
    \ i = minIndex + 1; i < len; i++) {\n    const node = arr[i];\n    if (node %\
    \ 2 === 0) {\n      continue;\n    }\n    if (node < minValue) {\n      minValue\
    \ = node;\n      minIndex = i;\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpazx0hbvx.ts(31,24): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpazx0hbvx.ts(43,7): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../../tmp/tmpazx0hbvx.ts(44,7): error TS2588: Cannot assign to ''minIndex''
    because it is a constant.

    '
  timestamp: 1659798408
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpnsfphczf.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnsfphczf.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798409
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a, b));\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798409
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index\
    \ = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798409
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((prev, curr) => {\n    const index = arr.indexOf(curr);\n\
    \    if (index === -1) {\n      return prev;\n    }\n    if (prev[0] < curr) {\n\
    \      return [curr, index];\n    }\n    return prev;\n  }, [evenValues[0], 0]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpoke8_99k.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoke8_99k.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798409
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndex =\
    \ evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpgnvh43db.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgnvh43db.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798409
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const index = evens.reduce((acc, curr, i) => {\n    if (curr < acc) {\n\
    \      return curr;\n    }\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  return [evens[0], index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvlgfdilg.ts(36,13): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798409
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798409
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) {\n  \
    \  return [];\n  }\n  const smallestEvenValue = evenValues.sort((a, b) => a -\
    \ b)[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpssm0ui2b.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpssm0ui2b.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798410
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const minIndex = evenValues.reduce((acc, val, i) => {\n    return val < acc\
    \ ? i : acc;\n  }, Number.MAX_SAFE_INTEGER);\n  return evenValues.map(n => [n,\
    \ minIndex]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpegor5col.ts(31,13): error TS2339: Property 'MAX_SAFE_INTEGER'\
    \ does not exist on type 'NumberConstructor'.\n../../../../../tmp/tmpegor5col.ts(32,3):\
    \ error TS2322: Type 'any[][]' is not assignable to type 'number[]'.\n  Type 'any[]'\
    \ is not assignable to type 'number'.\n"
  timestamp: 1659798409
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((prev, curr, i, arr) => {\n    if (curr\
    \ < prev) {\n      return curr;\n    }\n    if (i === arr.length - 1) {\n    \
    \  return prev;\n    }\n    return arr[i + 1];\n  }, evenValues[0]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyt3z3sjm.ts(31,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798410
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, v, i) => {\n    if (v < acc[0]) {\n      return\
    \ [v, i];\n    }\n    return acc;\n  }, [evenValues[0]]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpmi2q_1d7.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmi2q_1d7.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798410
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  return sortedEvenValues.reduce((acc,\
    \ cur, i, arr) => {\n    if (i === 0) return [cur, arr[i]];\n    if (cur === arr[0])\
    \ return [cur, arr[i]];\n    if (cur < arr[0]) return [cur, arr[i]];\n    return\
    \ [cur, arr[i]];\n  }, []);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsl9f61eu.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsl9f61eu.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798410
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  return [minValue, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl5vdlh_d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5vdlh_d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738698
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((prev, curr) => {\n    if (prev === undefined\
    \ || prev < curr) return curr;\n    return prev;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjx5rrdjk.ts(29,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659798406
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue\
    \ = sortedEvenValues[0];\n  const smallestIndexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndexOfSmallestEvenValue];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmps5mpig1g.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmps5mpig1g.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798410
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, i) => {\n    if (curr < acc[0]) {\n  \
    \    return [curr, i];\n    } else if (curr === acc[0]) {\n      return [acc[1],\
    \ acc[0]];\n    }\n    return acc;\n  }, [evenValues[0], 0]);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp0gj_u2xl.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0gj_u2xl.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 4 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798410
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798406
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const minValue\
    \ = Math.min(...arr);\n  const minIndex = arr.indexOf(minValue);\n  if (minIndex\
    \ === -1) {\n    return [];\n  }\n  const evenIndex = minIndex % 2 === 0;\n  return\
    \ evenIndex ? [minValue, minIndex] : minValue;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpy6zogbgw.ts(33,3): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number[]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n"
  timestamp: 1659798410
