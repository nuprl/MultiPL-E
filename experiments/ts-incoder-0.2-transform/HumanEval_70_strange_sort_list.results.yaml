language: ts
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return [min,\
    \ ...strange_sort_list(lst.filter(x => x !== min)), max];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmp0406nmi9.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0406nmi9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    4, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min_val = Math.min(...lst);\n  const max_val\
    \ = Math.max(...lst);\n  const min_idx = lst.indexOf(min_val);\n  const max_idx\
    \ = lst.indexOf(max_val);\n  const mid_val = min_val + max_val / 2;\n  const mid_val\
    \ = mid_val.toString();\n  const mid_val_idx = lst.indexOf(mid_val);\n  const\
    \ mid_val_idx_idx = lst.indexOf(mid_val_idx);\n  const mid_val_idx_idx_idx = lst.indexOf(mid_val_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx);\n  const\
    \ mid_val_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx);\n  const\
    \ mid_val_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fosi362.ts(34,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3fosi362.ts(34,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp3fosi362.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right).concat([max]));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp65umic_6.js:19\n    var left = lst.slice(0, middle);\n        \
    \           ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp65umic_6.js:19:20)\n    at\
    \ strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const minValue = Math.min(...lst);\n  const maxValue\
    \ = Math.max(...lst);\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex\
    \ = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex)\
    \ / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.slice();\n\
    \  sortedList.splice(middleIndex, 0, middleValue);\n  return sortedList;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmpzl82nsr9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpzl82nsr9.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2,\
    \ 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const leftHalf = lst.slice(0, middle);\n  const\
    \ rightHalf = lst.slice(middle);\n  return leftHalf.concat(strange_sort_list(rightHalf)).concat([maxValue],\
    \ minValue);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwrjdqosk.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n\
    \    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list\
    \ (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n\
    \    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list\
    \ (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgv2_hb_4.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpgv2_hb_4.js:16:24)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpiok40gev.js:31:12)\n    at Object.<anonymous> (/tmp/tmpiok40gev.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sortedList: number[] = [];\n  let min: number\
    \ = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i] < min) {\n      sortedList.push(min);\n\
    \    } else if (lst[i] > max) {\n      sortedList.push(max);\n    } else {\n \
    \     sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp7z83kqcs.js:39:12)\n    at Object.<anonymous> (/tmp/tmp7z83kqcs.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdjznkq3h.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpdjznkq3h.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpdjznkq3h.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88cyerc6.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp88cyerc6.js:16:24)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n  return strange_sort_list(left).concat([minValue],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphl_b_6go.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnddola06.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpnddola06.js:12:24)\n    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpnddola06.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88cyerc6.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp88cyerc6.js:16:24)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsjfx5dx0.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle\
    \ = Math.floor(lst.length / 2);\n\n  return strange_sort_list(\n    lst.slice(0,\
    \ middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n      .concat(\n\
    \        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp6yi_eex.ts(75,31): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp6yi_eex.ts(76,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpp6yi_eex.ts(76,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpp6yi_eex.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpne__8_xh.js:36:12)\n    at Object.<anonymous> (/tmp/tmpne__8_xh.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min_value = Math.min(...lst);\n  const max_value\
    \ = Math.max(...lst);\n  const min_value_str = String(min_value);\n  const max_value_str\
    \ = String(max_value);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp62w_0feh.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n\
    \  const right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphutnot4_.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmphutnot4_.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmphutnot4_.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const res = [];\n  for (let i =\
    \ 0; i < len; i++) {\n    res.push(lst[i]);\n  }\n  res.sort((a, b) => {\n   \
    \ if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n \
    \   }\n    return 0;\n  });\n  return res;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd3farl7y.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpd3farl7y.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n \
    \     result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_cup8bzo.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_cup8bzo.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -=\
    \ 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmp45a8hy95.js:36:12)\n    at Object.<anonymous> (/tmp/tmp45a8hy95.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const minValue = lst[0];\n  const maxValue = lst.reduce((max, val) => Math.max(max,\
    \ val), 0);\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\
    \n  return lst.sort((a, b) => {\n    if (a === minValue) {\n      return -1;\n\
    \    }\n    if (b === minValue) {\n      return 1;\n    }\n    if (a === maxValue)\
    \ {\n      return 1;\n    }\n    if (b === maxValue) {\n      return -1;\n   \
    \ }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmphi5ftcs7.js:38:12)\n    at Object.<anonymous> (/tmp/tmphi5ftcs7.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number\
    \ = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    min = Math.min(min,\
    \ lst[i]);\n    max = Math.max(max, lst[i]);\n  }\n  const result: number[] =\
    \ [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpv805doum.js:27:12)\n    at Object.<anonymous> (/tmp/tmpv805doum.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88cyerc6.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp88cyerc6.js:16:24)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5m9mf21g.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  const\
    \ left = strange_sort_list(lst.slice(0, mid));\n  const right = strange_sort_list(lst.slice(mid));\n\
    \n  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpoyk9cuzl.js:16\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpoyk9cuzl.js:16:20)\n    at\
    \ strange_sort_list (/tmp/tmpoyk9cuzl.js:18:17)\n    at strange_sort_list (/tmp/tmpoyk9cuzl.js:18:17)\n\
    \    at strange_sort_list (/tmp/tmpoyk9cuzl.js:18:17)\n    at strange_sort_list\
    \ (/tmp/tmpoyk9cuzl.js:18:17)\n    at strange_sort_list (/tmp/tmpoyk9cuzl.js:18:17)\n\
    \    at strange_sort_list (/tmp/tmpoyk9cuzl.js:18:17)\n    at strange_sort_list\
    \ (/tmp/tmpoyk9cuzl.js:18:17)\n    at strange_sort_list (/tmp/tmpoyk9cuzl.js:18:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798520
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number\
    \ = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++)\
    \ {\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j] >= i) {\n  \
    \      result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  2,\n  3,\n  4,\n  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpvf69xxg_.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvf69xxg_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4, 2,\n    3, 4, 3, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798520
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst.reduce((max, val) => Math.max(max,\
    \ val), 0);\n  const minIndex = lst.findIndex(val => val === minValue);\n  const\
    \ maxIndex = lst.findIndex(val => val === maxValue);\n  const minIndex = Math.min(minIndex,\
    \ maxIndex);\n  const maxIndex = Math.max(minIndex, maxIndex);\n  return lst.sort((a,\
    \ b) => a - b).slice(0, maxIndex + 1).concat(\n    lst.sort((a, b) => b - a).slice(0,\
    \ minIndex + 1)\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqug4ua_y.ts(17,9): error TS2451: Cannot redeclare
    block-scoped variable ''minIndex''.

    ../../../../../tmp/tmpqug4ua_y.ts(17,24): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpqug4ua_y.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    ../../../../../tmp/tmpqug4ua_y.ts(18,24): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpqug4ua_y.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../../tmp/tmpqug4ua_y.ts(20,9): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    '
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i =\
    \ min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsywpp1yu.ts(12,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpsywpp1yu.ts(13,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = lst[min];\n    max = lst[max];\n  }\n  result.push(max);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcviw_lww.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcviw_lww.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, undefined\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a,\
    \ b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5cxvnlqq.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5cxvnlqq.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798520
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -=\
    \ 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmp45a8hy95.js:36:12)\n    at Object.<anonymous> (/tmp/tmp45a8hy95.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right).concat([max]));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp65umic_6.js:19\n    var left = lst.slice(0, middle);\n        \
    \           ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp65umic_6.js:19:20)\n    at\
    \ strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n\
    \    result.push(min);\n    min = min + 1;\n  }\n  result.push(max);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpg76ag8m0.js:36:12)\n    at Object.<anonymous> (/tmp/tmpg76ag8m0.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n\
    \    lst\n      .slice(0, mid)\n      .concat(mid === max ? [max] : lst)\n   \
    \   .concat(mid === min ? [min] : lst.slice(0, mid))\n  );\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp77fzy_s_.js:19\n        .concat(mid === max ? [max] : lst)\n  \
    \                  ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp77fzy_s_.js:19:21)\n    at strange_sort_list (/tmp/tmp77fzy_s_.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmp77fzy_s_.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmp77fzy_s_.js:17:12)\n    at strange_sort_list (/tmp/tmp77fzy_s_.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmp77fzy_s_.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmp77fzy_s_.js:17:12)\n    at strange_sort_list (/tmp/tmp77fzy_s_.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmp77fzy_s_.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmp77fzy_s_.js:17:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798520
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n\n  const result = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8jkcx3vm.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmp8jkcx3vm.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor((min + max) / 2);\n  const left = strange_sort_list(lst.slice(0,\
    \ mid));\n  const right = strange_sort_list(lst.slice(mid));\n  return left.concat(right,\
    \ min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv3mkmtx1.js:18\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpv3mkmtx1.js:18:20)\n    at\
    \ strange_sort_list (/tmp/tmpv3mkmtx1.js:19:16)\n    at strange_sort_list (/tmp/tmpv3mkmtx1.js:19:16)\n\
    \    at strange_sort_list (/tmp/tmpv3mkmtx1.js:19:16)\n    at strange_sort_list\
    \ (/tmp/tmpv3mkmtx1.js:19:16)\n    at strange_sort_list (/tmp/tmpv3mkmtx1.js:19:16)\n\
    \    at strange_sort_list (/tmp/tmpv3mkmtx1.js:19:16)\n    at strange_sort_list\
    \ (/tmp/tmpv3mkmtx1.js:19:16)\n    at strange_sort_list (/tmp/tmpv3mkmtx1.js:19:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i =\
    \ min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsywpp1yu.ts(12,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpsywpp1yu.ts(13,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min: number = lst[0];\n  const max: number =\
    \ lst[lst.length - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const current:\
    \ number = lst[i];\n    if (current < min) {\n      min = current;\n    }\n  \
    \  if (current > max) {\n      max = current;\n    }\n  }\n  const result: number[]\
    \ = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzy8iops2.ts(17,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpzy8iops2.ts(20,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv8_l77v1.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpv8_l77v1.js:12:24)\n    at strange_sort_list (/tmp/tmpv8_l77v1.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpv8_l77v1.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpv8_l77v1.js:17:24)\n    at strange_sort_list (/tmp/tmpv8_l77v1.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpv8_l77v1.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpv8_l77v1.js:17:24)\n    at strange_sort_list (/tmp/tmpv8_l77v1.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpv8_l77v1.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpv8_l77v1.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sortedList: number[] = [];\n  let min: number\
    \ = Number.MAX_SAFE_INTEGER;\n  let max: number = Number.MIN_SAFE_INTEGER;\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min =\
    \ lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sortedList.push(min);\n\
    \    } else if (lst[i] > max) {\n      sortedList.push(max);\n    } else {\n \
    \     sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu6rfkd03.ts(13,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpu6rfkd03.ts(14,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5m9mf21g.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), -Infinity);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  const\
    \ middle = Math.floor((max - min) / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwnc0qwml.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpwnc0qwml.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpwnc0qwml.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpwnc0qwml.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n\n  for (let i = min;\
    \ i <= max; i++) {\n    for (let j = min2; j <= max2; j++) {\n      if (j > i)\
    \ {\n        [min2, max2] = [max2, min2];\n        [min, max] = [max, min];\n\
    \      }\n    }\n  }\n\n  return lst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpst1wdnol.ts(22,10): error TS2588: Cannot assign to
    ''min2'' because it is a constant.

    ../../../../../tmp/tmpst1wdnol.ts(22,16): error TS2588: Cannot assign to ''max2''
    because it is a constant.

    ../../../../../tmp/tmpst1wdnol.ts(23,10): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../../tmp/tmpst1wdnol.ts(23,15): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5] =\
    \ [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7] =\
    \ [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9] =\
    \ [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr6rgsfpu.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n\
    \    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n     \
    \ result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf38vn2f5.ts(12,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpf38vn2f5.ts(13,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgv2_hb_4.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpgv2_hb_4.js:16:24)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpl0w1xz6w.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpl0w1xz6w.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpl0w1xz6w.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpl0w1xz6w.js:17:24)\n    at strange_sort_list (/tmp/tmpl0w1xz6w.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpl0w1xz6w.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpl0w1xz6w.js:17:24)\n    at strange_sort_list (/tmp/tmpl0w1xz6w.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpl0w1xz6w.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpl0w1xz6w.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsjfx5dx0.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle =\
    \ Math.floor(lst.length / 2);\n  const left = lst\n    .slice(0, middle)\n   \
    \ .sort((a, b) => a - b);\n  const right = lst\n    .slice(middle)\n    .sort((a,\
    \ b) => b - a);\n\n  return left.concat(right, min);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmp11k2e_aw.js:29:12)\n    at Object.<anonymous> (/tmp/tmp11k2e_aw.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, x) => x > max ? x : max, min);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middleIndex = Math.floor((maxIndex + minIndex) / 2);\n  const middle\
    \ = lst[middleIndex];\n  const leftArr = lst.slice(0, middleIndex);\n  const rightArr\
    \ = lst.slice(middleIndex + 1);\n  return leftArr.concat(strange_sort_list(rightArr),\
    \ middle).concat(rightArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  3,\n  4,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmps90__3kr.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps90__3kr.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 3, 4,\n    2, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    const\
    \ mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[min]) {\n      max\
    \ = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  const res = [lst[min]];\n\
    \  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    res.push(lst[mid]);\n\
    \    if (lst[mid] > lst[min]) {\n      max = mid - 1;\n    } else {\n      min\
    \ = mid + 1;\n    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpvy44wpak.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvy44wpak.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpms1wu8xl.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpms1wu8xl.js:16:24)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat(right).concat(left.reverse());\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpuq5tam7s.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpuq5tam7s.js:12:24)\n    at strange_sort_list (/tmp/tmpuq5tam7s.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpuq5tam7s.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpuq5tam7s.js:17:24)\n    at strange_sort_list (/tmp/tmpuq5tam7s.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpuq5tam7s.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpuq5tam7s.js:17:24)\n    at strange_sort_list (/tmp/tmpuq5tam7s.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpuq5tam7s.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpuq5tam7s.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy2ywopug.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798521
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n\
    \  const right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpumzjgi0a.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpumzjgi0a.js:12:24)\n    at strange_sort_list (/tmp/tmpumzjgi0a.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpumzjgi0a.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpumzjgi0a.js:17:24)\n    at strange_sort_list (/tmp/tmpumzjgi0a.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpumzjgi0a.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpumzjgi0a.js:17:24)\n    at strange_sort_list (/tmp/tmpumzjgi0a.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpumzjgi0a.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpumzjgi0a.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgv2_hb_4.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpgv2_hb_4.js:16:24)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp19nfvk6n.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp19nfvk6n.js:15:24)\n    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmp19nfvk6n.js:20:43)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const middle = Math.floor((len\
    \ - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const\
    \ right = strange_sort_list(lst.slice(middle));\n  return left.concat(right, min);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5gwoezad.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmp5gwoezad.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const middle\
    \ = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0,\
    \ middle));\n  const right = strange_sort_list(lst.slice(middle + 1));\n  return\
    \ left.concat(right, min).concat(max);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  4,\n  4,\n  3,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmp9wbp91go.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9wbp91go.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 4, 4,\n    3, 4, 1, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z7w2rlf.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2z7w2rlf.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  return\
    \ sorted_lst.map((n) => n + 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_hmaodxb.js:18:12)\n    at Object.<anonymous> (/tmp/tmp_hmaodxb.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 5 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const minValue = lst[0];\n  const maxValue = lst[lst.length\
    \ - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\
    \  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue\
    \ = lst[middleIndex];\n  const sortedList = lst.slice();\n  sortedList.sort((a,\
    \ b) => {\n    if (a === minValue) {\n      return -1;\n    }\n    if (b === minValue)\
    \ {\n      return 1;\n    }\n    if (a === maxValue) {\n      return 1;\n    }\n\
    \    if (b === maxValue) {\n      return -1;\n    }\n    if (a === middleValue)\
    \ {\n      return -1;\n    }\n    if (b === middleValue) {\n      return 1;\n\
    \    }\n    return 0;\n  });\n  return sortedList;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaoflcoy6.js:45:12)\n    at Object.<anonymous> (/tmp/tmpaoflcoy6.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(lst.slice(0, mid)) + [min] + strange_sort_list(lst.slice(mid));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpthm1d20q.ts(18,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = lst[0];\n  const max = lst[lst.length - 1];\n\n  const middle =\
    \ Math.floor((lst.length - 1) / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7dra1mcg.js:17\n    var middle = Math.floor((lst.length - 1) /\
    \ 2);\n                      ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmp7dra1mcg.js:17:23)\n\
    \    at strange_sort_list (/tmp/tmp7dra1mcg.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp7dra1mcg.js:20:50)\n    at strange_sort_list (/tmp/tmp7dra1mcg.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp7dra1mcg.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp7dra1mcg.js:20:50)\n    at strange_sort_list (/tmp/tmp7dra1mcg.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp7dra1mcg.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp7dra1mcg.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result\
    \ = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpeka67l8s.js:31:12)\n    at Object.<anonymous> (/tmp/tmpeka67l8s.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return [min,\
    \ ...strange_sort_list(lst.filter(x => x < min)), max, ...strange_sort_list(lst.filter(x\
    \ => x > max))];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpx36fl021.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpx36fl021.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4 ],\n\
    \  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmf2laatd.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpmf2laatd.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpmf2laatd.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmf2laatd.js:17:24)\n    at strange_sort_list (/tmp/tmpmf2laatd.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmf2laatd.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmf2laatd.js:17:24)\n    at strange_sort_list (/tmp/tmpmf2laatd.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmf2laatd.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmf2laatd.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min_value = Math.min(...lst);\n  const max_value\
    \ = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left\
    \ = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max_value]).concat(left.reverse());\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9fb35n84.js:12\n    var min_value = Math.min.apply(Math, lst);\n\
    \                             ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at strange_sort_list (/tmp/tmp9fb35n84.js:12:30)\n    at strange_sort_list\
    \ (/tmp/tmp9fb35n84.js:17:24)\n    at strange_sort_list (/tmp/tmp9fb35n84.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9fb35n84.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9fb35n84.js:17:24)\n    at strange_sort_list (/tmp/tmp9fb35n84.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9fb35n84.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9fb35n84.js:17:24)\n    at strange_sort_list (/tmp/tmp9fb35n84.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9fb35n84.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n\
    \    lst\n      .slice(0, mid)\n      .concat(mid === lst.length ? [max] : lst)\n\
    \      .concat(\n        mid === lst.length ? [min] : lst\n          .slice(mid)\n\
    \          .concat(mid === lst.length ? [max] : lst)\n      )\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprwfxjrvv.js:20\n        .concat(mid === lst.length ? [min] : lst\n\
    \         ^\n\nRangeError: Invalid array length\n    at Array.concat (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmprwfxjrvv.js:20:10)\n    at strange_sort_list\
    \ (/tmp/tmprwfxjrvv.js:17:12)\n    at strange_sort_list (/tmp/tmprwfxjrvv.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmprwfxjrvv.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmprwfxjrvv.js:17:12)\n    at strange_sort_list (/tmp/tmprwfxjrvv.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmprwfxjrvv.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmprwfxjrvv.js:17:12)\n    at strange_sort_list (/tmp/tmprwfxjrvv.js:17:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0,\
    \ middle));\n  const right = strange_sort_list(lst.slice(middle + 1));\n  return\
    \ mergeSort(left, right, minValue, maxValue);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8xgpx46y.ts(21,10): error TS2304: Cannot find name
    ''mergeSort''.

    '
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n\
    \  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i] > max)\
    \ {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n    }\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp7oayrmon.js:39:12)\n    at Object.<anonymous> (/tmp/tmp7oayrmon.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5] =\
    \ [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7] =\
    \ [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9] =\
    \ [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr6rgsfpu.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n\n  const middle = Math.floor((min\
    \ + max) / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(right).concat(strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwnz3xxj.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpvwnz3xxj.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min <= max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp3uz0od7h.js:32:12)\n    at Object.<anonymous> (/tmp/tmp3uz0od7h.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number\
    \ = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] >\
    \ max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpf1jpz26w.js:39:12)\n    at Object.<anonymous> (/tmp/tmpf1jpz26w.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(mid, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpke3zzskp.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpke3zzskp.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpke3zzskp.js:20:12)\n    at strange_sort_list\
    \ (/tmp/tmpke3zzskp.js:20:12)\n    at strange_sort_list (/tmp/tmpke3zzskp.js:20:12)\n\
    \    at strange_sort_list (/tmp/tmpke3zzskp.js:20:12)\n    at strange_sort_list\
    \ (/tmp/tmpke3zzskp.js:20:12)\n    at strange_sort_list (/tmp/tmpke3zzskp.js:20:12)\n\
    \    at strange_sort_list (/tmp/tmpke3zzskp.js:20:12)\n    at strange_sort_list\
    \ (/tmp/tmpke3zzskp.js:20:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphjz2jj2t.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmphjz2jj2t.js:16:24)\n    at strange_sort_list (/tmp/tmphjz2jj2t.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphjz2jj2t.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphjz2jj2t.js:21:48)\n    at strange_sort_list (/tmp/tmphjz2jj2t.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphjz2jj2t.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphjz2jj2t.js:21:48)\n    at strange_sort_list (/tmp/tmphjz2jj2t.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphjz2jj2t.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphjz2jj2t.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([max, min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_5dju2h1.js:18\n    var mid = Math.floor(len / 2);\n          \
    \         ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp_5dju2h1.js:18:20)\n    at\
    \ strange_sort_list (/tmp/tmp_5dju2h1.js:21:55)\n    at strange_sort_list (/tmp/tmp_5dju2h1.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmp_5dju2h1.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmp_5dju2h1.js:21:55)\n    at strange_sort_list (/tmp/tmp_5dju2h1.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmp_5dju2h1.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmp_5dju2h1.js:21:55)\n    at strange_sort_list (/tmp/tmp_5dju2h1.js:21:55)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, cur) => Math.max(max, cur), -Infinity);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n\n  const\
    \ middle = Math.floor((max - min) / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(right).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9343vbao.ts(16,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmp9343vbao.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmp9343vbao.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmp9343vbao.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a,\
    \ b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5cxvnlqq.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5cxvnlqq.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798520
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpms1wu8xl.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpms1wu8xl.js:16:24)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5m9mf21g.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgv2_hb_4.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpgv2_hb_4.js:16:24)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sortedList = lst.slice();\n  sortedList.sort((a,\
    \ b) => a - b);\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjhijo179.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjhijo179.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798525
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right), strange_sort_list(left),\
    \ min).sort();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx1lkzpcp.js:15\n    var left = lst.slice(0, mid);\n           \
    \        ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpx1lkzpcp.js:15:20)\n    at\
    \ strange_sort_list (/tmp/tmpx1lkzpcp.js:17:24)\n    at strange_sort_list (/tmp/tmpx1lkzpcp.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpx1lkzpcp.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpx1lkzpcp.js:17:24)\n    at strange_sort_list (/tmp/tmpx1lkzpcp.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpx1lkzpcp.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpx1lkzpcp.js:17:24)\n    at strange_sort_list (/tmp/tmpx1lkzpcp.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i]\
    \ > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n\
    \    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo1fvco52.ts(13,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpo1fvco52.ts(14,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659798524
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy2ywopug.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798521
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    const\
    \ mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max\
    \ = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  const res = [];\n\
    \  for (let i = min; i <= max; i++) {\n    res.push(lst[i]);\n  }\n  return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpo2r6mgdg.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpo2r6mgdg.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const [min, max] = lst;\n  const [min2, max2] = [max, min];\n\n  return lst.sort((a,\
    \ b) => {\n    if (a < min) {\n      return -1;\n    }\n    if (a > max) {\n \
    \     return 1;\n    }\n    if (b < min2) {\n      return -1;\n    }\n    if (b\
    \ > max2) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmport8aphd.js:36:12)\n    at Object.<anonymous> (/tmp/tmport8aphd.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a,\
    \ b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5cxvnlqq.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5cxvnlqq.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798520
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  const middle = Math.floor((min + max)\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(right).concat(strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbvt09bg9.ts(19,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpbvt09bg9.ts(22,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z7w2rlf.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2z7w2rlf.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n  return strange_sort_list(left).concat(maxValue,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnji0w7t3.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnji0w7t3.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmpnji0w7t3.js:21:53)\n    at strange_sort_list (/tmp/tmpnji0w7t3.js:21:53)\n\
    \    at strange_sort_list (/tmp/tmpnji0w7t3.js:21:53)\n    at strange_sort_list\
    \ (/tmp/tmpnji0w7t3.js:21:53)\n    at strange_sort_list (/tmp/tmpnji0w7t3.js:21:53)\n\
    \    at strange_sort_list (/tmp/tmpnji0w7t3.js:21:53)\n    at strange_sort_list\
    \ (/tmp/tmpnji0w7t3.js:21:53)\n    at strange_sort_list (/tmp/tmpnji0w7t3.js:21:53)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798525
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp19nfvk6n.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp19nfvk6n.js:15:24)\n    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmp19nfvk6n.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmp19nfvk6n.js:20:43)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min < lst.length) {\n    result.push(lst[min]);\n\
    \    min = min + 1;\n  }\n  while (max > lst.length) {\n    result.push(max);\n\
    \    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpayxgdnkc.js:40:12)\n    at Object.<anonymous> (/tmp/tmpayxgdnkc.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z7w2rlf.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2z7w2rlf.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n\
    \  const right = lst.slice(mid);\n  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzdjrgln8.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpzdjrgln8.js:16:24)\n    at strange_sort_list (/tmp/tmpzdjrgln8.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpzdjrgln8.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpzdjrgln8.js:21:12)\n    at strange_sort_list (/tmp/tmpzdjrgln8.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpzdjrgln8.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpzdjrgln8.js:21:12)\n    at strange_sort_list (/tmp/tmpzdjrgln8.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpzdjrgln8.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpzdjrgln8.js:21:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(mid === 1 ? [max] : [min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp98ye_nub.js:20\n    return strange_sort_list(left).concat(mid ===\
    \ 1 ? [max] : [min], strange_sort_list(right));\n                            \
    \                           ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at strange_sort_list (/tmp/tmp98ye_nub.js:20:56)\n    at strange_sort_list\
    \ (/tmp/tmp98ye_nub.js:20:70)\n    at strange_sort_list (/tmp/tmp98ye_nub.js:20:70)\n\
    \    at strange_sort_list (/tmp/tmp98ye_nub.js:20:70)\n    at strange_sort_list\
    \ (/tmp/tmp98ye_nub.js:20:70)\n    at strange_sort_list (/tmp/tmp98ye_nub.js:20:70)\n\
    \    at strange_sort_list (/tmp/tmp98ye_nub.js:20:70)\n    at strange_sort_list\
    \ (/tmp/tmp98ye_nub.js:20:70)\n    at strange_sort_list (/tmp/tmp98ye_nub.js:20:70)\n\
    \    at strange_sort_list (/tmp/tmp98ye_nub.js:20:70)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798525
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(mid === 0 ? [min] : [min, max], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppb5peitn.js:20\n    return strange_sort_list(left).concat(mid ===\
    \ 0 ? [min] : [min, max], strange_sort_list(right));\n                       \
    \                       ^\n\nRangeError: Maximum call stack size exceeded\n  \
    \  at strange_sort_list (/tmp/tmppb5peitn.js:20:47)\n    at strange_sort_list\
    \ (/tmp/tmppb5peitn.js:20:75)\n    at strange_sort_list (/tmp/tmppb5peitn.js:20:75)\n\
    \    at strange_sort_list (/tmp/tmppb5peitn.js:20:75)\n    at strange_sort_list\
    \ (/tmp/tmppb5peitn.js:20:75)\n    at strange_sort_list (/tmp/tmppb5peitn.js:20:75)\n\
    \    at strange_sort_list (/tmp/tmppb5peitn.js:20:75)\n    at strange_sort_list\
    \ (/tmp/tmppb5peitn.js:20:75)\n    at strange_sort_list (/tmp/tmppb5peitn.js:20:75)\n\
    \    at strange_sort_list (/tmp/tmppb5peitn.js:20:75)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798525
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number\
    \ = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] >\
    \ max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpf1jpz26w.js:39:12)\n    at Object.<anonymous> (/tmp/tmpf1jpz26w.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min_value = lst[0];\n  const max_value = lst[lst.length\
    \ - 1];\n  const min_idx = lst.indexOf(min_value);\n  const max_idx = lst.indexOf(max_value);\n\
    \  const swap_idx = min_idx;\n  while (swap_idx < max_idx) {\n    const temp =\
    \ lst[swap_idx];\n    lst[swap_idx] = lst[max_idx];\n    lst[max_idx] = temp;\n\
    \    swap_idx++;\n  }\n  return lst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9ftg_tpd.ts(21,5): error TS2588: Cannot assign to
    ''swap_idx'' because it is a constant.

    '
  timestamp: 1659798525
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpiok40gev.js:31:12)\n    at Object.<anonymous> (/tmp/tmpiok40gev.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a,\
    \ b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n     \
    \ return 1;\n    }\n    return 0;\n  });\n  return sorted_list;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpb5ljqy_3.js:27:12)\n    at Object.<anonymous> (/tmp/tmpb5ljqy_3.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798525
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpne__8_xh.js:36:12)\n    at Object.<anonymous> (/tmp/tmpne__8_xh.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const middleIndex\
    \ = Math.floor((lst.length - 1) / 2);\n  const middleValue = lst[middleIndex];\n\
    \  const sortedList = lst.sort((a, b) => {\n    if (a < middleValue) {\n     \
    \ return -1;\n    }\n    if (a > middleValue) {\n      return 1;\n    }\n    if\
    \ (b < middleValue) {\n      return -1;\n    }\n    if (b > middleValue) {\n \
    \     return 1;\n    }\n    return 0;\n  });\n  return sortedList;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpg67akd7u.js:39:12)\n    at Object.<anonymous> (/tmp/tmpg67akd7u.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798525
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n\
    \  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprdq689ac.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmprdq689ac.js:12:24)\n    at strange_sort_list (/tmp/tmprdq689ac.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmprdq689ac.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmprdq689ac.js:17:24)\n    at strange_sort_list (/tmp/tmprdq689ac.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmprdq689ac.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmprdq689ac.js:17:24)\n    at strange_sort_list (/tmp/tmprdq689ac.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmprdq689ac.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmprdq689ac.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798526
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min: number = lst[0];\n  const max: number =\
    \ lst[lst.length - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const current:\
    \ number = lst[i];\n    if (current < min) {\n      min = current;\n    }\n  \
    \  if (current > max) {\n      max = current;\n    }\n  }\n  const result: number[]\
    \ = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzy8iops2.ts(17,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpzy8iops2.ts(20,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const\
    \ min_val = sorted_lst[0];\n  const max_val = sorted_lst[sorted_lst.length - 1];\n\
    \  const min_idx = lst.indexOf(min_val);\n  const max_idx = lst.indexOf(max_val);\n\
    \  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx ===\
    \ -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n\
    \  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx\
    \ = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length\
    \ - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx\
    \ = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx ===\
    \ -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n\
    \  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx ===\
    \ -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n\
    \  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx\
    \ = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length\
    \ - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx\
    \ = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx ===\
    \ -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n\
    \  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx ===\
    \ -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n\
    \  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx\
    \ = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length\
    \ - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx\
    \ = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx ===\
    \ -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n\
    \  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx ===\
    \ -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n\
    \  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpggjx83h6.ts(52,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpggjx83h6.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798526
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6wq65krq.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp6wq65krq.js:12:24)\n    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp6wq65krq.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpbsdpg07y.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbsdpg07y.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu0wptyzj.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpu0wptyzj.js:12:24)\n    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpu0wptyzj.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n \
    \     result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_cup8bzo.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_cup8bzo.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpne__8_xh.js:36:12)\n    at Object.<anonymous> (/tmp/tmpne__8_xh.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex\
    \ = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const\
    \ middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue =\
    \ lst[middleIndex];\n  const sortedList = lst.slice();\n  sortedList.sort((a,\
    \ b) => {\n    if (a === minValue) {\n      return -1;\n    }\n    if (b === minValue)\
    \ {\n      return 1;\n    }\n    if (a === maxValue) {\n      return 1;\n    }\n\
    \    if (b === maxValue) {\n      return -1;\n    }\n    if (a === middleValue)\
    \ {\n      return -1;\n    }\n    if (b === middleValue) {\n      return 1;\n\
    \    }\n    return a - b;\n  });\n  return sortedList;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpi7od3owq.js:48:12)\n    at Object.<anonymous> (/tmp/tmpi7od3owq.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle\
    \ = Math.floor(lst.length / 2);\n\n  return strange_sort_list(\n    lst.slice(0,\
    \ middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n      .concat(strange_sort_list(lst.slice(0,\
    \ middle)))\n      .concat(\n        strange_sort_list(lst.slice(middle, lst.length))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n  \
    \    )\n      .concat(\n        strange_sort_list(lst.slice(middle, lst.length))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n      )\n\
    \      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n     \
    \ .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgaqnypld.ts(105,8): error TS1003: Identifier expected.

    ../../../../../tmp/tmpgaqnypld.ts(106,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpgaqnypld.ts(106,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpgaqnypld.ts(123,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5m9mf21g.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  const\
    \ middle = Math.floor((max - min) / 2);\n  return strange_sort_list(lst.filter(num\
    \ => num < middle || num > middle + 1));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzji0zpvj.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpzji0zpvj.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpzji0zpvj.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpzji0zpvj.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659798527
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n\n  const result = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(min);\n\
    \    } else if (lst[i] === max) {\n      result.push(max);\n    } else {\n   \
    \   result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvqlx2gp3.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpvqlx2gp3.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpms1wu8xl.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpms1wu8xl.js:16:24)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const mid\
    \ = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right\
    \ = lst.slice(mid);\n\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmsb9oekl.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpmsb9oekl.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpmsb9oekl.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpmsb9oekl.js:20:50)\n    at strange_sort_list (/tmp/tmpmsb9oekl.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpmsb9oekl.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpmsb9oekl.js:20:50)\n    at strange_sort_list (/tmp/tmpmsb9oekl.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpmsb9oekl.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpmsb9oekl.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst\n      .slice(0, mid)\n      .concat(mid\
    \ === lst.length ? [max] : lst)\n      .concat(\n        mid === lst.length ?\
    \ [min] : lst.slice(mid, lst.length)\n      )\n  );\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn7nqgzw6.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpn7nqgzw6.js:15:24)\n    at strange_sort_list (/tmp/tmpn7nqgzw6.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpn7nqgzw6.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpn7nqgzw6.js:18:12)\n    at strange_sort_list (/tmp/tmpn7nqgzw6.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpn7nqgzw6.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpn7nqgzw6.js:18:12)\n    at strange_sort_list (/tmp/tmpn7nqgzw6.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpn7nqgzw6.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpn7nqgzw6.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const minLst = lst.sort((a, b) => a - b);\n  const\
    \ maxLst = lst.sort((a, b) => b - a);\n  return minLst.concat(maxLst).reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpb48582p7.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb48582p7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    1, 2, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk7pyk1ql.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpk7pyk1ql.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5m9mf21g.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88cyerc6.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp88cyerc6.js:16:24)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right\
    \ = lst.slice(mid);\n  return strange_sort_list(left).concat(mid, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxywah80x.js:18\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpxywah80x.js:18:20)\n    at\
    \ strange_sort_list (/tmp/tmpxywah80x.js:21:12)\n    at strange_sort_list (/tmp/tmpxywah80x.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpxywah80x.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpxywah80x.js:21:12)\n    at strange_sort_list (/tmp/tmpxywah80x.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpxywah80x.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpxywah80x.js:21:12)\n    at strange_sort_list (/tmp/tmpxywah80x.js:21:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n\
    \    let mid = Math.floor((min + max) / 2);\n    result.push(mid);\n    if (mid\
    \ < lst.length) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n\
    \    }\n  }\n  result.push(min);\n  result.push(max);\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpsn5j59yw.js:43:12)\n    at Object.<anonymous> (/tmp/tmpsn5j59yw.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpbsdpg07y.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbsdpg07y.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5m9mf21g.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp5m9mf21g.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp5m9mf21g.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const minValue = lst[0];\n  const maxValue = lst.reduce((max, val) => Math.max(max,\
    \ val), 0);\n\n  return lst.sort((a, b) => a - b).map((val) => val < minValue\
    \ ? minValue : val > maxValue ? maxValue : val);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpdwv5oc7n.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdwv5oc7n.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right),\
    \ strange_sort_list(left), max);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppbw3n7_h.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmppbw3n7_h.js:12:24)\n    at strange_sort_list (/tmp/tmppbw3n7_h.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmppbw3n7_h.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmppbw3n7_h.js:17:24)\n    at strange_sort_list (/tmp/tmppbw3n7_h.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmppbw3n7_h.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmppbw3n7_h.js:17:24)\n    at strange_sort_list (/tmp/tmppbw3n7_h.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmppbw3n7_h.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmppbw3n7_h.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min <= max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min < max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp44efhagi.js:36:12)\n    at Object.<anonymous> (/tmp/tmp44efhagi.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const minValue = lst[0];\n  const maxValue = lst[lst.length\
    \ - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\
    \  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue\
    \ = lst[middleIndex];\n  const sortedList = lst.slice();\n  sortedList.splice(middleIndex,\
    \ 0, middleValue);\n  return sortedList;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmp2uh3dtoa.js:25:12)\n    at Object.<anonymous> (/tmp/tmp2uh3dtoa.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2,\
    \ 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n \
    \     result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_cup8bzo.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_cup8bzo.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const middle\
    \ = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0,\
    \ middle));\n  const right = strange_sort_list(lst.slice(middle + 1));\n  return\
    \ left.concat(right, min).sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpn3a0k8du.js:26:12)\n    at Object.<anonymous> (/tmp/tmpn3a0k8du.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const\
    \ min_idx = sorted_lst.findIndex(x => x === sorted_lst[0]);\n  const max_idx =\
    \ sorted_lst.findIndex(x => x === sorted_lst[sorted_lst.length - 1]);\n  return\
    \ sorted_lst.slice(0, min_idx).concat(sorted_lst.slice(max_idx + 1));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppk513tij.ts(13,30): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmppk513tij.ts(14,30): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    '
  timestamp: 1659798527
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n\
    \      .concat(strange_sort_list(lst.slice(0, middle)))\n      .concat(\n    \
    \    strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n  \
    \      strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0,\
    \ middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n  \
    \    )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n\
    \      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n     \
    \ .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp52ktbdx2.ts(103,8): error TS1003: Identifier expected.

    ../../../../../tmp/tmp52ktbdx2.ts(104,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp52ktbdx2.ts(104,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp52ktbdx2.ts(121,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkhswkhhn.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpkhswkhhn.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpkhswkhhn.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpkhswkhhn.js:20:50)\n    at strange_sort_list (/tmp/tmpkhswkhhn.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpkhswkhhn.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpkhswkhhn.js:20:50)\n    at strange_sort_list (/tmp/tmpkhswkhhn.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpkhswkhhn.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpkhswkhhn.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpms1wu8xl.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpms1wu8xl.js:16:24)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgv2_hb_4.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpgv2_hb_4.js:16:24)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let\
    \ min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while\
    \ (min < max) {\n    let mid: number = (min + max) / 2;\n    result.push(mid);\n\
    \    if (mid < max) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.5,\n  3.75\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpb281gso2.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb281gso2.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.5, 3.75\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min < lst.length) {\n    result.push(lst[min]);\n\
    \    min = min + 1;\n  }\n  while (max > lst.length) {\n    result.push(max);\n\
    \    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpayxgdnkc.js:40:12)\n    at Object.<anonymous> (/tmp/tmpayxgdnkc.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(val, max), -Infinity);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  const leftArr = lst.slice(0,\
    \ middle);\n  const rightArr = lst.slice(middle);\n  return strange_sort_list(leftArr).concat(rightArr).concat(strange_sort_list(rightArr));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptojn5c1v.js:16\n    var max = lst.reduce(function (max, val) {\
    \ return Math.max(val, max); }, -Infinity);\n                                \
    \                           ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Math.max (<anonymous>)\n    at /tmp/tmptojn5c1v.js:16:60\n    at Array.reduce\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmptojn5c1v.js:16:19)\n    at\
    \ strange_sort_list (/tmp/tmptojn5c1v.js:22:63)\n    at strange_sort_list (/tmp/tmptojn5c1v.js:22:63)\n\
    \    at strange_sort_list (/tmp/tmptojn5c1v.js:22:63)\n    at strange_sort_list\
    \ (/tmp/tmptojn5c1v.js:22:63)\n    at strange_sort_list (/tmp/tmptojn5c1v.js:22:63)\n\
    \    at strange_sort_list (/tmp/tmptojn5c1v.js:22:63)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let res = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] === min) {\n      res.push(min);\n    } else if (lst[i]\
    \ === max) {\n      res.push(max);\n    } else {\n      res.push(lst[i]);\n  \
    \  }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1ehn47nl.js:42:12)\n    at Object.<anonymous> (/tmp/tmp1ehn47nl.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const res = [];\n  while (min <\
    \ max) {\n    res.push(min);\n    min += 1;\n  }\n  while (min > max) {\n    res.push(max);\n\
    \    max -= 1;\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmxk4r5__.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpmxk4r5__.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../../tmp/tmpmxk4r5__.ts(29,5): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../../tmp/tmpmxk4r5__.ts(33,5): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659798528
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw2pri1u.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjw2pri1u.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu0wptyzj.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpu0wptyzj.js:12:24)\n    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpu0wptyzj.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpu0wptyzj.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[lst.length - 1];\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.slice(0, mid)).concat([mid], strange_sort_list(lst.slice(mid,\
    \ lst.length)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5173b1nb.js:18\n    return strange_sort_list(lst.slice(0, mid)).concat([mid],\
    \ strange_sort_list(lst.slice(mid, lst.length)));\n                          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp5173b1nb.js:18:34)\n    at\
    \ strange_sort_list (/tmp/tmp5173b1nb.js:18:12)\n    at strange_sort_list (/tmp/tmp5173b1nb.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmp5173b1nb.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmp5173b1nb.js:18:12)\n    at strange_sort_list (/tmp/tmp5173b1nb.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmp5173b1nb.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmp5173b1nb.js:18:12)\n    at strange_sort_list (/tmp/tmp5173b1nb.js:18:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((acc, x) => Math.max(acc, x), 0);\n\
    \  return strange_sort_list(\n    lst.filter(x => x !== min).concat(\n      lst.filter(x\
    \ => x !== max).concat(\n        lst.filter(x => x !== min).concat(\n        \
    \  lst.filter(x => x !== max).concat(\n            lst.filter(x => x !== min).concat(\n\
    \              lst.filter(x => x !== max).concat(\n                lst.filter(x\
    \ => x !== min).concat(\n                  lst.filter(x => x !== max).concat(\n\
    \                    lst.filter(x => x !== min).concat(\n                    \
    \  lst.filter(x => x !== max).concat(\n                        lst.filter(x =>\
    \ x !== min).concat(\n                          lst.filter(x => x !== max).concat(\n\
    \                            lst.filter(x => x !== min).concat(\n            \
    \                  lst.filter(x => x !== max).concat(\n                      \
    \          lst.filter(x => x !== min).concat(\n                              \
    \    lst.filter(x => x !== max).concat(\n                                    lst.filter(x\
    \ => x !== min).concat(\n                                      lst.filter(x =>\
    \ x !== max).concat(\n                                        lst.filter(x =>\
    \ x !== min).concat(\n                                          lst.filter(x =>\
    \ x !== max).concat(\n                                            lst.filter(x\
    \ => x !== min).concat(\n                                              lst.filter(x\
    \ => x !== max).concat(\n                                                lst.filter(x\
    \ => x !== min).concat(\n                                                  lst.filter(x\
    \ => x !== max).concat(\n                                                    lst.filter(x\
    \ => x !== min).concat(\n                                                    \
    \  lst.filter(x => x !== max).concat(\n                                      \
    \                  lst.filter(x => x !== min).concat(\n                      \
    \                                    lst.filter(x => x !== max).concat(\n    \
    \                                                        lst.filter(x => x !==\
    \ min).concat(\n                                                             \
    \ lst.filter(x => x !== max).concat(\n                                       \
    \                         lst.filter(x => x !== min).concat(\n               \
    \                                                   lst.filter(x => x !== max).concat(\n\
    \                                                                    lst.filter(x\
    \ => x !== min).concat(\n                                                    \
    \                  lst.filter(x => x !== max).concat(\n                      \
    \                                                  lst.filter(x => x !== min).concat(\n\
    \                                                                          lst.filter(x\
    \ => x !== max).concat(\n                                                    \
    \                        lst.filter(x => x !== min).concat(\n                \
    \                                                              lst.filter(x =>\
    \ x !== max).concat(\n                                                       \
    \                         lst.filter(x => x !== min).concat(\n               \
    \                                                                   lst.filter(x\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgrv5p6rf.ts(58,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpgrv5p6rf.ts(58,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpgrv5p6rf.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex\
    \ = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const\
    \ middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue =\
    \ lst[middleIndex];\n  const sortedList = lst.sort((a, b) => {\n    if (a ===\
    \ minValue) {\n      return -1;\n    }\n    if (b === minValue) {\n      return\
    \ 1;\n    }\n    if (a === maxValue) {\n      return 1;\n    }\n    if (b ===\
    \ maxValue) {\n      return -1;\n    }\n    if (a === middleValue) {\n      return\
    \ -1;\n    }\n    if (b === middleValue) {\n      return 1;\n    }\n    return\
    \ a - b;\n  });\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmps2j00g0n.js:47:12)\n    at Object.<anonymous> (/tmp/tmps2j00g0n.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const [min, max] = lst;\n  const [min2, max2] = [max, min];\n\n  return [...strange_sort_list(min2),\
    \ ...strange_sort_list(max2), ...strange_sort_list(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp186k3xc9.ts(19,32): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp186k3xc9.ts(19,60): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp186k3xc9.ts(19,88): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a,\
    \ b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5cxvnlqq.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5cxvnlqq.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798520
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88cyerc6.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp88cyerc6.js:16:24)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst\n      .slice(middle)\n      .concat(\n\
    \        lst\n          .slice(0, middle)\n          .concat(\n            lst\n\
    \              .slice(middle + 1)\n              .map(i => Math.max(i, min))\n\
    \          )\n      )\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpw2tcnvzk.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpw2tcnvzk.js:15:24)\n    at strange_sort_list (/tmp/tmpw2tcnvzk.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpw2tcnvzk.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpw2tcnvzk.js:18:12)\n    at strange_sort_list (/tmp/tmpw2tcnvzk.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpw2tcnvzk.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpw2tcnvzk.js:18:12)\n    at strange_sort_list (/tmp/tmpw2tcnvzk.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpw2tcnvzk.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpw2tcnvzk.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min_value = lst[0];\n  const max_value = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min_value) {\n      min_value = lst[i];\n    }\n  \
    \  if (lst[i] > max_value) {\n      max_value = lst[i];\n    }\n  }\n  const min_idx\
    \ = lst.indexOf(min_value);\n  const max_idx = lst.indexOf(max_value);\n  const\
    \ min_idx_1 = lst.indexOf(min_value);\n  const max_idx_1 = lst.indexOf(max_value);\n\
    \  const min_idx_2 = lst.indexOf(min_value);\n  const max_idx_2 = lst.indexOf(max_value);\n\
    \  const min_idx_3 = lst.indexOf(min_value);\n  const max_idx_3 = lst.indexOf(max_value);\n\
    \  const min_idx_4 = lst.indexOf(min_value);\n  const max_idx_4 = lst.indexOf(max_value);\n\
    \  const min_idx_5 = lst.indexOf(min_value);\n  const max_idx_5 = lst.indexOf(max_value);\n\
    \  const min_idx_6 = lst.indexOf(min_value);\n  const max_idx_6 = lst.indexOf(max_value);\n\
    \  const min_idx_7 = lst.indexOf(min_value);\n  const max_idx_7 = lst.indexOf(max_value);\n\
    \  const min_idx_8 = lst.indexOf(min_value);\n  const max_idx_8 = lst.indexOf(max_value);\n\
    \  const min_idx_9 = lst.indexOf(min_value);\n  const max_idx_9 = lst.indexOf(max_value);\n\
    \  const min_idx_10 = lst.indexOf(min_value);\n  const max_idx_10 = lst.indexOf(max_value);\n\
    \  const min_idx_11 = lst.indexOf(min_value);\n  const max_idx_11 = lst.indexOf(max_value);\n\
    \  const min_idx_12 = lst.indexOf(min_value);\n  const max_idx_12 = lst.indexOf(max_value);\n\
    \  const min_idx_13 = lst.indexOf(min_value);\n  const max_idx_13 = lst.indexOf(max_value);\n\
    \  const min_idx_14 = lst.indexOf(min_value);\n  const max_idx_14 = lst.indexOf(max_value);\n\
    \  const min_idx_15 = lst.indexOf(min_value);\n  const max_idx_15 = lst.indexOf(max_value);\n\
    \  const min_idx_16 = lst.indexOf(min_value);\n  const max_idx_16 = lst.indexOf(max_value);\n\
    \  const min_idx_17 = lst.indexOf(min_value);\n  const max_idx_17 = lst.indexOf(max_value);\n\
    \  const min_idx_18 = lst.indexOf(min_value);\n  const max_idx_18 = lst.indexOf(max_value);\n\
    \  const min_idx_19 = lst.indexOf(min_value);\n  const max_idx_19 = lst.indexOf(max_value);\n\
    \  const min_idx_20 = lst.indexOf(min_value);\n  const max_idx_20 = lst.indexOf(max_value);\n\
    \  const min_idx_21 = lst.indexOf(min_value);\n  const max_idx_21 = \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsz_xvh4e.ts(69,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpsz_xvh4e.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle\
    \ = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphog22dd7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmphog22dd7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmphog22dd7.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmphog22dd7.js:20:48)\n    at strange_sort_list (/tmp/tmphog22dd7.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmphog22dd7.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmphog22dd7.js:20:48)\n    at strange_sort_list (/tmp/tmphog22dd7.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmphog22dd7.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmphog22dd7.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor((min + max) / 2);\n  return strange_sort_list(\n    lst.slice(0,\
    \ mid).concat(\n      strange_sort_list(lst.slice(mid)),\n      lst.slice(mid),\n\
    \    ),\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfqxn18nt.js:18\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpfqxn18nt.js:18:20)\n    at\
    \ strange_sort_list (/tmp/tmpfqxn18nt.js:19:12)\n    at strange_sort_list (/tmp/tmpfqxn18nt.js:19:12)\n\
    \    at strange_sort_list (/tmp/tmpfqxn18nt.js:19:12)\n    at strange_sort_list\
    \ (/tmp/tmpfqxn18nt.js:19:12)\n    at strange_sort_list (/tmp/tmpfqxn18nt.js:19:12)\n\
    \    at strange_sort_list (/tmp/tmpfqxn18nt.js:19:12)\n    at strange_sort_list\
    \ (/tmp/tmpfqxn18nt.js:19:12)\n    at strange_sort_list (/tmp/tmpfqxn18nt.js:19:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6wq65krq.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp6wq65krq.js:12:24)\n    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp6wq65krq.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp6wq65krq.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798527
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_lst = lst.slice();\n  sorted_lst.sort((a,\
    \ b) => a - b);\n  return sorted_lst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpwc622vi5.js:19:12)\n    at Object.<anonymous> (/tmp/tmpwc622vi5.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n  return strange_sort_list(left).concat([minValue],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphl_b_6go.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -=\
    \ 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmp45a8hy95.js:36:12)\n    at Object.<anonymous> (/tmp/tmp45a8hy95.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798519
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min_val = Math.min(...lst);\n  const max_val\
    \ = Math.max(...lst);\n  const min_idx = lst.indexOf(min_val);\n  const max_idx\
    \ = lst.indexOf(max_val);\n  const min_idx_2 = lst.indexOf(min_val);\n  const\
    \ max_idx_2 = lst.indexOf(max_val);\n  const min_idx_3 = lst.indexOf(min_val);\n\
    \  const max_idx_3 = lst.indexOf(max_val);\n  const min_idx_4 = lst.indexOf(min_val);\n\
    \  const max_idx_4 = lst.indexOf(max_val);\n  const min_idx_5 = lst.indexOf(min_val);\n\
    \  const max_idx_5 = lst.indexOf(max_val);\n  const min_idx_6 = lst.indexOf(min_val);\n\
    \  const max_idx_6 = lst.indexOf(max_val);\n  const min_idx_7 = lst.indexOf(min_val);\n\
    \  const max_idx_7 = lst.indexOf(max_val);\n  const min_idx_8 = lst.indexOf(min_val);\n\
    \  const max_idx_8 = lst.indexOf(max_val);\n  const min_idx_9 = lst.indexOf(min_val);\n\
    \  const max_idx_9 = lst.indexOf(max_val);\n  const min_idx_10 = lst.indexOf(min_val);\n\
    \  const max_idx_10 = lst.indexOf(max_val);\n  const min_idx_11 = lst.indexOf(min_val);\n\
    \  const max_idx_11 = lst.indexOf(max_val);\n  const min_idx_12 = lst.indexOf(min_val);\n\
    \  const max_idx_12 = lst.indexOf(max_val);\n  const min_idx_13 = lst.indexOf(min_val);\n\
    \  const max_idx_13 = lst.indexOf(max_val);\n  const min_idx_14 = lst.indexOf(min_val);\n\
    \  const max_idx_14 = lst.indexOf(max_val);\n  const min_idx_15 = lst.indexOf(min_val);\n\
    \  const max_idx_15 = lst.indexOf(max_val);\n  const min_idx_16 = lst.indexOf(min_val);\n\
    \  const max_idx_16 = lst.indexOf(max_val);\n  const min_idx_17 = lst.indexOf(min_val);\n\
    \  const max_idx_17 = lst.indexOf(max_val);\n  const min_idx_18 = lst.indexOf(min_val);\n\
    \  const max_idx_18 = lst.indexOf(max_val);\n  const min_idx_19 = lst.indexOf(min_val);\n\
    \  const max_idx_19 = lst.indexOf(max_val);\n  const min_idx_20 = lst.indexOf(min_val);\n\
    \  const max_idx_20 = lst.indexOf(max_val);\n  const min_idx_21 = lst.indexOf(min_val);\n\
    \  const max_idx_21 = lst.indexOf(max_val);\n  const min_idx_22 = lst.indexOf(min_val);\n\
    \  const max_idx_22 = lst.indexOf(max_val);\n  const min_idx_23 = lst.indexOf(min_val);\n\
    \  const max_idx_23 = lst.indexOf(max_val);\n  const min_idx_24 = lst.indexOf(min_val);\n\
    \  const max_idx_24\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8opc7u71.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const leftHalf = strange_sort_list(lst.slice(0,\
    \ middle));\n  const rightHalf = strange_sort_list(lst.slice(middle));\n  return\
    \ leftHalf.concat(rightHalf).sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf_cmpytm.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpf_cmpytm.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmpf_cmpytm.js:20:21)\n    at strange_sort_list (/tmp/tmpf_cmpytm.js:20:21)\n\
    \    at strange_sort_list (/tmp/tmpf_cmpytm.js:20:21)\n    at strange_sort_list\
    \ (/tmp/tmpf_cmpytm.js:20:21)\n    at strange_sort_list (/tmp/tmpf_cmpytm.js:20:21)\n\
    \    at strange_sort_list (/tmp/tmpf_cmpytm.js:20:21)\n    at strange_sort_list\
    \ (/tmp/tmpf_cmpytm.js:20:21)\n    at strange_sort_list (/tmp/tmpf_cmpytm.js:20:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpms1wu8xl.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpms1wu8xl.js:16:24)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpms1wu8xl.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpms1wu8xl.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798522
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right).concat(strange_sort_list(left));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz55b20ac.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpz55b20ac.js:12:24)\n    at strange_sort_list (/tmp/tmpz55b20ac.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpz55b20ac.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpz55b20ac.js:17:24)\n    at strange_sort_list (/tmp/tmpz55b20ac.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpz55b20ac.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpz55b20ac.js:17:24)\n    at strange_sort_list (/tmp/tmpz55b20ac.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpz55b20ac.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpz55b20ac.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659798529
