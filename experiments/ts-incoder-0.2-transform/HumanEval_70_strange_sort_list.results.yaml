language: ts
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return [min,\
    \ ...strange_sort_list(lst.filter(x => x !== min)), max];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmp0406nmi9.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0406nmi9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    4, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min_val = Math.min(...lst);\n  const max_val\
    \ = Math.max(...lst);\n  const min_idx = lst.indexOf(min_val);\n  const max_idx\
    \ = lst.indexOf(max_val);\n  const mid_val = min_val + max_val / 2;\n  const mid_val\
    \ = mid_val.toString();\n  const mid_val_idx = lst.indexOf(mid_val);\n  const\
    \ mid_val_idx_idx = lst.indexOf(mid_val_idx);\n  const mid_val_idx_idx_idx = lst.indexOf(mid_val_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx);\n  const\
    \ mid_val_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx);\n  const\
    \ mid_val_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fosi362.ts(34,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3fosi362.ts(34,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp3fosi362.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy1c1g6u7.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpy1c1g6u7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpy1c1g6u7.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right).concat([max]));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp65umic_6.js:19\n    var left = lst.slice(0, middle);\n        \
    \           ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp65umic_6.js:19:20)\n    at\
    \ strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp65umic_6.js:21:50)\n    at strange_sort_list (/tmp/tmp65umic_6.js:21:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const minValue = Math.min(...lst);\n  const maxValue\
    \ = Math.max(...lst);\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex\
    \ = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex)\
    \ / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.slice();\n\
    \  sortedList.splice(middleIndex, 0, middleValue);\n  return sortedList;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmpzl82nsr9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpzl82nsr9.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2,\
    \ 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const leftHalf = lst.slice(0, middle);\n  const\
    \ rightHalf = lst.slice(middle);\n  return leftHalf.concat(strange_sort_list(rightHalf)).concat([maxValue],\
    \ minValue);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwrjdqosk.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n\
    \    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list\
    \ (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n\
    \    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list\
    \ (/tmp/tmpwrjdqosk.js:21:28)\n    at strange_sort_list (/tmp/tmpwrjdqosk.js:21:28)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgv2_hb_4.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpgv2_hb_4.js:16:24)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpgv2_hb_4.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpgv2_hb_4.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpiok40gev.js:31:12)\n    at Object.<anonymous> (/tmp/tmpiok40gev.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpaqtf1b4i.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaqtf1b4i.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sortedList: number[] = [];\n  let min: number\
    \ = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i] < min) {\n      sortedList.push(min);\n\
    \    } else if (lst[i] > max) {\n      sortedList.push(max);\n    } else {\n \
    \     sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp7z83kqcs.js:39:12)\n    at Object.<anonymous> (/tmp/tmp7z83kqcs.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdjznkq3h.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpdjznkq3h.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpdjznkq3h.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpdjznkq3h.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88cyerc6.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp88cyerc6.js:16:24)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n  return strange_sort_list(left).concat([minValue],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphl_b_6go.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list\
    \ (/tmp/tmphl_b_6go.js:21:55)\n    at strange_sort_list (/tmp/tmphl_b_6go.js:21:55)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnddola06.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpnddola06.js:12:24)\n    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpnddola06.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpnddola06.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88cyerc6.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp88cyerc6.js:16:24)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp88cyerc6.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp88cyerc6.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsjfx5dx0.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpsjfx5dx0.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpsjfx5dx0.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle\
    \ = Math.floor(lst.length / 2);\n\n  return strange_sort_list(\n    lst.slice(0,\
    \ middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n      .concat(\n\
    \        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp6yi_eex.ts(75,31): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp6yi_eex.ts(76,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpp6yi_eex.ts(76,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpp6yi_eex.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpne__8_xh.js:36:12)\n    at Object.<anonymous> (/tmp/tmpne__8_xh.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min_value = Math.min(...lst);\n  const max_value\
    \ = Math.max(...lst);\n  const min_value_str = String(min_value);\n  const max_value_str\
    \ = String(max_value);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n\
    \  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str =\
    \ String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const\
    \ min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str,\
    \ 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str\
    \ = String(max_value_int);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp62w_0feh.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738808
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n\
    \  const right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphutnot4_.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmphutnot4_.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmphutnot4_.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmphutnot4_.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738808
