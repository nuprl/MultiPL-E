language: ts
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n\
    \    if (char.match(/[aeiou]/)) {\n      if (words.length >= n) {\n        break;\n\
    \      }\n      words.push(char);\n    }\n  }\n  return words;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpzocbn6b2.js:33:12)\n    at Object.<anonymous> (/tmp/tmpzocbn6b2.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let letter\
    \ = s[index];\n    if (letter === ' ') {\n      words.push(s.substr(index, n));\n\
    \      index += n;\n    } else {\n      index++;\n    }\n  }\n  return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had',\n\
    \  ' a l',\n  ' lam'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n   \
    \ at test (/tmp/tmpinngdryn.js:35:12)\n    at Object.<anonymous> (/tmp/tmpinngdryn.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had',\
    \ ' a l', ' lam' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n   \
    \ while (j < s.length && s[j] === ' ') {\n      j++;\n    }\n    if (j - i > n)\
    \ {\n      result.push(s.substring(i, j));\n      i = j;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659739101
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      words.push(s.slice(index, index\
    \ + 1));\n      index++;\n    }\n    if (char === \"a\" || char === \"e\" || char\
    \ === \"i\" || char === \"o\" || char === \"u\") {\n      index++;\n    }\n  \
    \  if (char === \"n\") {\n      index++;\n    }\n    if (char === \"y\") {\n \
    \     index++;\n    }\n    if (char === \"h\") {\n      index++;\n    }\n    if\
    \ (char === \"l\") {\n      index++;\n    }\n    if (char === \"l\") {\n     \
    \ index++;\n    }\n    if (char === \"a\") {\n      index++;\n    }\n    if (char\
    \ === \"m\") {\n      index++;\n    }\n    if (char === \"e\") {\n      index++;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"\
    s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n   \
    \ }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\"\
    ) {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n\
    \    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n\
    \      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n   \
    \ if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n  \
    \    index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if\
    \ (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n     \
    \ index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char\
    \ === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"\
    s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n   \
    \ }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\"\
    ) {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n\
    \    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n\
    \      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n   \
    \ if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n  \
    \    index++;\n    }\n    if (char === \"s\") {\n      index++;\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2eor0z7f.ts(155,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let word = \"\
    \";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ===\
    \ \"_\") {\n      count++;\n      if (count === n) {\n        words.push(word);\n\
    \        word = \"\";\n        count = 0;\n      }\n    } else {\n      word +=\
    \ s[i];\n    }\n  }\n  words.push(word);\n  return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpjx970sup.js:43:12)\n    at Object.<anonymous> (/tmp/tmpjx970sup.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n\
    \        if (s[index] === \" \") {\n            words.push(s.slice(index, index\
    \ + 1));\n            index += 1;\n        }\n        index++;\n        n--;\n\
    \    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcyqasvxx.js:33:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpcyqasvxx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if(s.length == 0) {\n    return result;\n  }\n  \n  for(let\
    \ i = 0; i < s.length; i += 1) {\n    let letter = s[i];\n    \n    if(s.indexOf(letter)\
    \ > -1) {\n      if(s.indexOf(letter) == n) {\n        result.push(letter);\n\
    \      }\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  '\
    \ ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmp5lkm1nng.js:35:12)\n    at Object.<anonymous> (/tmp/tmp5lkm1nng.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ',\
    \ ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n\
    \    if (c === ' ') {\n      continue;\n    }\n    for (let j = 0; j < n; j++)\
    \ {\n      if (c === s[j]) {\n        words.push(s.substr(0, i));\n        break;\n\
    \      }\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'M',\n\
    \  'Ma',\n  'Mar',\n  'Mary h',\n  'Mary had ',\n  'Mary had a little l'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzvlqdnpn.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzvlqdnpn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\n\
    \    'M',\n    'Ma',\n    'Mar',\n    'Mary h',\n    'Mary had ',\n    'Mary had\
    \ a little l'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words:\
    \ string[] = [];\n  if (s === \"\") {\n    return words;\n  }\n  const vowels\
    \ = \"aeiou\";\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  for (let i\
    \ = 0; i < s.length; i += 1) {\n    const char = s[i];\n    if (vowels.indexOf(char)\
    \ !== -1) {\n      continue;\n    }\n    if (consonants.indexOf(char) !== -1)\
    \ {\n      if (words.length >= n) {\n        break;\n      }\n      words.push(char);\n\
    \    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n\
    \  'h',\n  'd'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpg4f2oa7o.js:41:12)\n    at Object.<anonymous> (/tmp/tmpg4f2oa7o.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'r', 'y',\
    \ 'h', 'd' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet words: string[] = s.split(\" \");\n\tfor (let i = 0; i\
    \ < words.length; i++) {\n\t\tlet word: string = words[i];\n\t\tlet letters: string[]\
    \ = word.split(\"\");\n\t\tlet count: number;\n\t\tfor (let j = 0; j < letters.length;\
    \ j++) {\n\t\t\tcount = 1;\n\t\t\tfor (let k = 0; k < n; k++) {\n\t\t\t\tif (letters[j].toUpperCase()\
    \ === letters[j].toLowerCase()) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    \tif (count === n) {\n\t\t\t\tresult.push(word);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvvnup8nc.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpvvnup8nc.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substring(index, index+n);\n        if (word.length == n) {\n \
    \           result.push(word);\n            index += n;\n        }\n        else\
    \ {\n            index += word.length;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp4upmnx2b.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4upmnx2b.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let words: string[] = s.split(\" \");\n  for (let i = 0; i\
    \ < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for\
    \ (let j = 0; j < word.length; j++) {\n      if (word[j] === \"a\" || word[j]\
    \ === \"e\" || word[j] === \"i\" || word[j] === \"o\" || word[j] === \"u\") {\n\
    \        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvmt7oz4h.js:37:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpvmt7oz4h.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\tlet word = s.substr(i,\
    \ n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t\ti += n;\n\t\
    \t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp0gorer7y.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0gorer7y.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t\
    }\n\t\tlet count = 0;\n\t\twhile (index < s.length && s[index] === char) {\n\t\
    \t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (count === n) {\n\t\t\twords.push(s.substr(0,\
    \ index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpe9m3rv53.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpe9m3rv53.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let letter =\
    \ s[i];\n    if (letter === \" \") {\n      continue;\n    }\n    \n    let count\
    \ = 0;\n    for (let j = 0; j < letter.length; j++) {\n      if (letter[j] ===\
    \ letter[j].toUpperCase()) {\n        count++;\n      }\n    }\n    \n    if (count\
    \ === n) {\n      words.push(s);\n    }\n  }\n  \n  return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmf_60l1d.js:39:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpmf_60l1d.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index\
    \ < s.length) {\n        let char = s[index];\n        if (char === \" \") {\n\
    \            words.push(currentWord);\n            currentWord = \"\";\n     \
    \       index++;\n        } else if (char === \"a\" || char === \"e\" || char\
    \ === \"i\" || char === \"o\" || char === \"u\") {\n            currentWord +=\
    \ char;\n            index++;\n        } else if (char === \"n\") {\n        \
    \    if (currentWord.length >= n) {\n                words.push(currentWord);\n\
    \                currentWord = \"\";\n                index++;\n            }\
    \ else {\n                currentWord += char;\n                index++;\n   \
    \         }\n        } else {\n            currentWord += char;\n            index++;\n\
    \        }\n    }\n    if (currentWord.length > 0) {\n        words.push(currentWord);\n\
    \    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had',\n  'a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpml8rygoe.js:56:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpml8rygoe.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had', 'a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tindex = index+n;\n\t\tif (word.length ==\
    \ n) {\n\t\t\twords.push(word);\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpk58me81p.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk58me81p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let index =\
    \ 0;\n  while (index < s.length) {\n    const char = s[index];\n    if (char ===\
    \ ' ') {\n      words.push(s.substr(index));\n      index++;\n    }\n    if (char\
    \ === ' ' || char === '\\'') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6za02x_j.ts(142,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let i = 0;\n\
    \  while (i < s.length) {\n    const word = s.substring(i, i + n);\n    if (word.length\
    \ >= n && words.indexOf(word) === -1) {\n      words.push(word);\n    }\n    i\
    \ += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpa2m83wbd.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpa2m83wbd.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let word = \"\";\n    let count = 0;\n\
    \    while (index < s.length) {\n        if (s[index] === \" \") {\n         \
    \   words.push(word);\n            word = \"\";\n            count = 0;\n    \
    \        index++;\n        } else {\n            if (count < n) {\n          \
    \      word += s[index];\n                count++;\n            } else {\n   \
    \             words.push(word);\n                word = \"\";\n              \
    \  count = 0;\n                index++;\n            }\n        }\n    }\n   \
    \ words.push(word);\n    return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'MMMM',\n\
    \  'aaaa',\n  'rrrr',\n  'yyyy',\n  '',\n  'hhhh',\n  'aaaa',\n  'dddd',\n  '',\n\
    \  'aaaa',\n  '',\n  'llll',\n  'iiii',\n  'tttt',\n  'tttt',\n  'llll',\n  'eeee',\n\
    \  '',\n  'llll',\n  'aaaa',\n  'mmmm',\n  'bbbb',\n  ''\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6ptbnnw8.js:48:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp6ptbnnw8.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'MMMM',\
    \ 'aaaa', 'rrrr', 'yyyy',\n    '',     'hhhh', 'aaaa', 'dddd',\n    '',     'aaaa',\
    \ '',     'llll',\n    'iiii', 'tttt', 'tttt', 'llll',\n    'eeee', '',     'llll',\
    \ 'aaaa',\n    'mmmm', 'bbbb', ''\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && index < n)\
    \ {\n        let char = s[index];\n        if (char.match(/[aeiou]/)) {\n    \
    \        words.push(char);\n        }\n        index++;\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnz50ignw.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnz50ignw.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n  \
    \  if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n \
    \     continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\"\
    \ || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp82uhgnv_.ts(98,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp82uhgnv_.ts(113,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      words.push(s.substr(index, n -\
    \ 1));\n      index += n - 1;\n    } else {\n      words.push(char);\n      index++;\n\
    \    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ha',\n  'd',\n  ' a ',\n  'l',\n  'i',\n  't',\n  't',\n\
    \  'l',\n  'e',\n  ' la',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpibl_z5qi.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpibl_z5qi.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \   'a',   'r',   'y',\n    ' ha', 'd',   ' a ', 'l',\n    'i',   't',   't',\
    \   'l',\n    'e',   ' la', 'm',   'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    \n    while\
    \ (index < s.length) {\n        if (s[index] === \" \") {\n            words.push(currentWord);\n\
    \            currentWord = \"\";\n            index++;\n        } else {\n   \
    \         currentWord += s[index];\n            index++;\n        }\n    }\n \
    \   \n    if (currentWord.length > 0) {\n        words.push(currentWord);\n  \
    \  }\n    \n    return words.filter((word: string) => {\n        return word.length\
    \ === n;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpododu5uu.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpododu5uu.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"\
    o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"t\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"r\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"v\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"z\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"x\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"z\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"s\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"t\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"r\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"v\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"z\") {\n      index++;\n      continue;\n    }\n    if (char === \"x\"\
    ) {\n      index++;\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvrq4obkw.ts(164,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length\
    \ && count < n) {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\t\
    words.push(s.substr(index, s.length));\n\t\t\tindex += s.length;\n\t\t\tcount\
    \ = 0;\n\t\t} else if (char === \"a\" || char === \"e\" || char === \"i\" || char\
    \ === \"o\" || char === \"u\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t}\
    \ else if (char === \"y\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else\
    \ if (char === \"h\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char\
    \ === \"l\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char ===\
    \ \"l\" || char === \"o\" || char === \"u\") {\n\t\t\tindex += 1;\n\t\t\tcount\
    \ += 1;\n\t\t} else if (char === \"n\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\
    \t\t} else if (char === \"s\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t}\
    \ else if (char === \"t\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else\
    \ if (char === \"e\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char\
    \ === \"d\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char ===\
    \ \"r\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"a\"\
    ) {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"m\") {\n\t\
    \t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"y\") {\n\t\t\tindex\
    \ += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"h\") {\n\t\t\tindex += 1;\n\
    \t\t\tcount += 1;\n\t\t} else if (char === \"w\") {\n\t\t\tindex += 1;\n\t\t\t\
    count += 1;\n\t\t} else if (char === \"a\") {\n\t\t\tindex += 1;\n\t\t\tcount\
    \ += 1;\n\t\t} else if (char === \"l\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\
    \t\t} else if (char === \"l\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t}\
    \ else if (char === \"o\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else\
    \ if (char === \"u\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char\
    \ === \"n\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char ===\
    \ \"s\") {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"t\"\
    ) {\n\t\t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"e\") {\n\t\
    \t\tindex += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"d\") {\n\t\t\tindex\
    \ += 1;\n\t\t\tcount += 1;\n\t\t} else if (char === \"r\") {\n\t\t\tindex += 1;\n\
    \t\t\tcount += 1;\n\t\t} else if (\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72099:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    if (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\"\
    \ || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\
    n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"d\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"h\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"l\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"a\") {\n\t\t\tindex++;\n\t\t\t\
    continue;\n\t\t}\n\t\tif (s[index] === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\
    \t\tif (s[index] === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif\
    \ (s[index] === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\
    k\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"t\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"r\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"a\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"m\") {\n\t\t\tindex++;\n\t\t\t\
    continue;\n\t\t}\n\t\tif (s[index] === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\
    \t\tif (s[index] === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif\
    \ (s[index] === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\
    h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"l\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"a\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"e\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"i\") {\n\t\t\tindex++;\n\t\t\t\
    continue;\n\t\t}\n\t\tif (s[index] === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === \"u\") {\n\t\t\tindex\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpunvy5fze.ts(154,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805130
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substr(i,\
    \ n);\n    if (word.length >= n) {\n      words.push(word);\n    }\n    i += n;\n\
    \  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp3xmc1rze.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3xmc1rze.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substr(index, n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t\tindex += n;\n\t\t} else {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpm1lbpxb2.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm1lbpxb2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpbn5a2nit.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbn5a2nit.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      result.push(\"\");\n      index++;\n\
    \      continue;\n    }\n    let count = 0;\n    for (let i = index; i < s.length;\
    \ i++) {\n      if (s[i] !== char) {\n        break;\n      }\n      count++;\n\
    \    }\n    if (count === n) {\n      result.push(s.slice(index, i + 1));\n  \
    \  }\n    index++;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8m6d19va.ts(35,34): error TS2304: Cannot find name
    ''i''.

    '
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && words.length\
    \ < n) {\n        if (s[index] === \" \") {\n            words.push(s.substr(index,\
    \ s.length));\n            index += s.length;\n        } else {\n            index++;\n\
    \        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had a little\
    \ lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuw7ehe4h.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuw7ehe4h.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a\
    \ little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let letter\
    \ = s[index];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n      words.push(s[index]);\n  \
    \  }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpp7e_3fc6.js:32:12)\n    at Object.<anonymous> (/tmp/tmpp7e_3fc6.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && index < n) {\n\
    \    if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index]\
    \ === 'o' || s[index] === 'u') {\n      words.push(s.slice(index, index + 1));\n\
    \    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpa4qwy4_k.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa4qwy4_k.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n  \
    \  if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitNodeList (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73302:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substring(index, index+n);\n        if (words.indexOf(word) ===\
    \ -1) {\n            words.push(word);\n        }\n        index += n;\n    }\n\
    \    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpmh9aqlpo.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmh9aqlpo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substring(index, index+n);\n        if (word.length == n) {\n \
    \           words.push(word);\n            index += n;\n        }\n        else\
    \ {\n            index += word.length + 1;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp21wr0o2y.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp21wr0o2y.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s.charAt(index)\
    \ === ' ') {\n      index++;\n      continue;\n    }\n    let count = 0;\n   \
    \ while (index < s.length && s.charAt(index) === s.charAt(index)) {\n      index++;\n\
    \      count++;\n    }\n    if (count === n) {\n      result.push(s.substring(index,\
    \ index + 1));\n    }\n    index++;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf9w2p44c.js:40:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpf9w2p44c.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ == 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let lastChar =\
    \ s[0];\n  let lastCount = 0;\n  for (let i = 1; i < s.length; i++) {\n    if\
    \ (s[i] !== lastChar) {\n      words.push(s.substring(lastCount, i));\n      lastCount\
    \ = i;\n      lastChar = s[i];\n    }\n  }\n  words.push(s.substring(lastCount,\
    \ s.length));\n  return words.filter((word) => word.length == n);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmppop6v3e5.js:37:12)\n  \
    \  at Object.<anonymous> (/tmp/tmppop6v3e5.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ == 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n\
    \  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ')\
    \ {\n      words.push(s.substr(index, n - 1));\n      index += n - 1;\n    } else\
    \ {\n      words.push(char);\n      index++;\n    }\n  }\n  return words;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ha',\n  'd',\n  ' a ',\n  'l',\n  'i',\n  't',\n  't',\n\
    \  'l',\n  'e',\n  ' la',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmppl017lvu.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppl017lvu.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \   'a',   'r',   'y',\n    ' ha', 'd',   ' a ', 'l',\n    'i',   't',   't',\
    \   'l',\n    'e',   ' la', 'm',   'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    if (s[index] === \" \") {\n\t\t\tindex++;\n\t\t}\n\t\telse {\n\t\t\tlet consonants\
    \ = count_consonants(s, index);\n\t\t\tif (consonants === n) {\n\t\t\t\twords.push(s.substring(index,\
    \ index+n));\n\t\t\t\tindex += n;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex++;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps_r7_kxz.ts(25,21): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1659805131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)\
    \ == \" \") {\n      continue;\n    }\n    \n    let consonants = count_consonants(s.charAt(i));\n\
    \    if (consonants == n) {\n      words.push(s.substr(0, i));\n    }\n  }\n \
    \ \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphitw7d22.ts(25,22): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1659805130
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && index < n) {\n\
    \    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\"\
    \ || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"h\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    a\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"m\") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \"n\") {\n     \
    \ index++;\n      continue;\n    }\n    if (s[index] === \"s\") {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === \"t\") {\n      index++;\n     \
    \ continue;\n    }\n    if (s[index] === \"h\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"w\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"a\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"n\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \"d\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    e\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"s\") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \"s\") {\n     \
    \ index++;\n      continue;\n    }\n    if (s[index] === \"s\") {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === \"s\") {\n      index++;\n     \
    \ continue;\n    }\n    if (s[index] === \"s\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"s\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"s\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"s\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \"s\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    s\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"s\") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \"s\") {\n     \
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf6s56q_0.ts(154,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s ==\
    \ \"\") {\n    return [];\n  }\n  const list: string[] = [];\n  let i = 0;\n \
    \ while (i < s.length) {\n    if (s.charAt(i) == \" \") {\n      i++;\n      continue;\n\
    \    }\n    let j = 0;\n    while (j < n) {\n      if (s.charAt(i) == s.charAt(j))\
    \ {\n        j++;\n        continue;\n      }\n      j++;\n    }\n    list.push(s.slice(i,\
    \ i + j));\n    i += j;\n  }\n  return list;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had ',\n  'a li',\n  'ttle',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpqqe550k8.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqqe550k8.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had ', 'a li', 'ttle', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let charCount = 0;\n    let charCount2\
    \ = 0;\n    let charCount3 = 0;\n    let charCount4 = 0;\n    let charCount5 =\
    \ 0;\n    let charCount6 = 0;\n    let charCount7 = 0;\n    let charCount8 = 0;\n\
    \    let charCount9 = 0;\n    let charCount10 = 0;\n    let charCount11 = 0;\n\
    \    let charCount12 = 0;\n    let charCount13 = 0;\n    let charCount14 = 0;\n\
    \    let charCount15 = 0;\n    let charCount16 = 0;\n    let charCount17 = 0;\n\
    \    let charCount18 = 0;\n    let charCount19 = 0;\n    let charCount20 = 0;\n\
    \    let charCount21 = 0;\n    let charCount22 = 0;\n    let charCount23 = 0;\n\
    \    let charCount24 = 0;\n    let charCount25 = 0;\n    let charCount26 = 0;\n\
    \    let charCount27 = 0;\n    let charCount28 = 0;\n    let charCount29 = 0;\n\
    \    let charCount30 = 0;\n    let charCount31 = 0;\n    let charCount32 = 0;\n\
    \    let charCount33 = 0;\n    let charCount34 = 0;\n    let charCount35 = 0;\n\
    \    let charCount36 = 0;\n    let charCount37 = 0;\n    let charCount38 = 0;\n\
    \    let charCount39 = 0;\n    let charCount40 = 0;\n    let charCount41 = 0;\n\
    \    let charCount42 = 0;\n    let charCount43 = 0;\n    let charCount44 = 0;\n\
    \    let charCount45 = 0;\n    let charCount46 = 0;\n    let charCount47 = 0;\n\
    \    let charCount48 = 0;\n    let charCount49 = 0;\n    let charCount50 = 0;\n\
    \    let charCount51 = 0;\n    let charCount52 = 0;\n    let charCount53 = 0;\n\
    \    let charCount54 = 0;\n    let charCount55 = 0;\n    let charCount56 = 0;\n\
    \    let charCount57 = 0;\n    let charCount58 = 0;\n    let charCount59 = 0;\n\
    \    let charCount60 = 0;\n    let charCount61 = 0;\n    let charCount62 = 0;\n\
    \    let charCount63 = 0;\n    let charCount64 = 0;\n    let charCount65 = 0;\n\
    \    let charCount66 = 0;\n    let charCount67 = 0;\n    let charCount68 = 0;\n\
    \    let charCount69 = 0;\n    let charCount70 = 0;\n    let charCount71 = 0;\n\
    \    let charCount72 = 0;\n    let charCount73 = 0;\n    let charCount74 = 0;\n\
    \    let charCount75 = 0;\n    let charCount76 = 0;\n    let charCount77 = 0;\n\
    \    let charCount78 = 0;\n    let charCount79 = 0;\n    let charCount80 = 0;\n\
    \    let charCount81 = 0;\n    let charCount82 = 0;\n    let charCount83 = 0;\n\
    \    let charCount84 = 0;\n    let char\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfe77ny52.ts(120,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length)\
    \ {\n        if (s[index] === \" \") {\n            count++;\n        }\n    \
    \    if (count === n) {\n            words.push(s.substring(index, index + 1));\n\
    \            index = index + 1;\n            count = 0;\n        }\n        index++;\n\
    \    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkafbrpya.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkafbrpya.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substr(index, n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp65b0rwza.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp65b0rwza.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length)\
    \ {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\
    \tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"w\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"d\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"w\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"e\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps7ht5uxy.ts(151,18): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmps7ht5uxy.ts(152,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmps7ht5uxy.ts(167,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if(s == \"\") {\n    return result;\n  }\n  \n  let vowels\
    \ = \"aeiou\";\n  \n  for(let i = 0; i < s.length; i += 1) {\n    if(vowels.indexOf(s[i])\
    \ >= 0) {\n      continue;\n    }\n    \n    let count = 0;\n    \n    for(let\
    \ j = 0; j < s.length; j += 1) {\n      if(s[j] === s[i]) {\n        count +=\
    \ 1;\n      }\n    }\n    \n    if(count === n) {\n      result.push(s[i]);\n\
    \    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  '\
    \ ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpwtzbv3an.js:42:12)\n    at Object.<anonymous> (/tmp/tmpwtzbv3an.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ',\
    \ ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const result: Array<string> = [];\n  const\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i += 1)\
    \ {\n    const char = s[i];\n    if (vowels.indexOf(char) !== -1) {\n      continue;\n\
    \    }\n    if (result.length >= n) {\n      break;\n    }\n    if (s.indexOf(char,\
    \ i + 1) === -1) {\n      result.push(char);\n    }\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n\
    \  'y',\n  'h'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpxgq54gns.js:40:12)\n    at Object.<anonymous> (/tmp/tmpxgq54gns.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r',\
    \ 'y', 'h' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i)\
    \ == ' ') {\n            words.push(s.substr(0, i));\n        }\n    }\n    return\
    \ words.filter(w => w.length == n);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2cf0ilj5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2cf0ilj5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length\
    \ && count < n) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse {\n\t\t\tcount++;\n\t\t}\n\t}\n\twhile (index < s.length) {\n\t\
    \tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t}\n\t\telse {\n\t\t\tresult.push(s[index]);\n\
    \t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n\
    \  'l',\n  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpl4gwy0kd.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl4gwy0kd.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', 'r', 'y', 'h',\n    'a', 'd', 'a', 'l', 'i',\n    't', 't', 'l', 'e', 'l',\n\
    \    'a', 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substr(i,\
    \ n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    i += n;\n\
    \  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp6fj3i73r.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6fj3i73r.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n\
    \    if (char.match(/[aeiou]/)) {\n      if (result.length >= n) {\n        break;\n\
    \      }\n      result.push(char);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpui9ld8me.js:33:12)\n    at Object.<anonymous> (/tmp/tmpui9ld8me.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length\
    \ && count < n) {\n        if (s[index] === \" \") {\n            count++;\n \
    \       } else {\n            words.push(s[index]);\n            count++;\n  \
    \      }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp3896cnw1.js:36:12)\n    at Object.<anonymous> (/tmp/tmp3896cnw1.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  for (let i =\
    \ 0; i < s.length; i++) {\n    const char = s[i];\n    if (char === ' ' || char\
    \ === '\\n') {\n      continue;\n    }\n    for (let j = 0; j < n; j++) {\n  \
    \    if (char.match(/[aeiou]/i)) {\n        words.push(char);\n        break;\n\
    \      }\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp5p28kxw8.js:39:12)\n    at Object.<anonymous> (/tmp/tmp5p28kxw8.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < s.length;\
    \ i += 1) {\n    const char = s[i];\n    if (char.match(/[aeiou]/i)) {\n     \
    \ result.push(char);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpktxpd7zz.js:33:12)\n    at Object.<anonymous> (/tmp/tmpktxpd7zz.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    if (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ')\
    \ {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ')\
    \ {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ')\
    \ {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ')\
    \ {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (s[index] === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ')\
    \ {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === ' ') {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy0r_ftmi.ts(167,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  let\
    \ count = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) ===\
    \ ' ') {\n      count++;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++)\
    \ {\n    if(s.charAt(i) === ' ') {\n      count--;\n    }\n    \n    if(count\
    \ === n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  \n  return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'M',\n\
    \  'Ma',\n  'Mar'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmp5ddyjlh3.js:41:12)\n    at Object.<anonymous> (/tmp/tmp5ddyjlh3.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'M',\
    \ 'Ma', 'Mar' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substring(index, index+n);\n        if (word.length == n) {\n \
    \           result.push(word);\n            index += n;\n        }\n        else\
    \ {\n            index += word.length;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp4upmnx2b.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4upmnx2b.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substr(index, n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp65b0rwza.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp65b0rwza.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n\
    \    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char\
    \ === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n\
    \      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n\
    \      continue;\n    }\n    if (char === 'l' || char === 'm' || char === 'n'\
    \ || char === 'r' || char === 's') {\n      index++;\n      continue;\n    }\n\
    \    if (char === 't') {\n      index++;\n      continue;\n    }\n    if (char\
    \ === 'd') {\n      index++;\n      continue;\n    }\n    if (char === 'g') {\n\
    \      index++;\n      continue;\n    }\n    if (char === 'b' || char === 'c'\
    \ || char === 'm' || char === 'p' || char === 'v' || char === 'w') {\n      index++;\n\
    \      continue;\n    }\n    if (char === 'k') {\n      index++;\n      continue;\n\
    \    }\n    if (char === 'j') {\n      index++;\n      continue;\n    }\n    if\
    \ (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'x')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n\
    \      continue;\n    }\n    if (char === 'k') {\n      index++;\n      continue;\n\
    \    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if\
    \ (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'a')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === 'e') {\n      index++;\n\
    \      continue;\n    }\n    if (char === 'i') {\n      index++;\n      continue;\n\
    \    }\n    if (char === 'o') {\n      index++;\n      continue;\n    }\n    if\
    \ (char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n\
    \      continue;\n    }\n    if (char === 'l') {\n      index++;\n      continue;\n\
    \    }\n    if (char === 'm') {\n      index++;\n      continue;\n    }\n    if\
    \ (char === 'n') {\n      index++;\n      continue;\n    }\n    if (char === 'r')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === 's') {\n      index++;\n\
    \      continue;\n    }\n    if (char === 't') {\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo6xdc4j6.ts(155,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  if(s.length == 0) {\n    return words;\n  }\n  \n  for(let\
    \ i = 0; i < s.length; i++) {\n    if(s.charAt(i) == ' ') {\n      continue;\n\
    \    }\n    \n    let consonants = count_consonants(s.charAt(i));\n    if(consonants\
    \ == n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  \n  return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9_5rgcse.ts(29,22): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let letter\
    \ = s[index];\n    if (letter === \" \") {\n      index++;\n      continue;\n\
    \    }\n    let count = 0;\n    while (index < s.length && s[index] === letter)\
    \ {\n      index++;\n      count++;\n    }\n    if (count === n) {\n      words.push(letter);\n\
    \    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_jcjjv5j.js:40:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp_jcjjv5j.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"\
    o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"l\" || char ===\
    \ \"m\" || char === \"n\" || char === \"p\" || char === \"s\" || char === \"t\"\
    \ || char === \"w\") {\n      index++;\n      continue;\n    }\n    if (char ===\
    \ \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\" || char === \"m\" || char ===\
    \ \"n\" || char === \"p\" || char === \"s\" || char === \"t\" || char === \"w\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"a\" || char ===\
    \ \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"l\" || char === \"m\" || char === \"n\" || char === \"p\" ||\
    \ char === \"s\" || char === \"t\" || char === \"w\") {\n      index++;\n    \
    \  continue;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\"\
    \ || char === \"o\" || char === \"u\") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char ===\
    \ \"l\" || char === \"m\" || char === \"n\" || char === \"p\" || char === \"s\"\
    \ || char === \"t\" || char === \"w\") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"\
    o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"l\" || char ===\
    \ \"m\" || char === \"n\" || char === \"p\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpluwr92lr.ts(102,68): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpluwr92lr.ts(103,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpluwr92lr.ts(118,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s.charAt(index)\
    \ == ' ') {\n      words.push(s.substr(index, n));\n      index += n;\n    } else\
    \ {\n      index++;\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had',\n\
    \  ' a l',\n  ' lam'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n   \
    \ at test (/tmp/tmpd1uic_7r.js:34:12)\n    at Object.<anonymous> (/tmp/tmpd1uic_7r.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had',\
    \ ' a l', ' lam' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805134
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let char = s[index];\n        if (char === \" \") {\n            words.push(s.substr(index,\
    \ n - 1));\n            index += n - 1;\n        } else if (char === \"a\" ||\
    \ char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n  \
    \          words.push(s.substr(index, n - 1));\n            index += n - 1;\n\
    \        } else {\n            index++;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ary',\n\
    \  ' ha',\n  ' a ',\n  'itt',\n  'e l',\n  'amb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpmemg0rp3.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmemg0rp3.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ary', '\
    \ ha', ' a ', 'itt', 'e l', 'amb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i)\
    \ == ' ') {\n      i++;\n      continue;\n    }\n    let j = 0;\n    while (j\
    \ < n) {\n      if (s.charAt(i) == s.charAt(j)) {\n        j++;\n        continue;\n\
    \      }\n      j++;\n    }\n    result.push(s.substring(i, i + 1));\n    i =\
    \ i + 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n\
    \  'l',\n  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp0s6k667b.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0s6k667b.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', 'r', 'y', 'h',\n    'a', 'd', 'a', 'l', 'i',\n    't', 't', 'l', 'e', 'l',\n\
    \    'a', 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s.charAt(index);\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\" || char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"l\" || char === \"m\" || char === \"r\" || char === \"s\" || char === \"t\"\
    \ || char === \"w\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\"\
    \ || char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\" || char === \"\
    m\" || char === \"r\" || char === \"s\" || char === \"t\" || char === \"w\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\" || char === \"\
    e\" || char === \"i\" || char === \"o\" || char === \"u\" || char === \"y\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"l\" || char === \"m\" || char === \"r\" || char ===\
    \ \"s\" || char === \"t\" || char === \"w\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\" || char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"l\" || char === \"m\" || char === \"r\" || char === \"s\" || char === \"t\"\
    \ || char === \"w\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\"\
    \ || char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\" || char === \"\
    m\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaqt12vi7.ts(102,34): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpaqt12vi7.ts(103,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpaqt12vi7.ts(118,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const result: string[] = [];\n  let last =\
    \ 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n\
    \      result.push(s.substring(last, i));\n      last = i + 1;\n    }\n  }\n \
    \ result.push(s.substring(last));\n  return result.filter((word) => word.length\
    \ == n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2g75d6rq.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2g75d6rq.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805135
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const result: string[] = [];\n  const chars\
    \ = s.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[aeiou]/i))\
    \ {\n      result.push(chars[i]);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmptjcfqsq_.js:33:12)\n    at Object.<anonymous> (/tmp/tmptjcfqsq_.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \" || char === \"\\t\" || char === \"\\n\"\
    ) {\n      index++;\n      continue;\n    }\n    let count = 0;\n    while (index\
    \ < s.length && s[index] === char) {\n      index++;\n      count++;\n    }\n\
    \    if (count === n) {\n      result.push(s.substr(0, index));\n    }\n    index++;\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprlixsza7.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmprlixsza7.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t\
    }\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\"\
    \ || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\" || char === \"o\" || char === \"\
    u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"r\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"w\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"c\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"r\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpygskvmwa.ts(162,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805135
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words:\
    \ string[] = [];\n  const vowels = \"aeiou\";\n  const consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n  const vowelsCount = vowels.length;\n  const consonantsCount = consonants.length;\n\
    \  const word = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n\
    \  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r\
    \ = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n\
    \  let x = 0;\n  let y = 0;\n  let z = 0;\n  let count = 0;\n  let wordCount =\
    \ 0;\n  let wordLength = 0;\n  let wordCount2 = 0;\n  let wordLength2 = 0;\n \
    \ let wordCount3 = 0;\n  let wordLength3 = 0;\n  let wordCount4 = 0;\n  let wordLength4\
    \ = 0;\n  let wordCount5 = 0;\n  let wordLength5 = 0;\n  let wordCount6 = 0;\n\
    \  let wordLength6 = 0;\n  let wordCount7 = 0;\n  let wordLength7 = 0;\n  let\
    \ wordCount8 = 0;\n  let wordLength8 = 0;\n  let wordCount9 = 0;\n  let wordLength9\
    \ = 0;\n  let wordCount10 = 0;\n  let wordLength10 = 0;\n  let wordCount11 = 0;\n\
    \  let wordLength11 = 0;\n  let wordCount12 = 0;\n  let wordLength12 = 0;\n  let\
    \ wordCount13 = 0;\n  let wordLength13 = 0;\n  let wordCount14 = 0;\n  let wordLength14\
    \ = 0;\n  let wordCount15 = 0;\n  let wordLength15 = 0;\n  let wordCount16 = 0;\n\
    \  let wordLength16 = 0;\n  let wordCount17 = 0;\n  let wordLength17 = 0;\n  let\
    \ wordCount18 = 0;\n  let wordLength18 = 0;\n  let wordCount19 = 0;\n  let wordLength19\
    \ = 0;\n  let wordCount20 = 0;\n  let wordLength20 = 0;\n  let wordCount21 = 0;\n\
    \  let wordLength21 = 0;\n  let wordCount22 = 0;\n  let wordLength22 = 0;\n  let\
    \ wordCount23 = 0;\n  let wordLength23 = 0;\n  let wordCount24 = 0;\n  let wordLength24\
    \ = 0;\n  let wordCount25 = 0;\n  let wordLength25 = 0;\n  let wordCount26 = 0;\n\
    \  let wordLength26 = 0;\n  let wordCount27 = 0;\n  let wordLength27 = 0;\n  let\
    \ wordCount28 = 0;\n  let wordLength28 = 0;\n  let wordCount29 = 0;\n  let wordLength29\
    \ = 0;\n  let wordCount30 = 0;\n  let wordLength30 = 0;\n  let wordCount31 = 0;\n\
    \  let wordLength31 = 0;\n  let wordCount32 = 0;\n  let wordLength32 = 0;\n  let\
    \ wordCount33 = 0;\n  let wordLength33 = 0;\n  let word\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3o5y4yc5.ts(125,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let index =\
    \ 0;\n  while (index < s.length) {\n    const word = s.substring(index, index\
    \ + 1);\n    if (word.length === n) {\n      words.push(word);\n    }\n    index\
    \ += 1;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2q4ylacx.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp2q4ylacx.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let words: string[] = s.split(\" \");\n  for (let i = 0; i\
    \ < words.length; i++) {\n    let word = words[i];\n    let letters = word.split(\"\
    \");\n    for (let j = 0; j < letters.length; j++) {\n      if (letters[j].match(/[aeiou]/))\
    \ {\n        if (letters.length - j === n) {\n          result.push(word);\n \
    \         break;\n        }\n      }\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_szuwx2u.js:37:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp_szuwx2u.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let char = s[index];\n        if (char === \" \") {\n            if (index ===\
    \ s.length - 1) {\n                break;\n            }\n            char = s[index\
    \ + 1];\n        }\n        if (char === \"a\" || char === \"e\" || char === \"\
    i\" || char === \"o\" || char === \"u\") {\n            result.push(s[index]);\n\
    \            index++;\n        }\n        if (char === \"n\") {\n            if\
    \ (index === s.length - 1) {\n                break;\n            }\n        \
    \    char = s[index + 1];\n        }\n        if (char === \"y\") {\n        \
    \    if (index === s.length - 1) {\n                break;\n            }\n  \
    \          char = s[index + 1];\n        }\n        if (char === \"h\") {\n  \
    \          if (index === s.length - 1) {\n                break;\n           \
    \ }\n            char = s[index + 1];\n        }\n        if (char === \"l\")\
    \ {\n            if (index === s.length - 1) {\n                break;\n     \
    \       }\n            char = s[index + 1];\n        }\n        if (char === \"\
    l\") {\n            if (index === s.length - 1) {\n                break;\n  \
    \          }\n            char = s[index + 1];\n        }\n        if (char ===\
    \ \"o\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"s\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"e\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"a\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"m\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"t\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"u\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"n\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"y\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"h\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"e\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"l\") {\n            if (index === s.length - 1) {\n                break;\n\
    \            }\n            char = s[index + 1];\n        }\n        if (char\
    \ === \"l\") {\n            if (index === s.length - \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitNodeList (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73302:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  if (s.length == 0) {\n    return result;\n  }\n  let index\
    \ = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char.match(/[aeiou]/))\
    \ {\n      result.push(s[index]);\n      index++;\n    }\n    if (index == s.length\
    \ - 1) {\n      break;\n    }\n    let nextChar = s[index + 1];\n    if (nextChar.match(/[aeiou]/))\
    \ {\n      result.push(s[index]);\n      index++;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805151
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substring(index, index + 1);\n        if (word.length == n) {\n\
    \            words.push(word);\n            index += n;\n        }\n        else\
    \ {\n            index += word.length;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6fyfw4cn.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp6fyfw4cn.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char =\
    \ s[i];\n        if (char.match(/[aeiou]/)) {\n            words.push(char);\n\
    \        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp9unl2ikx.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9unl2ikx.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  let count = 1;\n  while (index < s.length\
    \ && count < n) {\n    if (s[index] === 'a' || s[index] === 'e' || s[index] ===\
    \ 'i' || s[index] === 'o' || s[index] === 'u') {\n      words.push(s[index]);\n\
    \      count++;\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp88j89wfk.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp88j89wfk.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)\
    \ === \" \") {\n      result.push(s.substr(0, i));\n      s = s.substr(i + 1);\n\
    \    }\n  }\n  \n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++)\
    \ {\n      if (s.charAt(i) === \" \") {\n        result.push(s.substr(0, i));\n\
    \        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  if (result.length <\
    \ n) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) !== \"\
    \ \") {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n\
    \      }\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little',\n  '',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpkzri36ik.js:46:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkzri36ik.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little', '', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substr(index, n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp65b0rwza.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp65b0rwza.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ == 0) {\n    return [];\n  }\n\n  const vowels = \"aeiou\";\n  const consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n  const consonants_count = consonants.length;\n\
    \  const vowels_count = vowels.length;\n  const vowels_index = vowels.indexOf(s.charAt(0));\n\
    \  const vowels_count = vowels_index == -1 ? vowels_count : vowels_index - 1;\n\
    \  const consonants_index = consonants.indexOf(s.charAt(0));\n  const consonants_count\
    \ = consonants_index == -1 ? consonants_count : consonants_index - 1;\n\n  const\
    \ words = [];\n  let index = 0;\n  while (index < s.length - n) {\n    const word\
    \ = s.substring(index, index + n);\n    if (words.indexOf(word) == -1) {\n   \
    \   words.push(word);\n    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe62fkhem.ts(24,9): error TS2451: Cannot redeclare
    block-scoped variable ''consonants_count''.

    ../../../../../tmp/tmpe62fkhem.ts(25,9): error TS2451: Cannot redeclare block-scoped
    variable ''vowels_count''.

    ../../../../../tmp/tmpe62fkhem.ts(27,9): error TS2451: Cannot redeclare block-scoped
    variable ''vowels_count''.

    ../../../../../tmp/tmpe62fkhem.ts(29,9): error TS2451: Cannot redeclare block-scoped
    variable ''consonants_count''.

    '
  timestamp: 1659805136
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n  \
    \  if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \".\" || s[index] === \",\" || s[index] === \"?\" || s[index] === \"!\"\
    ) {\n      index++;\n      continue;\n    }\n    if (s[index] === \"a\" || s[index]\
    \ === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\"\
    ) {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n \
    \     index++;\n      continue;\n    }\n    if (s[index] === \"h\" || s[index]\
    \ === \"o\" || s[index] === \"w\" || s[index] === \"y\") {\n      index++;\n \
    \     continue;\n    }\n    if (s[index] === \"n\" || s[index] === \"s\" || s[index]\
    \ === \"t\" || s[index] === \"r\" || s[index] === \"v\" || s[index] === \"x\"\
    ) {\n      index++;\n      continue;\n    }\n    if (s[index] === \"d\" || s[index]\
    \ === \"b\" || s[index] === \"k\" || s[index] === \"m\" || s[index] === \"l\"\
    \ || s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \"c\" || s[index] === \"k\" || s[index] === \"m\" || s[index] === \"l\"\
    \ || s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\"\
    \ || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    h\" || s[index] === \"o\" || s[index] === \"w\" || s[index] === \"y\") {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === \"n\" || s[index] ===\
    \ \"s\" || s[index] === \"t\" || s[index] === \"r\" || s[index] === \"v\" || s[index]\
    \ === \"x\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    d\" || s[index] === \"b\" || s[index] === \"k\" || s[index] === \"m\" || s[index]\
    \ === \"l\" || s[index] === \"y\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"c\" || s[index] === \"k\" || s[index] === \"m\" || s[index]\
    \ === \"l\" || s[index] === \"y\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmxkmpopm.ts(99,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805136
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    let char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\"\
    ) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"r\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"g\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"b\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"f\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"v\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"w\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"k\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"j\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"x\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"q\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"z\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"x\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"z\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"y\") {\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6cq4sw0f.ts(162,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805136
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n  \
    \  if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n   \
    \ if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if\
    \ (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index)\
    \ == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) ==\
    \ ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == '\
    \ ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ')\
    \ {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n\
    \      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n \
    \     index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n  \
    \    index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n   \
    \   index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n    \
    \  index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n     \
    \ index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n\
    \      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n \
    \     continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n  \
    \    continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n   \
    \   continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n    \
    \  continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n     \
    \ continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n\
    \    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n \
    \   }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n  \
    \  }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n   \
    \ }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n \
    \   if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n  \
    \  if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n   \
    \ if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if\
    \ (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq0yh4g2m.ts(137,11): error TS1003: Identifier expected.

    ../../../../../tmp/tmpq0yh4g2m.ts(138,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpq0yh4g2m.ts(153,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  for\
    \ (let i = 0; i < s.length; i += 1) {\n    let char = s[i];\n    if (char.match(/[aeiou]/))\
    \ {\n      words.push(char);\n    }\n  }\n  \n  return words.filter((word: string)\
    \ => {\n    return word.length >= n;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdpaipq0t.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpdpaipq0t.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let char = s[index];\n        if (char === \" \") {\n            words.push(s.substr(index,\
    \ n));\n            index += n;\n        } else if (char === \"a\" || char ===\
    \ \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n           \
    \ index += 1;\n        } else {\n            index += 1;\n        }\n    }\n \
    \   return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had',\n\
    \  ' a l',\n  ' lam'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n   \
    \ at test (/tmp/tmpusrs4i0b.js:38:12)\n    at Object.<anonymous> (/tmp/tmpusrs4i0b.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had',\
    \ ' a l', ' lam' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && index < n)\
    \ {\n        let char = s[index];\n        if (char === \" \") {\n           \
    \ words.push(s.substr(index));\n            index++;\n        } else if (char\
    \ === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char ===\
    \ \"u\") {\n            words.push(s.substr(index));\n            index++;\n \
    \       } else if (char === \"y\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"n\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"s\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"h\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"l\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"l\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"e\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"d\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"a\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"t\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"c\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"k\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"m\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"p\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"e\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"r\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"i\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"n\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"g\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"s\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"a\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"t\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"h\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"l\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"l\") {\n            words.push(s.substr(index));\n\
    \            index++;\n        } else if (char === \"e\") {\n            words.push(s.substr(index));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp__n5_rij.ts(121,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    let last = 0;\n    let count = 0;\n\
    \    while (index < s.length) {\n        if (s[index] === \" \") {\n         \
    \   count++;\n        }\n        if (count === n) {\n            result.push(s.substring(last,\
    \ index));\n            last = index + 1;\n            count = 0;\n        }\n\
    \        index++;\n    }\n    if (last < s.length) {\n        result.push(s.substring(last,\
    \ s.length));\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n \
    \   at test (/tmp/tmp_pyhf61v.js:41:12)\n    at Object.<anonymous> (/tmp/tmp_pyhf61v.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && index < n)\
    \ {\n        if (s[index] === \" \") {\n            words.push(s.substr(index));\n\
    \            index++;\n        }\n        else {\n            index++;\n     \
    \   }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3t2pbny3.js:34:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp3t2pbny3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length)\
    \ {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tcount++;\n\t\t\
    \tif (count === n) {\n\t\t\t\tresult.push(s.substr(index, n - 1));\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tcount = 1;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp84zg027c.js:40:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp84zg027c.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substring(index, index+n);\n        if (word.length == n) {\n \
    \           words.push(word);\n            index += n;\n        }\n        else\
    \ {\n            index += word.length + 1;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp21wr0o2y.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp21wr0o2y.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const result: string[] = [];\n  let index =\
    \ 0;\n  while (index < s.length) {\n    const char = s.charAt(index);\n    if\
    \ (char === ' ') {\n      index++;\n      continue;\n    }\n    if (char === '\\\
    '') {\n      index++;\n      continue;\n    }\n    if (char === '\\'') {\n   \
    \   index++;\n      continue;\n    }\n    if (char === '\\'') {\n      index++;\n\
    \      continue;\n    }\n    if (char === '\\'') {\n      index++;\n      continue;\n\
    \    }\n    if (char === '\\'') {\n      index++;\n      continue;\n    }\n  \
    \  if (char === '\\'') {\n      index++;\n      continue;\n    }\n    if (char\
    \ === '\\'') {\n      index++;\n      continue;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === '\\'') {\n     \
    \ index++;\n      continue;\n    }\n    if (char === '\\'') {\n      index++;\n\
    \      continue;\n    }\n    if (char === '\\'') {\n      index++;\n      continue;\n\
    \    }\n    if (char === '\\'') {\n      index++;\n      continue;\n    }\n  \
    \  if (char === '\\'') {\n      index++;\n      continue;\n    }\n    if (char\
    \ === '\\'') {\n      index++;\n      continue;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === '\\'') {\n     \
    \ index++;\n      continue;\n    }\n    if (char === '\\'') {\n      index++;\n\
    \      continue;\n    }\n    if (char === '\\'') {\n      index++;\n      continue;\n\
    \    }\n    if (char === '\\'') {\n      index++;\n      continue;\n    }\n  \
    \  if (char === '\\'') {\n      index++;\n      continue;\n    }\n    if (char\
    \ === '\\'') {\n      index++;\n      continue;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === '\\'') {\n     \
    \ index++;\n      continue;\n    }\n    if (char === '\\'') {\n      index++;\n\
    \      continue;\n    }\n    if (char === '\\'') {\n      index++;\n      continue;\n\
    \    }\n    if (char === '\\'') {\n      index++;\n      continue;\n    }\n  \
    \  if (char === '\\'') {\n      index++;\n      continue;\n    }\n    if (char\
    \ === '\\'') {\n      index++;\n      continue;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n      continue;\n    }\n    if (char === '\\\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm2mjhal0.ts(146,26): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpm2mjhal0.ts(147,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpm2mjhal0.ts(161,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let last: number\
    \ = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n    \
    \  words.push(s.substring(last, i));\n      last = i + 1;\n    }\n  }\n  return\
    \ words.filter(w => w.length == n);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ry h'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1jt8g55a.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1jt8g55a.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ry h' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length\
    \ && count < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index]\
    \ === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            result.push(s[index]);\n\
    \            index++;\n            count++;\n        }\n        index++;\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmptufjli7g.js:34:12)\n    at Object.<anonymous> (/tmp/tmptufjli7g.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && words.length\
    \ < n) {\n\t\tlet char = s[index];\n\t\tif (char.match(/[aeiou]/)) {\n\t\t\twords.push(char);\n\
    \t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpps2il9m4.js:32:12)\n    at Object.<anonymous> (/tmp/tmpps2il9m4.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n\
    \    if (char === \" \") {\n      continue;\n    }\n    \n    let count = 0;\n\
    \    for (let j = 0; j < char.length; j++) {\n      if (char[j] === \" \") {\n\
    \        continue;\n      }\n      \n      if (char[j] === \"a\" || char[j] ===\
    \ \"e\" || char[j] === \"i\" || char[j] === \"o\" || char[j] === \"u\") {\n  \
    \      count++;\n      }\n    }\n    \n    if (count === n) {\n      words.push(s.substr(0,\
    \ i));\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsh97j8il.js:42:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpsh97j8il.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  for\
    \ (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === ' ') {\n      continue;\n\
    \    }\n    \n    let consonants = count_consonants(s.charAt(i));\n    \n    if\
    \ (consonants === n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  \n  return\
    \ words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp43c2j_0b.ts(29,22): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  let\
    \ vowels = \"aeiou\";\n  \n  for(let i = 0; i < s.length; i += 1) {\n    let c\
    \ = s[i];\n    \n    if(vowels.indexOf(c) > -1) {\n      continue;\n    }\n  \
    \  \n    let count = 0;\n    \n    for(let j = 0; j < n; j += 1) {\n      if(s.charAt(i\
    \ + j) !== c) {\n        count += 1;\n      }\n    }\n    \n    if(count === n)\
    \ {\n      words.push(s.substring(i, i + n));\n    }\n  }\n  \n  return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2ybn9p8m.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp2ybn9p8m.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n  \
    \  if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index] === \" \"\
    \ || s[index] === \".\" || s[index] === \"?\") {\n      index++;\n    }\n    if\
    \ (s[index] === \".\" || s[index] === \"?\") {\n      index++;\n    }\n    if\
    \ (s[index] === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n\
    \      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n    }\n\
    \    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index] === \"\
    \ \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \    }\n    if (s[index] === \" \") {\n      index++;\n    }\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd3iodtw4.ts(157,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const result:\
    \ string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n\
    \    if (char === ' ') {\n      result.push(s[i]);\n      continue;\n    }\n \
    \   for (let j = 0; j < n; j++) {\n      if (char === s[j]) {\n        result.push(s[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ',\n  'a',\n  ' ',\n  'a',\n  ' ',\n  ' ',\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpj1vmhehf.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj1vmhehf.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', 'r', 'y',\n    ' ', 'a', ' ', 'a',\n    ' ', ' ', 'a'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n\n  const result: Array<string> = [];\n  const\
    \ vowels: Array<string> = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const consonants:\
    \ Array<string> = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n\
    \    if (vowels.indexOf(char) >= 0) {\n      continue;\n    }\n\n    for (let\
    \ j = 0; j < consonants.length; j++) {\n      if (consonants[j] === char) {\n\
    \        result.push(s.substr(0, i) + s.substr(i + 1, s.length));\n        break;\n\
    \      }\n    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'May had\
    \ a little lamb',\n  'Mar had a little lamb',\n  'Mary ad a little lamb',\n  'Mary\
    \ ha a little lamb',\n  'Mary had a ittle lamb',\n  'Mary had a litle lamb',\n\
    \  'Mary had a litle lamb',\n  'Mary had a litte lamb',\n  'Mary had a little\
    \ amb',\n  'Mary had a little lab',\n  'Mary had a little lam'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbcxcy94_.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpbcxcy94_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'May\
    \ had a little lamb',\n    'Mar had a little lamb',\n    'Mary ad a little lamb',\n\
    \    'Mary ha a little lamb',\n    'Mary had a ittle lamb',\n    'Mary had a litle\
    \ lamb',\n    'Mary had a litle lamb',\n    'Mary had a litte lamb',\n    'Mary\
    \ had a little amb',\n    'Mary had a little lab',\n    'Mary had a little lam'\n\
    \  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index + 1);\n    if (word.length == n) {\n      result.push(word);\n\
    \    }\n    index += 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk71kj1uf.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpk71kj1uf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n\
    \        if (s[index] === \" \") {\n            words.push(s.substr(index, index\
    \ + 1));\n            index += 1;\n        }\n        else if (s[index] === \"\
    .\" || s[index] === \"!\" || s[index] === \"?\") {\n            index += 1;\n\
    \        }\n        else if (s[index] === \",\" || s[index] === \"?\" || s[index]\
    \ === \"!\") {\n            index += 1;\n        }\n        else if (s[index]\
    \ === \" \") {\n            index += 1;\n        }\n        else if (s[index]\
    \ === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n            index\
    \ += 1;\n        }\n        else if (s[index] === \",\" || s[index] === \"?\"\
    \ || s[index] === \"!\") {\n            index += 1;\n        }\n        else if\
    \ (s[index] === \" \") {\n            index += 1;\n        }\n        else if\
    \ (s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n       \
    \     index += 1;\n        }\n        else if (s[index] === \",\" || s[index]\
    \ === \"?\" || s[index] === \"!\") {\n            index += 1;\n        }\n   \
    \     else if (s[index] === \" \") {\n            index += 1;\n        }\n   \
    \     else if (s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n            index += 1;\n        }\n        else if (s[index] === \",\" ||\
    \ s[index] === \"?\" || s[index] === \"!\") {\n            index += 1;\n     \
    \   }\n        else if (s[index] === \" \") {\n            index += 1;\n     \
    \   }\n        else if (s[index] === \".\" || s[index] === \"!\" || s[index] ===\
    \ \"?\") {\n            index += 1;\n        }\n        else if (s[index] ===\
    \ \",\" || s[index] === \"?\" || s[index] === \"!\") {\n            index += 1;\n\
    \        }\n        else if (s[index] === \" \") {\n            index += 1;\n\
    \        }\n        else if (s[index] === \".\" || s[index] === \"!\" || s[index]\
    \ === \"?\") {\n            index += 1;\n        }\n        else if (s[index]\
    \ === \",\" || s[index] === \"?\" || s[index] === \"!\") {\n            index\
    \ += 1;\n        }\n        else if (s[index] === \" \") {\n            index\
    \ += 1;\n        }\n        else if (s[index] === \".\" || s[index] === \"!\"\
    \ || s[index] === \"?\") {\n            index += 1;\n        }\n        else if\
    \ (s[index] === \",\" || s[index] === \"?\" || s[index] === \"!\") {\n       \
    \     index += 1;\n        }\n        else if (s[index] === \" \") {\n       \
    \     index += 1;\n        }\n        else if (s[index] === \".\" || s[index]\
    \ === \"!\" || s[index] === \"?\") {\n            index += 1;\n        }\n   \
    \     else if (s[index] === \",\" || s[index] === \"?\" || s[index] === \"!\"\
    ) {\n            index += 1;\n        }\n        else if (s[index] === \" \")\
    \ {\n            index += 1;\n        }\n        else if (s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n            index += 1;\n     \
    \   }\n        else if (s[index\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpykzfkr45.ts(101,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmpykzfkr45.ts(116,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n\
    \    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp4ko9hrmj.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ko9hrmj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n\n  const result: string[] = [];\n  let index\
    \ = 0;\n  let count = 0;\n  while (index < s.length) {\n    const char = s[index];\n\
    \    if (char === ' ') {\n      count++;\n      if (count === n) {\n        result.push(s.substring(index,\
    \ index + 1));\n      }\n      index++;\n      count = 0;\n    } else {\n    \
    \  count++;\n    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805154
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s.charAt(index);\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\"\
    ) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8w74t2od.ts(163,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805138
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let letter\
    \ = s[index];\n    if (letter === ' ') {\n      words.push(s.slice(index, index\
    \ + 1));\n      index++;\n    }\n    if (letter === 'a' || letter === 'e' || letter\
    \ === 'i' || letter === 'o' || letter === 'u') {\n      index++;\n    }\n    if\
    \ (letter === 'y') {\n      index++;\n    }\n    if (letter === 'h') {\n     \
    \ index++;\n    }\n    if (letter === 'l') {\n      index++;\n    }\n    if (letter\
    \ === 'l') {\n      index++;\n    }\n    if (letter === 'a') {\n      index++;\n\
    \    }\n    if (letter === 'm') {\n      index++;\n    }\n    if (letter === 'a')\
    \ {\n      index++;\n    }\n    if (letter === 'y') {\n      index++;\n    }\n\
    \    if (letter === 'd') {\n      index++;\n    }\n    if (letter === 'e') {\n\
    \      index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n   \
    \ if (letter === 's') {\n      index++;\n    }\n    if (letter === 's') {\n  \
    \    index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n    if\
    \ (letter === 's') {\n      index++;\n    }\n    if (letter === 's') {\n     \
    \ index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n    if (letter\
    \ === 's') {\n      index++;\n    }\n    if (letter === 's') {\n      index++;\n\
    \    }\n    if (letter === 's') {\n      index++;\n    }\n    if (letter === 's')\
    \ {\n      index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n\
    \    if (letter === 's') {\n      index++;\n    }\n    if (letter === 's') {\n\
    \      index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n   \
    \ if (letter === 's') {\n      index++;\n    }\n    if (letter === 's') {\n  \
    \    index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n    if\
    \ (letter === 's') {\n      index++;\n    }\n    if (letter === 's') {\n     \
    \ index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n    if (letter\
    \ === 's') {\n      index++;\n    }\n    if (letter === 's') {\n      index++;\n\
    \    }\n    if (letter === 's') {\n      index++;\n    }\n    if (letter === 's')\
    \ {\n      index++;\n    }\n    if (letter === 's') {\n      index++;\n    }\n\
    \    if (letter === 's') {\n      index++;\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbvyqkusz.ts(154,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805138
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"\
    o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"t\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\"\
    ) {\n      index++;\n      continue;\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpivvjjgjl.ts(164,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\tlet currentChar = s[0];\n\tlet currentCount\
    \ = 0;\n\tlet currentWord = \"\";\n\twhile (index < s.length) {\n\t\tif (currentChar\
    \ == s[index]) {\n\t\t\tcurrentCount++;\n\t\t\tif (currentCount == n) {\n\t\t\t\
    \tresult.push(currentWord);\n\t\t\t\tcurrentCount = 0;\n\t\t\t\tcurrentWord =\
    \ \"\";\n\t\t\t} else {\n\t\t\t\tcurrentChar = s[index];\n\t\t\t\tcurrentCount\
    \ = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentChar = s[index];\n\t\t\tcurrentCount\
    \ = 0;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpodb613wj.js:47:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpodb613wj.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s ==\
    \ \"\") {\n    return [];\n  }\n  const words: string[] = [];\n  for (let i =\
    \ 0; i < s.length; i++) {\n    const char = s[i];\n    if (char === \" \") {\n\
    \      continue;\n    }\n    const index = char.charCodeAt(0);\n    if (index\
    \ >= 65 && index <= 90) {\n      continue;\n    }\n    if (index >= 97 && index\
    \ <= 122) {\n      continue;\n    }\n    words.push(char);\n  }\n  return words.filter((word)\
    \ => word.length == n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvbawuvuf.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpvbawuvuf.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex += word.length + 1;\n\t\t}\n\
    \t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp0w2spjdj.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0w2spjdj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmphapgl65d.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphapgl65d.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    let chars = s.split('');\n    while\
    \ (chars.length > 0) {\n        if (chars.every(c => c === 'a')) {\n         \
    \   result.push(chars.splice(index, 1).join(''));\n            index += 1;\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805155
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words:\
    \ string[] = [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  const\
    \ vowels = \"aeiou\";\n  \n  for (let i = 0; i < s.length; i += 1) {\n    const\
    \ char = s[i];\n    \n    if (vowels.indexOf(char) !== -1) {\n      continue;\n\
    \    }\n    \n    if (words.length === 0) {\n      words.push(char);\n    }\n\
    \    \n    if (words.length === n) {\n      words.push(char);\n    }\n    \n \
    \   if (char === \" \") {\n      continue;\n    }\n    \n    if (char === \"a\"\
    \ || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n\
    \      continue;\n    }\n    \n    if (char === \"y\") {\n      continue;\n  \
    \  }\n    \n    if (char === \"h\") {\n      continue;\n    }\n    \n    if (char\
    \ === \"l\") {\n      continue;\n    }\n    \n    if (char === \"m\") {\n    \
    \  continue;\n    }\n    \n    if (char === \"n\") {\n      continue;\n    }\n\
    \    \n    if (char === \"p\") {\n      continue;\n    }\n    \n    if (char ===\
    \ \"r\") {\n      continue;\n    }\n    \n    if (char === \"s\") {\n      continue;\n\
    \    }\n    \n    if (char === \"t\") {\n      continue;\n    }\n    \n    if\
    \ (char === \"v\") {\n      continue;\n    }\n    \n    if (char === \"z\") {\n\
    \      continue;\n    }\n    \n    if (char === \"w\") {\n      continue;\n  \
    \  }\n    \n    if (char === \"x\") {\n      continue;\n    }\n    \n    if (char\
    \ === \"z\") {\n      continue;\n    }\n    \n    if (char === \"y\") {\n    \
    \  continue;\n    }\n    \n    if (char === \"a\") {\n      continue;\n    }\n\
    \    \n    if (char === \"e\") {\n      continue;\n    }\n    \n    if (char ===\
    \ \"i\") {\n      continue;\n    }\n    \n    if (char === \"o\") {\n      continue;\n\
    \    }\n    \n    if (char === \"u\") {\n      continue;\n    }\n    \n    if\
    \ (char === \"y\") {\n      continue;\n    }\n    \n    if (char === \"h\") {\n\
    \      continue;\n    }\n    \n    if (char === \"l\") {\n      continue;\n  \
    \  }\n    \n    if (char === \"m\") {\n      continue;\n    }\n    \n    if (char\
    \ === \"n\") {\n      continue;\n    }\n    \n    if (char === \"p\") {\n    \
    \  continue;\n    }\n    \n    if (char === \"r\") {\n      continue;\n    }\n\
    \    \n    if (char === \"s\") {\n      continue;\n    }\n    \n    if (char ===\
    \ \"t\") {\n      continue;\n    }\n    \n    if (char === \"v\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshvgum2z.ts(165,20): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpshvgum2z.ts(166,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpshvgum2z.ts(181,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805140
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    if (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"a\" || s[index] === \"e\" || s[index]\
    \ === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === \"h\" || s[index] === \"o\" || s[index] === \"w\"\
    \ || s[index] === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"r\" || s[index] === \"l\" || s[index] === \"d\" || s[index] === \"s\"\
    \ || s[index] === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"c\" || s[index] === \"k\" || s[index] === \"m\" || s[index] === \"p\"\
    \ || s[index] === \"v\" || s[index] === \"b\" || s[index] === \"n\" || s[index]\
    \ === \"k\" || s[index] === \"m\" || s[index] === \"p\" || s[index] === \"v\"\
    \ || s[index] === \"b\" || s[index] === \"n\" || s[index] === \"k\" || s[index]\
    \ === \"m\" || s[index] === \"p\" || s[index] === \"v\" || s[index] === \"b\"\
    \ || s[index] === \"n\" || s[index] === \"k\" || s[index] === \"m\" || s[index]\
    \ === \"p\" || s[index] === \"v\" || s[index] === \"b\" || s[index] === \"n\"\
    \ || s[index] === \"k\" || s[index] === \"m\" || s[index] === \"p\" || s[index]\
    \ === \"v\" || s[index] === \"b\" || s[index] === \"n\" || s[index] === \"k\"\
    \ || s[index] === \"m\" || s[index] === \"p\" || s[index] === \"v\" || s[index]\
    \ === \"b\" || s[index] === \"n\" || s[index] === \"k\" || s[index] === \"m\"\
    \ || s[index] === \"p\" || s[index] === \"v\" || s[index] === \"b\" || s[index]\
    \ === \"n\" || s[index] === \"k\" || s[index] === \"m\" || s[index] === \"p\"\
    \ || s[index] === \"v\" || s[index] === \"b\" || s[index] === \"n\" || s[index]\
    \ === \"k\" || s[index] === \"m\" || s[index] === \"p\" || s[index] === \"v\"\
    \ || s[index] === \"b\" || s[index] === \"n\" || s[index] === \"k\" || s[index]\
    \ === \"m\" || s[index] === \"p\" || s[index] === \"v\" || s[index] === \"b\"\
    \ || s[index] === \"n\" || s[index] === \"k\" || s[index] === \"m\" || s[index]\
    \ === \"p\" || s[index] === \"v\" || s[index] === \"b\" || s[index] \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzsj191pu.ts(46,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpzsj191pu.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805140
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index + 1);\n    if (word.length == n) {\n      words.push(word);\n\
    \    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm8a66i5e.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpm8a66i5e.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index\
    \ < s.length) {\n        if (s[index] === \" \") {\n            words.push(currentWord);\n\
    \            currentWord = \"\";\n            index++;\n        } else {\n   \
    \         currentWord += s[index];\n            index++;\n        }\n        if\
    \ (index === n) {\n            words.push(currentWord);\n            index++;\n\
    \        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Maryhad',\n  'a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpoe1axk8a.js:41:12)\n    at Object.<anonymous> (/tmp/tmpoe1axk8a.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Maryhad', 'a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && words.length\
    \ < n) {\n    if (s[index] === \" \") {\n      index++;\n    } else {\n      words.push(s[index]);\n\
    \      index++;\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpjjidk0cp.js:34:12)\n    at Object.<anonymous> (/tmp/tmpjjidk0cp.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmphapgl65d.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphapgl65d.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length)\
    \ {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\twords.push(s.substr(index,\
    \ count + 1));\n\t\t\tindex += count + 1;\n\t\t\tcount = 0;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"y\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"n\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"\
    h\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\
    \t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex\
    \ += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex += 1;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (char === \"a\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"t\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"\
    a\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\
    \t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"g\") {\n\t\t\tindex\
    \ += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex += 1;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"r\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (char === \"s\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"s\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"\
    p\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex\
    \ += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex += 1;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (char === \"h\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"u\") {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"\
    l\") {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnmuqqdte.ts(153,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    let chars = s.split(\"\");\n    chars.forEach((char)\
    \ => {\n        if (char.match(/[aeiou]/i)) {\n            if (index == n) {\n\
    \                result.push(char);\n            }\n            index++;\n   \
    \     }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'e'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdj9gd2us.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdj9gd2us.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'e' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    let currentWord\
    \ = \"\";\n    while (index < s.length) {\n        if (s[index] === \" \") {\n\
    \            currentWord = currentWord.trim();\n            if (currentWord.length\
    \ > n) {\n                words.push(currentWord);\n                currentWord\
    \ = \"\";\n            }\n            count++;\n        } else {\n           \
    \ currentWord += s[index];\n        }\n        index++;\n    }\n    if (currentWord.length\
    \ > 0) {\n        words.push(currentWord);\n    }\n    return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Maryhad',\n\
    \  'alittle',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmp9m3eecjv.js:44:12)\n    at Object.<anonymous> (/tmp/tmp9m3eecjv.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Maryhad',\
    \ 'alittle', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ == 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n\
    \  while (index < s.length) {\n    let word = s.substring(index, index + 1);\n\
    \    if (word.length == n) {\n      words.push(word);\n    }\n    index += 1;\n\
    \  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqop_kieu.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpqop_kieu.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    const word\
    \ = s.substring(index, index + 1);\n    if (word.length == n) {\n      words.push(word);\n\
    \    }\n    index += 1;\n  }\n  return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpg0eot6pr.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpg0eot6pr.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n\
    \      index += n;\n    } else {\n      index += word.length;\n    }\n  }\n  return\
    \ words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpp6ogcg5s.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp6ogcg5s.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)\
    \ == \" \") {\n      continue;\n    }\n    \n    let consonants = count_consonants(s.charAt(i));\n\
    \    \n    if (consonants == n) {\n      words.push(s.substr(0, i));\n    }\n\
    \  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpti0xui0b.ts(25,22): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char =\
    \ s[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpiiazh9gj.js:30:12)\n    at Object.<anonymous> (/tmp/tmpiiazh9gj.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index\
    \ < s.length) {\n        let char = s[index];\n        if (char === \" \") {\n\
    \            if (currentWord.length > 0) {\n                words.push(currentWord);\n\
    \                currentWord = \"\";\n            }\n        } else {\n      \
    \      if (currentWord.length + 1 === n) {\n                words.push(currentWord);\n\
    \                currentWord = \"\";\n            } else {\n                currentWord\
    \ += char;\n            }\n        }\n        index++;\n    }\n    if (currentWord.length\
    \ > 0) {\n        words.push(currentWord);\n    }\n    return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mar',\n\
    \  'had',\n  'a',\n  'lit',\n  'le',\n  'lam'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp2k42hago.js:48:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2k42hago.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mar', 'had',\
    \ 'a', 'lit', 'le', 'lam' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet letter\
    \ = s[index];\n\t\tif (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (letter === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (letter === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter\
    \ === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"\
    t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"h\") {\n\t\
    \t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"r\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (letter === \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (letter === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter\
    \ === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"\
    x\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"m\") {\n\t\
    \t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"a\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"g\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (letter === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (letter === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter\
    \ === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"\
    h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"u\") {\n\t\
    \t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"n\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (letter === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (letter === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter\
    \ === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"\
    i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"o\") {\n\t\
    \t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"u\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (letter === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif (letter === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter\
    \ === \"o\") {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnp4oi7w2.ts(163,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length\
    \ && count < n) {\n        if (s[index] === \" \") {\n            count++;\n \
    \       }\n        else {\n            if (s[index] === \" \") {\n           \
    \     count++;\n            }\n            else {\n                if (s[index]\
    \ === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\"\
    \ || s[index] === \"u\") {\n                    count++;\n                }\n\
    \                else {\n                    result.push(s[index]);\n        \
    \            count++;\n                }\n            }\n        }\n        index++;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n\
    \  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphq5kzlgj.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmphq5kzlgj.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r',\
    \ 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  for (let i =\
    \ 0; i < s.length; i++) {\n    const char = s[i];\n    if (char.match(/[aeiou]/i))\
    \ {\n      continue;\n    }\n    if (words.length >= n) {\n      break;\n    }\n\
    \    words.push(char);\n  }\n  return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n\
    \  'y',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpo1cbqugz.js:37:12)\n    at Object.<anonymous> (/tmp/tmpo1cbqugz.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r',\
    \ 'y', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if (s.length === 0) {\n    return result;\n  }\n  \n \
    \ let vowels = \"aeiou\";\n  let consonants = \"bcdfghjklmnpqrstvwxyz\";\n  \n\
    \  for (let i = 0; i < s.length; i += 1) {\n    let char = s[i];\n    \n    if\
    \ (vowels.indexOf(char) !== -1) {\n      continue;\n    }\n    \n    if (consonants.indexOf(char)\
    \ !== -1) {\n      if (result.length >= n) {\n        break;\n      }\n      \n\
    \      result.push(char);\n    }\n  }\n  \n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n\
    \  'h',\n  'd'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpfzm_yky8.js:41:12)\n    at Object.<anonymous> (/tmp/tmpfzm_yky8.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'r', 'y',\
    \ 'h', 'd' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char =\
    \ s[i];\n        if (char.match(/[aeiou]/)) {\n            words.push(char);\n\
    \        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp9unl2ikx.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9unl2ikx.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805136
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length\
    \ && count < n) {\n        if (s[index] === \" \") {\n            count++;\n \
    \       } else {\n            if (s[index] === \" \") {\n                count++;\n\
    \            } else {\n                if (s[index] === \" \") {\n           \
    \         count++;\n                } else {\n                    if (s[index]\
    \ === \" \") {\n                        count++;\n                    } else {\n\
    \                        if (s[index] === \" \") {\n                         \
    \   count++;\n                        } else {\n                            if\
    \ (s[index] === \" \") {\n                                count++;\n         \
    \                   } else {\n                                if (s[index] ===\
    \ \" \") {\n                                    count++;\n                   \
    \             } else {\n                                    if (s[index] === \"\
    \ \") {\n                                        count++;\n                  \
    \                  } else {\n                                        if (s[index]\
    \ === \" \") {\n                                            count++;\n       \
    \                                 } else {\n                                 \
    \           if (s[index] === \" \") {\n                                      \
    \          count++;\n                                            } else {\n  \
    \                                              if (s[index] === \" \") {\n   \
    \                                                 count++;\n                 \
    \                               } else {\n                                   \
    \                 if (s[index] === \" \") {\n                                \
    \                        count++;\n                                          \
    \          } else {\n                                                        if\
    \ (s[index] === \" \") {\n                                                   \
    \         count++;\n                                                        }\
    \ else {\n                                                            if (s[index]\
    \ === \" \") {\n                                                             \
    \   count++;\n                                                            } else\
    \ {\n                                                                if (s[index]\
    \ === \" \") {\n                                                             \
    \       count++;\n                                                           \
    \     } else {\n                                                             \
    \       if (s[index] === \" \") {\n                                          \
    \                              count++;\n                                    \
    \                                } else {\n                                  \
    \                                      if (s[index] === \" \") {\n           \
    \                                                                 count++;\n \
    \                                                                       } else\
    \ {\n                                                                        \
    \    if (s[index] === \" \") {\n                                             \
    \                                   count++;\n                               \
    \                                             } else {\n                     \
    \                                                           if (s[index] === \"\
    \ \") {\n                                                                    \
    \                count++;\n                                                  \
    \                              } else {\n                                    \
    \                                                if (s[index] === \" \") {\n \
    \                                                                            \
    \           count++;\n                                                       \
    \                             } else {\n                                     \
    \                                                   if (s[index] === \" \") {\n\
    \                                                                            \
    \                count++;\n                                                  \
    \                                      } else {\n                            \
    \                                                                if (s[index]\
    \ === \" \") {\n                                                             \
    \                                   count++;\n                               \
    \                                                             } else {\n     \
    \                                                                            \
    \               if (s[index] === \" \") {\n                                  \
    \                                                                  count++;\n\
    \                                                                            \
    \                    } else {\n                                              \
    \                                                      if (s[index] === \" \"\
    ) {\n                                                                        \
    \                                count++;\n                                  \
    \                                                                  } else {\n\
    \                                                                            \
    \                            if (s[index] === \" \") {\n                     \
    \                                                                            \
    \           count++;\n                                                       \
    \                                                 } else {\n                 \
    \                                                                            \
    \               if (s[index] === \" \") {\n                                  \
    \                                                                            \
    \  count++;\n                                                                \
    \                                            } else {\n                      \
    \                                                                            \
    \              if (s[index] === \" \") {\n                                   \
    \                                                                            \
    \     count++;\n                                                             \
    \                                                   } else {\n               \
    \                                                                            \
    \                         if (s[index] === \" \") {\n                        \
    \                                                                            \
    \                    count++;\n                                              \
    \                                                                      } else\
    \ {\n                                                                        \
    \                                                if (s[index] === \" \") {\n \
    \                                                                            \
    \                                               count++;\n                   \
    \                                                                            \
    \                         } else {\n                                         \
    \                                                                            \
    \       if (s[index] === \" \") {\n                                          \
    \                                                                            \
    \          count++;\n                                                        \
    \                                                                    } else {\n\
    \                                                                            \
    \                                                    if (s[index] === \" \") {\n\
    \                                                                            \
    \                                                        count++;\n          \
    \                                                                            \
    \                                          } else {\n                        \
    \                                                                            \
    \                                if (s[index] === \" \") {\n                 \
    \                                                                            \
    \                                           count++;\n                       \
    \                                                                            \
    \                                 } else {\n                                 \
    \                               \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzbp1d8m8.ts(134,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  let words: string[] = [];\n  for (let i = 0;\
    \ i < s.length; i++) {\n    let char = s[i];\n    if (char === \" \") {\n    \
    \  continue;\n    }\n    let count = 0;\n    for (let j = i; j < s.length; j++)\
    \ {\n      if (s[j] === char) {\n        count++;\n        if (count === n) {\n\
    \          words.push(s.slice(i, j + 1));\n        }\n        break;\n      }\n\
    \    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkrq4_iy1.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpkrq4_iy1.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  const vowels\
    \ = \"aeiou\";\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  const vowel_counter:\
    \ number[] = [];\n  const consonant_counter: number[] = [];\n  let index = 0;\n\
    \  while (index < s.length) {\n    const char = s[index];\n    if (vowels.indexOf(char)\
    \ !== -1) {\n      vowel_counter.push(vowels.indexOf(char));\n    }\n    if (consonants.indexOf(char)\
    \ !== -1) {\n      consonant_counter.push(consonants.indexOf(char));\n    }\n\
    \    index++;\n  }\n  for (let i = 0; i < vowel_counter.length; i++) {\n    if\
    \ (vowel_counter[i] === n) {\n      words.push(s.substring(index, index + n));\n\
    \    }\n  }\n  for (let i = 0; i < consonant_counter.length; i++) {\n    if (consonant_counter[i]\
    \ === n) {\n      words.push(s.substring(index, index + n));\n    }\n  }\n  return\
    \ words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp0ucqomgc.js:52:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp0ucqomgc.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length)\
    \ {\n        let char = s[index];\n        if (char === \" \") {\n           \
    \ words.push(s.substr(index, count + 1));\n            index = index + count +\
    \ 1;\n            count = 0;\n        } else if (char === \"a\" || char === \"\
    e\" || char === \"i\" || char === \"o\" || char === \"u\" || char === \"y\") {\n\
    \            index = index + 1;\n            count = count + 1;\n        } else\
    \ {\n            index = index + 1;\n            count = 0;\n        }\n    }\n\
    \    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' h',\n \
    \ ' ',\n  ' l',\n  ' l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmp47hef3cr.js:42:12)\n    at Object.<anonymous> (/tmp/tmp47hef3cr.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' h', '\
    \ ', ' l', ' l' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805143
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const result: any = [];\n  let i = 0;\n  while\
    \ (i < s.length) {\n    const char = s[i];\n    if (char === ' ' || char === '\\\
    n') {\n      i++;\n      continue;\n    }\n    if (char === 'a') {\n      if (n\
    \ === 1) {\n        result.push(s.substr(i, s.length));\n      }\n      i += 2;\n\
    \      continue;\n    }\n    if (char === 'e') {\n      if (n === 2) {\n     \
    \   result.push(s.substr(i, s.length));\n      }\n      i += 2;\n      continue;\n\
    \    }\n    if (char === 'i') {\n      if (n === 3) {\n        result.push(s.substr(i,\
    \ s.length));\n      }\n      i += 2;\n      continue;\n    }\n    if (char ===\
    \ 'o') {\n      if (n === 3) {\n        result.push(s.substr(i, s.length));\n\
    \      }\n      i += 2;\n      continue;\n    }\n    if (char === 'u') {\n   \
    \   if (n === 3) {\n        result.push(s.substr(i, s.length));\n      }\n   \
    \   i += 2;\n      continue;\n    }\n    if (char === 'y') {\n      if (n ===\
    \ 3) {\n        result.push(s.substr(i, s.length));\n      }\n      i += 2;\n\
    \      continue;\n    }\n    if (char === 'A') {\n      if (n === 1) {\n     \
    \   result.push(s.substr(i, s.length));\n      }\n      i += 2;\n      continue;\n\
    \    }\n    if (char === 'E') {\n      if (n === 2) {\n        result.push(s.substr(i,\
    \ s.length));\n      }\n      i += 2;\n      continue;\n    }\n    if (char ===\
    \ 'I') {\n      if (n === 3) {\n        result.push(s.substr(i, s.length));\n\
    \      }\n      i += 2;\n      continue;\n    }\n    if (char === 'O') {\n   \
    \   if (n === 3) {\n        result.push(s.substr(i, s.length));\n      }\n   \
    \   i += 2;\n      continue;\n    }\n    if (char === 'U') {\n      if (n ===\
    \ 3) {\n        result.push(s.substr(i, s.length));\n      }\n      i += 2;\n\
    \      continue;\n    }\n    if (char === 'Y') {\n      if (n === 3) {\n     \
    \   result.push(s.substr(i, s.length));\n      }\n      i += 2;\n      continue;\n\
    \    }\n    if (char === 'a') {\n      if (n === 1) {\n        result.push(s.substr(i,\
    \ s.length));\n      }\n      i += 2;\n      continue;\n    }\n    if (char ===\
    \ 'e') {\n      if (n === 2) {\n        result.push(s.substr(i, s.length));\n\
    \      }\n      i += 2;\n      continue;\n    }\n    if (char === 'i') {\n   \
    \   if (n === 3) {\n        result.push(s.substr(i, s.length));\n      }\n   \
    \   i += 2;\n      continue;\n    }\n    if (char === 'o') {\n      if (n ===\
    \ 3) {\n        result.push(s.substr(i, s.length));\n      }\n      \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp01d_ti9d.ts(154,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ == 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n\
    \  while (index < s.length) {\n    let word = s.substring(index, index + 1);\n\
    \    if (word.length == n) {\n      words.push(word);\n    }\n    index += 1;\n\
    \  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqop_kieu.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpqop_kieu.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805141
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  if (s.length === 0) {\n    return words;\n  }\n  let word\
    \ = \"\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]\
    \ === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] ===\
    \ \"u\") {\n      count++;\n      if (count === n) {\n        words.push(word);\n\
    \        word = \"\";\n        count = 0;\n      }\n    } else {\n      word +=\
    \ s[i];\n    }\n  }\n  words.push(word);\n  return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mry hd \
    \ l',\n  'ttl lmb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpd6i0a913.js:43:12)\n    at Object.<anonymous> (/tmp/tmpd6i0a913.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mry hd\
    \  l', 'ttl lmb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n\
    \    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp4ko9hrmj.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ko9hrmj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)\
    \ == \" \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n\
    \    }\n  }\n  words.push(s);\n  return words.filter(w => w.split(\"\").filter(c\
    \ => c != \" \").length == n);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n  \
    \  at test (/tmp/tmpxx0eke1k.js:31:12)\n    at Object.<anonymous> (/tmp/tmpxx0eke1k.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  let\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  \n  for (let\
    \ i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (consonants.indexOf(c)\
    \ > -1) {\n      continue;\n    }\n    \n    let count = 0;\n    for (let j =\
    \ 0; j < n; j++) {\n      if (s.charAt(i + j) !== c) {\n        count += 1;\n\
    \      }\n    }\n    \n    if (count === n) {\n      words.push(s.substr(i, i\
    \ + n));\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm9g2hoc1.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpm9g2hoc1.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s.charAt(index)\
    \ == ' ') {\n      index++;\n      continue;\n    }\n    let count = 0;\n    let\
    \ lastIndex = index;\n    while (lastIndex < s.length && s.charAt(lastIndex) ==\
    \ s.charAt(index)) {\n      count++;\n      lastIndex++;\n    }\n    if (count\
    \ == n) {\n      result.push(s.substring(index, lastIndex));\n      index = lastIndex;\n\
    \    }\n    index++;\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8j_vlipp.js:42:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp8j_vlipp.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpvwelm5yi.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvwelm5yi.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index + 1);\n    if (word.length == n) {\n      result.push(word);\n\
    \    }\n    index += 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk71kj1uf.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpk71kj1uf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index + 1);\n    if (word.length == n) {\n      result.push(word);\n\
    \    }\n    index += 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk71kj1uf.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpk71kj1uf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805138
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s.charAt(index)\
    \ == ' ') {\n      index++;\n    } else {\n      let letter = s.charAt(index);\n\
    \      if (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' || letter == 'y') {\n        index++;\n      } else {\n      \
    \  if (words.length < n) {\n          words.push(s.substring(index, index + 1));\n\
    \        }\n        index++;\n      }\n    }\n  }\n  return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n\
    \  'h',\n  'd'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp13xbzyb4.js:42:12)\n    at Object.<anonymous> (/tmp/tmp13xbzyb4.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r',\
    \ 'h', 'd' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet word = \"\";\n\tlet count = 0;\n\tfor (let i = 0; i <\
    \ s.length; i++) {\n\t\tif (s[i] !== \" \") {\n\t\t\tword += s[i];\n\t\t} else\
    \ {\n\t\t\tif (word.length > 0) {\n\t\t\t\twords.push(word);\n\t\t\t\tword = \"\
    \";\n\t\t\t}\n\t\t\tif (count === n) {\n\t\t\t\twords.push(word);\n\t\t\t\tcount\
    \ = 0;\n\t\t\t}\n\t\t}\n\t\tcount++;\n\t}\n\tif (word.length > 0) {\n\t\twords.push(word);\n\
    \t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  '',\n  'had',\n  '',\n  'a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp4gitfq53.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4gitfq53.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ '', 'had', '', 'a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet letter\
    \ = s.charAt(index);\n\t\tif (letter == \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tlet count = 0;\n\t\twhile (index < s.length && s.charAt(index) == letter)\
    \ {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (count == n) {\n\t\t\twords.push(s.substr(0,\
    \ index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjck570w3.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpjck570w3.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && index < n)\
    \ {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\"\
    \ || s[index] === \"o\" || s[index] === \"u\") {\n            result.push(s[index]);\n\
    \        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9f29xiac.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9f29xiac.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"\
    o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\"\
    ) {\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa8etu87z.ts(147,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  for (let i =\
    \ 0; i < s.length; i++) {\n    const char = s[i];\n    if (char === ' ') {\n \
    \     continue;\n    }\n    for (let j = 0; j < n; j++) {\n      if (char ===\
    \ s[j]) {\n        words.push(s.substr(0, i));\n        break;\n      }\n    }\n\
    \  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'M',\n\
    \  'Ma',\n  'Mar',\n  'Mary h',\n  'Mary had ',\n  'Mary had a little l'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpl3gznz6j.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl3gznz6j.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\n\
    \    'M',\n    'Ma',\n    'Mar',\n    'Mary h',\n    'Mary had ',\n    'Mary had\
    \ a little l'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && index < n) {\n\
    \    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === '.') {\n      index++;\n      continue;\n    }\n    if (s[index] === '?')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === '!') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === '-') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === '\"') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === '(') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === ')') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === '[') {\n      index++;\n      continue;\n    }\n    if (s[index] === ']')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === '{') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === '}') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === ',') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === '-') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === '.') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === '\"') {\n      index++;\n      continue;\n    }\n    if (s[index] === '(')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === ')') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === '[') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === ']') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === '{') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === '}') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === ',') {\n      index++;\n      continue;\n    }\n    if (s[index] === '-')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === '.') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === '\"') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === '(') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === ')') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === '[') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === ']') {\n      index++;\n      continue;\n    }\n    if (s[index] === '{')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === '}') {\n   \
    \   index++;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcf3pi_9j.ts(162,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805143
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"\
    o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"l\" || char ===\
    \ \"m\" || char === \"n\" || char === \"p\" || char === \"s\" || char === \"t\"\
    \ || char === \"w\") {\n      index++;\n      continue;\n    }\n    if (char ===\
    \ \"b\" || char === \"c\" || char === \"d\" || char === \"f\" || char === \"g\"\
    \ || char === \"h\" || char === \"j\" || char === \"k\" || char === \"l\" || char\
    \ === \"m\" || char === \"n\" || char === \"p\" || char === \"s\" || char ===\
    \ \"t\" || char === \"w\" || char === \"v\" || char === \"x\" || char === \"z\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"q\" || char ===\
    \ \"r\" || char === \"x\" || char === \"z\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"z\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"A\" || char === \"E\" || char === \"I\" || char === \"O\" ||\
    \ char === \"U\") {\n      index++;\n      continue;\n    }\n    if (char ===\
    \ \"Y\") {\n      index++;\n      continue;\n    }\n    if (char === \"H\") {\n\
    \      index++;\n      continue;\n    }\n    if (char === \"L\" || char === \"\
    M\" || char === \"N\" || char === \"P\" || char === \"S\" || char === \"T\" ||\
    \ char === \"W\") {\n      index++;\n      continue;\n    }\n    if (char ===\
    \ \"B\" || char === \"C\" || char === \"D\" || char === \"F\" || char === \"G\"\
    \ || char === \"H\" || char === \"J\" || char === \"K\" || char === \"L\" || char\
    \ === \"M\" || char === \"N\" || char === \"P\" || char === \"S\" || char ===\
    \ \"T\" || char === \"W\" || char === \"V\" || char === \"X\" || char === \"Z\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"Q\" || char ===\
    \ \"R\" || char === \"X\" || char === \"Z\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"Z\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" ||\
    \ char === \"u\") {\n      index++;\n      continue;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuy6og73q.ts(100,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpbn5a2nit.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbn5a2nit.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      words.push(s.substr(index, n -\
    \ 1));\n      index += n - 1;\n    }\n    index++;\n  }\n  return words;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ha',\n\
    \  ' a ',\n  ' la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpr5bxkg_f.js:33:12)\n    at Object.<anonymous> (/tmp/tmpr5bxkg_f.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ha', '\
    \ a ', ' la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words:\
    \ string[] = [];\n  const vowels = \"aeiou\";\n  const consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >=\
    \ 0) {\n      continue;\n    }\n    if (consonants.indexOf(s[i]) >= 0) {\n   \
    \   if (words.length >= n) {\n        break;\n      }\n      words.push(s[i]);\n\
    \    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n\
    \  'h',\n  'd'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpwwssi4fr.js:37:12)\n    at Object.<anonymous> (/tmp/tmpwwssi4fr.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'r', 'y',\
    \ 'h', 'd' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words:\
    \ string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n\
    \    if (char === \" \") {\n      continue;\n    }\n    if (char === \"a\" ||\
    \ char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n  \
    \    continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n   \
    \ if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n \
    \     continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n  \
    \  if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n\
    \      continue;\n    }\n    if (char === \"m\") {\n      continue;\n    }\n \
    \   if (char === \"p\") {\n      continue;\n    }\n    if (char === \"s\") {\n\
    \      continue;\n    }\n    if (char === \"e\") {\n      continue;\n    }\n \
    \   if (char === \"u\") {\n      continue;\n    }\n    if (char === \"l\") {\n\
    \      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n \
    \   if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n\
    \      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n \
    \   if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n\
    \      continue;\n    }\n    if (char === \"m\") {\n      continue;\n    }\n \
    \   if (char === \"p\") {\n      continue;\n    }\n    if (char === \"s\") {\n\
    \      continue;\n    }\n    if (char === \"e\") {\n      continue;\n    }\n \
    \   if (char === \"u\") {\n      continue;\n    }\n    if (char === \"l\") {\n\
    \      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n \
    \   if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n\
    \      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n \
    \   if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n\
    \      continue;\n    }\n    if (char === \"m\") {\n      continue;\n    }\n \
    \   if (char === \"p\") {\n      continue;\n    }\n    if (char === \"s\") {\n\
    \      continue;\n    }\n    if (char === \"e\") {\n      continue;\n    }\n \
    \   if (char === \"u\") {\n      continue;\n    }\n    if (char === \"l\") {\n\
    \      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n \
    \   if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n\
    \      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n \
    \   if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n\
    \      \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphk8dv3ir.ts(167,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805144
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  if(s == \"\") {\n    return result;\n  }\n  \n  let vowels\
    \ = \"aeiou\";\n  \n  for(let i = 0; i < s.length; ++i) {\n    let char = s[i];\n\
    \    \n    if(vowels.indexOf(char) == -1) {\n      continue;\n    }\n    \n  \
    \  let count = 0;\n    \n    for(let j = 0; j < n; ++j) {\n      if(char == s[j])\
    \ {\n        ++count;\n      }\n    }\n    \n    if(count == n) {\n      result.push(s);\n\
    \    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmppjwrirp5.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmppjwrirp5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805144
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n  \
    \  }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"\
    o\" || char === \"u\" || char === \"y\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"s\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"m\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"s\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"t\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"w\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"r\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"a\") {\n      index\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp1leodp8.ts(163,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805145
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \" || char === \"\\t\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"a\" || char === \"e\" || char ===\
    \ \"i\" || char === \"o\" || char === \"u\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"s\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"t\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"r\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"v\") {\n      index++;\n      continue;\n    }\n    if (char === \"z\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"x\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"z\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char\
    \ === \"s\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\"\
    ) {\n      index++;\n      continue;\n    }\n    if (char === \"r\") {\n     \
    \ index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n\
    \      continue;\n    }\n    if (char === \"v\") {\n      index++;\n      continue;\n\
    \    }\n    if (char === \"z\") {\n      index++;\n      continue;\n    }\n  \
    \  if (char === \"x\") {\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaj21neve.ts(163,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805145
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  \n  if(s.length == 0) {\n    return words;\n  }\n  \n  let\
    \ vowels = \"aeiou\";\n  \n  for(let i = 0; i < s.length; i += 1) {\n    let letter\
    \ = s[i];\n    \n    if(vowels.indexOf(letter) == -1) {\n      continue;\n   \
    \ }\n    \n    let count = 0;\n    \n    for(let j = 0; j < n; j += 1) {\n   \
    \   if(letter == s[j]) {\n        count += 1;\n      }\n    }\n    \n    if(count\
    \ == n) {\n      words.push(letter);\n    }\n  }\n  \n  return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmbqz1seg.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpmbqz1seg.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length\
    \ && count < n) {\n        if (s[index] === \" \") {\n            count++;\n \
    \       } else {\n            words.push(s[index]);\n            count++;\n  \
    \      }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp3896cnw1.js:36:12)\n    at Object.<anonymous> (/tmp/tmp3896cnw1.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805133
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result\
    \ = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n\
    \    if (char === \" \") {\n      result.push(s[index + 1]);\n      index += 2;\n\
    \    } else if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\" || char === \"y\") {\n      result.push(s[index + 1]);\n\
    \      index += 2;\n    } else {\n      result.push(s[index]);\n      index++;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n\
    \  ' ',\n  'h',\n  'd',\n  'a',\n  'l',\n  't',\n  't',\n  'l',\n  ' ',\n  'l',\n\
    \  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpjgqt3gdg.js:40:12)\n    at Object.<anonymous> (/tmp/tmpjgqt3gdg.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'r', ' ', 'h',\n    'd', 'a', 'l', 't',\n    't', 'l', ' ', 'l',\n    'm', 'b'\n\
    \  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result\
    \ = [];\n  if (s.length === 0) {\n    return result;\n  }\n  let count = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e'\
    \ || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n\
    \    if (count === n) {\n      result.push(s.substring(i, i + 1));\n      count\
    \ = 0;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'i'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpi41rqayl.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi41rqayl.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'i' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \" || s[index] === \".\" || s[index] === \",\" || s[index]\
    \ === \"?\" || s[index] === \"!\" || s[index] === \"-\" || s[index] === \"_\"\
    \ || s[index] === \"/\" || s[index] === \"\\\\\" || s[index] === \"'\" || s[index]\
    \ === \"\\\"\") {\n            index++;\n        }\n        if (s[index] === \"\
    \ \") {\n            index++;\n        }\n        if (s[index] === \" \" || s[index]\
    \ === \".\" || s[index] === \",\" || s[index] === \"?\" || s[index] === \"!\"\
    \ || s[index] === \"-\" || s[index] === \"_\" || s[index] === \"/\" || s[index]\
    \ === \"\\\\\" || s[index] === \"'\" || s[index] === \"\\\"\") {\n           \
    \ index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n\
    \        }\n        if (s[index] === \" \" || s[index] === \".\" || s[index] ===\
    \ \",\" || s[index] === \"?\" || s[index] === \"!\" || s[index] === \"-\" || s[index]\
    \ === \"_\" || s[index] === \"/\" || s[index] === \"\\\\\" || s[index] === \"\
    '\" || s[index] === \"\\\"\") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    \ || s[index] === \".\" || s[index] === \",\" || s[index] === \"?\" || s[index]\
    \ === \"!\" || s[index] === \"-\" || s[index] === \"_\" || s[index] === \"/\"\
    \ || s[index] === \"\\\\\" || s[index] === \"'\" || s[index] === \"\\\"\") {\n\
    \            index++;\n        }\n        if (s[index] === \" \") {\n        \
    \    index++;\n        }\n        if (s[index] === \" \" || s[index] === \".\"\
    \ || s[index] === \",\" || s[index] === \"?\" || s[index] === \"!\" || s[index]\
    \ === \"-\" || s[index] === \"_\" || s[index] === \"/\" || s[index] === \"\\\\\
    \" || s[index] === \"'\" || s[index] === \"\\\"\") {\n            index++;\n \
    \       }\n        if (s[index] === \" \") {\n            index++;\n        }\n\
    \        if (s[index] === \" \" || s[index] === \".\" || s[index] === \",\" ||\
    \ s[index] === \"?\" || s[index] === \"!\" || s[index] === \"-\" || s[index] ===\
    \ \"_\" || s[index] === \"/\" || s[index] === \"\\\\\" || s[index] === \"'\" ||\
    \ s[index] === \"\\\"\") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    \ || s[index] === \".\" || s[index] === \",\" || s[index] === \"?\" || s[index]\
    \ === \"!\" || s[index] === \"-\" || s[index] === \"_\" || s[index] === \"/\"\
    \ || s[index] === \"\\\\\" || s[index] === \"'\" || s[index] === \"\\\"\") {\n\
    \            index++;\n        }\n        if (s[index] === \" \") {\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycyd_20f.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char\
    \ = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t\
    }\n\t\tlet count = 0;\n\t\twhile (index < s.length && s[index] === char) {\n\t\
    \t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (count === n) {\n\t\t\twords.push(s.substr(0,\
    \ index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpe9m3rv53.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpe9m3rv53.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739086
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s.charAt(index)\
    \ == \" \") {\n      index++;\n      continue;\n    }\n    let consonants = count_consonants(s.substr(index,\
    \ n));\n    if (consonants == n) {\n      result.push(s.substr(index, n));\n \
    \     index += n;\n    }\n    index++;\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbfm5_jt8.ts(25,22): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1659805146
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      words.push(s.substr(index + 1,\
    \ s.length - index - 1));\n      index += 1;\n    }\n    else if (char === \"\
    a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n\
    \      index += 1;\n    }\n    else if (char === \"y\") {\n      index += 1;\n\
    \    }\n    else if (char === \"n\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"t\") {\n      index += 1;\n    }\n    else if (char === \"h\") {\n\
    \      index += 1;\n    }\n    else if (char === \"l\") {\n      index += 1;\n\
    \    }\n    else if (char === \"l\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"o\") {\n      index += 1;\n    }\n    else if (char === \"s\") {\n\
    \      index += 1;\n    }\n    else if (char === \"e\") {\n      index += 1;\n\
    \    }\n    else if (char === \"a\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"m\") {\n      index += 1;\n    }\n    else if (char === \"r\") {\n\
    \      index += 1;\n    }\n    else if (char === \"y\") {\n      index += 1;\n\
    \    }\n    else if (char === \"u\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"c\") {\n      index += 1;\n    }\n    else if (char === \"h\") {\n\
    \      index += 1;\n    }\n    else if (char === \"e\") {\n      index += 1;\n\
    \    }\n    else if (char === \"l\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"l\") {\n      index += 1;\n    }\n    else if (char === \"o\") {\n\
    \      index += 1;\n    }\n    else if (char === \"s\") {\n      index += 1;\n\
    \    }\n    else if (char === \"a\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"m\") {\n      index += 1;\n    }\n    else if (char === \"r\") {\n\
    \      index += 1;\n    }\n    else if (char === \"y\") {\n      index += 1;\n\
    \    }\n    else if (char === \"u\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"c\") {\n      index += 1;\n    }\n    else if (char === \"h\") {\n\
    \      index += 1;\n    }\n    else if (char === \"e\") {\n      index += 1;\n\
    \    }\n    else if (char === \"l\") {\n      index += 1;\n    }\n    else if\
    \ (char === \"l\") {\n      index += 1;\n    }\n    else if (char === \"o\") {\n\
    \      index += 1;\n    }\n    else if (char === \"s\") {\n      index += 1;\n\
    \    }\n    else if (char === \"a\") {\n      index\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi6mgvc8l.ts(145,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n\n  const words: string[] = [];\n  const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  let vowelCount = 0;\n  let consonantCount =\
    \ 0;\n\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if\
    \ (vowels.indexOf(char) !== -1) {\n      vowelCount++;\n    } else {\n      consonantCount++;\n\
    \    }\n  }\n\n  if (vowelCount === n) {\n    words.push(s);\n  }\n\n  for (let\
    \ i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (vowels.indexOf(char)\
    \ !== -1) {\n      vowelCount--;\n    } else {\n      consonantCount--;\n    }\n\
    \n    if (vowelCount === 0 && consonantCount === 0) {\n      words.push(s);\n\
    \    }\n  }\n\n  return words;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had\
    \ a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp6q7s32cl.js:54:12)\n    at Object.<anonymous> (/tmp/tmp6q7s32cl.js:62:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n  \
    \  if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n \
    \   if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (s.charAt(index) == \" \") {\n      index++;\n      continue;\n    }\n\
    \    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitNodeList (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73302:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const result: string[] = [];\n  for (let i\
    \ = 0; i < s.length; i += 1) {\n    const char = s[i];\n    if (char === ' ')\
    \ {\n      continue;\n    }\n    for (let j = 0; j < n; j += 1) {\n      if (char\
    \ === s[j]) {\n        result.push(s[i]);\n        break;\n      }\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  'a',\n  'a',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmp2ctpw81q.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ctpw81q.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \ 'a', 'r',\n    'y', 'a', 'a',\n    'a'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    let char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\"\
    ) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"u\") {\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_0njlffk.ts(162,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805146
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n  \
    \  if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === ' ') {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ')\
    \ {\n      index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n   \
    \   index++;\n      continue;\n    }\n    if (s[index] === ' ') {\n      index++;\n\
    \      continue;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpolg1anmp.ts(168,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substr(index, n);\n        if (word.length == n) {\n          \
    \  words.push(word);\n            index += n;\n        }\n        else {\n   \
    \         index += word.length;\n        }\n    }\n    return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpstephit_.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpstephit_.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length) {\n       \
    \ let word = s.substring(index, index+n);\n        if (word.length == n) {\n \
    \           words.push(word);\n            index += n;\n        }\n        else\
    \ {\n            index += word.length;\n        }\n    }\n    return words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp2wfgh_hk.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2wfgh_hk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet letter\
    \ = s[index];\n\t\tif (letter === \" \" || letter === \"\\t\" || letter === \"\
    \\n\") {\n\t\t\twords.push(s.substr(index));\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tlet count = 0;\n\t\tfor (let i = index; i < s.length; i++) {\n\t\t\t\
    if (s[i] !== letter) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tif\
    \ (count === n) {\n\t\t\twords.push(s.substr(index, count + 1));\n\t\t\tindex\
    \ += count + 1;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805161
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char\
    \ = s[index];\n    if (char === \" \") {\n      words.push(s.substr(index, n -\
    \ 1));\n      index += n - 1;\n    } else {\n      words.push(char);\n      index++;\n\
    \    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ha',\n  'd',\n  ' a ',\n  'l',\n  'i',\n  't',\n  't',\n\
    \  'l',\n  'e',\n  ' la',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpibl_z5qi.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpibl_z5qi.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \   'a',   'r',   'y',\n    ' ha', 'd',   ' a ', 'l',\n    'i',   't',   't',\
    \   'l',\n    'e',   ' la', 'm',   'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805131
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let i = 0;\n    while (i < s.length) {\n        let j =\
    \ i;\n        while (j < s.length && s[j] === ' ') {\n            j++;\n     \
    \   }\n        if (j - i > n) {\n            words.push(s.substring(i, j));\n\
    \            i = j;\n        }\n    }\n    return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805161
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word\
    \ = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n\
    \    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp4ko9hrmj.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ko9hrmj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805139
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result:\
    \ string[] = [];\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index\
    \ < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\twords.push(s.substr(index,\
    \ n - 1));\n\t\t\tindex += n - 1;\n\t\t} else {\n\t\t\twords.push(char);\n\t\t\
    \tindex++;\n\t\t}\n\t}\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet word\
    \ = words[i];\n\t\tlet found = false;\n\t\tfor (let j = 0; j < result.length;\
    \ j++) {\n\t\t\tif (result[j] === word) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y',\n  ' ha',\n  'd',\n  ' a ',\n  'l',\n  'i',\n  't',\n  'e',\n\
    \  ' la',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpvpxhonew.js:50:12)\n    at Object.<anonymous> (/tmp/tmpvpxhonew.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\
    \   'a', 'r',   'y',\n    ' ha', 'd', ' a ', 'l',\n    'i',   't', 'e',   ' la',\n\
    \    'm',   'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805146
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\t\
    let char = s.charAt(index);\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\t\
    continue;\n\t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" ||\
    \ char === \"o\" || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\
    \t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\"\
    ) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjms3l8m1.ts(146,17): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpjms3l8m1.ts(147,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpjms3l8m1.ts(162,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805146
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let word = s[i];\n\
    \    \n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) ==\
    \ ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ')\
    \ {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n    \
    \    continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n    \
    \  }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n\
    \      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n    \
    \  \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n\
    \      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n    \
    \  if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if\
    \ (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == '\
    \ ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n    \
    \    continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n    \
    \  }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n\
    \      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n    \
    \  \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n\
    \      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n    \
    \  if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if\
    \ (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == '\
    \ ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n    \
    \    continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n    \
    \  }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n\
    \      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n    \
    \  \n      if (word.charAt(j) == ' \ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt_t47ne9.ts(152,31): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpt_t47ne9.ts(153,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpt_t47ne9.ts(168,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805146
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  let chars = s.replace(/\\s+/g, \"\").split(\"\
    \");\n  while (index < chars.length) {\n    if (chars[index].match(/[aeiou]/i))\
    \ {\n      words.push(chars[index]);\n    }\n    index++;\n  }\n  return words.filter((word)\
    \ => word.length == n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmix5rv96.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpmix5rv96.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805147
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  for (let i = 0; i < s.length; i += 1) {\n    let char = s[i];\n\
    \    if (char === ' ') {\n      continue;\n    }\n    let count = 0;\n    for\
    \ (let j = 0; j < char.length; j += 1) {\n      if (char[j] === 'a' || char[j]\
    \ === 'e' || char[j] === 'i' || char[j] === 'o' || char[j] === 'u') {\n      \
    \  count += 1;\n      }\n    }\n    if (count === n) {\n      result.push(s);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpo3bllt5d.js:39:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpo3bllt5d.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805147
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet letter\
    \ = s.charAt(index);\n\t\tif (letter == \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tlet count = 0;\n\t\twhile (index < s.length && s.charAt(index) == letter)\
    \ {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (count == n) {\n\t\t\twords.push(s.substring(index));\n\
    \t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuk7n42ib.js:41:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpuk7n42ib.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmput11pzwy.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmput11pzwy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length\
    \ && count < n) {\n        if (s[index] === \" \") {\n            count++;\n \
    \       }\n        else {\n            words.push(s[index]);\n            count++;\n\
    \        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpap_78cax.js:36:12)\n    at Object.<anonymous> (/tmp/tmpap_78cax.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  let words: string[] = [];\n  for (let i = 0;\
    \ i < s.length; i++) {\n    if (s.charAt(i) === ' ') {\n      continue;\n    }\n\
    \    let word = '';\n    for (let j = 0; j < n; j++) {\n      if (s.charAt(i +\
    \ j) !== ' ') {\n        word += s.charAt(i + j);\n      }\n    }\n    if (word.length\
    \ > 0) {\n      words.push(word);\n    }\n  }\n  return words;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary',\n  'ryh',\n  'yha',\n  'had',\n  'ada',\n  'da',\n  'ali',\n  'litt',\n\
    \  'ittl',\n  'ttle',\n  'tle',\n  'lel',\n  'ela',\n  'lamb',\n  'amb',\n  'mb',\n\
    \  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpww28c64m.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpww28c64m.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary',  'ryh',\n    'yha',  'had',  'ada',\n    'da',   'ali',  'litt',\n  \
    \  'ittl', 'ttle', 'tle',\n    'lel',  'ela',  'lamb',\n    'amb',  'mb',   'b'\n\
    \  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ == 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n\
    \  while (index < s.length) {\n    let word = s.substring(index, index + 1);\n\
    \    if (word.length == n) {\n      words.push(word);\n    }\n    index++;\n \
    \ }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpx5itezxp.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpx5itezxp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    let currentWordCount\
    \ = 0;\n    while (index < s.length) {\n        let char = s[index];\n       \
    \ if (char === \" \") {\n            currentWordCount += 1;\n            if (currentWordCount\
    \ === n) {\n                result.push(currentWord);\n                currentWord\
    \ = \"\";\n                currentWordCount = 0;\n            }\n        } else\
    \ {\n            currentWord += char;\n            currentWordCount = 0;\n   \
    \     }\n        index += 1;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5c5321ge.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp5c5321ge.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let i =\
    \ 0; i < words.length; i++) {\n        let word = words[i];\n        let letters\
    \ = word.split(\"\");\n        let count = 0;\n        for (let j = 0; j < letters.length;\
    \ j++) {\n            if (letters[j].match(/[aeiou]/i)) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpafaiem7e.js:38:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpafaiem7e.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = [];\n  let index = 0;\n  while (index < s.length && index < n) {\n\
    \    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \".\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \".\") {\n     \
    \ index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === \".\") {\n      index++;\n     \
    \ continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \".\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \".\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \".\") {\n     \
    \ index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === \".\") {\n      index++;\n     \
    \ continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \".\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \".\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \".\") {\n     \
    \ index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === \".\") {\n      index++;\n     \
    \ continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \".\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \".\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqappfuil.ts(168,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805148
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length - 1) {\n\t\tlet\
    \ letter = s[index];\n\t\tlet nextLetter = s[index + 1];\n\t\tif (letter === nextLetter)\
    \ {\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n\t\
    \t\twords.push(s[index]);\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter\
    \ === \"y\") {\n\t\t\twords.push(s[index]);\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (letter === \"n\") {\n\t\t\twords.push(s[index]);\n\t\t\tindex +=\
    \ 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"d\") {\n\t\t\twords.push(s[index]);\n\
    \t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"s\" || letter\
    \ === \"t\") {\n\t\t\twords.push(s[index]);\n\t\t\tindex += 1;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (letter === \"h\" || letter === \"r\" || letter === \"l\" || letter\
    \ === \"c\" || letter === \"m\" || letter === \"p\" || letter === \"f\" || letter\
    \ === \"v\" || letter === \"w\" || letter === \"y\") {\n\t\t\twords.push(s[index]);\n\
    \t\t\tindex += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (letter === \"b\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"q\" || letter === \"x\" || letter\
    \ === \"v\" || letter === \"u\" || letter === \"t\" || letter === \"r\" || letter\
    \ === \"k\" || letter === \"j\" || letter === \"\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7dolf_v7.ts(57,1225): error TS1002: Unterminated
    string literal.

    ../../../../../tmp/tmp7dolf_v7.ts(58,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp7dolf_v7.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805148
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    ) {\n            index++;\n        }\n        if (s[index] === \" \") {\n    \
    \        index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n\
    \        }\n        if (s[index] === \" \") {\n            index++;\n        }\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    ) {\n            index++;\n        }\n        if (s[index] === \" \") {\n    \
    \        index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n\
    \        }\n        if (s[index] === \" \") {\n            index++;\n        }\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    ) {\n            index++;\n        }\n        if (s[index] === \" \") {\n    \
    \        index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n\
    \        }\n        if (s[index] === \" \") {\n            index++;\n        }\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    ) {\n            index++;\n        }\n        if (s[index] === \" \") {\n    \
    \        index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n\
    \        }\n        if (s[index] === \" \") {\n            index++;\n        }\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    ) {\n            index++;\n        }\n        if (s[index] === \" \") {\n    \
    \        index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n\
    \        }\n        if (s[index] === \" \") {\n            index++;\n        }\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n        if (s[index] === \" \"\
    ) {\n            index++;\n        }\n        if (s[index] === \" \") {\n    \
    \        index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n\
    \        }\n        if (s[index] === \" \") {\n            index++;\n        }\n\
    \        if (s[index] === \" \") {\n            index++;\n        }\n        if\
    \ (s[index] === \" \") {\n            index++;\n        }\n        if (s[index]\
    \ === \" \") {\n            index++;\n        }\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20na1xlb.ts(172,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659805148
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n\
    \    if (char.match(/[aeiou]/)) {\n      result.push(char);\n    }\n  }\n  \n\
    \  return result.filter((word) => word.length == n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpymgxhjqv.js:30:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpymgxhjqv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805148
