name: HumanEval_57_monotonic
language: ts
prompt: "//Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  let i = 0;\n  let j = 1;\n  let k = 0;\n  while (j < l.length) {\n\
    \    if (l[j] < l[i]) {\n      i++;\n    } else if (l[j] > l[i]) {\n      j++;\n\
    \    } else {\n      k++;\n    }\n  }\n  return k === i;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i]\
    \ > l[j]) {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else\
    \ {\n      i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n", "  let prev:\
    \ number[] = [];\n  let cur: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    cur[i] = l[i];\n    if (cur[i] < prev[i]) {\n      return true;\n   \
    \ }\n    prev[i] = cur[i];\n  }\n  return false;\n}\n", "  let i = 0;\n  let j\
    \ = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n\
    \    }\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n\
    \  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l.length;\n  if (n === 1) {\n    return l[0] >= l[1];\n  }\n  const\
    \ m = l[n - 1];\n  for (let i = n - 2; i >= 0; --i) {\n    const a = l[i];\n \
    \   const b = l[i + 1];\n    if (a < b && b < m) {\n      m = b;\n    }\n  }\n\
    \  return a >= m && m >= b;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n  while\
    \ (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else if (l[i] < l[j]) {\n\
    \      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return i ===\
    \ j;\n}\n", "  let n = l.length;\n  if (n === 0) return false;\n  if (n === 1)\
    \ return true;\n  if (l[0] > l[1]) return true;\n  if (l[0] === l[1]) return true;\n\
    \  for (let i = 1; i < n; ++i) {\n    if (l[i] > l[i - 1]) return false;\n  }\n\
    \  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const\
    \ firstValue = l[0];\n  const lastValue = l[l.length - 1];\n  for (let i = 1;\
    \ i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue <\
    \ firstValue) {\n      return false;\n    }\n    if (currentValue > lastValue)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  let i = 0;\n  let\
    \ j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n \
    \   } else if (l[i] < l[j]) {\n      j--;\n    } else {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ const currentValue = l[i];\n    if (currentValue < firstValue) {\n      return\
    \ false;\n    }\n    if (currentValue > firstValue) {\n      return true;\n  \
    \  }\n  }\n  return false;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n  while\
    \ (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else if (l[i] < l[j]) {\n\
    \      j--;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n",
  "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current\
    \ = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current\
    \ > first) {\n      return false;\n    }\n  }\n  return false;\n}\n", "  let i\
    \ = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] < l[j])\
    \ {\n      k = j;\n      j = i;\n      i = k;\n    } else if (l[i] > l[j]) {\n\
    \      k = j;\n      j = i;\n      i = k;\n    } else {\n      i++;\n      j++;\n\
    \    }\n  }\n  return i === j;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n\
    \  while (i < j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) j = m;\n\
    \    else i = m;\n  }\n  return l[j] < l[i];\n}\n", "  let i = 0;\n  let j = l.length\
    \ - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    }\n\
    \    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n\
    \  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const\
    \ n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n   \
    \   return false;\n    }\n  }\n  return true;\n}\n", "  const n = l.length;\n\
    \  if (n === 0) return false;\n  if (n === 1) return true;\n  const p = l[n -\
    \ 1];\n  for (let i = n - 2; i >= 0; i--) {\n    if (l[i] < p && l[i + 1] > p)\
    \ return true;\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0] >= l[1];\n\
    \  }\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    const m = (i + j)\
    \ >> 1;\n    if (l[m] < l[m + 1]) {\n      j = m;\n    } else {\n      i = m +\
    \ 1;\n    }\n  }\n  return l[i] >= l[i + 1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
