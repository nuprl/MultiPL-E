name: HumanEval_117_select_words
language: ts
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"\
  Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a\
  \ little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white\
  \ space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n\
  // >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s:\
  \ string, n: number): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
  \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
  \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple\
  \ white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
  ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
  \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
  d\", \"f\"]);\n}\n\ntest();"
completions: ["  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n\
    \    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      if (words.length\
    \ >= n) {\n        break;\n      }\n      words.push(char);\n    }\n  }\n  return\
    \ words;\n}\n", "  let words: string[] = [];\n  let index = 0;\n  while (index\
    \ < s.length) {\n    let letter = s[index];\n    if (letter === ' ') {\n     \
    \ words.push(s.substr(index, n));\n      index += n;\n    } else {\n      index++;\n\
    \    }\n  }\n  return words;\n}\n", "  let result: string[] = [];\n  let i = 0;\n\
    \  while (i < s.length) {\n    let j = i;\n    while (j < s.length && s[j] ===\
    \ ' ') {\n      j++;\n    }\n    if (j - i > n) {\n      result.push(s.substring(i,\
    \ j));\n      i = j;\n    }\n  }\n  return result;\n}\n", "  let words: string[]\
    \ = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n\
    \    if (char === \" \") {\n      words.push(s.slice(index, index + 1));\n   \
    \   index++;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\"\
    \ || char === \"o\" || char === \"u\") {\n      index++;\n    }\n    if (char\
    \ === \"n\") {\n      index++;\n    }\n    if (char === \"y\") {\n      index++;\n\
    \    }\n    if (char === \"h\") {\n      index++;\n    }\n    if (char === \"\
    l\") {\n      index++;\n    }\n    if (char === \"l\") {\n      index++;\n   \
    \ }\n    if (char === \"a\") {\n      index++;\n    }\n    if (char === \"m\"\
    ) {\n      index++;\n    }\n    if (char === \"e\") {\n      index++;\n    }\n\
    \    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n\
    \      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n   \
    \ if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n  \
    \    index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if\
    \ (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n     \
    \ index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char\
    \ === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"\
    s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n   \
    \ }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\"\
    ) {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n\
    \    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n\
    \      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n   \
    \ if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n  \
    \    index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if\
    \ (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n     \
    \ index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char\
    \ === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n", "  if (s.length === 0) {\n\
    \    return [];\n  }\n  const words: string[] = [];\n  let word = \"\";\n  let\
    \ count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"_\")\
    \ {\n      count++;\n      if (count === n) {\n        words.push(word);\n   \
    \     word = \"\";\n        count = 0;\n      }\n    } else {\n      word += s[i];\n\
    \    }\n  }\n  words.push(word);\n  return words;\n}\n", "    let words: string[]\
    \ = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n       \
    \ if (s[index] === \" \") {\n            words.push(s.slice(index, index + 1));\n\
    \            index += 1;\n        }\n        index++;\n        n--;\n    }\n \
    \   return words;\n}\n", "  let result: string[] = [];\n  \n  if(s.length == 0)\
    \ {\n    return result;\n  }\n  \n  for(let i = 0; i < s.length; i += 1) {\n \
    \   let letter = s[i];\n    \n    if(s.indexOf(letter) > -1) {\n      if(s.indexOf(letter)\
    \ == n) {\n        result.push(letter);\n      }\n    }\n  }\n  \n  return result;\n\
    }\n", "  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n \
    \   let c = s[i];\n    if (c === ' ') {\n      continue;\n    }\n    for (let\
    \ j = 0; j < n; j++) {\n      if (c === s[j]) {\n        words.push(s.substr(0,\
    \ i));\n        break;\n      }\n    }\n  }\n  return words;\n}\n", "  const words:\
    \ string[] = [];\n  if (s === \"\") {\n    return words;\n  }\n  const vowels\
    \ = \"aeiou\";\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  for (let i\
    \ = 0; i < s.length; i += 1) {\n    const char = s[i];\n    if (vowels.indexOf(char)\
    \ !== -1) {\n      continue;\n    }\n    if (consonants.indexOf(char) !== -1)\
    \ {\n      if (words.length >= n) {\n        break;\n      }\n      words.push(char);\n\
    \    }\n  }\n  return words;\n}\n", "\tlet result: string[] = [];\n\tlet words:\
    \ string[] = s.split(\" \");\n\tfor (let i = 0; i < words.length; i++) {\n\t\t\
    let word: string = words[i];\n\t\tlet letters: string[] = word.split(\"\");\n\t\
    \tlet count: number;\n\t\tfor (let j = 0; j < letters.length; j++) {\n\t\t\tcount\
    \ = 1;\n\t\t\tfor (let k = 0; k < n; k++) {\n\t\t\t\tif (letters[j].toUpperCase()\
    \ === letters[j].toLowerCase()) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    \tif (count === n) {\n\t\t\t\tresult.push(word);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "    let result: string[] = [];\n    let index = 0;\n    while\
    \ (index < s.length) {\n        let word = s.substring(index, index+n);\n    \
    \    if (word.length == n) {\n            result.push(word);\n            index\
    \ += n;\n        }\n        else {\n            index += word.length;\n      \
    \  }\n    }\n    return result;\n}\n", "  let result: string[] = [];\n  let words:\
    \ string[] = s.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n   \
    \ let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      if (word[j] === \"a\" || word[j] === \"e\" || word[j] === \"i\"\
    \ || word[j] === \"o\" || word[j] === \"u\") {\n        count++;\n      }\n  \
    \  }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n\
    }\n", "\tlet words: string[] = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\
    \tlet word = s.substr(i, n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t\ti += n;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn words;\n}\n",
  "\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\
    \tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tlet count = 0;\n\t\twhile (index < s.length && s[index] === char) {\n\
    \t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (count === n) {\n\t\t\twords.push(s.substr(0,\
    \ index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n", "  let words: string[]\
    \ = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n\
    \    if (letter === \" \") {\n      continue;\n    }\n    \n    let count = 0;\n\
    \    for (let j = 0; j < letter.length; j++) {\n      if (letter[j] === letter[j].toUpperCase())\
    \ {\n        count++;\n      }\n    }\n    \n    if (count === n) {\n      words.push(s);\n\
    \    }\n  }\n  \n  return words;\n}\n", "    let words: string[] = [];\n    let\
    \ index = 0;\n    let currentWord = \"\";\n    while (index < s.length) {\n  \
    \      let char = s[index];\n        if (char === \" \") {\n            words.push(currentWord);\n\
    \            currentWord = \"\";\n            index++;\n        } else if (char\
    \ === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char ===\
    \ \"u\") {\n            currentWord += char;\n            index++;\n        }\
    \ else if (char === \"n\") {\n            if (currentWord.length >= n) {\n   \
    \             words.push(currentWord);\n                currentWord = \"\";\n\
    \                index++;\n            } else {\n                currentWord +=\
    \ char;\n                index++;\n            }\n        } else {\n         \
    \   currentWord += char;\n            index++;\n        }\n    }\n    if (currentWord.length\
    \ > 0) {\n        words.push(currentWord);\n    }\n    return words;\n}\n", "\t\
    let words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\t\
    let word = s.substring(index, index+n);\n\t\tindex = index+n;\n\t\tif (word.length\
    \ == n) {\n\t\t\twords.push(word);\n\t\t}\n\t}\n\treturn words;\n}\n", "  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let index =\
    \ 0;\n  while (index < s.length) {\n    const char = s[index];\n    if (char ===\
    \ ' ') {\n      words.push(s.substr(index));\n      index++;\n    }\n    if (char\
    \ === ' ' || char === '\\'') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index++;\n\
    \    }\n    if (char === ' ') {\n      index++;\n    }\n    if (char === '\\'')\
    \ {\n      index++;\n    }\n    if (char === ' ' || char === '\\'') {\n      index",
  "  if (s.length === 0) {\n    return [];\n  }\n  const words: string[] = [];\n \
    \ let i = 0;\n  while (i < s.length) {\n    const word = s.substring(i, i + n);\n\
    \    if (word.length >= n && words.indexOf(word) === -1) {\n      words.push(word);\n\
    \    }\n    i += n;\n  }\n  return words;\n}\n", "    let words: string[] = [];\n\
    \    let index = 0;\n    let word = \"\";\n    let count = 0;\n    while (index\
    \ < s.length) {\n        if (s[index] === \" \") {\n            words.push(word);\n\
    \            word = \"\";\n            count = 0;\n            index++;\n    \
    \    } else {\n            if (count < n) {\n                word += s[index];\n\
    \                count++;\n            } else {\n                words.push(word);\n\
    \                word = \"\";\n                count = 0;\n                index++;\n\
    \            }\n        }\n    }\n    words.push(word);\n    return words;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
