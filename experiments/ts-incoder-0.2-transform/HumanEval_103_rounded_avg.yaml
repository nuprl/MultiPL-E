name: HumanEval_103_rounded_avg
language: ts
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
    \  const binary = bin(avg);\n  const result = parseInt(binary, 2);\n  return result;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let\
    \ i = n; i <= m; i++) {\n    const bin = i.toString(2);\n    while (bin.length\
    \ < n) {\n      bin = \"0\" + bin;\n    }\n    binary += bin;\n  }\n  return binary;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if\
    \ (n >= m) {\n        return -1;\n    }\n    let result: number = (n - m) / 2;\n\
    \    let resultString: string = result.toString(2);\n    let resultStringLength\
    \ = resultString.length;\n    let resultStringBuilder: string = new StringBuilder();\n\
    \    for (let i = 0; i < resultStringLength; i++) {\n        resultStringBuilder.append(resultString[i]);\n\
    \    }\n    return resultStringBuilder.toString();\n}\n", "  if (n >= m) {\n \
    \   return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n    }\n  \
    \  let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n\
    \  const avg = Math.floor((n + m) / 2);\n  const binary = avg.toString(2);\n \
    \ return binary === \"0\" ? \"0b0\" : binary;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n    }\n  \
    \  let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n \
    \ const result = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n >=\
    \ m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  return `${result.toString(2)}`;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n\
    \    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return avg >= n ? avg :\
    \ \"0b\" + avg.toString(2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let\
    \ result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n    }\n  \
    \  let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "    if (n <= m) return n;\n    return -1;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "  if (n >= m) {\n    return\
    \ -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return `${(avg).toString(2)}`;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n;\
    \ i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "    if (n < m)\
    \ {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <=\
    \ m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n", "    if\
    \ (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let i =\
    \ n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n",
  "    if (n > m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i\
    \ <= m; i++) {\n    sum += i\n  }\n  return sum / 2\n}\n", "  if (n < m) {\n \
    \   return -1;\n  }\n  const avg = n / m;\n  const bin = parseInt(avg, 2);\n \
    \ return bin;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n\
    \  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n\
    }\n", "  if (n >= m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n\
    \  const binary = avg % 2 === 0 ? '0b0' : '0b1';\n  return parseInt(binary, 2);\n\
    }\n", "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i\
    \ <= m; i++) {\n    sum += i\n  }\n  return sum / 2\n}\n", "  if (n > m) {\n \
    \   return -1;\n  }\n  const result: number = (n - m) / 2;\n  const resultString\
    \ = result.toString(2);\n  return resultString.padStart(resultString.length +\
    \ 1, '0');\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n",
  "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if (n > m)\
    \ {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <=\
    \ m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n", "  if\
    \ (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    sum += i;\n  }\n  return sum / m;\n}\n", "  if (n <= m) {\n    return\
    \ -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n\
    \  return sum / m\n}\n", "  if (n >= m) return -1;\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n \
    \ return result.toString(2);\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let\
    \ sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum\
    \ / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) /\
    \ 2;\n  return result + result;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  const n = Math.max(m, n);\n  const s = n.toString(2);\n  const l = s.length\
    \ - 1;\n  const r = s.substr(0, l);\n  const rs = r.split('');\n  const r0 = parseInt(rs[0],\
    \ 2);\n  const r1 = parseInt(rs[1], 2);\n  const r2 = parseInt(rs[2], 2);\n  const\
    \ r3 = parseInt(rs[3], 2);\n  const r4 = parseInt(rs[4], 2);\n  const r5 = parseInt(rs[5],\
    \ 2);\n  const r6 = parseInt(rs[6], 2);\n  const r7 = parseInt(rs[7], 2);\n  const\
    \ r8 = parseInt(rs[8], 2);\n  const r9 = parseInt(rs[9], 2);\n  const r10 = parseInt(rs[10],\
    \ 2);\n  const r11 = parseInt(rs[11], 2);\n  const r12 = parseInt(rs[12], 2);\n\
    \  const r13 = parseInt(rs[13], 2);\n  const r14 = parseInt(rs[14], 2);\n  const\
    \ r15 = parseInt(rs[15], 2);\n  const r16 = parseInt(rs[16], 2);\n  const r17\
    \ = parseInt(rs[17], 2);\n  const r18 = parseInt(rs[18], 2);\n  const r19 = parseInt(rs[19],\
    \ 2);\n  const r20 = parseInt(rs[20], 2);\n  const r21 = parseInt(rs[21], 2);\n\
    \  const r22 = parseInt(rs[22], 2);\n  const r23 = parseInt(rs[23], 2);\n  const\
    \ r24 = parseInt(rs[24], 2);\n  const r25 = parseInt(rs[25], 2);\n  const r26\
    \ = parseInt(rs[26], 2);\n  const r27 = parseInt(rs[27], 2);\n  const r28 = parseInt(rs[28],\
    \ 2);\n  const r29 = parseInt(rs[29], 2);\n  const r30 = parseInt(rs[30], 2);\n\
    \  const r31 = parseInt(rs[31], 2);\n  const r32 = parseInt(rs[32], 2);\n  const\
    \ r33 = parseInt(rs[33], 2);\n  const r34 = parseInt(rs[34], 2);\n  const r35\
    \ = parseInt(rs[35], 2);\n  const r36 = parseInt(rs[36], 2);\n  const r37 = parseInt(rs[37],\
    \ 2);\n  const r38 = parseInt(rs[38], 2);\n  const r39 = parseInt(rs[39], 2);\n\
    \  const r40 = parseInt(rs[40], 2);\n  const r41 = parseInt(rs[41], 2);\n  const\
    \ r42 = parseInt(rs[42], 2);\n  const r43 = parseInt(rs[43], 2);\n  const r44\
    \ = parseInt(rs[44], 2);\n", "    if (n <= m) return n.toString(2);\n    return\
    \ -1;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if (n < m)\
    \ {\n        return -1;\n    }\n    let result: number = (n - m) / 2;\n    let\
    \ resultString: number = result.toString(2);\n    let resultStringLength = resultString.length;\n\
    \    let resultStringZeroPad: number = resultString.padStart(resultStringLength,\
    \ \"0\");\n    let resultStringZeroPadPad: number = resultStringZeroPad.padEnd(resultStringLength,\
    \ \"0\");\n    return parseInt(resultStringZeroPadPad, 2);\n}\n", "    if (n >=\
    \ m) {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i\
    \ <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n", " \
    \   if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / 2;\n}\n", " \
    \ if (n >= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
    \  return bin(avg);\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const result\
    \ = ((n - m) / m).toString(2);\n  return result.length < 2 ? `0b${result}` : result;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n < m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  const\
    \ resultString = result.toString(2);\n  const resultLength = resultString.length;\n\
    \  const resultStringLength = resultString.length;\n  const resultStringZeroPad\
    \ = resultString.padStart(resultLength, '0');\n  const resultStringZeroPadLength\
    \ = resultStringZeroPad.length;\n  const resultStringZeroPadZeroPad = resultStringZeroPad.padEnd(resultStringLength,\
    \ '0');\n  return resultStringZeroPadZeroPad;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const bin = binary(avg);\n\
    \  return bin.slice(0, bin.length - 1);\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const\
    \ result: number = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n\
    \ >= m) {\n    return -1;\n  }\n  let result: number = n + m;\n  let remainder:\
    \ number = n % m;\n  let quotient: number = Math.floor(result / m);\n  let remainders:\
    \ number = result % m;\n  let quotients: number = quotient + remainders;\n  let\
    \ quotientsString: string = quotients.toString(2);\n  let remaindersString: string\
    \ = remainders.toString(2);\n  let quotientsStringWithZeros: string = \"0\".repeat(quotientsString.length)\
    \ + quotientsString;\n  let remaindersStringWithZeros: string = \"0\".repeat(remaindersString.length)\
    \ + remaindersString;\n  let binaryString: string = quotientsStringWithZeros +\
    \ remaindersStringWithZeros;\n  let binaryStringWithZeros: string = \"0\".repeat(binaryString.length)\
    \ + binaryString;\n  let binaryStringWithOnes: string = \"1\".repeat(binaryString.length)\
    \ + binaryString;\n  let binaryStringWithOnesAndZeros: string = \"1\".repeat(binaryString.length)\
    \ + binaryStringWithZeros;\n  let binaryStringWithOnesAndOnes: string = \"1\"\
    .repeat(binaryString.length) + binaryStringWithOnes;\n  let binaryStringWithOnesAndOnesAndZeros:\
    \ string = \"1\".repeat(binaryString.length) + binaryStringWithOnesAndZeros;\n\
    \  let binaryStringWithOnesAndOnesAndOnes: string = \"1\".repeat(binaryString.length)\
    \ + binaryStringWithOnesAndOnes;\n  let binaryStringWithOnesAndOnesAndOnesAndZeros:\
    \ string = \"1\".repeat(binaryString.length) + binaryStringWithOnesAndOnesAndZeros;\n\
    \  let binaryStringWithOnesAndOnesAndOnesAndOnes: string = \"1\".repeat(binaryString.length)\
    \ + binaryStringWithOnesAndOnesAndOnes;\n  let binaryStringWithOnesAndOnesAndOnesAndOnesAndZeros:\
    \ string = \"1\".repeat(binaryString.length) + binaryStringWithOnesAndOnesAndOnesAndZeros;\n\
    \  let binaryStringWithOnesAndOnesAndOnesAndOnesAndOnes: string = \"1\".repeat(binaryString.length)\
    \ + binaryStringWithOnesAndOnesAndOnesAndOnes;\n  let binaryStringWithOnesAndOnesAndOnesAndOnesAndOnesAndZeros:\
    \ string = \"1\".repeat(binaryString.length) + binaryStringWithOnesAndOnesAndOnesAndOnesAndZeros;\n\
    \  let binaryStringWithOnesAndOnesAndOnesAndOnesAndOnesAndOnes: string = \"1\"\
    .repeat(binaryString.length) + binaryStringWithOne", "    if (n <= m) {\n    \
    \    return -1\n    }\n    let result: number = (n - m) / 2\n    let resultString\
    \ = result.toString(2)\n    if (resultString.length <= 1) {\n        return resultString\n\
    \    }\n    return resultString.padStart(resultString.length / 2, '0')\n}\n",
  "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "  if (n >= m) return -1;\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const bin\
    \ = n.toString(2);\n  const len = bin.length;\n  let result = '';\n  for (let\
    \ i = len - 1; i >= 0; i--) {\n    result += bin[i];\n  }\n  return parseInt(result,\
    \ 2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const result: number = (n\
    \ - m) / 2;\n  const resultString = result.toString(2);\n  if (resultString.length\
    \ % 2 === 0) {\n    return resultString;\n  } else {\n    return resultString.substr(0,\
    \ resultString.length - 1) + \".\" + resultString.substr(resultString.length -\
    \ 1);\n  }\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n",
  "  if (n > m) {\n    return -1;\n  }\n  const n = Math.ceil(n);\n  const m = Math.ceil(m);\n\
    \  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n\
    \  }\n  return binary;\n}\n", "  if (n <= m) return -1\n  let sum = 0\n  for (let\
    \ i = n; i <= m; i++) {\n    sum += i\n  }\n  return sum / m\n}\n", "  if (n >\
    \ m) {\n    return -1;\n  }\n  const binary = n.toString(2);\n  const len = binary.length;\n\
    \  const half = len / 2;\n  const left = binary.slice(0, half);\n  const right\
    \ = binary.slice(half, len);\n  const sum = left + right;\n  const avg = sum /\
    \ 2;\n  return parseInt(avg, 2);\n}\n", "  if (n <= m) return -1;\n  const avg\
    \ = ((n + m) / 2) | 0;\n  return `${(avg).toString(2)}`;\n}\n", "    if (n < m)\
    \ {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <=\
    \ m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n", "  if\
    \ (n > m) {\n    return -1;\n  }\n  const bin = binary(n, m);\n  const len = bin.length;\n\
    \  const avg = bin.slice(len - 2, len).reduce((acc, cur) => acc + cur) / 2;\n\
    \  return `${bin.slice(0, len - 2)}${avg}`;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary\
    \ += i.toString(2);\n  }\n  return parseInt(binary, 2);\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  const result = (n - m) / 2;\n  return result.toString(2);\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const result: number = n + (m >>\
    \ 1);\n  const bin: number = result >> 1;\n  const remainder: number = result\
    \ % 2;\n  return `${bin}${remainder}`;\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  const avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n}\n",
  "  if (n <= m) return -1\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i\n  }\n  return sum / m\n}\n", "    if (n >= m) {\n        return -1;\n\
    \    }\n    const result: string = n.toString(2);\n    let remainder: number =\
    \ m - n;\n    while (remainder > 0) {\n        remainder--;\n        result +=\
    \ \"0\";\n    }\n    result += m.toString(2);\n    return parseInt(result, 2);\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const bin = binary(n, m);\n  const\
    \ binLen = bin.length;\n  const binStr = bin.substr(binLen - 1);\n  const binVal\
    \ = parseInt(binStr, 2);\n  const roundedVal = Math.round(binVal);\n  return roundedVal.toString(2);\n\
    }\n", "    if (n > m) {\n        return -1;\n    }\n    let result = 0;\n    for\
    \ (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return result /\
    \ 2;\n}\n", "    if (n <= m) return \"0b\" + n.toString(2);\n    return -1;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n;\
    \ i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  const result = new Array(n + 1 - m).fill(0);\n  for (let\
    \ i = n; i <= m; i++) {\n    result[i - n] = i;\n  }\n  return result.map(x =>\
    \ x.toString(2)).join('');\n}\n", "  if (n <= m) return -1\n  const avg = Math.floor((n\
    \ + m) / 2)\n  return `${(avg).toString(2)}`.padStart(avg.toString(2).length +\
    \ 1, '0')\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result: number\
    \ = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n <= m) return -1\n\
    \  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return\
    \ sum / 2\n}\n", "    if (n < m) {\n        return -1;\n    }\n    let result\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return\
    \ result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const result: string\
    \ = n.toString(2);\n  const remainder: number = m - n;\n  const remainderString:\
    \ string = remainder.toString(2);\n  while (remainderString.length < result.length)\
    \ {\n    remainderString += \"0\";\n  }\n  result += remainderString;\n  return\
    \ result;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", " \
    \   if (n < m) {\n        return -1;\n    }\n    let result: number = n;\n   \
    \ let remainder: number = m;\n    let remainders: number[] = [];\n    while (remainder\
    \ > 0) {\n        remainders.push(remainder);\n        remainder--;\n    }\n \
    \   let remaindersString: string[] = [];\n    for (let i: number = 0; i < remainders.length;\
    \ i++) {\n        remaindersString.push(`${remainders[i]}`);\n    }\n    result\
    \ = remaindersString.reduce((acc, cur) => acc + cur, 0);\n    return `${result.toString(2)}`;\n\
    }\n", "  if (n >= m) return -1;\n  let result = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if (n >= m)\
    \ {\n        return -1;\n    }\n    const result: number = (n - m) / 2;\n    const\
    \ resultString: string = result.toString(2);\n    const resultLength: number =\
    \ resultString.length;\n    const resultStringWithZeros: string = resultString.padStart(resultLength,\
    \ '0');\n    return parseInt(resultStringWithZeros, 2);\n}\n", "  if (n <= m)\
    \ {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n   \
    \ sum += i\n  }\n  return sum / 2\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  const n = Math.max(m, n);\n  const binary = \"\";\n  for (let i = n; i <= m;\
    \ i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n}\n",
  "  if (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  return\
    \ result + ('0' + result).slice(-2);\n}\n", "  if (n > m) {\n    return -1;\n\
    \  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let\
    \ sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum\
    \ / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const bin = n.toString(2);\n\
    \  const len = bin.length;\n  const avg = bin.slice(len - m).padStart(m, '0');\n\
    \  return parseInt(avg, 2);\n}\n", "  if (n <= m) return -1\n  const result =\
    \ ((n - m) + 1) / (2 * m)\n  return result.toString(2)\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "    if (n <= m) {\n        return -1\n\
    \    }\n    let result = 0\n    for (let i = n; i <= m; i++) {\n        result\
    \ += i\n    }\n    return result / 2\n}\n", "  if (n > m) {\n    return -1;\n\
    \  }\n  const result = (n - m) / 2;\n  return result + result;\n}\n", "  if (n\
    \ < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if (n <= m) {\n \
    \       return -1\n    }\n    let result = 0\n    for (let i = n; i <= m; i++)\
    \ {\n        result += i\n    }\n    return result / 2\n}\n", "  if (n < m) {\n\
    \    return -1;\n  }\n  const avg = n / m;\n  const bin = avg + \"\";\n  const\
    \ len = bin.length;\n  const result = \"\";\n  for (let i = 0; i < len; ++i) {\n\
    \    const c = bin[i];\n    if (c !== \"0\") {\n      result += c;\n    }\n  }\n\
    \  return result;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result:\
    \ number = (n - m) / 2;\n  const resultString = result.toString(2);\n  const resultLength\
    \ = resultString.length;\n  if (resultLength > 1) {\n    return -1;\n  }\n  return\
    \ resultString;\n}\n", "    if (n <= m) return n.toString(2);\n    return -1;\n\
    }\n", "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i\
    \ <= m; i++) {\n    sum += i\n  }\n  return sum / m\n}\n", "  if (n > m) {\n \
    \   return -1;\n  }\n  const result: number = (n - m) / 2;\n  const resultString\
    \ = result.toString(2);\n  const resultLength = resultString.length;\n  const\
    \ resultStringLength = resultString.length;\n  const resultStringArray = resultString.split('');\n\
    \  const resultStringArrayLength = resultStringArray.length;\n  const resultStringArrayStringLength\
    \ = resultStringArrayStringLength;\n  const resultStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayLength;\n  const resultStringArrayStringArrayStringLength\
    \ = resultStringArrayStringArrayStringLength;\n  const resultStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayLength;\n  const resultStringArrayStringArrayStringArrayStringLength\
    \ = resultStringArrayStringArrayStringArrayStringLength;\n  const resultStringArrayStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n  const\
    \ resultStringArrayStringArrayStringArrayStringArrayStringArrayLength = resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n\
    \  const resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n\
    \  const resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n\
    \  const resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n\
    \  const resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n\
    \  const resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n\
    \  const resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength\
    \ = resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength;\n\
    \  const resultStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayString",
  "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m)\
    \ {\n    return -1;\n  }\n  const binary = n.toString(2);\n  const len = binary.length;\n\
    \  const half = len / 2;\n  const halfLen = len / 4;\n  const halfLenLen = len\
    \ / 8;\n  const halfLenLenLen = len / 16;\n  const halfLenLenLenLen = len / 32;\n\
    \  const halfLenLenLenLenLen = len / 64;\n  const halfLenLenLenLenLenLen = len\
    \ / 128;\n  const halfLenLenLenLenLenLenLen = len / 256;\n  const halfLenLenLenLenLenLenLen\
    \ = len / 512;\n  const halfLenLenLenLenLenLenLenLen = len / 1024;\n  const halfLenLenLenLenLenLenLenLenLen\
    \ = len / 2048;\n  const halfLenLenLenLenLenLenLenLenLenLen = len / 4096;\n  const\
    \ halfLenLenLenLenLenLenLenLenLenLenLen = len / 8192;\n  const halfLenLenLenLenLenLenLenLenLenLenLen\
    \ = len / 16384;\n  const halfLenLenLenLenLenLenLenLenLenLenLen = len / 32768;\n\
    \  const halfLenLenLenLenLenLenLenLenLenLenLenLen = len / 65536;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = len / 131072;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len\
    \ / 262144;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len / 524288;\n\
    \  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len / 1048576;\n\
    \  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len / 2097152;\n  const\
    \ halfLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len / 4194304;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = len / 8388608;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len\
    \ / 16777216;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len /\
    \ 33554432;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len /\
    \ 67108864;\n  const halfLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = len",
  "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m)\
    \ {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
    \    result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n\
    \  const result: number = (n - m) / 2;\n  return result.toString(2);\n}\n", " \
    \ if (n > m) {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return\
    \ String(Math.ceil(avg));\n}\n", "  if (n <= m) {\n    return -1\n  }\n  let result:\
    \ number = n + (m - n) / 2\n  let resultString = result.toString(2)\n  while (resultString.length\
    \ % 2 !== 0) {\n    resultString = \"0\" + resultString\n  }\n  return resultString\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if\
    \ (n <= m) {\n        return -1\n    }\n    let sum = 0\n    for (let i = n; i\
    \ <= m; i++) {\n        sum += i\n    }\n    return sum / m\n}\n", "  if (n >=\
    \ m) {\n    return -1;\n  }\n  const n = Math.max(m, n);\n  const m = Math.min(n,\
    \ m);\n  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary +=\
    \ i;\n  }\n  return parseInt(binary, 2);\n}\n", "    if (n < m) {\n        return\
    \ -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n      \
    \  result += i;\n    }\n    return result / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  const binary = \"\";\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  sum += i;\n    binary += i.toString(2);\n  }\n  return binary + sum.toString(2);\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) /\
    \ 2);\n  const binary = bin(avg);\n  return binary.length === 1 ? `0b${binary}`\
    \ : binary;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result = ((n\
    \ - m) + 1) / (2 * m) + 1;\n  return result.toString(2);\n}\n", "  if (n < m)\
    \ {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n \
    \   sum += i;\n  }\n  return sum / 2;\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / 2;\n}\n", "  if (n >= m) return -1;\n  const result =\
    \ (n + (m - n)) / (m + 1) as number;\n  return result < 0 ? -1 : result;\n}\n",
  "  if (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  return\
    \ result + result;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.min(n,\
    \ m);\n  const m = Math.max(m, n);\n  const binary = \"\";\n  for (let i = n;\
    \ i <= m; i++) {\n    binary += i;\n  }\n  return parseInt(binary, 2);\n}\n",
  "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n >= m)\
    \ {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary\
    \ = avg.toString(2);\n  while (binary.length < n) {\n    binary = \"0\" + binary;\n\
    \  }\n  return binary;\n}\n", "    if (n >= m) {\n        return -1;\n    }\n\
    \    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n   \
    \ }\n    return sum / m;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const\
    \ result: number = (n - m) / 2;\n  const binary: string = result.toString(2);\n\
    \  const decimal: string = binary.padStart(8, '0');\n  return decimal;\n}\n",
  "    if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "  if (n <= m) return -1\n  let sum = 0\n  for (let i = n; i <= m; i++)\
    \ {\n    sum += i\n  }\n  return sum / m\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let\
    \ result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
    \ result / 2;\n}\n", "  if (n <= m) {\n    return -1\n  }\n  let result = 0\n\
    \  for (let i = n; i <= m; i++) {\n    result += i\n  }\n  return result / 2\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  let result: number = n;\n  for (let\
    \ i = m; i <= n; i++) {\n    result /= 2;\n  }\n  return result.toString(2);\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n <= m) {\n\
    \    return -1;\n  }\n  const n = Math.ceil(n / 2);\n  const m = Math.ceil(m /\
    \ 2);\n  const result = (n << 1) + m;\n  return result > Math.pow(2, 31) ? -1\
    \ : result;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\"\
    ;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    binary\
    \ += i.toString(2);\n  }\n  return binary + sum.toString(2);\n}\n", "  if (n <=\
    \ m) {\n    return -1\n  }\n  const binary = n.toString(2)\n  const decimal =\
    \ m / n\n  const rounded = decimal.toFixed(1).split('.')[0]\n  const roundedBinary\
    \ = parseInt(rounded, 2)\n  const result = binary + roundedBinary\n  return result\n\
    }\n", "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  return\
    \ result.toString(2);\n}\n", "  if (n <= m) return \"0b\" + n.toString(2);\n \
    \ return -1;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", " \
    \   if (n <= m) {\n        return -1\n    }\n    let result: number = n\n    let\
    \ remainder: number = m\n    while (remainder > 0) {\n        remainder--\n  \
    \      result += n\n    }\n    return result / 2\n}\n", "  if (n <= m) {\n   \
    \ return -1\n  }\n  let result = 0\n  for (let i = n; i <= m; i++) {\n    result\
    \ += i\n  }\n  return result / 2\n}\n", "  if (n >= m) return -1;\n  let result\
    \ = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result\
    \ / 2;\n}\n", "    if (n <= m) return \"0b\" + n.toString(2);\n    return -1;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result: number = n + (m >> 1);\n\
    \  while (result < n) {\n    result <<= 1;\n  }\n  return result;\n}\n", "  if\
    \ (n <= m) return \"0b\" + n.toString(2);\n  return -1;\n}\n", "    if (n < m)\
    \ {\n        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <=\
    \ m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n", "    if\
    \ (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let i =\
    \ n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n",
  "  if (n <= m) {\n    return -1;\n  }\n  const n = Math.ceil(n / 2);\n  const m\
    \ = Math.ceil(m / 2);\n  const result = (n << 1) + m;\n  return result > Math.pow(2,\
    \ 31) ? -1 : result;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const avg\
    \ = Math.floor((n + m) / 2);\n  return bin(avg);\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n\
    \  }\n  return sum / 2;\n}\n", "  if (n <= m) return -1\n  let result: number\
    \ = 0\n  for (let i = n; i <= m; i++) {\n    result += i\n  }\n  return result\
    \ / 2\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.min(n, m);\n\
    \  const m = Math.max(m, n);\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  return sum / Math.pow(2, m - n);\n}\n", "    if (n <= m)\
    \ {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m;\
    \ i++) {\n        sum += i;\n    }\n    return sum / 2;\n}\n", "  if (n >= m)\
    \ {\n    return -1;\n  }\n  let result: number = n;\n  let remainder: number =\
    \ m;\n  while (result >= remainder) {\n    result -= remainder;\n    remainder\
    \ += m;\n  }\n  return result.toString(2);\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  const n = Math.ceil(n);\n  const m = Math.ceil(m);\n  const binary\
    \ = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i;\n  }\n  return parseInt(binary,\
    \ 2);\n}\n", "  if (n <= m) return n;\n  return -1;\n}\n", "  if (n >= m) {\n\
    \    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  result += i;\n  }\n  return result / 2;\n}\n", "    if (n < m) {\n        return\
    \ -1;\n    }\n    let result: number = 0;\n    for (let i = n; i <= m; i++) {\n\
    \        result += i;\n    }\n    return result / 2;\n}\n", "  if (n < m) {\n\
    \    return -1;\n  }\n  const result = (n - m) / 2;\n  return result < 0 ? result\
    \ : result.toString(2);\n}\n", "    if (n < m) {\n        return -1;\n    }\n\
    \    let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n\
    \    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n        result\
    \ += i;\n    }\n    return result / 2;\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  let result: number = n + (m >> 1);\n  let remainder: number = m - (result\
    \ >> 1);\n  while (remainder > 0) {\n    result++;\n    remainder--;\n  }\n  return\
    \ result.toString(2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result\
    \ = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result\
    \ / 2;\n}\n", "    if (n > m) {\n        return -1;\n    }\n    let result = 0;\n\
    \    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return result\
    \ / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "    if\
    \ (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n;\
    \ i <= m; i++) {\n        sum += i;\n    }\n    return sum / 2;\n}\n", "  if (n\
    \ > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary =\
    \ result.toString(2);\n  return binary === \"0\" ? \"0b0\" : binary;\n}\n", " \
    \ if (n >= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
    \  return `${avg}b`;\n}\n", "    if (n < m) {\n        return -1;\n    }\n   \
    \ let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n \
    \ const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n\
    \  }\n  return parseInt(binary, 2);\n}\n", "  if (n < m) {\n    return -1;\n \
    \ }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n \
    \ }\n  return result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const\
    \ result: number = (n - m) / 2;\n  return `${result.toString(2)}`.padStart(result.length,\
    \ '0');\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n\
    \ + m) / 2);\n  return bin(avg);\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n    }\n  \
    \  let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "    if (n <= m) return -1\n    let result:\
    \ number = (n - m) / 2 + m\n    let resultString: string = result.toString(2)\n\
    \    let resultStringLength = resultString.length\n    let resultStringZeroPad:\
    \ number = resultString.padStart(resultStringLength, \"0\")\n    let resultStringZeroPadPad:\
    \ number = resultStringZeroPad.padEnd(resultStringLength, \"0\")\n    return parseInt(resultStringZeroPadPad,\
    \ 2)\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n > m) {\n    return -1;\n  }\n  const num: number = n - m;\n  const bin:\
    \ number = num.toString(2);\n  const len = bin.length;\n  const result: number\
    \ = len - 1;\n  const resultStr = bin.substr(0, result);\n  return resultStr;\n\
    }\n", "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if\
    \ (n <= m) {\n        return -1\n    }\n    let sum = 0\n    for (let i = n; i\
    \ <= m; i++) {\n        sum += i\n    }\n    return sum / m\n}\n", "  if (n <=\
    \ m) {\n    return -1\n  }\n  let result = 0\n  for (let i = n; i <= m; i++) {\n\
    \    result += i\n  }\n  return result / 2\n}\n", "    if (n < m) {\n        return\
    \ -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n      \
    \  result += i;\n    }\n    return result / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  const n = Math.min(n, m);\n  const m = Math.max(m, n);\n  const\
    \ binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n\
    \  }\n  return parseInt(binary, 2);\n}\n", "  if (n < m) {\n    return -1;\n \
    \ }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n \
    \ }\n  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const\
    \ result: number = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n\
    \ < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    sum += i;\n  }\n  return sum / m;\n}\n", "  if (n <= m) return -1\n \
    \ let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return sum\
    \ / m\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \   if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "    if (n <= m) {\n        return -1;\n    }\n    let result = 0;\n   \
    \ for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return result\
    \ / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \   if (n <= m) return -1\n    let result: number = n\n    let remainder: number\
    \ = m\n    while (remainder > 0) {\n        result = result + remainder % 2\n\
    \        remainder = remainder >> 1\n    }\n    return result + remainder\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
