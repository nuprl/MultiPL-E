name: HumanEval_103_rounded_avg
language: ts
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
    \  const binary = bin(avg);\n  const result = parseInt(binary, 2);\n  return result;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let\
    \ i = n; i <= m; i++) {\n    const bin = i.toString(2);\n    while (bin.length\
    \ < n) {\n      bin = \"0\" + bin;\n    }\n    binary += bin;\n  }\n  return binary;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "    if\
    \ (n >= m) {\n        return -1;\n    }\n    let result: number = (n - m) / 2;\n\
    \    let resultString: string = result.toString(2);\n    let resultStringLength\
    \ = resultString.length;\n    let resultStringBuilder: string = new StringBuilder();\n\
    \    for (let i = 0; i < resultStringLength; i++) {\n        resultStringBuilder.append(resultString[i]);\n\
    \    }\n    return resultStringBuilder.toString();\n}\n", "  if (n >= m) {\n \
    \   return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n    }\n  \
    \  let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n\
    \  const avg = Math.floor((n + m) / 2);\n  const binary = avg.toString(2);\n \
    \ return binary === \"0\" ? \"0b0\" : binary;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n    }\n  \
    \  let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n \
    \ const result = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n >=\
    \ m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  return `${result.toString(2)}`;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n\
    \    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return avg >= n ? avg :\
    \ \"0b\" + avg.toString(2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let\
    \ result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "    if (n < m) {\n        return -1;\n    }\n  \
    \  let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n\
    \    }\n    return result / 2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
