language: ts
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp34dcr99h.js:18:12)\n    at Object.<anonymous> (/tmp/tmp34dcr99h.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738475
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((v)\
    \ => v.toString(2).split('').reduce((a, b) => a + +b, 0));\n  const maxOnes =\
    \ Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin\
    \ = maxOnes.toString(2);\n  const maxOnesBinIndex = maxOnesBin.indexOf('1');\n\
    \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinIndex = maxOnesBinIndex\
    \ === -1 ? maxOnesBinLen : maxOnesBinIndex;\n  const maxOnesBin = maxOnesBin.substr(0,\
    \ maxOnesBinIndex);\n  const maxOnesBinNum = maxOnesBin.split('').length;\n  const\
    \ maxOnesBinNumIndex = maxOnesBinNum === 1 ? 0 : maxOnesBinNum - 1;\n  const maxOnesBinNum\
    \ = maxOnesBinNum.substr(0, maxOnesBinNumIndex);\n  const maxOnesBinNumNum = maxOnesBinNum.split('').reduce((a,\
    \ b) => a + +b, 0);\n  const maxOnesBinNumNumIndex = maxOnesBinNumNum === 1 ?\
    \ 0 : maxOnesBinNumNum - 1;\n  const maxOnesBinNumNum = maxOnesBinNumNum.substr(0,\
    \ maxOnesBinNumNumIndex);\n  const maxOnesBinNumNumNum = maxOnesBinNumNumNum.toString(2);\n\
    \  const maxOnesBinNumNumNumIndex = maxOnesBinNumNumNum === 1 ? 0 : maxOnesBinNumNumNum\
    \ - 1;\n  const maxOnesBinNumNumNum = maxOnesBinNumNumNum.substr(0, maxOnesBinNumNumNumIndex);\n\
    \  const maxOnesBinNumNumNumNum = maxOnesBinNumNumNumNum.substr(0, maxOnesBinNumNumNumNumIndex\
    \ + 1);\n  const maxOnesBinNumNumNumNumIndex = maxOnesBinNumNumNumNum === 1 ?\
    \ 0 : maxOnesBinNumNumNum - 1;\n  const maxOnesBinNumNumNumNum = maxOnesBinNumNumNumNum.substr(0,\
    \ maxOnesBinNumNumNumNumIndex);\n  const maxOnesBinNumNumNumNumNum = maxOnesBinNumNumNumNumNum.substr(0,\
    \ maxOnesBinNumNumNumNumNumIndex + 1);\n  const maxOnesBinNumNumNumNumNumIndex\
    \ = maxOnesBinNumNumNumNumNum === 1 ? 0 : maxOne\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxprz44_6.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((x)\
    \ => x === 1 ? 1 : 0);\n  const sortedOnes = ones\n    .map((x) => [x, ones.indexOf(x)])\n\
    \    .sort((a, b) => a[1] - b[1]);\n  const sortedArr = arr.map((x) => x);\n \
    \ for (let i = 0; i < sortedOnes.length; i++) {\n    sortedArr.splice(sortedArr.indexOf(sortedOnes[i][0]),\
    \ 1);\n  }\n  return sortedArr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpab0f_hvp.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpab0f_hvp.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738539
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n\
    \  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n\
    \  const maxOnesBin = bin(maxOnes);\n  const maxOnesBinIndex = maxOnesBin.indexOf(maxOnesBin[0]);\n\
    \  const maxOnesBinCount = maxOnesBin.length;\n  const maxOnesBinCountIndex =\
    \ maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n\
    \  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const\
    \ maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex\
    \ = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n\
    \  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const\
    \ maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex\
    \ = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n\
    \  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const\
    \ maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex\
    \ = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n\
    \  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const\
    \ maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex\
    \ = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n\
    \  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const\
    \ maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex\
    \ = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCount\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp50xz8lp8.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x)\
    \ => x === 1);\n  const dec = ones.length ? Math.log10(ones.length) : 0;\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
    \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n\
    \  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
    \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n\
    \  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
    \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n\
    \  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
    \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n\
    \  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0arqevc0.ts(68,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp0arqevc0.ts(84,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n\
    \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(a => a.length));\n\
    \  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxOnes === maxLen) {\n \
    \   return arr;\n  }\n  const maxOnesDiff = Math.abs(maxOnes - len);\n  if (maxOnesDiff\
    \ < maxLenDiff) {\n    return arr;\n  }\n  const maxOnesDiff = Math.abs(maxOnes\
    \ - len);\n  const maxOnesDiffIndex = arr.findIndex(a => a === maxOnes);\n  const\
    \ maxOnesDiffIndex = Math.max(...arr.map(a => a.length));\n  const maxOnesDiffIndexDiff\
    \ = Math.abs(maxOnesDiffIndex - len);\n  if (maxOnesDiffIndexDiff < maxLenDiff)\
    \ {\n    return arr;\n  }\n  const maxOnesDiffIndexDiff = Math.abs(maxOnesDiffIndex\
    \ - len);\n  const maxOnesDiffIndexDiffIndex = arr.findIndex(a => a === maxOnesDiffIndex);\n\
    \  const maxOnesDiffIndexDiffIndex = Math.max(...arr.map(a => a.length));\n  const\
    \ maxOnesDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndex - len);\n\
    \  if (maxOnesDiffIndexDiffIndexDiff < maxLenDiff) {\n    return arr;\n  }\n \
    \ const maxOnesDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndex - len);\n\
    \  const maxOnesDiffIndexDiffIndexDiffIndex = arr.findIndex(a => a === maxOnesDiffIndexDiffIndex);\n\
    \  const maxOnesDiffIndexDiffIndexDiffIndex = Math.max(...arr.map(a => a.length));\n\
    \  const maxOnesDiffIndexDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndexDiffIndex\
    \ - len);\n  if (maxOnesDiffIndexDiffIndexDiffIndexDiff < maxLenDiff) {\n    return\
    \ arr;\n  }\n  const maxOnesDiffIndexDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndexDiffIndex\
    \ - len);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndex = arr.findIndex(a\
    \ => a === maxOnesDiffIndexDiffIndexDiffIndex);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndex\
    \ = Math.max(...arr.map(a => a.length));\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiff\
    \ = Math.abs(maxOnesDiffIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7654253q.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7654253q.ts(56,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp7654253q.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a ===\
    \ 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n   \
    \   return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n\
    \    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b\
    \ === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return\
    \ 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a\
    \ === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n\
    \      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n \
    \   }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a ===\
    \ 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n  \
    \    return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 &&\
    \ b === -1) {\n      return 1;\n    }\n    if (a === 0 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a\
    \ === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n\
    \      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b\
    \ === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if\
    \ (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === -1)\
    \ {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n\
    \    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a ===\
    \ 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n  \
    \    return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b\
    \ === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return\
    \ 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a\
    \ === -1 && b === 1) {\n      return -1;\n    }\n    if (\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplklgts8b.ts(128,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmplklgts8b.ts(144,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n\
    \    .map((val) => val.toString(2).padStart(len, '0'))\n    .map((val) => parseInt(val,\
    \ 2))\n    .sort((a, b) => a - b);\n  const decs = arr\n    .map((val) => val.toString(10).padStart(len,\
    \ '0'))\n    .map((val) => parseInt(val, 10))\n    .sort((a, b) => a - b);\n \
    \ return [...ones, ...decs];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8fp3y0bl.ts(17,35): error TS2339: Property ''padStart''
    does not exist on type ''string''.

    ../../../../../tmp/tmp8fp3y0bl.ts(21,36): error TS2339: Property ''padStart''
    does not exist on type ''string''.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const maxOnes = Math.ceil(Math.log2(ones));\n  const\
    \ maxDec = Math.pow(10, maxOnes);\n  const maxDecStr = maxDec.toString();\n  const\
    \ maxDecArr = maxDecStr.split('');\n  const maxDecArrLen = maxDecArr.length;\n\
    \  const maxDecArrMap = new Array(maxDecArrLen).fill(0);\n  for (let i = 0; i\
    \ < maxDecArrLen; i++) {\n    maxDecArrMap[i] = maxDecArr[i].length;\n  }\n  const\
    \ maxDecArrMapLen = maxDecArrMap.length;\n  const maxDecArrMapMap = new Array(maxDecArrMapLen).fill(0);\n\
    \  for (let i = 0; i < maxDecArrMapLen; i++) {\n    maxDecArrMapMap[i] = new Array(maxDecArrLen).fill(0);\n\
    \  }\n  for (let i = 0; i < len; i++) {\n    const onesStr = arr[i].toString();\n\
    \    const onesArr = onesStr.split('');\n    const onesArrLen = onesArr.length;\n\
    \    for (let j = 0; j < onesArrLen; j++) {\n      const one = onesArr[j];\n \
    \     if (one === '1') {\n        maxDecArrMapMap[maxDecArrMap[j]][0]++;\n   \
    \   } else {\n        maxDecArrMapMap[maxDecArrMap[j]][1]++;\n      }\n    }\n\
    \  }\n  const maxDecArrMapMapLen = maxDecArrMapMap.length;\n  const maxDecArrMapMapMap\
    \ = new Array(maxDecArrMapMapLen).fill(0);\n  for (let i = 0; i < maxDecArrMapMapLen;\
    \ i++) {\n    maxDecArrMapMap[i] = new Array(maxDecArrMapLen).fill(0);\n  }\n\
    \  for (let i = 0; i < len; i++) {\n    const onesStr = arr[i].toString();\n \
    \   const onesArr = onesStr.split('');\n    const onesArrLen = onesArr.length;\n\
    \    for (let j = 0; j < onesArrLen; j++) {\n      const one = onesArr[j];\n \
    \     if (one === '1') {\n        maxDecArrMapMap[j][0]++;\n      } else {\n \
    \       maxDecArrMapMap[j][1]++;\n      }\n    }\n  }\n  const maxDecArrMapMapLen\
    \ = maxDecArrMapMap.length;\n  const maxDecArrMapMapMap = new Array(maxDecArrMapMapLen).fill(0);\n\
    \  for (let i = 0; i < maxDecArrMapMapLen; i++) {\n    maxDecArrMapMap[i] = new\
    \ Array(maxDecArrMapLen).fill(0);\n  }\n  for (let i = 0; i < len; i++) {\n  \
    \  const onesStr = arr[i].toString();\n    const onesArr = onesStr.split('\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf42j6hbm.ts(69,36): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpf42j6hbm.ts(70,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpf42j6hbm.ts(70,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpf42j6hbm.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a ===\
    \ 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n   \
    \   return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n\
    \    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1 &&\
    \ b === 0) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return\
    \ 0;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a\
    \ === 1 && b === -1) {\n      return 1;\n    }\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp2ykjx9d7.js:45:12)\n    at Object.<anonymous> (/tmp/tmp2ykjx9d7.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738539
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log2(ones)));\n\
    \  const maxDec = Math.pow(2, Math.ceil(Math.log2(maxOnes)));\n  const decs =\
    \ arr.map(val => val / maxDec);\n  const decSum = decs.reduce((acc, val) => acc\
    \ + val, 0);\n  const decSumArr = decs.map(val => val.toFixed(decSum));\n  const\
    \ decSumArr = decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a,\
    \ b) => a - b);\n  const decSumArr = decSumArr.map(val => val * maxDec);\n  const\
    \ decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr =\
    \ decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a,\
    \ b) => a - b);\n  const decSumArr = decSumArr.map(val => val / maxDec);\n  const\
    \ decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr =\
    \ decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a,\
    \ b) => a - b);\n  const decSumArr = decSumArr.map(val => val * maxDec);\n  const\
    \ decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr =\
    \ decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a,\
    \ b) => a - b);\n  const decSumArr = decSumArr.map(val => val / maxDec);\n  const\
    \ decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr =\
    \ decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a,\
    \ b) => a - b);\n  const decSumArr = decSumArr.map(val => val * maxDec);\n  const\
    \ decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr =\
    \ decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a,\
    \ b) => a - b);\n  const decSumArr = decSumArr.map(val => val / maxDec);\n  const\
    \ dec\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp36fjno9g.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n\
    \    return arr;\n  }\n  const mid = Math.floor(len / 2);\n  const left = arr.slice(0,\
    \ mid);\n  const right = arr.slice(mid);\n  return sort_array(left).concat(sort_array(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpowkzhif1.js:27:12)\n    at Object.<anonymous> (/tmp/tmpowkzhif1.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const aBits = binToInt(a);\n    const bBits = binToInt(b);\n  \
    \  return aBits - bBits;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6jnwm5vq.ts(13,19): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp6jnwm5vq.ts(14,19): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659738478
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones)\
    \ / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n\
    \  const decs = maxDec / maxOnes;\n  const decRound = Math.pow(10, Math.ceil(Math.log(decs)\
    \ / Math.LN10));\n  const decRounds = Math.ceil(Math.log(decs / Math.LN2));\n\
    \  const decs = decRounds * decRound;\n  const decRoundsLen = Math.ceil(Math.log(decs\
    \ / Math.LN10));\n  const decRoundsLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN2));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen /\
    \ Math.LN10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg55z2u84.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x)\
    \ => x === 1);\n  const decs = arr.map((x) => Math.abs(x));\n  const decSum =\
    \ decs.reduce((acc, x) => acc + x, 0);\n  const decSumArr = decs.map((x) => x\
    \ / decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const\
    \ decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x)\
    \ => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n\
    \  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr =\
    \ decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) =>\
    \ Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const\
    \ decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x)\
    \ => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n\
    \  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x)\
    \ => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n\
    \  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr =\
    \ decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) =>\
    \ Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const\
    \ decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x)\
    \ => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n\
    \  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x)\
    \ => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n\
    \  const decSumArr = decSumArr.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpulpmc_zy.ts(44,31): error TS1003: Identifier expected.

    ../../../../../tmp/tmpulpmc_zy.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const twos = arr.reduce((acc, val) => acc + val, 0);\n\
    \  const tens = arr.reduce((acc, val) => acc + val, 0);\n  const hundreds = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const tenths = arr.reduce((acc, val) => acc + val,\
    \ 0);\n  const hundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredths = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const tenthhundredthhundredths = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const hundredthhundredthhundredths = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const tenthhundredthhundredthhundredths = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredths = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredths =\
    \ arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredthhundredthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredthhundredthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredthhundredthhundredthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredthhundredthhundredthhundredths\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhund\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuc3rdg8x.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n\
    \    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9rapwfzg.ts(13,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp9rapwfzg.ts(14,18): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659738538
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n    \
    \  return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpiw4rf18j.js:25:12)\n    at Object.<anonymous> (/tmp/tmpiw4rf18j.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738473
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter(x\
    \ => x === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const maxOnes\
    \ = Math.max.apply(null, ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n\
    \  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxOnesBinLen = maxOnesBin.length;\n\
    \  const maxOnesBinLenLen = maxOnesBinLen + 1;\n  const maxOnesBinStr = maxOnesBin.substr(0,\
    \ maxOnesBinLenLen);\n  const maxOnesBinStrLen = maxOnesBinStr.length;\n  const\
    \ maxOnesBinStrArr = maxOnesBinStr.split('');\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n\
    \  const maxOnesBinStrArrMax = maxOnesBinStrArr.reduce((a, b) => Math.max(a, b),\
    \ 0);\n  const maxOnesBinStrArrMaxLen = maxOnesBinStrArrMax.toString().length;\n\
    \  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArr.indexOf(maxOnesBinStrArrMax);\n\
    \  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex + maxOnesBinStrArrMaxLen;\n\
    \  const maxOnesBinStrArrMaxIndexLen = maxOnesBinStrArrMaxIndex.toString().length;\n\
    \  const maxOnesBinStrArrMaxIndexLenLen = maxOnesBinStrArrMaxIndexLen + 1;\n \
    \ const maxOnesBinStrArrMaxIndexStr = maxOnesBinStrArrMaxIndex.substr(0, maxOnesBinStrArrMaxIndexLenLen);\n\
    \  const maxOnesBinStrArrMaxIndexStrLen = maxOnesBinStrArrMaxIndexStr.length;\n\
    \  const maxOnesBinStrArrMaxIndexStrArr = maxOnesBinStrArrMaxIndexStr.split('');\n\
    \  const maxOnesBinStrArrMaxIndexStrArrLen = maxOnesBinStrArrMaxIndexStrArr.length;\n\
    \  const maxOnesBinStrArrMaxIndexStrArrMax = maxOnesBinStrArrMaxIndexStrArr.reduce((a,\
    \ b) => Math.max(a, b), 0);\n  const maxOnesBinStrArrMaxIndexStrArrMaxLen = maxOnesBinStrArrMaxIndexStrArrMax.toString().length;\n\
    \  const maxOnesBinStrArrMaxIndexStrArrMaxIndex = maxOnesBinStrArrMaxIndexStrArrMax\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4wp73jcj.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738538
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp34dcr99h.js:18:12)\n    at Object.<anonymous> (/tmp/tmp34dcr99h.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738475
