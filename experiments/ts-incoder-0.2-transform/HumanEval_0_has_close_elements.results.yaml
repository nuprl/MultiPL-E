language: ts
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min_diff = Number.MAX_VALUE;\n\tfor (let i = 0; i < numbers.length\
    \ - 1; i++) {\n\t\tconst diff = numbers[i + 1] - numbers[i];\n\t\tif (diff < min_diff)\
    \ {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff < threshold;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0yoifc9g.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0yoifc9g.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 0
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tfor (let i = 0; i < numbers.length - 1; i++) {\n\t\tfor (let j = i + 1;\
    \ j < numbers.length; j++) {\n\t\t\tif (Math.abs(numbers[i] - numbers[j]) < threshold)\
    \ {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers\
    \ = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n\
    \  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber\
    \ = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber)\
    \ < threshold &&\n      Math.abs(lastNumber - middleNumber) < threshold;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5t2nmlkd.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5t2nmlkd.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let\
    \ i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax =\
    \ numbers[i];\n\t\t} else if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\
    \t}\n\t}\n\treturn (Math.abs(max - min) < threshold);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2,\
    \ 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnyjg2cxc.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnyjg2cxc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min_diff = threshold;\n\tfor (let i = 0; i < numbers.length; i++) {\n\
    \t\tlet diff = numbers[i] - min_diff;\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff\
    \ = diff;\n\t\t}\n\t}\n\treturn min_diff < threshold;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2,\
    \ 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp34k_xzt.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp34k_xzt.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length < 2) {\n        return false;\n    }\n    const sortedNumbers\
    \ = numbers.sort((a, b) => a - b);\n    const diffs = sortedNumbers.map((a, i)\
    \ => sortedNumbers[i + 1] - a);\n    const diffsThreshold = diffs.filter(d =>\
    \ d > threshold);\n    return diffsThreshold.length >= 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2,\
    \ 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkzgmmedx.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkzgmmedx.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min_diff = Math.abs(numbers[0] - threshold);\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tconst diff = Math.abs(numbers[i] - threshold);\n\
    \t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff\
    \ < threshold;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt42tjl8b.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt42tjl8b.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let\
    \ i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax =\
    \ numbers[i];\n\t\t} else if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\
    \t}\n\t}\n\treturn (max - min) < threshold;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2,\
    \ 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiorom0cl.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiorom0cl.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let\
    \ i = 0; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\t\
    max = Math.max(max, numbers[i]);\n\t}\n\tfor (let i = 0; i < numbers.length; i++)\
    \ {\n\t\tif (numbers[i] === max) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (numbers[i]\
    \ === min) {\n\t\t\treturn false;\n\t\t}\n\t\tif (Math.abs(numbers[i] - min) <\
    \ threshold) {\n\t\t\treturn true;\n\t\t}\n\t\tif (Math.abs(numbers[i] - max)\
    \ < threshold) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5_yeam3s.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5_yeam3s.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length < 2) {\n        return false;\n    }\n    let min_diff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 2; i < numbers.length;\
    \ i++) {\n        const diff = Math.abs(numbers[i] - numbers[i - 1]);\n      \
    \  if (diff < min_diff) {\n            min_diff = diff;\n        }\n    }\n  \
    \  return min_diff < threshold;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphkcxla3q.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphkcxla3q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tconst len = numbers.length;\n\tif (len < 2) {\n\t\treturn false;\n\t}\n\
    \tlet minDiff = Number.MAX_VALUE;\n\tfor (let i = 1; i < len; i++) {\n\t\tconst\
    \ diff = numbers[i] - numbers[i - 1];\n\t\tif (diff < minDiff) {\n\t\t\tminDiff\
    \ = diff;\n\t\t}\n\t}\n\treturn minDiff < threshold;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2,\
    \ 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpljreozen.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpljreozen.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length < 2) {\n        return false;\n    }\n    const sortedNumbers\
    \ = numbers.sort((a, b) => a - b);\n    const firstNumber = sortedNumbers[0];\n\
    \    const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n    const firstDiff\
    \ = Math.abs(firstNumber - threshold);\n    const lastDiff = Math.abs(lastNumber\
    \ - threshold);\n    return firstDiff < lastDiff;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2,\
    \ 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0_9in7p8.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0_9in7p8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 2
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n  const len = numbers.length;\n  if (len < 2) {\n    return false;\n  }\n\
    \  const min_diff = threshold;\n  const min_diff_index = -1;\n  const max_diff\
    \ = -threshold;\n  const max_diff_index = -1;\n  for (let i = 0; i < len; i++)\
    \ {\n    const diff = numbers[i] - min_diff;\n    if (diff > max_diff) {\n   \
    \   max_diff = diff;\n      max_diff_index = i;\n    }\n    if (diff < min_diff)\
    \ {\n      min_diff = diff;\n      min_diff_index = i;\n    }\n  }\n  return min_diff_index\
    \ != max_diff_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvt3q_xnz.ts(19,7): error TS2588: Cannot assign to
    ''max_diff'' because it is a constant.

    ../../../../../tmp/tmpvt3q_xnz.ts(20,7): error TS2588: Cannot assign to ''max_diff_index''
    because it is a constant.

    ../../../../../tmp/tmpvt3q_xnz.ts(23,7): error TS2588: Cannot assign to ''min_diff''
    because it is a constant.

    ../../../../../tmp/tmpvt3q_xnz.ts(24,7): error TS2588: Cannot assign to ''min_diff_index''
    because it is a constant.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length < 2) {\n        return false;\n    }\n    const sortedNumbers\
    \ = numbers.slice().sort((a, b) => a - b);\n    const firstNumber = sortedNumbers[0];\n\
    \    const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n    const middleNumber\
    \ = (firstNumber + lastNumber) / 2;\n    const middleNumberDistance = Math.abs(middleNumber\
    \ - threshold);\n    for (let i = 1; i < sortedNumbers.length; i++) {\n      \
    \  const currentNumber = sortedNumbers[i];\n        const currentNumberDistance\
    \ = Math.abs(currentNumber - threshold);\n        if (currentNumberDistance <\
    \ middleNumberDistance) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprixmzch4.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprixmzch4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 2
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min_distance = Number.MAX_VALUE;\n\tfor (let i = 0; i < numbers.length\
    \ - 1; i++) {\n\t\tconst distance = distanceBetween(numbers[i], numbers[i + 1]);\n\
    \t\tif (distance < min_distance) {\n\t\t\tmin_distance = distance;\n\t\t}\n\t\
    }\n\treturn min_distance < threshold;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaich5s3l.ts(10,20): error TS2304: Cannot find name
    ''distanceBetween''.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet close = false;\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\t\
    const n = numbers[i];\n\t\tconst d = Math.abs(n - threshold);\n\t\tif (d < Math.abs(numbers[i\
    \ + 1] - threshold)) {\n\t\t\tclose = true;\n\t\t}\n\t}\n\treturn close;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpro_o5c4e.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpro_o5c4e.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 2
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    for (let i = 0; i < numbers.length - 1; i++) {\n        const a = numbers[i];\n\
    \        const b = numbers[i + 1];\n        const dist = distance(a, b);\n   \
    \     if (dist <= threshold) {\n            return true;\n        }\n    }\n \
    \   return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7gtlzbu8.ts(11,22): error TS2304: Cannot find name
    ''distance''.

    '
  timestamp: 1659738756
- exit_code: 1
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min_diff = Math.abs(numbers[0] - numbers[1]);\n\tfor (let i = 1; i\
    \ < numbers.length; i++) {\n\t\tconst diff = Math.abs(numbers[i] - numbers[i -\
    \ 1]);\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn\
    \ min_diff < threshold;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwebhp4h3.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwebhp4h3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 2
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tlet min_diff = Number.MAX_VALUE;\n\tfor (let i = 0; i < numbers.length;\
    \ i++) {\n\t\tconst diff = numbers[i] - threshold;\n\t\tif (diff < min_diff) {\n\
    \t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff < Number.EPSILON;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyqia4t_4.ts(15,27): error TS2339: Property ''EPSILON''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738757
- exit_code: 0
  program: "//Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = i + 1; j <\
    \ numbers.length; j++) {\n\t\t\tif (Math.abs(numbers[i] - numbers[j]) < threshold)\
    \ {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738757
