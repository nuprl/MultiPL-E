name: HumanEval_156_int_to_mini_roman
language: ts
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number:\
  \ number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi,\
    \ '');\n}\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
    \ \"\");\n}\n", "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid\
    \ number ${number}`);\n  }\n\n  const roman = int_to_roman(number);\n  const mini\
    \ = roman.slice(0, roman.length - 1);\n  return mini.toLowerCase();\n}\n", " \
    \ if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n\
    \  }\n  const roman = roman_numerals(number);\n  const roman_str = roman.join('');\n\
    \  return roman_str.toLowerCase();\n}\n", "  const roman = int_to_roman(number);\n\
    \  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n", "  if (number <\
    \ 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n\
    \  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
    \ \"\");\n}\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi,\
    \ \"\");\n}\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi,\
    \ \"\");\n}\n", "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid\
    \ number: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n\
    }\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi,\
    \ \"\");\n}\n", "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid\
    \ number: ${number}`);\n  }\n\n  const roman = Array(number).fill(0).map((_, i)\
    \ => i).map(i => roman_numerals[i]);\n  return roman.join('');\n}\n", "  const\
    \ roman = int_to_roman(number);\n  return roman.charAt(0).toLowerCase() + roman.slice(1);\n\
    }\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
    \ \"\");\n}\n", "  let roman = int_to_roman(number);\n  return roman.toLowerCase();\n\
    }\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
    \ \"\");\n}\n", "  if (number < 1 || number > 1000) {\n    throw new Error(\"\
    Invalid input\");\n  }\n  let roman = \"\";\n  let numStr = number.toString();\n\
    \  for (let i = 0; i < numStr.length; i++) {\n    let char = numStr.charAt(i);\n\
    \    if (char === \"0\") {\n      roman += \"i\";\n    } else if (char === \"\
    1\") {\n      roman += \"v\";\n    } else if (char === \"2\") {\n      roman +=\
    \ \"c\";\n    } else if (char === \"3\") {\n      roman += \"l\";\n    } else\
    \ if (char === \"4\") {\n      roman += \"d\";\n    } else if (char === \"5\"\
    ) {\n      roman += \"m\";\n    } else if (char === \"6\") {\n      roman += \"\
    s\";\n    } else if (char === \"7\") {\n      roman += \"h\";\n    } else if (char\
    \ === \"8\") {\n      roman += \"g\";\n    } else if (char === \"9\") {\n    \
    \  roman += \"f\";\n    } else if (char === \"x\") {\n      roman += \"p\";\n\
    \    } else if (char === \"v\") {\n      roman += \"c\";\n    } else if (char\
    \ === \"c\") {\n      roman += \"x\";\n    } else if (char === \"l\") {\n    \
    \  roman += \"v\";\n    } else if (char === \"d\") {\n      roman += \"c\";\n\
    \    } else if (char === \"m\") {\n      roman += \"m\";\n    } else if (char\
    \ === \"s\") {\n      roman += \"s\";\n    } else if (char === \"h\") {\n    \
    \  roman += \"h\";\n    } else if (char === \"g\") {\n      roman += \"g\";\n\
    \    } else if (char === \"f\") {\n      roman += \"f\";\n    } else if (char\
    \ === \"p\") {\n      roman += \"p\";\n    }\n  }\n  return roman.toLowerCase();\n\
    }\n", "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number\
    \ ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
    \ \"\");\n}\n", "  const roman = roman_numeral_map[number];\n  if (roman === undefined)\
    \ {\n    throw new Error(`Invalid number ${number}`);\n  }\n  return roman.toLowerCase();\n\
    }\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
    \ \"\");\n}\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
