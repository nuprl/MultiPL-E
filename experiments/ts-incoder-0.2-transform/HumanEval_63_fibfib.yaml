name: HumanEval_63_fibfib
language: ts
prompt: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
  \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
  \ fibfib(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
  \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
  \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
  }\n\ntest();"
completions: ["  if (n < 2) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1)\
    \ {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  if (n < 2) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 2) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 3) {\n    return 0;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n === 0) {\n    return\
    \ 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if (n < 3) {\n    return 0\n  }\n  if (n === 3) {\n\
    \    return 1\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", " \
    \ if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 0) return\
    \ -1;\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n < 2) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 3) {\n    return\
    \ 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n <\
    \ 2) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n\
    \  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if (n < 3) {\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 2) {\n    return\
    \ 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n <\
    \ 3) {\n    return 0\n  }\n  if (n === 3) {\n    return 1\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
