name: HumanEval_56_correct_bracketing
language: ts
prompt: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
completions: ["\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
    \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\
    \tlet temp = opening_bracket;\n\t\t\topening_bracket = closing_bracket;\n\t\t\t\
    closing_bracket = temp;\n\t\t}\n\t\tlet opening_brackets_count = opening_brackets.length;\n\
    \t\tlet closing_brackets_count = closing_brackets.length;\n\t\twhile (opening_brackets_count\
    \ > 0 && closing_brackets_count > 0) {\n\t\t\tlet opening_bracket = opening_brackets[opening_brackets_count\
    \ - 1];\n\t\t\tlet closing_bracket = closing_brackets[closing_brackets_count -\
    \ 1];\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\topening_brackets.pop();\n\
    \t\t\t\tclosing_brackets.pop();\n\t\t\t\topening_brackets_count--;\n\t\t\t\tclosing_brackets_count--;\n\
    \t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets_count\
    \ !== closing_brackets_count) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i)\
    \ {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !==\
    \ bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length >\
    \ 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "\tlet opening_brackets\
    \ = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\
    \tlet opening_brackets_length = opening_brackets.length;\n\tlet closing_brackets_length\
    \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n", "\tlet stack: string[] =\
    \ [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.indexOf(\"<\") != -1) {\n\t\t\topening_brackets.push(i);\n\t\t\
    } else if (bracket.indexOf(\">\") != -1) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\twhile (opening_brackets.length > 0) {\n\t\tlet opening_bracket = opening_brackets.pop();\n\
    \t\tlet closing_bracket = closing_brackets.pop();\n\t\tif (opening_bracket < closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tstack.push(brackets.substring(opening_bracket,\
    \ closing_bracket));\n\t}\n\treturn true;\n}\n", "\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) == '<') {\n\
    \t\t\topening_brackets.push(bracket.substring(1, bracket.length - 1));\n\t\t}\n\
    \t\telse if (bracket.charAt(0) == '>') {\n\t\t\tclosing_brackets.push(bracket.substring(1,\
    \ bracket.length - 1));\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tlet stack: string[] = [];\n\
    \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket === \"<\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \">\"\
    ) {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\
    \t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tlet opening = stack[stack.length - 1];\n\t\t\tlet closing = bracket;\n\t\
    \t\tif (opening !== closing) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return true;\n}\n", "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "\tlet\
    \ opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
    \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
    \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ char) => set.add(char), new Set<string>());\n\treturn opening_brackets_set.size\
    \ == closing_brackets_set.size;\n}\n", "\tlet opening_brackets = brackets.split(\"\
    \");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tfor (let i =\
    \ 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\
    \t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n", "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars: number[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t\t\
    opening_chars.push(bracket.charCodeAt(0));\n\t\t} else if (bracket.charAt(0) ===\
    \ '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t\tclosing_chars.push(bracket.charCodeAt(0));\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet opening_char = opening_chars[i];\n\t\tlet closing_index\
    \ = closing_brackets[i];\n\t\tlet closing_char = closing_chars[i];\n\t\tlet opening_length\
    \ = opening_char - opening_index;\n\t\tlet closing_length = closing_char - closing_index;\n\
    \t\tif (opening_length >= closing_length) {\n\t\t\tlet opening_start = opening_index;\n\
    \t\t\tlet opening_end = opening_index + closing_length;\n\t\t\tlet opening_string\
    \ = brackets.substring(opening_start, opening_end);\n\t\t\tlet closing_start =\
    \ closing_index;\n\t\t\tlet closing_end = closing_index + opening_length;\n\t\t\
    \tlet closing_string = brackets.substring(closing_start, closing_end);\n\t\t\t\
    if (opening_string !== closing_string) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    } else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tlet opening_brackets:\
    \ number[] = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i\
    \ < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0)\
    \ === '<') {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.charAt(0)\
    \ === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
    \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\
    \tlet tmp = opening_bracket;\n\t\t\topening_bracket = closing_bracket;\n\t\t\t\
    closing_bracket = tmp;\n\t\t}\n\t\tlet opening_brackets_length = opening_brackets.length\
    \ - 1;\n\t\tlet closing_brackets_length = closing_brackets.length - 1;\n\t\tlet\
    \ opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index =\
    \ closing_bracket;\n\t\twhile (opening_brackets_index >= 0 && closing_brackets_index\
    \ >= 0) {\n\t\t\tif (opening_brackets[opening_brackets_index] === closing_brackets[closing_brackets_index])\
    \ {\n\t\t\t\topening_brackets_index--;\n\t\t\t\tclosing_brackets_index--;\n\t\t\
    \t} else {\n\t\t\t\tif (opening_brackets_index > closing_brackets_index) {\n\t\
    \t\t\t\tlet tmp = opening_brackets_index;\n\t\t\t\t\topening_brackets_index =\
    \ closing_brackets_index;\n\t\t\t\t\tclosing_brackets_index = tmp;\n\t\t\t\t}\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets_index >= 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\
    \t\t\topening_brackets.push(i);\n\t\t}\n\t\telse if (bracket.charAt(0) === '>')\
    \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tlet are_opening_brackets_correct\
    \ = opening_brackets.every((i) => closing_brackets.indexOf(i) !== -1);\n\treturn\
    \ are_opening_brackets_correct;\n}\n", "\tlet opening_brackets: string[] = [];\n\
    \tlet closing_brackets: string[] = [];\n\tlet opening_brackets_length = 0;\n\t\
    let closing_brackets_length = 0;\n\tfor (let i = 0; i < brackets.length; ++i)\
    \ {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (opening_brackets_length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\topening_brackets_length--;\n\
    \t\t\tclosing_brackets_length++;\n\t\t} else if (bracket === \">\") {\n\t\t\t\
    if (opening_brackets_length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\topening_brackets_length++;\n\
    \t\t\tclosing_brackets_length--;\n\t\t} else {\n\t\t\topening_brackets.push(bracket);\n\
    \t\t\topening_brackets_length++;\n\t\t}\n\t}\n\tif (opening_brackets_length !==\
    \ closing_brackets_length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
    \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[opening_brackets_length - i];\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\t\
    let stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
    let c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tstack.push(c);\n\t\t} else if\
    \ (c == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tlet top = stack.pop();\n\t\t\tif (top != c) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\n", "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length > 0) {\n\t\t\t\tif (stack[stack.length - 1] === \"<\") {\n\t\t\
    \t\t\tstack.pop();\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\
    \t} else {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t} else if (bracket ===\
    \ \">\") {\n\t\t\tif (stack.length > 0) {\n\t\t\t\tif (stack[stack.length - 1]\
    \ === \">\") {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n", "\tlet stack:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet c = brackets[i];\n\
    \t\tif (c == \"<\") {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top == \"<\") {\n\
    \t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push(\"<\");\n\t\t\t}\n\t\t\
    } else if (c == \">\") {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top == \">\") {\n\
    \t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push(\">\");\n\t\t\t}\n\t\t\
    } else {\n\t\t\tstack.push(c);\n\t\t}\n\t}\n\treturn stack.length == 0;\n}\n",
  "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
    let bracket = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\t\t\tstack.push(bracket);\n\
    \t\t} else if (bracket.includes(\">\")) {\n\t\t\tif (stack.length > 0) {\n\t\t\
    \t\tlet opening = stack.pop();\n\t\t\t\tif (opening !== bracket) {\n\t\t\t\t\t\
    return false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn stack.length === 0;\n}\n", "\tlet opening_brackets = brackets.split(\"\
    \");\n\tlet closing_brackets = brackets.split(\"\").reverse();\n\tlet opening_brackets_set\
    \ = opening_brackets.reduce((set, opening_bracket) => {\n\t\tset.add(opening_bracket);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ closing_bracket) => {\n\t\tset.add(closing_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\treturn !opening_brackets_set.equals(closing_brackets_set);\n\
    }\n", "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if\
    \ (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let\
    \ i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet next_opening_bracket = opening_brackets[i + 1];\n\t\tlet next_closing_bracket\
    \ = closing_brackets[i + 1];\n\t\tif (next_opening_bracket == null) {\n\t\t\t\
    // The opening bracket is at the very end of the string\n\t\t\tcontinue;\n\t\t\
    }\n\t\tif (next_closing_bracket == null) {\n\t\t\t// The closing bracket is at\
    \ the very end of the string\n\t\t\treturn false;\n\t\t}\n\t\tif (next_opening_bracket\
    \ < next_closing_bracket) {\n\t\t\t// The opening bracket comes before the closing\
    \ bracket\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tlet stack:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet c = brackets[i];\n\
    \t\tif (c === \"<\") {\n\t\t\tstack.push(\"<<\");\n\t\t} else if (c === \">\"\
    ) {\n\t\t\tif (stack.length !== 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\
    \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.length === 0;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
