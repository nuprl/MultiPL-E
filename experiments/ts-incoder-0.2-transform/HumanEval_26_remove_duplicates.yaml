name: HumanEval_26_remove_duplicates
language: ts
prompt: "//From a list of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
completions: ["    const map = new Map<number, number>();\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        const number = numbers[i];\n        if (map.has(number))\
    \ {\n            map.set(number, map.get(number) + 1);\n        } else {\n   \
    \         map.set(number, 1);\n        }\n    }\n    const result = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n\
    \        if (map.has(number)) {\n            result.push(number);\n          \
    \  map.delete(number);\n        }\n    }\n    return result;\n}\n", "  const result:\
    \ number[] = [];\n  const seen: Set<number> = new Set();\n  for (const num of\
    \ numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "    const result = [];\n\
    \    const seen = new Set<number>();\n    for (const num of numbers) {\n     \
    \   if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the array contains duplicates.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the array contains duplicates.\n<|/ c |>\n<| c |>\n\
    It does work. Try it out here: https://repl.it/repls/PleasingSandyEyeballs\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it out here: https://repl.it/repls/PleasingSandyEyeballs\n\
    <|/ c |>\n<| c |>\nIt does work. Try it out here: https://repl.it/repls/PleasingSandyEyeballs\n\
    <|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nconst removeDuplicates = arr\
    \ => {\n  let newArr = [];\n  arr.forEach(item => {\n    if (newArr.indexOf(item)\
    \ === -1) {\n      newArr.push(item);\n    }\n  });\n  return newArr;\n};\n\n\
    console.log(removeDuplicates([1, 2, 3, 2, 4]));</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nconst removeDuplicates = arr => {\n  let newArr = [];\n\
    \  arr.forEach(item => {\n    if (newArr.indexOf(item) === -1) {\n      newArr.push(item);\n\
    \    }\n  });\n  return newArr;\n};\n\nconsole.log(removeDuplicates([1, 2, 3,\
    \ 2, 4]));</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript\
    \ |>\n<code>", "    const unique: number[] = [];\n    const seen: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n\
    \        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n\
    \            unique.push(number);\n        }\n    }\n    return unique;\n}\n",
  "    const uniqueNumbers: number[] = [];\n    const map: Map<number, boolean> =\
    \ new Map();\n    for (let i = 0; i < numbers.length; i++) {\n        const number\
    \ = numbers[i];\n        if (map.has(number)) {\n            map.set(number, false);\n\
    \        } else {\n            map.set(number, true);\n            uniqueNumbers.push(number);\n\
    \        }\n    }\n    return uniqueNumbers;\n}\n", "  const unique: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i])\
    \ === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n",
  "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "  const hashTable = {};\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (hashTable[number]) {\n      hashTable[number] = hashTable[number] + 1;\n\
    \    } else {\n      hashTable[number] = 1;\n    }\n  }\n  const result = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (hashTable[number] === 1) {\n      result.push(number);\n    }\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const map = new Map<number, number>();\n\
    \  for (const num of numbers) {\n    if (!map.has(num)) {\n      map.set(num,\
    \ num);\n    }\n  }\n  return Array.from(map.values());\n}\n", "  const map =\
    \ new Map<number, number>();\n  for (const num of numbers) {\n    if (map.has(num))\
    \ {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n\
    \    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n    if\
    \ (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n",
  "  const output: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n   \
    \   continue;\n    }\n    seen.push(numbers[i]);\n    output.push(numbers[i]);\n\
    \  }\n  return output;\n}\n", "    const unique: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (unique.indexOf(num) === -1) {\n            unique.push(num);\n\
    \        }\n    });\n    return unique;\n}\n", "  const result: number[] = [];\n\
    \  const seen: Set<number> = new Set();\n  for (const num of numbers) {\n    if\
    \ (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const output: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n\
    \      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n", "  const\
    \ result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n\
    \    result.push(numbers[i]);\n  }\n  return result;\n}\n", "    const result\
    \ = [];\n    let seen = {};\n    numbers.forEach((num) => {\n        if (seen[num])\
    \ {\n            return;\n        }\n        seen[num] = true;\n        result.push(num);\n\
    \    });\n    return result;\n}\n", "  const result: number[] = [];\n  let seen:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
    \ = numbers[i];\n    if (seen.indexOf(number) !== -1) {\n      continue;\n   \
    \ }\n    seen.push(number);\n    result.push(number);\n  }\n  return result;\n\
    }\n", "    const result = [];\n    const seen = new Set<number>();\n    for (const\
    \ num of numbers) {\n        if (seen.has(num)) {\n            continue;\n   \
    \     }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n\
    \      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
