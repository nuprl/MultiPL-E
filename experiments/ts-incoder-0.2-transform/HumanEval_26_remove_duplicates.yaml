name: HumanEval_26_remove_duplicates
language: ts
prompt: "//From a list of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
completions: ["    const map = new Map<number, number>();\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        const number = numbers[i];\n        if (map.has(number))\
    \ {\n            map.set(number, map.get(number) + 1);\n        } else {\n   \
    \         map.set(number, 1);\n        }\n    }\n    const result = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n\
    \        if (map.has(number)) {\n            result.push(number);\n          \
    \  map.delete(number);\n        }\n    }\n    return result;\n}\n", "  const result:\
    \ number[] = [];\n  const seen: Set<number> = new Set();\n  for (const num of\
    \ numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "    const result = [];\n\
    \    const seen = new Set<number>();\n    for (const num of numbers) {\n     \
    \   if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the array contains duplicates.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the array contains duplicates.\n<|/ c |>\n<| c |>\n\
    It does work. Try it out here: https://repl.it/repls/PleasingSandyEyeballs\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it out here: https://repl.it/repls/PleasingSandyEyeballs\n\
    <|/ c |>\n<| c |>\nIt does work. Try it out here: https://repl.it/repls/PleasingSandyEyeballs\n\
    <|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nconst removeDuplicates = arr\
    \ => {\n  let newArr = [];\n  arr.forEach(item => {\n    if (newArr.indexOf(item)\
    \ === -1) {\n      newArr.push(item);\n    }\n  });\n  return newArr;\n};\n\n\
    console.log(removeDuplicates([1, 2, 3, 2, 4]));</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nconst removeDuplicates = arr => {\n  let newArr = [];\n\
    \  arr.forEach(item => {\n    if (newArr.indexOf(item) === -1) {\n      newArr.push(item);\n\
    \    }\n  });\n  return newArr;\n};\n\nconsole.log(removeDuplicates([1, 2, 3,\
    \ 2, 4]));</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript\
    \ |>\n<code>", "    const unique: number[] = [];\n    const seen: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n\
    \        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n\
    \            unique.push(number);\n        }\n    }\n    return unique;\n}\n",
  "    const uniqueNumbers: number[] = [];\n    const map: Map<number, boolean> =\
    \ new Map();\n    for (let i = 0; i < numbers.length; i++) {\n        const number\
    \ = numbers[i];\n        if (map.has(number)) {\n            map.set(number, false);\n\
    \        } else {\n            map.set(number, true);\n            uniqueNumbers.push(number);\n\
    \        }\n    }\n    return uniqueNumbers;\n}\n", "  const unique: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i])\
    \ === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n",
  "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "  const hashTable = {};\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (hashTable[number]) {\n      hashTable[number] = hashTable[number] + 1;\n\
    \    } else {\n      hashTable[number] = 1;\n    }\n  }\n  const result = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (hashTable[number] === 1) {\n      result.push(number);\n    }\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const map = new Map<number, number>();\n\
    \  for (const num of numbers) {\n    if (!map.has(num)) {\n      map.set(num,\
    \ num);\n    }\n  }\n  return Array.from(map.values());\n}\n", "  const map =\
    \ new Map<number, number>();\n  for (const num of numbers) {\n    if (map.has(num))\
    \ {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n\
    \    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n    if\
    \ (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n",
  "  const output: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n   \
    \   continue;\n    }\n    seen.push(numbers[i]);\n    output.push(numbers[i]);\n\
    \  }\n  return output;\n}\n", "    const unique: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (unique.indexOf(num) === -1) {\n            unique.push(num);\n\
    \        }\n    });\n    return unique;\n}\n", "  const result: number[] = [];\n\
    \  const seen: Set<number> = new Set();\n  for (const num of numbers) {\n    if\
    \ (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const output: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n\
    \      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n", "  const\
    \ result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n\
    \    result.push(numbers[i]);\n  }\n  return result;\n}\n", "    const result\
    \ = [];\n    let seen = {};\n    numbers.forEach((num) => {\n        if (seen[num])\
    \ {\n            return;\n        }\n        seen[num] = true;\n        result.push(num);\n\
    \    });\n    return result;\n}\n", "  const result: number[] = [];\n  let seen:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
    \ = numbers[i];\n    if (seen.indexOf(number) !== -1) {\n      continue;\n   \
    \ }\n    seen.push(number);\n    result.push(number);\n  }\n  return result;\n\
    }\n", "    const result = [];\n    const seen = new Set<number>();\n    for (const\
    \ num of numbers) {\n        if (seen.has(num)) {\n            continue;\n   \
    \     }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n\
    \      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1)\
    \ {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "    const map = new Map<number, number>();\n  \
    \  const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n      \
    \  const number = numbers[i];\n        if (map.has(number)) {\n            result.push(number);\n\
    \        } else {\n            map.set(number, number);\n        }\n    }\n  \
    \  return result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        result.push(num);\n        seen.add(num);\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  const seen: Set<number> =\
    \ new Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n     \
    \ continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n\
    }\n", "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n  \
    \  if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const result: number[] = [];\n    const\
    \ seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num)\
    \ === -1) {\n            seen.push(num);\n            result.push(num);\n    \
    \    }\n    });\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "  const result = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers.indexOf(numbers[i]) > -1) result.push(numbers[i]);\n  }\n\
    \  return result;\n}\n", "    const result: number[] = [];\n    const seen: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number\
    \ = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n            continue;\n\
    \        }\n        result.push(number);\n        seen.push(number);\n    }\n\
    \    return result;\n}\n", "  const output: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n \
    \     output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n", "  const hashTable\
    \ = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (hashTable[number]) {\n      delete hashTable[number];\n    } else {\n\
    \      hashTable[number] = number;\n    }\n  }\n  return Object.keys(hashTable).map(Number);\n\
    }\n", "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
    \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n    \
    \  map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value]\
    \ of map.entries()) {\n    if (value > 1) {\n      result.push(key);\n    }\n\
    \  }\n  return result;\n}\n", "    const output = new Array<number>();\n    const\
    \ seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num))\
    \ {\n            continue;\n        }\n        seen.add(num);\n        output.push(num);\n\
    \    }\n    return output;\n}\n", "  const result: number[] = [];\n  const seen:\
    \ Set<number> = new Set();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  const seen = new Set<number>();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const output: number[] = [];\n  let seen: Set<number> = new Set();\n  for (const\
    \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    output.push(num);\n  }\n  return output;\n}\n", "  const unique: number[]\
    \ = [];\n  const seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (seen.indexOf(numbers[i]) !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n\
    \    unique.push(numbers[i]);\n  }\n  return unique;\n}\n", "  const map = new\
    \ Map<number, number>();\n  for (const num of numbers) {\n    if (map.has(num))\
    \ {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n\
    \    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries())\
    \ {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n\
    }\n", "  const map = new Map<number, number>();\n  for (const num of numbers)\
    \ {\n    if (!map.has(num)) {\n      map.set(num, num);\n    }\n  }\n  return\
    \ Array.from(map.values());\n}\n", "  const output: number[] = [];\n  const seen:\
    \ Set<number> = new Set();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    output.push(num);\n  }\n\
    \  return output;\n}\n", "    const result = [];\n    let seen = {};\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n\
    \        if (seen[number]) {\n            continue;\n        }\n        seen[number]\
    \ = true;\n        result.push(number);\n    }\n    return result;\n}", "  const\
    \ hashTable: number[][] = [];\n  const result: number[] = [];\n\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\n    if (!hashTable[number])\
    \ {\n      hashTable[number] = [];\n    }\n\n    hashTable[number].push(number);\n\
    \  }\n\n  for (let i = 0; i < hashTable.length; i++) {\n    const numbers = hashTable[i];\n\
    \n    if (numbers.length > 1) {\n      for (let j = 0; j < numbers.length; j++)\
    \ {\n        result.push(numbers[j]);\n      }\n    }\n  }\n\n  return result;\n\
    }\n", "  const result = [];\n  const seen = new Set<number>();\n  for (const num\
    \ of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "    const unique: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n\
    \        }\n        seen.add(n);\n        result.push(n);\n    });\n    return\
    \ result;\n}\n", "  const map = new Map<number, number>();\n  for (const num of\
    \ numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n\
    \    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for\
    \ (const [key, value] of map.entries()) {\n    if (value > 1) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "    const uniqueNumbers = new Set<number>();\n\
    \    numbers.forEach((number) => {\n        if (uniqueNumbers.has(number)) {\n\
    \            uniqueNumbers.delete(number);\n        } else {\n            uniqueNumbers.add(number);\n\
    \        }\n    });\n    return [...uniqueNumbers];\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| c |>\nThis doesn't work if the array contains duplicate elements. e.g.\
    \ `[1, 1, 2, 2, 3]`\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it now.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    const\
    \ result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number)\
    \ => {\n        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n\
    \            result.push(number);\n        }\n    });\n    return result;\n}\n",
  "    const output: number[] = [];\n    let seen: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
    \ {\n            seen.push(numbers[i]);\n            output.push(numbers[i]);\n\
    \        }\n    }\n    return output;\n}\n", "  const result: number[] = [];\n\
    \  let seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n  \
    \  const num = numbers[i];\n    if (seen.indexOf(num) >= 0) {\n      continue;\n\
    \    }\n    seen.push(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
    \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const uniqueNumbers =\
    \ new Set<number>();\n  for (const num of numbers) {\n    if (uniqueNumbers.has(num))\
    \ {\n      continue;\n    }\n    uniqueNumbers.add(num);\n  }\n  return Array.from(uniqueNumbers);\n\
    }\n", "  const map = new Map<number, number>();\n  for (const num of numbers)\
    \ {\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else\
    \ {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key,\
    \ value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  const\
    \ seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i])\
    \ !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const hashTable = {};\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    const number = numbers[i];\n    if (hashTable[number])\
    \ {\n      hashTable[number]++;\n    } else {\n      hashTable[number] = 1;\n\
    \    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    const number = numbers[i];\n    if (hashTable[number] === 1) {\n    \
    \  result.push(number);\n    }\n  }\n  return result;\n}\n", "  const result =\
    \ [];\n  const seen = new Set<number>();\n  for (const num of numbers) {\n   \
    \ if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "    const unique: number[] = [];\n    const seen:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const\
    \ number = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n         \
    \   continue;\n        }\n        seen.push(number);\n        unique.push(number);\n\
    \    }\n    return unique;\n}\n", "    const result: number[] = [];\n    const\
    \ seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   const number = numbers[i];\n        if (seen.indexOf(number) >= 0) {\n   \
    \         continue;\n        }\n        seen.push(number);\n        result.push(number);\n\
    \    }\n    return result;\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
    \ = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n \
    \     result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        if (numberSet.has(numbers[i]))\
    \ {\n            continue;\n        }\n        numberSet.add(numbers[i]);\n  \
    \      uniqueNumbers.push(numbers[i]);\n    }\n    return uniqueNumbers;\n}\n\
    </code>\n<|/ a tags=typescript,javascript,arrays |>\n<| c |>\nThis solution doesn't\
    \ preserve the order of the elements in the original array.\n<|/ c |>\n<| a tags=typescript,javascript,arrays\
    \ |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, ", "  const uniqueNumbers: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result = [];\n  const seen = new Set<number>();\n  for (const num\
    \ of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  let seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (seen.indexOf(numbers[i]) !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n\
    \    result.push(numbers[i]);\n  }\n  return result;\n}\n", "    const result\
    \ = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n\
    \        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n", "  const output:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i])\
    \ === -1) {\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n",
  "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
    \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  let seen: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (seen.indexOf(number) !== -1) {\n      continue;\n    }\n    seen.push(number);\n\
    \    result.push(number);\n  }\n  return result;\n}\n", "  const hashTable = {};\n\
    \  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (!hashTable[number]) {\n      hashTable[number]\
    \ = true;\n      result.push(number);\n    }\n  }\n  return result;\n}\n", " \
    \ const output: number[] = [];\n  let seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n   \
    \   continue;\n    }\n    seen.push(numbers[i]);\n    output.push(numbers[i]);\n\
    \  }\n  return output;\n}\n", "  const result = [];\n  let seen = {};\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number])\
    \ {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "  const output: number[] = [];\n  const seen: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i])\
    \ !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    output.push(numbers[i]);\n\
    \  }\n  return output;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  let seen = {};\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n \
    \   result.push(number);\n  }\n  return result;\n}\n", "  const result = [];\n\
    \  const seen = new Set();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  const seen = new Set<number>();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const hash: Map<number, boolean> = new Map();\n  for (const num of numbers) {\n\
    \    if (hash.has(num)) {\n      hash.set(num, true);\n    } else {\n      hash.set(num,\
    \ false);\n    }\n  }\n  return [...hash.values()].sort((a, b) => a - b);\n}\n",
  "  const hashTable = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (hashTable[number]) {\n      hashTable[number]--;\n\
    \    } else {\n      hashTable[number] = 1;\n    }\n  }\n  const result = [];\n\
    \  for (const key in hashTable) {\n    if (hashTable[key] === 0) {\n      result.push(Number(key));\n\
    \    }\n  }\n  return result;\n}\n", "    const result: number[] = [];\n    const\
    \ seen: number[] = [];\n    for (const num of numbers) {\n        if (seen.indexOf(num)\
    \ >= 0) {\n            continue;\n        }\n        seen.push(num);\n       \
    \ result.push(num);\n    }\n    return result;\n}\n", "  const result = [];\n\
    \  const seen = new Set<number>();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "    const result = [];\n    let seen: Set<number> =\
    \ new Set();\n    for (let i = 0; i < numbers.length; i++) {\n        const num\
    \ = numbers[i];\n        if (seen.has(num)) {\n            continue;\n       \
    \ }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
    }\n", "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "  const map = new Map<number, number>();\n\
    \  for (const n of numbers) {\n    if (map.has(n)) {\n      map.set(n, map.get(n)\
    \ + 1);\n    } else {\n      map.set(n, 1);\n    }\n  }\n  return Array.from(map.keys()).sort();\n\
    }\n", "  const hashTable = {};\n  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    if (hashTable[number] === undefined)\
    \ {\n      hashTable[number] = true;\n      result.push(number);\n    }\n  }\n\
    \  return result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,javascript,typescript\
    \ |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\n\nconst result\
    \ = arr.reduce((acc, cur) => {\n  const index = acc.findIndex(item => item ===\
    \ cur);\n  if (index === -1) {\n    acc.push(cur);\n  } else {\n    acc[index]\
    \ = cur;\n  }\n  return acc;\n}, []);\n\nconsole.log(result);</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nconst arr = [1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3];\n\nconst result = arr.reduce((acc, cur) => {\n \
    \ const index = acc.findIndex(item => item === cur);\n  if (index === -1) {\n\
    \    acc.push(cur);\n  } else {\n    acc[index] = cur;\n  }\n  return acc;\n},\
    \ []);\n\nconsole.log(result);</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    const arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\n\nconst result = arr.reduce((acc,\
    \ cur) => {\n  const index = acc.findIndex(item => item === cur);\n  if (index\
    \ === -1) {\n    acc.push(cur);\n  } else {\n    acc[index] = cur;\n  }\n  return\
    \ acc;\n}, []);\n\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,typescript\
    \ |>\n<| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3];\n\nconst result = arr.reduce((acc, cur) => {\n  const index = acc.findIndex(item\
    \ => item === cur);\n  if (index === -1) {\n    acc.push(cur);\n  } else {\n \
    \   acc[index] = cur;\n  }\n  return acc;\n}, []);\n\nconsole.log(result);</code>\n\
    <|/ a tags=arrays,javascript,typescript |>\n<| a dscore=1 |>\n<code>\nconst arr\
    \ = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\n\nconst result = arr.reduce((acc, cur)\
    \ => {\n  const index = acc.findIndex(item => item === cur);\n  if (index ===\
    \ -1) {\n    acc.push(cur);\n  } else {\n    acc[index] = cur;\n  }\n  return\
    \ acc;\n}, []);\n\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,typescript\
    \ |>\n<| a tag", "  const hashTable = {};\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n     \
    \ hashTable[number]--;\n    } else {\n      hashTable[number] = 1;\n    }\n  }\n\
    \  const result = [];\n  for (const key in hashTable) {\n    if (hashTable[key]\
    \ === 0) {\n      result.push(Number(key));\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "    const unique: number[]\
    \ = [];\n    numbers.forEach(number => {\n        if (unique.indexOf(number) ===\
    \ -1) {\n            unique.push(number);\n        }\n    });\n    return unique;\n\
    }\n", "    const unique: number[] = [];\n    const seen: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i])\
    \ !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n\
    \        unique.push(numbers[i]);\n    }\n    return unique;\n}\n", "    const\
    \ result = [];\n    const seen = new Set<number>();\n    for (const num of numbers)\
    \ {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n", "  const result =\
    \ [];\n  const seen = new Set<number>();\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n\
    \    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n\
    }\n", "  const result = [];\n  const seen = new Set<number>();\n  for (const num\
    \ of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "    const uniqueNumbers:\
    \ number[] = [];\n    const numberSet = new Set(numbers);\n    numbers.forEach(number\
    \ => {\n        if (numberSet.has(number)) {\n            numberSet.delete(number);\n\
    \        } else {\n            uniqueNumbers.push(number);\n        }\n    });\n\
    \    return uniqueNumbers;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| c\
    \ |>\nThis doesn't work if you have duplicate numbers in the array.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it out on [this fiddle](https://jsfiddle.net/j8z4gL6s/).\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it out on [this fiddle](https://jsfiddle.net/j8z4gL6s/1/).\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it out on [this fiddle](https://jsfiddle.net/j8z4gL6s/2/).\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it out on [this fiddle](https://jsfiddle.net/j8z4gL6s/3/).\n\
    <|/ c |>\n<| a tags=arrays,javascript |>\n<code>", "    const result: number[]\
    \ = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number)\
    \ !== -1) {\n            continue;\n        }\n        seen.push(number);\n  \
    \      result.push(number);\n    }\n    return result;\n}\n", "  const result\
    \ = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "    const result: number[] = [];\n    let seen: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number\
    \ = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n            continue;\n\
    \        }\n        seen.push(number);\n        result.push(number);\n    }\n\
    \    return result;\n}\n", "    const unique: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) === -1)\
    \ {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n", "    const result = [];\n    let seen = {};\n    numbers.forEach((num) =>\
    \ {\n        if (seen[num]) {\n            return;\n        }\n        seen[num]\
    \ = true;\n        result.push(num);\n    });\n    return result;\n}\n", "  const\
    \ map = new Map<number, number>();\n  for (const num of numbers) {\n    if (map.has(num))\
    \ {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n\
    \    }\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n}\n", " \
    \   const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) ===\
    \ -1) {\n            seen.push(numbers[i]);\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "    const uniqueNumbers: number[]\
    \ = [];\n    const numberSet = new Set(numbers);\n    for (const num of numberSet)\
    \ {\n        if (uniqueNumbers.indexOf(num) === -1) {\n            uniqueNumbers.push(num);\n\
    \        }\n    }\n    return uniqueNumbers;\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| a tags=javascript,typescript |>\n<code>\nconst arr = [1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, ", "  const\
    \ result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n      continue;\n\
    \    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return\
    \ result;\n}\n", "  const hashTable = {};\n  const output = [];\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hashTable[number])\
    \ {\n      hashTable[number]++;\n    } else {\n      hashTable[number] = 1;\n\
    \      output.push(number);\n    }\n  }\n  return output;\n}\n", "  const result\
    \ = [];\n  const seen = new Set<number>();\n  for (const num of numbers) {\n \
    \   if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "    const unique: number[] = [];\n    const seen:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const\
    \ number = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n         \
    \   continue;\n        }\n        seen.push(number);\n        unique.push(number);\n\
    \    }\n    return unique;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1)\
    \ {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "   \
    \ const result: number[] = [];\n    const seen: number[] = [];\n    for (const\
    \ num of numbers) {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n\
    \            result.push(num);\n        }\n    }\n    return result;\n}\n", " \
    \ const result = [];\n  let seen = {};\n  for (const num of numbers) {\n    if\
    \ (seen[num]) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "    const result = [];\n    const seen = new Set();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        result.push(num);\n        seen.add(num);\n    }\n    return\
    \ result;\n}\n", "  const map = new Map<number, number>();\n  for (const num of\
    \ numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n\
    \    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for\
    \ (const [key, value] of map) {\n    if (value > 1) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "  const hashTable = {};\n  for (const num\
    \ of numbers) {\n    if (hashTable[num]) {\n      delete hashTable[num];\n   \
    \ } else {\n      hashTable[num] = true;\n    }\n  }\n  return Object.keys(hashTable).map(num\
    \ => +num);\n}\n", "  const hashTable = {};\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n     \
    \ hashTable[number]++;\n    } else {\n      hashTable[number] = 1;\n    }\n  }\n\
    \  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (hashTable[number] === 1) {\n      result.push(number);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  const\
    \ seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i])\
    \ !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  const seen: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i])\
    \ !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const map = new Map<number, number>();\n  for\
    \ (const n of numbers) {\n    if (map.has(n)) {\n      map.set(n, map.get(n) +\
    \ 1);\n    } else {\n      map.set(n, 1);\n    }\n  }\n  const result = [];\n\
    \  for (const [key, value] of map) {\n    if (value > 1) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ map = new Map<number, number>();\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number,\
    \ map.get(number) + 1);\n    } else {\n      map.set(number, 1);\n    }\n  }\n\
    \  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (map.has(number)) {\n      result.push(number);\n\
    \      map.delete(number);\n    }\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  const seen = new Set<number>();\n  for (const num of numbers) {\n \
    \   if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  let seen = {};\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number])\
    \ {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  const seen = new Set();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "  const output: number[] =\
    \ [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i])\
    \ === -1) {\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n",
  "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n   \
    \   continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const hash: Map<number, boolean> = new\
    \ Map();\n  for (const num of numbers) {\n    if (hash.has(num)) {\n      hash.set(num,\
    \ true);\n    } else {\n      hash.set(num, false);\n    }\n  }\n  return [...hash.values()]\n\
    \    .sort((a, b) => a - b)\n    .map((num) => num);\n}\n", "  const result =\
    \ [];\n  let seen = {};\n  for (const num of numbers) {\n    if (seen[num]) {\n\
    \      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n \
    \ return result;\n}\n", "    const result: number[] = [];\n    const seen: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n\
    \        if (seen.indexOf(num) >= 0) {\n            continue;\n        }\n   \
    \     result.push(num);\n        seen.push(num);\n    }\n    return result;\n\
    }\n", "  const result = [];\n  const seen = new Set<number>();\n  for (const num\
    \ of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result = [];\n \
    \ let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
    \ = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number]\
    \ = true;\n    result.push(number);\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
    \ === i) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const hashTable = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (hashTable[number]) {\n      hashTable[number]--;\n\
    \    } else {\n      hashTable[number] = 1;\n    }\n  }\n  const result = [];\n\
    \  for (const key in hashTable) {\n    if (hashTable[key] === 0) {\n      result.push(Number(key));\n\
    \    }\n  }\n  return result;\n}\n", "  const uniqueNumbers: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1)\
    \ {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "   \
    \ const result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        const number = numbers[i];\n        if (seen[number]) {\n  \
    \          continue;\n        }\n        seen[number] = true;\n        result.push(number);\n\
    \    }\n    return result;\n}\n", "  const hashTable = {};\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hashTable[number])\
    \ {\n      hashTable[number]--;\n    } else {\n      hashTable[number] = 1;\n\
    \    }\n  }\n  const result = [];\n  for (const key in hashTable) {\n    if (hashTable[key]\
    \ === 0) {\n      result.push(Number(key));\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
    \ (!map.has(num)) {\n      map.set(num, num);\n    }\n  }\n  return Array.from(map.values());\n\
    }\n", "  const hash: number[] = [];\n  const result: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (hash.indexOf(numbers[i]) === -1)\
    \ {\n      result.push(numbers[i]);\n      hash.push(numbers[i]);\n    }\n  }\n\
    \  return result;\n}\n", "  const hashTable = {};\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n     \
    \ hashTable[number]--;\n    } else {\n      hashTable[number] = 1;\n    }\n  }\n\
    \  const result = [];\n  for (const key in hashTable) {\n    if (hashTable[key]\
    \ === 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const hash: Map<number, boolean> = new Map();\n  for (const n of numbers) {\n\
    \    if (hash.has(n)) {\n      hash.set(n, false);\n    } else {\n      hash.set(n,\
    \ true);\n    }\n  }\n  const result: number[] = [];\n  for (const [key, value]\
    \ of hash) {\n    if (value) {\n      result.push(key);\n    }\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  const seen = new Set<number>();\n  for\
    \ (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n\
    \    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n", "  const\
    \ uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
    \    }\n  }\n  return uniqueNumbers;\n}\n", "  const result = [];\n  const seen\
    \ = new Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n   \
    \   continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return\
    \ result;\n}\n", "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n\
    \      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (seen.indexOf(num)\
    \ >= 0) {\n      continue;\n    }\n    seen.push(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "    const unique: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) ===\
    \ -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n", "  const uniqueNumbers: number[] = [];\n  const numberSet = new Set<number>();\n\
    \  for (const num of numbers) {\n    if (numberSet.has(num)) {\n      continue;\n\
    \    }\n    numberSet.add(num);\n    uniqueNumbers.push(num);\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const uniqueNumbers = new Set<number>();\n  for (const num of numbers) {\n  \
    \  if (uniqueNumbers.has(num)) {\n      continue;\n    }\n    uniqueNumbers.add(num);\n\
    \  }\n  return [...uniqueNumbers].sort();\n}\n", "  const uniqueNumbers: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "  const result = [];\n  const seen = new\
    \ Set<number>();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n \
    \     continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return\
    \ result;\n}\n", "  const map = new Map<number, number>();\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number))\
    \ {\n      map.set(number, map.get(number) + 1);\n    } else {\n      map.set(number,\
    \ 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      result.push(number);\n\
    \      map.delete(number);\n    }\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number]\
    \ = true;\n    result.push(number);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n   \
    \   seen.push(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const hashTable: number[][] = [];\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n\
    \    if (hashTable[num] === undefined) {\n      hashTable[num] = [];\n    }\n\
    \    hashTable[num].push(i);\n  }\n  for (let i = 0; i < hashTable.length; i++)\
    \ {\n    const nums = hashTable[i];\n    for (let j = 0; j < nums.length; j++)\
    \ {\n      const num = nums[j];\n      if (result.indexOf(num) === -1) {\n   \
    \     result.push(num);\n      }\n    }\n  }\n  return result;\n}\n", "  const\
    \ result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "  const result = [];\n  const seen = new\
    \ Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n\
    \    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
    \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number)\
    \ === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n}\n", " \
    \ const map = new Map<number, number>();\n  for (const num of numbers) {\n   \
    \ if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n \
    \     map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value]\
    \ of map) {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  const seen = new Set<number>();\n  for\
    \ (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n\
    \    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
    \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  let seen: Set<number> = new Set();\n  for (const num of numbers) {\n\
    \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  const seen = new Set<number>();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const hash: number[] = [];\n  const result: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    const num = numbers[i];\n    if (hash.indexOf(num)\
    \ === -1) {\n      result.push(num);\n      hash.push(num);\n    }\n  }\n  return\
    \ result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "  const unique: number[] = [];\n  const seen: Set<number> =\
    \ new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i]))\
    \ {\n      continue;\n    }\n    seen.add(numbers[i]);\n    unique.push(numbers[i]);\n\
    \  }\n  return unique;\n}\n", "  const hashTable = {};\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    const number = numbers[i];\n    if (hashTable[number])\
    \ {\n      hashTable[number]--;\n    } else {\n      hashTable[number] = 1;\n\
    \    }\n  }\n  const result = [];\n  for (const key in hashTable) {\n    if (hashTable[key]\
    \ === 0) {\n      result.push(Number(key));\n    }\n  }\n  return result;\n}\n",
  "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
    \    }\n  }\n  return uniqueNumbers;\n}\n", "  const result: number[] = [];\n\
    \  const seen: Set<number> = new Set();\n  for (const num of numbers) {\n    if\
    \ (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "    const result = [];\n    let seen: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number\
    \ = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n            continue;\n\
    \        }\n        seen.push(number);\n        result.push(number);\n    }\n\
    \    return result;\n}\n", "  const output = new Array<number>();\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1)\
    \ {\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n", "  const\
    \ result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n  \
    \      if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n\
    \        result.push(num);\n    });\n    return result;\n}\n", "  const result\
    \ = [];\n  const seen = new Set<number>();\n  for (const num of numbers) {\n \
    \   if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const map = new Map<number, number>();\n  for\
    \ (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num)\
    \ + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n\
    \  for (const [key, value] of map) {\n    if (value > 1) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "    const result = [];\n    const seen =\
    \ new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num))\
    \ {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n\
    \    }\n    return result;\n}\n", "    const result: number[] = [];\n    const\
    \ seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   const number = numbers[i];\n        if (seen.indexOf(number) >= 0) {\n   \
    \         continue;\n        }\n        seen.push(number);\n        result.push(number);\n\
    \    }\n    return result;\n}\n", "  const hashTable = {};\n  const result = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (!hashTable[number]) {\n      hashTable[number] = true;\n      result.push(number);\n\
    \    }\n  }\n  return result;\n}\n", "    const output: number[] = [];\n    let\
    \ seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   if (seen.indexOf(numbers[i]) === -1) {\n            output.push(numbers[i]);\n\
    \            seen.push(numbers[i]);\n        }\n    }\n    return output;\n}\n",
  "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "    const result = [];\n    const\
    \ seen = new Set();\n    for (const num of numbers) {\n        if (seen.has(num))\
    \ {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n\
    \    }\n    return result;\n}\n", "  const result = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n     \
    \ result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const map =\
    \ new Map<number, number>();\n  for (const num of numbers) {\n    if (map.has(num))\
    \ {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n\
    \    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries())\
    \ {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n\
    }\n", "  const hashTable = {};\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    const number = numbers[i];\n    if (hashTable[number]) {\n      hashTable[number]--;\n\
    \    } else {\n      hashTable[number] = 1;\n    }\n  }\n  const result = [];\n\
    \  for (const key in hashTable) {\n    if (hashTable[key] === 0) {\n      result.push(Number(key));\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i)\
    \ {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n\
    }\n", "  const map = new Map<number, number>();\n  for (const num of numbers)\
    \ {\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else\
    \ {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key,\
    \ value] of map) {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n\
    \  return result;\n}\n", "  const output: number[] = [];\n  const seen: Set<number>\
    \ = new Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n   \
    \   continue;\n    }\n    seen.add(num);\n    output.push(num);\n  }\n  return\
    \ output;\n}\n", "    const output: number[] = [];\n    const seen: number[] =\
    \ [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number =\
    \ numbers[i];\n        if (seen.indexOf(number) > -1) {\n            continue;\n\
    \        }\n        seen.push(number);\n        output.push(number);\n    }\n\
    \    return output;\n}\n", "    const unique: number[] = [];\n    const seen:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i])\
    \ !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n\
    \        unique.push(numbers[i]);\n    }\n    return unique;\n}\n", "    const\
    \ result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n\
    \            continue;\n        }\n        seen.push(numbers[i]);\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
