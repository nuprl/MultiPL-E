name: HumanEval_4_mean_absolute_deviation
language: ts
prompt: "//For a given list of input numbers, calculate Mean Absolute Deviation\n\
  // around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute\
  \ difference between each\n// element and a centerpoint (mean in this case):\n//\
  \ MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  // 1.0\nfunction mean_absolute_deviation(numbers: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();"
completions: ["  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"\
    Mean Absolute Deviation requires at least two data points\");\n  }\n  const mean\
    \ = numbers.reduce((sum, value) => sum + value, 0) / n;\n  return numbers.reduce((sum,\
    \ value) => (sum + Math.abs(value - mean))/n);\n}\n", "  let mean = mean(numbers);\n\
    \  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i]\
    \ - mean, 2);\n  }\n  return Math.sqrt(sum / numbers.length);\n}\n", "  let mean\
    \ = mean(numbers);\n  let deviations = numbers.map(function(number) {\n    return\
    \ Math.pow(number - mean, 2);\n  });\n  return deviations.reduce(function(sum,\
    \ deviation) {\n    return sum + Math.sqrt(deviation);\n  }, 0);\n}\n", "  const\
    \ n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Mean Absolute Deviation\
    \ requires at least two data points.\");\n  }\n  const mean = numbers.reduce((p,\
    \ c) => p + c, 0) / n;\n  const deviations = numbers.map(n => Math.abs(n - mean));\n\
    \  return deviations.reduce((p, c) => p + c, 0) / deviations.length;\n}\n", " \
    \ let mean = mean_(numbers);\n  let deviations = numbers.map((x) => Math.abs(x\
    \ - mean));\n  return mean(deviations);\n}\n", "  const n = numbers.length;\n\
    \  if (n < 2) {\n    throw new RangeError('mean_absolute_deviation: input must\
    \ contain at least two elements');\n  }\n  const mean = numbers.reduce((sum, value)\
    \ => sum + value, 0) / n;\n  const deviations = numbers.map(value => Math.pow(value\
    \ - mean, 2));\n  return deviations.reduce((sum, deviation) => sum + deviation,\
    \ 0) / n;\n}\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"\
    Mean Absolute Deviation requires at least two data points\");\n  }\n  const mean\
    \ = numbers.reduce((sum, value) => sum + value, 0) / n;\n  const deviations =\
    \ numbers.map(value => {\n    const diff = value - mean;\n    return diff >= 0\
    \ ? diff : -diff;\n  });\n  return deviations.reduce((sum, deviation) => sum +\
    \ deviation, 0) / n;\n}\n", "  let mean = mean_(numbers);\n  let mad = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    let diff = numbers[i] - mean;\n\
    \    mad = Math.round(Math.abs(diff) * 100) / 100;\n  }\n  return mad;\n}\n",
  "  let mean = mean(numbers);\n  let sum = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n\
    }\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Mean\
    \ Absolute Deviation requires at least two data points.\");\n  }\n  const mean\
    \ = numbers.reduce((sum, value) => sum + value, 0) / n;\n  const deviations =\
    \ numbers.map(value => Math.abs(value - mean));\n  return deviations.reduce((sum,\
    \ deviation) => sum + deviation, 0) / n;\n}\n", "  let mean = mean(numbers);\n\
    \  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i]\
    \ - mean, 2);\n  }\n  return Math.sqrt(sum / numbers.length);\n}\n", "  let mean\
    \ = mean(numbers);\n  let mad = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    mad += Math.abs(numbers[i] - mean);\n  }\n  return mad.divide(numbers.length);\n\
    }\n", "  let mean = mean_(numbers);\n  let mad = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    let diff = numbers[i] - mean;\n    mad += diff * diff;\n  }\n  return\
    \ Math.sqrt(mad_ / numbers.length);\n}\n", "  const n = numbers.length;\n  if\
    \ (n < 2) {\n    throw new Error(\"Mean Absolute Deviation requires at least two\
    \ data points.\");\n  }\n  const mean = numbers.reduce((sum, value) => sum + value,\
    \ 0) / n;\n  const deviations = numbers.map(value => Math.pow(value - mean, 2));\n\
    \  return deviations.reduce((sum, deviation) => sum + deviation, 0) / n;\n}\n",
  "  const n = numbers.length;\n  if (n === 0) return 0;\n  const mean = sum(numbers)\
    \ / n;\n  const diffs = numbers.map(x => x - mean);\n  return sum(diffs) / n;\n\
    }\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Mean\
    \ Absolute Deviation requires at least two data points.\");\n  }\n  const mean\
    \ = sum(numbers) / n;\n  const sumOfSquares = numbers.reduce((sum, value) => (sum\
    \ += Math.pow(value - mean, 2)), 0);\n  return Math.sqrt(sumOfSquares / n);\n\
    }\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Mean\
    \ Absolute Deviation requires at least two data points\");\n  }\n  const mean\
    \ = numbers.reduce((sum, value) => sum + value, 0) / n;\n  return numbers.reduce((sum,\
    \ value) =>\n    Math.abs(sum - mean) < Number.EPSILON\n      ? sum\n      : sum\
    \ + Math.pow(value - mean, 2),\n    0\n  ) / (n - 1);\n}\n", "  let mean: number\
    \ = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(x\
    \ => Math.pow((x - mean), 2)).reduce((a, b) => a + b, 0) / numbers.length;\n}\n",
  "  const mean = mean(numbers);\n  const deviations = numbers.map(function(x) {\n\
    \    return Math.pow(x - mean, 2);\n  });\n  return deviations.reduce(function(sum,\
    \ deviation) {\n    return sum + Math.sqrt(deviation);\n  }, 0);\n}\n", "  const\
    \ n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Mean Absolute Deviation\
    \ requires at least two data points\");\n  }\n  const mean = numbers.reduce((sum,\
    \ value) => sum + value, 0) / n;\n  return numbers.reduce((sum, value) =>\n  \
    \  Math.abs(value - mean) < Math.abs(sum) ? Math.abs(value - mean) : Math.abs(sum),\
    \ 0) / n;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
