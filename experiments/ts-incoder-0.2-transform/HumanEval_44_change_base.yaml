name: HumanEval_44_change_base
language: ts
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x: number, base: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
  22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
  \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
  \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
  \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
  \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
  \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
completions: ["  let str = x.toString(base);\n  while (str.length < base) {\n    str\
    \ = `0${str}`;\n  }\n  return str;\n}\n", "  let result = \"\";\n  let digits\
    \ = \"\";\n  let baseDigits = \"\";\n  let baseDigitCount = 0;\n  while (x > 0)\
    \ {\n    digits = String(x % base);\n    baseDigits = String(base).split(\"\"\
    );\n    baseDigitCount = baseDigits.length;\n    if (baseDigitCount > 0) {\n \
    \     baseDigits = baseDigits.slice(0, baseDigitCount - 1);\n    }\n    result\
    \ = digits + baseDigits.join(\"\");\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let baseDigits\
    \ = \"\";\n  let baseDigitCount = 0;\n  let digitCount = 0;\n  while (x > 0) {\n\
    \    digits = String(x % base);\n    baseDigitCount = digits.length;\n    baseDigits\
    \ = baseDigitCount > 0 ? new Array(baseDigitCount).fill(digits).join(\"\") : \"\
    \";\n    digitCount = digitCount + baseDigitCount;\n    x = Math.floor(x / base);\n\
    \    result = digits + baseDigits;\n  }\n  return result;\n}\n", "  const str\
    \ = x.toString(base);\n  return str.length < base ? `0${str}` : str;\n}\n", " \
    \   if (base < 1 || base > 10) {\n        throw new RangeError(\"Base must be\
    \ between 1 and 10\");\n    }\n    const digits = x.toString().split(\"\").reverse();\n\
    \    const new_digits = digits.map((digit, i) => {\n        if (digit === \"0\"\
    ) {\n            return digit;\n        }\n        if (digit === \"1\") {\n  \
    \          return digit;\n        }\n        if (digit === \"2\") {\n        \
    \    return digit;\n        }\n        if (digit === \"3\") {\n            return\
    \ digit;\n        }\n        if (digit === \"4\") {\n            return digit;\n\
    \        }\n        if (digit === \"5\") {\n            return digit;\n      \
    \  }\n        if (digit === \"6\") {\n            return digit;\n        }\n \
    \       if (digit === \"7\") {\n            return digit;\n        }\n       \
    \ if (digit === \"8\") {\n            return digit;\n        }\n        if (digit\
    \ === \"9\") {\n            return digit;\n        }\n        if (digit === \"\
    A\") {\n            return digit;\n        }\n        if (digit === \"B\") {\n\
    \            return digit;\n        }\n        if (digit === \"C\") {\n      \
    \      return digit;\n        }\n        if (digit === \"D\") {\n            return\
    \ digit;\n        }\n        if (digit === \"E\") {\n            return digit;\n\
    \        }\n        if (digit === \"F\") {\n            return digit;\n      \
    \  }\n        if (digit === \"G\") {\n            return digit;\n        }\n \
    \       if (digit === \"H\") {\n            return digit;\n        }\n       \
    \ if (digit === \"I\") {\n            return digit;\n        }\n        if (digit\
    \ === \"J\") {\n            return digit;\n        }\n        if (digit === \"\
    K\") {\n            return digit;\n        }\n        if (digit === \"L\") {\n\
    \            return digit;\n        }\n        if (digit === \"M\") {\n      \
    \      return digit;\n        }\n        if (digit === \"N\") {\n            return\
    \ digit;\n        }\n        if (digit === \"O\") {\n            return digit;\n\
    \        }\n        if (digit === \"P\") {\n            return digit;\n      \
    \  }\n        if (digit === \"Q\") {\n            return digit;\n        }\n \
    \       if (digit === \"R\") {\n            return digit;\n        }\n       \
    \ if (digit === \"S\") {\n            return digit;\n        }\n        if (digit\
    \ === \"T\") {\n            return digit;\n        }\n        if (digit === \"\
    U\") {\n            return digit;\n        }\n        if (digit === \"V\") {\n\
    \            return digit;\n        }\n        if (digit === \"W\") {\n      \
    \      return digit;\n        }\n        if (digit === \"X\") {\n            return\
    \ digit;\n        }\n        if (digit === \"Y\") {\n            return digit;\n\
    \        }\n        if (digit === \"Z\") {\n            return digit;\n      \
    \  }\n        if (digit === \"a\") {\n            return digit;\n        }\n \
    \       if (digit === \"b\") {\n            return digit;\n        }\n       \
    \ if (digit === \"c\") {\n            return digit;\n        }", "    let result\
    \ = \"\";\n    let digits = \"\";\n    let baseDigits = base;\n    while (x >\
    \ 0) {\n        digits = digits.length < baseDigits ? digits + x.toString() :\
    \ x.toString();\n        x = Math.floor(x / base);\n    }\n    while (digits.length\
    \ < baseDigits) {\n        digits = \"0\" + digits;\n    }\n    return digits;\n\
    }\n", "  let result = \"\";\n  let digits = \"\";\n  let baseDigits = \"\";\n\
    \  let baseDigitCount = 0;\n  let digitCount = 0;\n  while (x > 0) {\n    digits\
    \ = String(x % base);\n    baseDigits = String(base).split(\"\");\n    baseDigitCount\
    \ = baseDigits.length;\n    digitCount = digits.length;\n    if (digitCount <\
    \ baseDigitCount) {\n      digits = Array(baseDigitCount - digitCount).join(0)\
    \ + digits;\n    }\n    result += digits;\n    x /= base;\n  }\n  return result;\n\
    }\n", "    let res = \"\";\n    while (x > 0) {\n        res = base_digits[x %\
    \ base] + res;\n        x = Math.floor(x / base);\n    }\n    return res;\n}\n",
  "    let result = \"\";\n    while (x > 0) {\n        result = base_conversion(x,\
    \ base) + result;\n        x /= base;\n    }\n    return result;\n}\n", "    const\
    \ digits = String(base).split(\"\");\n    let res = \"\";\n    for (let i = 0;\
    \ i < digits.length; i++) {\n        const d = digits[i];\n        const x = x\
    \ % base;\n        res += d + (x < 0 ? \"0\" : \"\");\n        x = Math.floor(x\
    \ / base);\n    }\n    return res;\n}\n", "    let result = \"\";\n    let digits\
    \ = \"\";\n    let baseDigits = base;\n    let xDigits = x;\n    while (baseDigits\
    \ > 0) {\n        digits = parseInt(xDigits / baseDigits);\n        result = digits_to_string(digits,\
    \ baseDigits) + result;\n        xDigits = xDigits % baseDigits;\n        baseDigits--;\n\
    \    }\n    return result;\n}\n", "  if (base < 2 || base > 36) {\n    throw new\
    \ Error(\"base must be between 2 and 36\");\n  }\n  const digits = base.toString().split('');\n\
    \  let result = '';\n  for (let i = 0; i < digits.length; i++) {\n    result +=\
    \ digits[x % base] + digits[i];\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let tens = \"\"\
    ;\n  let hundreds = \"\";\n  let tens_base = 10;\n  let hundreds_base = 10;\n\
    \  let tens_digits = \"\";\n  let hundreds_digits = \"\";\n  let tens_tens_digits\
    \ = \"\";\n  let hundreds_hundreds_digits = \"\";\n  let tens_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_digits = \"\";\n  let hundreds_hundreds_tens_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_digits = \"\";\n  let hundreds_tens_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_digits = \"\";\n  let tens_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_digits = \"\";\n  let\
    \ hundreds_hundreds_tens_hundreds_hundreds_hundreds_digits = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_ten", "    let num: number = x;\n    let baseNum: number\
    \ = base;\n    let result: string = \"\";\n    while (num > 0) {\n        let\
    \ remainder: number = num % baseNum;\n        result = String(remainder) + result;\n\
    \        num = Math.floor(num / baseNum);\n    }\n    return result;\n}\n", " \
    \ let result = '';\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x\
    \ % base;\n    result += String(base).charAt(remainder);\n    x = Math.floor(x\
    \ / base);\n  }\n  return result;\n}\n", "    let result = \"\";\n    let baseNum\
    \ = base;\n    let numStr = x.toString();\n    while (numStr.length > 0) {\n \
    \       let remainder = numStr.substring(0, numStr.length - 1);\n        let digit\
    \ = parseInt(remainder, baseNum);\n        if (digit < baseNum) {\n          \
    \  result += digit;\n            numStr = numStr.substring(1);\n        } else\
    \ {\n            result += \"0\";\n            numStr = numStr.substring(1);\n\
    \        }\n    }\n    return result;\n}\n", "    if (base < 2 || base > 36) {\n\
    \        throw new RangeError(\"Base must be between 2 and 36\");\n    }\n   \
    \ const digits = String(base).split(\"\");\n    let result = \"\";\n    for (let\
    \ i = digits.length - 1; i >= 0; i--) {\n        const d = digits[i];\n      \
    \  const n = parseInt(x, 10) - parseInt(d, 10);\n        if (n < 0) {\n      \
    \      result += d.repeat(Math.abs(n));\n            n = -n;\n        }\n    \
    \    result += d.repeat(n);\n    }\n    return result;\n}\n", "    let result\
    \ = \"\";\n    let baseNum = base;\n    let baseStr = \"\";\n    let numStr =\
    \ x.toString();\n    let numLen = numStr.length;\n    let baseLen = baseNum.toString().length;\n\
    \    let numDigits = numLen - numStr.indexOf(\".\") - 1;\n    let baseDigits =\
    \ baseLen - baseNum.toString().length - 1;\n    let numBase = Math.pow(baseNum,\
    \ numDigits);\n    let baseBase = Math.pow(baseNum, baseDigits);\n    let numStrBase\
    \ = numStr.split(\"\").map(x => parseInt(x));\n    let baseStrBase = baseNum.toString().split(\"\
    \").map(x => parseInt(x));\n    let baseStrBaseLen = baseStrBase.length;\n   \
    \ let baseStrBaseDigits = baseStrBaseLen - baseStrBase.length;\n    let baseStrBaseNum\
    \ = baseStrBase.map(x => Math.pow(baseNum, baseStrBaseDigits));\n    let baseStrBaseNumLen\
    \ = baseStrBaseNum.length;\n    let baseStrBaseNumDigits = baseStrBaseNumLen -\
    \ baseStrBaseNum.length;\n    let baseStrBaseNumBase = baseStrBaseNum.map(x =>\
    \ Math.pow(baseNum, baseStrBaseNumDigits));\n    let baseStrBaseNumBaseLen = baseStrBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseDigits = baseStrBaseNumBaseLen - baseStrBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseNum = baseStrBaseNumBase.map(x => Math.pow(baseNum,\
    \ baseStrBaseNumBaseDigits));\n    let baseStrBaseNumBaseNumLen = baseStrBaseNumBaseNum.length;\n\
    \    let baseStrBaseNumBaseNumDigits = baseStrBaseNumBaseNumLen - baseStrBaseNumBaseNum.length;\n\
    \    let baseStrBaseNumBaseNumBase = baseStrBaseNumBaseNum.map(x => Math.pow(baseNum,\
    \ baseStrBaseNumBaseNumDigits));\n    let baseStrBaseNumBaseNumBaseLen = baseStrBaseNumBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseNumBaseDigits = baseStrBaseNumBaseNumBaseLen - baseStrBaseNumBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseNumBaseNum = baseStrBaseNumBaseNumBase.map(x => Math.pow(baseNum,\
    \ baseStrBaseNumBaseNumBaseDigits));\n    let baseStrBaseNumBaseNumBaseNumLen\
    \ = baseStrBaseNumBaseNumBaseNum.length;\n    let baseStrBaseNumBaseNumBaseNumDigits\
    \ = baseStrBaseNumBaseNumBaseNumLen - baseStrBaseNumBaseNumBase", "  let num =\
    \ x.toString(base);\n  let res = \"\";\n  while (num.length > 0) {\n    res =\
    \ num.substr(0, base) + res;\n    num = num.substr(base);\n  }\n  return res;\n\
    }\n", "    const base10 = Math.pow(base, 10);\n    const base = Math.pow(base,\
    \ base);\n    let result = \"\";\n    let remainder = 0;\n    let quotient = 0;\n\
    \    while (quotient < x) {\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
