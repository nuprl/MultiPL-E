name: HumanEval_44_change_base
language: ts
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x: number, base: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
  22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
  \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
  \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
  \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
  \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
  \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
completions: ["  let str = x.toString(base);\n  while (str.length < base) {\n    str\
    \ = `0${str}`;\n  }\n  return str;\n}\n", "  let result = \"\";\n  let digits\
    \ = \"\";\n  let baseDigits = \"\";\n  let baseDigitCount = 0;\n  while (x > 0)\
    \ {\n    digits = String(x % base);\n    baseDigits = String(base).split(\"\"\
    );\n    baseDigitCount = baseDigits.length;\n    if (baseDigitCount > 0) {\n \
    \     baseDigits = baseDigits.slice(0, baseDigitCount - 1);\n    }\n    result\
    \ = digits + baseDigits.join(\"\");\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let baseDigits\
    \ = \"\";\n  let baseDigitCount = 0;\n  let digitCount = 0;\n  while (x > 0) {\n\
    \    digits = String(x % base);\n    baseDigitCount = digits.length;\n    baseDigits\
    \ = baseDigitCount > 0 ? new Array(baseDigitCount).fill(digits).join(\"\") : \"\
    \";\n    digitCount = digitCount + baseDigitCount;\n    x = Math.floor(x / base);\n\
    \    result = digits + baseDigits;\n  }\n  return result;\n}\n", "  const str\
    \ = x.toString(base);\n  return str.length < base ? `0${str}` : str;\n}\n", " \
    \   if (base < 1 || base > 10) {\n        throw new RangeError(\"Base must be\
    \ between 1 and 10\");\n    }\n    const digits = x.toString().split(\"\").reverse();\n\
    \    const new_digits = digits.map((digit, i) => {\n        if (digit === \"0\"\
    ) {\n            return digit;\n        }\n        if (digit === \"1\") {\n  \
    \          return digit;\n        }\n        if (digit === \"2\") {\n        \
    \    return digit;\n        }\n        if (digit === \"3\") {\n            return\
    \ digit;\n        }\n        if (digit === \"4\") {\n            return digit;\n\
    \        }\n        if (digit === \"5\") {\n            return digit;\n      \
    \  }\n        if (digit === \"6\") {\n            return digit;\n        }\n \
    \       if (digit === \"7\") {\n            return digit;\n        }\n       \
    \ if (digit === \"8\") {\n            return digit;\n        }\n        if (digit\
    \ === \"9\") {\n            return digit;\n        }\n        if (digit === \"\
    A\") {\n            return digit;\n        }\n        if (digit === \"B\") {\n\
    \            return digit;\n        }\n        if (digit === \"C\") {\n      \
    \      return digit;\n        }\n        if (digit === \"D\") {\n            return\
    \ digit;\n        }\n        if (digit === \"E\") {\n            return digit;\n\
    \        }\n        if (digit === \"F\") {\n            return digit;\n      \
    \  }\n        if (digit === \"G\") {\n            return digit;\n        }\n \
    \       if (digit === \"H\") {\n            return digit;\n        }\n       \
    \ if (digit === \"I\") {\n            return digit;\n        }\n        if (digit\
    \ === \"J\") {\n            return digit;\n        }\n        if (digit === \"\
    K\") {\n            return digit;\n        }\n        if (digit === \"L\") {\n\
    \            return digit;\n        }\n        if (digit === \"M\") {\n      \
    \      return digit;\n        }\n        if (digit === \"N\") {\n            return\
    \ digit;\n        }\n        if (digit === \"O\") {\n            return digit;\n\
    \        }\n        if (digit === \"P\") {\n            return digit;\n      \
    \  }\n        if (digit === \"Q\") {\n            return digit;\n        }\n \
    \       if (digit === \"R\") {\n            return digit;\n        }\n       \
    \ if (digit === \"S\") {\n            return digit;\n        }\n        if (digit\
    \ === \"T\") {\n            return digit;\n        }\n        if (digit === \"\
    U\") {\n            return digit;\n        }\n        if (digit === \"V\") {\n\
    \            return digit;\n        }\n        if (digit === \"W\") {\n      \
    \      return digit;\n        }\n        if (digit === \"X\") {\n            return\
    \ digit;\n        }\n        if (digit === \"Y\") {\n            return digit;\n\
    \        }\n        if (digit === \"Z\") {\n            return digit;\n      \
    \  }\n        if (digit === \"a\") {\n            return digit;\n        }\n \
    \       if (digit === \"b\") {\n            return digit;\n        }\n       \
    \ if (digit === \"c\") {\n            return digit;\n        }", "    let result\
    \ = \"\";\n    let digits = \"\";\n    let baseDigits = base;\n    while (x >\
    \ 0) {\n        digits = digits.length < baseDigits ? digits + x.toString() :\
    \ x.toString();\n        x = Math.floor(x / base);\n    }\n    while (digits.length\
    \ < baseDigits) {\n        digits = \"0\" + digits;\n    }\n    return digits;\n\
    }\n", "  let result = \"\";\n  let digits = \"\";\n  let baseDigits = \"\";\n\
    \  let baseDigitCount = 0;\n  let digitCount = 0;\n  while (x > 0) {\n    digits\
    \ = String(x % base);\n    baseDigits = String(base).split(\"\");\n    baseDigitCount\
    \ = baseDigits.length;\n    digitCount = digits.length;\n    if (digitCount <\
    \ baseDigitCount) {\n      digits = Array(baseDigitCount - digitCount).join(0)\
    \ + digits;\n    }\n    result += digits;\n    x /= base;\n  }\n  return result;\n\
    }\n", "    let res = \"\";\n    while (x > 0) {\n        res = base_digits[x %\
    \ base] + res;\n        x = Math.floor(x / base);\n    }\n    return res;\n}\n",
  "    let result = \"\";\n    while (x > 0) {\n        result = base_conversion(x,\
    \ base) + result;\n        x /= base;\n    }\n    return result;\n}\n", "    const\
    \ digits = String(base).split(\"\");\n    let res = \"\";\n    for (let i = 0;\
    \ i < digits.length; i++) {\n        const d = digits[i];\n        const x = x\
    \ % base;\n        res += d + (x < 0 ? \"0\" : \"\");\n        x = Math.floor(x\
    \ / base);\n    }\n    return res;\n}\n", "    let result = \"\";\n    let digits\
    \ = \"\";\n    let baseDigits = base;\n    let xDigits = x;\n    while (baseDigits\
    \ > 0) {\n        digits = parseInt(xDigits / baseDigits);\n        result = digits_to_string(digits,\
    \ baseDigits) + result;\n        xDigits = xDigits % baseDigits;\n        baseDigits--;\n\
    \    }\n    return result;\n}\n", "  if (base < 2 || base > 36) {\n    throw new\
    \ Error(\"base must be between 2 and 36\");\n  }\n  const digits = base.toString().split('');\n\
    \  let result = '';\n  for (let i = 0; i < digits.length; i++) {\n    result +=\
    \ digits[x % base] + digits[i];\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let tens = \"\"\
    ;\n  let hundreds = \"\";\n  let tens_base = 10;\n  let hundreds_base = 10;\n\
    \  let tens_digits = \"\";\n  let hundreds_digits = \"\";\n  let tens_tens_digits\
    \ = \"\";\n  let hundreds_hundreds_digits = \"\";\n  let tens_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_digits = \"\";\n  let hundreds_hundreds_tens_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_digits = \"\";\n  let hundreds_tens_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_digits = \"\";\n  let tens_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_digits = \"\";\n  let\
    \ hundreds_hundreds_tens_hundreds_hundreds_hundreds_digits = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_ten", "    let num: number = x;\n    let baseNum: number\
    \ = base;\n    let result: string = \"\";\n    while (num > 0) {\n        let\
    \ remainder: number = num % baseNum;\n        result = String(remainder) + result;\n\
    \        num = Math.floor(num / baseNum);\n    }\n    return result;\n}\n", " \
    \ let result = '';\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x\
    \ % base;\n    result += String(base).charAt(remainder);\n    x = Math.floor(x\
    \ / base);\n  }\n  return result;\n}\n", "    let result = \"\";\n    let baseNum\
    \ = base;\n    let numStr = x.toString();\n    while (numStr.length > 0) {\n \
    \       let remainder = numStr.substring(0, numStr.length - 1);\n        let digit\
    \ = parseInt(remainder, baseNum);\n        if (digit < baseNum) {\n          \
    \  result += digit;\n            numStr = numStr.substring(1);\n        } else\
    \ {\n            result += \"0\";\n            numStr = numStr.substring(1);\n\
    \        }\n    }\n    return result;\n}\n", "    if (base < 2 || base > 36) {\n\
    \        throw new RangeError(\"Base must be between 2 and 36\");\n    }\n   \
    \ const digits = String(base).split(\"\");\n    let result = \"\";\n    for (let\
    \ i = digits.length - 1; i >= 0; i--) {\n        const d = digits[i];\n      \
    \  const n = parseInt(x, 10) - parseInt(d, 10);\n        if (n < 0) {\n      \
    \      result += d.repeat(Math.abs(n));\n            n = -n;\n        }\n    \
    \    result += d.repeat(n);\n    }\n    return result;\n}\n", "    let result\
    \ = \"\";\n    let baseNum = base;\n    let baseStr = \"\";\n    let numStr =\
    \ x.toString();\n    let numLen = numStr.length;\n    let baseLen = baseNum.toString().length;\n\
    \    let numDigits = numLen - numStr.indexOf(\".\") - 1;\n    let baseDigits =\
    \ baseLen - baseNum.toString().length - 1;\n    let numBase = Math.pow(baseNum,\
    \ numDigits);\n    let baseBase = Math.pow(baseNum, baseDigits);\n    let numStrBase\
    \ = numStr.split(\"\").map(x => parseInt(x));\n    let baseStrBase = baseNum.toString().split(\"\
    \").map(x => parseInt(x));\n    let baseStrBaseLen = baseStrBase.length;\n   \
    \ let baseStrBaseDigits = baseStrBaseLen - baseStrBase.length;\n    let baseStrBaseNum\
    \ = baseStrBase.map(x => Math.pow(baseNum, baseStrBaseDigits));\n    let baseStrBaseNumLen\
    \ = baseStrBaseNum.length;\n    let baseStrBaseNumDigits = baseStrBaseNumLen -\
    \ baseStrBaseNum.length;\n    let baseStrBaseNumBase = baseStrBaseNum.map(x =>\
    \ Math.pow(baseNum, baseStrBaseNumDigits));\n    let baseStrBaseNumBaseLen = baseStrBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseDigits = baseStrBaseNumBaseLen - baseStrBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseNum = baseStrBaseNumBase.map(x => Math.pow(baseNum,\
    \ baseStrBaseNumBaseDigits));\n    let baseStrBaseNumBaseNumLen = baseStrBaseNumBaseNum.length;\n\
    \    let baseStrBaseNumBaseNumDigits = baseStrBaseNumBaseNumLen - baseStrBaseNumBaseNum.length;\n\
    \    let baseStrBaseNumBaseNumBase = baseStrBaseNumBaseNum.map(x => Math.pow(baseNum,\
    \ baseStrBaseNumBaseNumDigits));\n    let baseStrBaseNumBaseNumBaseLen = baseStrBaseNumBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseNumBaseDigits = baseStrBaseNumBaseNumBaseLen - baseStrBaseNumBaseNumBase.length;\n\
    \    let baseStrBaseNumBaseNumBaseNum = baseStrBaseNumBaseNumBase.map(x => Math.pow(baseNum,\
    \ baseStrBaseNumBaseNumBaseDigits));\n    let baseStrBaseNumBaseNumBaseNumLen\
    \ = baseStrBaseNumBaseNumBaseNum.length;\n    let baseStrBaseNumBaseNumBaseNumDigits\
    \ = baseStrBaseNumBaseNumBaseNumLen - baseStrBaseNumBaseNumBase", "  let num =\
    \ x.toString(base);\n  let res = \"\";\n  while (num.length > 0) {\n    res =\
    \ num.substr(0, base) + res;\n    num = num.substr(base);\n  }\n  return res;\n\
    }\n", "    const base10 = Math.pow(base, 10);\n    const base = Math.pow(base,\
    \ base);\n    let result = \"\";\n    let remainder = 0;\n    let quotient = 0;\n\
    \    while (quotient < x) {\n        remainder = quotient % base;\n        quotient\
    \ = Math.floor(quotient / base);\n        result = remainder + result;\n    }\n\
    \    return result;\n}\n", "    var s = \"\" + x;\n    var n = s.length;\n   \
    \ var baseMinusT = base - 1;\n    if (n < baseMinusT) {\n        return s;\n \
    \   }\n    var m = n - baseMinusT;\n    for (var i = baseMinusT; i < n; i++) {\n\
    \        var c = s.charAt(i);\n        var hi = c - 0x30;\n        var lo = c\
    \ - 0x41;\n        if (hi)\n            lo += hi - 0x33;\n        if (lo)\n  \
    \          hi += 0x33;\n        s += String.fromCharCode((lo + 0x30) | 0x80);\n\
    \    }\n    return s;\n}\n", "    if (base < 1 || base > 10) {\n        throw\
    \ new RangeError(\"Base must be between 1 and 10\");\n    }\n    let result =\
    \ \"\";\n    while (x > 0) {\n        if (x % base === 0) {\n            result\
    \ += x;\n            x /= base;\n        } else {\n            x /= base;\n  \
    \      }\n    }\n    return result;\n}\n", "    let res = \"\";\n    let sign\
    \ = \"\";\n    if (x < 0) {\n        sign = \"-\";\n        x = -x;\n    }\n \
    \   if (base < 2 || base > 36) {\n        throw new Error(`Invalid base ${base}`);\n\
    \    }\n    if (base === 10) {\n        res += sign + x;\n        return res;\n\
    \    }\n    let digits = String(base).split(\"\");\n    while (digits.length <\
    \ x) {\n        digits.push(\"0\");\n    }\n    while (digits.length > x) {\n\
    \        digits.pop();\n    }\n    for (let i = 0; i < digits.length; i++) {\n\
    \        let d = digits[i];\n        res += d + (i < x - 1 ? digits[i + 1] : \"\
    \");\n    }\n    return res;\n}\n", "    let result = \"\";\n    let baseNum =\
    \ base;\n    let numStr = x.toString();\n    let numLen = numStr.length;\n   \
    \ let power = 0;\n    let digit;\n    while (numLen > 0) {\n        digit = numStr.charAt(numLen\
    \ - 1);\n        power = power + baseNum;\n        if (power > 9) {\n        \
    \    power = power / 10;\n            baseNum = baseNum * 10;\n        }\n   \
    \     result = digit + result;\n        numLen--;\n    }\n    return result;\n\
    }\n", "  let result = '';\n  let digits = x.toString().split('');\n  let digits_length\
    \ = digits.length;\n  let base_length = base.toString().length;\n  for (let i\
    \ = 0; i < digits_length; i++) {\n    let digit = digits[i];\n    let base_digit\
    \ = parseInt(digit, base);\n    let base_digit_length = base_digit.toString().length;\n\
    \    if (base_digit_length > base_length) {\n      base_digit = base_digit - base_length;\n\
    \    }\n    result += base_digit;\n  }\n  return result;\n}\n", "  let result\
    \ = \"\";\n  let digits = \"\";\n  let tens = \"\";\n  let hundreds = \"\";\n\
    \  let tens_base = \"\";\n  let hundreds_base = \"\";\n  let tens_digits = \"\"\
    ;\n  let hundreds_digits = \"\";\n  let tens_hundreds = \"\";\n  let hundreds_hundreds\
    \ = \"\";\n  let tens_hundreds_base = \"\";\n  let hundreds_hundreds_base = \"\
    \";\n  let tens_hundreds_digits = \"\";\n  let hundreds_hundreds_digits = \"\"\
    ;\n  let tens_hundreds_hundreds = \"\";\n  let hundreds_hundreds_hundreds = \"\
    \";\n  let tens_hundreds_hundreds_base = \"\";\n  let hundreds_hundreds_hundreds_base\
    \ = \"\";\n  let tens_hundreds_hundreds_digits = \"\";\n  let hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds = \"\";\n  let hundreds_hundreds_hundreds_hundreds\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_base = \"\";\n  let hundreds_hundreds_hundreds_hundreds_base\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_digits = \"\";\n  let hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds = \"\";\n  let hundreds_hundreds_hundreds_hundreds_hundreds\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_base = \"\";\n  let\
    \ hundreds_hundreds_hundreds_hundreds_hundreds_base = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_digits\
    \ = \"\";\n  let hundreds_hundreds_hundreds_hundreds_hundreds_digits = \"\";\n\
    \  let tens_hundreds_hundreds_hundreds_hundreds_hundreds = \"\";\n  let hundreds_hundreds_hundreds_hundreds_hundreds_hundreds\
    \ = \"\";\n  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_base = \"\"\
    ;\n  let hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_base = \"\";\n\
    \  let tens_hundreds_hundreds_hundreds_hundreds_hundreds_digits = \"\";\n  let\
    \ hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_digits = \"\";", "  const\
    \ str = x.toString(base);\n  const len = str.length;\n  if (len < base) {\n  \
    \  return str;\n  }\n  const digits = Array(base - len + 1).join('0');\n  return\
    \ `${digits}${str}`.slice(digits.length);\n}\n", "    if (base < 1 || base > 10)\
    \ {\n        throw new RangeError(\"Base must be between 1 and 10\");\n    }\n\
    \    const digits = x.toString().split(\"\").reverse();\n    while (digits.length\
    \ < base) {\n        digits.push(\"0\");\n    }\n    return digits.join(\"\" +\
    \ base);\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let i = 0;\n  while\
    \ (i < base) {\n    digits = digits + x;\n    i++;\n  }\n  while (digits >= 10)\
    \ {\n    digits = digits / 10;\n    i++;\n  }\n  while (digits > 0) {\n    result\
    \ = result + digits;\n    digits--;\n  }\n  return result;\n}\n", "  if (base\
    \ < 2 || base > 36) {\n    throw new Error(\"Base must be between 2 and 36\");\n\
    \  }\n  if (base === 10) {\n    return x.toString();\n  }\n  if (base === 16)\
    \ {\n    return pad(x, 2);\n  }\n  if (base === 8) {\n    return pad(x, 3);\n\
    \  }\n  if (base === 2) {\n    return pad(x, 4);\n  }\n  if (base === 36) {\n\
    \    return pad(x, 6);\n  }\n  if (base === 10) {\n    return pad(x, 8);\n  }\n\
    \  if (base === 16) {\n    return pad(x, 10);\n  }\n  if (base === 8) {\n    return\
    \ pad(x, 12);\n  }\n  if (base === 10) {\n    return pad(x, 16);\n  }\n  if (base\
    \ === 16) {\n    return pad(x, 20);\n  }\n  if (base === 10) {\n    return pad(x,\
    \ 24);\n  }\n  if (base === 16) {\n    return pad(x, 28);\n  }\n  if (base ===\
    \ 10) {\n    return pad(x, 32);\n  }\n  if (base === 16) {\n    return pad(x,\
    \ 40);\n  }\n  if (base === 10) {\n    return pad(x, 48);\n  }\n  if (base ===\
    \ 16) {\n    return pad(x, 56);\n  }\n  if (base === 10) {\n    return pad(x,\
    \ 64);\n  }\n  if (base === 16) {\n    return pad(x, 72);\n  }\n  if (base ===\
    \ 10) {\n    return pad(x, 80);\n  }\n  if (base === 16) {\n    return pad(x,\
    \ 88);\n  }\n  if (base === 10) {\n    return pad(x, 96);\n  }\n  if (base ===\
    \ 16) {\n    return pad(x, 104);\n  }\n  if (base === 10) {\n    return pad(x,\
    \ 112);\n  }\n  if (base === 16) {\n    return pad(x, 120);\n  }\n  if (base ===\
    \ 10) {\n    return pad(x, 128);\n  }\n  if (base === 16) {\n    return pad(x,\
    \ 136);\n  }\n  if (base === 10) {\n    return pad(x, 144);\n  }\n  if (base ===\
    \ 16) {\n    return pad(x, 152);\n  }\n  if (base === 10) {\n    return pad(x,\
    \ 160);\n  }\n  if (base === 16) {\n    return pad(x, 168);\n  }\n  if (base ===\
    \ 10) {\n    return pad(x, 176);\n  }\n  if (base === 16) {\n    return pad(x,\
    \ 184);\n  }\n  if (base === 10) {\n    return pad(x, 192);\n  }\n  if (base ===\
    \ 16) {\n    return pad(x, 200);\n  }\n  if (base === 10) {\n    return pad(x,\
    \ 208);\n  }\n  if (base === 16) {\n    return pad(x, 216);\n  }\n", "    let\
    \ result = \"\";\n    let sign = \"\";\n    if (x > 0) {\n        sign = \"+\"\
    ;\n    }\n    if (x < 0) {\n        sign = \"-\";\n        x = -x;\n    }\n  \
    \  let base10 = Math.pow(base, 10);\n    let base = Math.pow(base, base);\n  \
    \  while (x > 0) {\n        let remainder = x % base;\n        x = Math.floor(x/base);\n\
    \        result = remainder + result;\n    }\n    while (x < 0) {\n        let\
    \ remainder = x % base;\n        x = Math.floor(x/base);\n        result = remainder\
    \ + result;\n    }\n    if (result === \"\") {\n        result = \"0\";\n    }\n\
    \    return sign + result;\n}\n", "    let result = \"\";\n    let baseNum = base;\n\
    \    while (x > 0) {\n        if (x % baseNum == 0) {\n            result += x;\n\
    \        }\n        x /= baseNum;\n    }\n    return result;\n}\n", "    let baseNum\
    \ = base;\n    let baseStr = \"\";\n    while (baseNum > 0) {\n        baseStr\
    \ += (baseNum % 10) + \"\";\n        baseNum = Math.floor(baseNum / 10);\n   \
    \ }\n    return baseStr + x;\n}\n", "    let result = '';\n    while (x > 0) {\n\
    \        if (x % base === 0) {\n            result += x;\n            x /= base;\n\
    \        } else {\n            x /= base;\n            result += base;\n     \
    \   }\n    }\n    return result;\n}\n", "  let result = \"\";\n  let digits =\
    \ x;\n  while (digits > 0) {\n    digits = digits % base;\n    result = digits_to_string(digits)\
    \ + result;\n  }\n  return result;\n}\n", "  const digits = base.toString().split('');\n\
    \  let result = x;\n  for (let i = 0; i < digits.length; i++) {\n    result =\
    \ result * base + digits[i];\n  }\n  return result;\n}\n", "    if (base < 2 ||\
    \ base > 36) {\n        throw new RangeError(\"Base must be between 2 and 36\"\
    );\n    }\n    const digits = x.toString(base).split(\"\").reverse();\n    while\
    \ (digits.length < base) {\n        digits.push(\"0\");\n    }\n    return digits.join(\"\
    \");\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let baseDigits = base;\n\
    \  let baseString = \"\";\n  let xString = \"\";\n  let xStringDigits = \"\";\n\
    \  let xStringBase = \"\";\n  let xStringBaseDigits = \"\";\n  let xStringBaseString\
    \ = \"\";\n  let xStringBaseStringDigits = \"\";\n  let xStringBaseStringBase\
    \ = \"\";\n  let xStringBaseStringBaseDigits = \"\";\n  let xStringBaseStringBaseString\
    \ = \"\";\n  let xStringBaseStringBaseStringDigits = \"\";\n  let xStringBaseStringBaseStringBase\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseDigits = \"\";\n  let xStringBaseStringBaseStringBaseString\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringDigits = \"\";\n  let xStringBaseStringBaseStringBaseStringBase\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseDigits = \"\";\n  let\
    \ xStringBaseStringBaseStringBaseStringBaseString = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringDigits\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase = \"\";\n\
    \  let xStringBaseStringBaseStringBaseStringBaseStringDigits = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringDigits = \"\"\
    ;\n  let xStringBaseStringBaseStringBaseStringBaseStringBase = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringDigits\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase = \"\";\n\
    \  let xStringBaseStringBaseStringBaseStringBaseStringDigits = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringDigits = \"\"\
    ;\n  let xStringBaseStringBaseStringBaseStringBaseStringBase = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringDigits\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase = \"\";\n\
    \  let xStringBaseStringBaseStringBaseStringBaseStringDigits = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringDigits = \"\"\
    ;\n  let xStringBaseStringBaseStringBaseStringBaseStringBase = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringDigits\
    \ = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase = \"\";\n\
    \  let xStringBaseStringBaseStringBaseStringBaseStringDigits = \"\";\n  let xStringBaseStringBaseStringBaseStringBaseStringBase\
    \ = \"\";\n  let xStringBaseStringBaseString", "  let res = \"\";\n  let sign\
    \ = \"\";\n  if (x > 0) {\n    sign = \"+\";\n    x = Math.abs(x);\n  } else if\
    \ (x < 0) {\n    sign = \"-\";\n    x = Math.abs(x);\n  }\n  while (x >= base)\
    \ {\n    res += Math.floor(x/base);\n    x = x % base;\n  }\n  res += x;\n  return\
    \ sign + res;\n}\n", "    let digits = base;\n    let result = '';\n    while\
    \ (x >= base) {\n        digits = digits * base + x % base;\n        x = Math.floor(x/base);\n\
    \    }\n    while (digits > 0) {\n        result += digits[digits.length - 1];\n\
    \        digits--;\n    }\n    return result;\n}\n", "    if (base < 2 || base\
    \ > 36) {\n        throw new RangeError(\"Base must be between 2 and 36\");\n\
    \    }\n    if (base === 10) {\n        return x.toString();\n    }\n    if (base\
    \ === 16) {\n        return pad(x, 4);\n    }\n    let res = \"\";\n    let sign\
    \ = \"\";\n    if (x > 0) {\n        sign = \"+\";\n    }\n    if (x < 0) {\n\
    \        sign = \"-\";\n        x = -x;\n    }\n    while (x > 0) {\n        res\
    \ += (x % base);\n        x /= base;\n    }\n    while (x < 0) {\n        res\
    \ += (base - (x % base));\n        x /= base;\n    }\n    if (res.length < base)\
    \ {\n        res += \"0\";\n    }\n    return sign + res;\n}\n", "  let res =\
    \ \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign = \"-\";\n    x = -x;\n\
    \  }\n  if (x < base) {\n    res += x;\n  } else {\n    let div = x;\n    while\
    \ (div > base) {\n      div = div / base;\n      res += base;\n    }\n    res\
    \ += div;\n  }\n  return sign + res;\n}\n", "  let res = \"\";\n  let sign = \"\
    \";\n  if (x > 0) {\n    sign = \"+\";\n    x = Math.abs(x);\n  } else if (x <\
    \ 0) {\n    sign = \"-\";\n    x = Math.abs(x);\n  }\n  if (base < 2 || base >\
    \ 36) {\n    throw new Error(\"Base must be between 2 and 36\");\n  }\n  if (base\
    \ === 10) {\n    res = x.toString();\n  } else if (base === 16) {\n    res = x.toString(16);\n\
    \  } else {\n    while (base > 0) {\n      if (x % base === 0) {\n        res\
    \ += base;\n        x /= base;\n      } else {\n        res += \"0\";\n      }\n\
    \    }\n  }\n  return sign + res;\n}\n", "  let result = \"\";\n  let sign = \"\
    \";\n  if (x < 0) {\n    sign = \"-\";\n    x = -x;\n  }\n  if (base < 0 || base\
    \ > 10) {\n    throw \"Invalid base\";\n  }\n  if (base === 10) {\n    result\
    \ += x;\n  } else {\n    while (x > 0) {\n      result += base;\n      x /= base;\n\
    \    }\n  }\n  return sign + result;\n}\n", "  if (base < 2 || base > 36) {\n\
    \    throw Error(\"base must be between 2 and 36\");\n  }\n  if (base === 10)\
    \ {\n    return x.toString();\n  }\n  if (base === 16) {\n    return pad(x.toString(16),\
    \ 4);\n  }\n  if (base === 8) {\n    return pad(x.toString(8), 4);\n  }\n  if\
    \ (base === 2) {\n    return pad(x.toString(2), 8);\n  }\n  if (base === 16) {\n\
    \    return pad(x.toString(16), 8);\n  }\n  if (base === 8) {\n    return pad(x.toString(8),\
    \ 8);\n  }\n  if (base === 10) {\n    return pad(x.toString(10), 8);\n  }\n  if\
    \ (base === 16) {\n    return pad(x.toString(16), 16);\n  }\n  if (base === 8)\
    \ {\n    return pad(x.toString(8), 16);\n  }\n  if (base === 10) {\n    return\
    \ pad(x.toString(10), 10);\n  }\n  if (base === 16) {\n    return pad(x.toString(16),\
    \ 16);\n  }\n  if (base === 8) {\n    return pad(x.toString(8), 8);\n  }\n  if\
    \ (base === 10) {\n    return pad(x.toString(10), 10);\n  }\n  if (base === 16)\
    \ {\n    return pad(x.toString(16), 16);\n  }\n  if (base === 8) {\n    return\
    \ pad(x.toString(8), 8);\n  }\n  if (base === 10) {\n    return pad(x.toString(10),\
    \ 10);\n  }\n  if (base === 16) {\n    return pad(x.toString(16), 16);\n  }\n\
    \  if (base === 8) {\n    return pad(x.toString(8), 8);\n  }\n  if (base === 10)\
    \ {\n    return pad(x.toString(10), 10);\n  }\n  if (base === 16) {\n    return\
    \ pad(x.toString(16), 16);\n  }\n  if (base === 8) {\n    return pad(x.toString(8),\
    \ 8);\n  }\n  if (base === 10) {\n    return pad(x.toString(10), 10);\n  }\n \
    \ if (base === 16) {\n    return pad(x.toString(16), 16);\n  }\n  if (base ===\
    \ 8) {\n    return pad(x.toString(8), 8);\n  }\n  if (base === 10) {\n    return\
    \ pad(x.toString(10), 10);\n  }\n  if (base === 16) {\n    return pad(x.toString(16),\
    \ 16);\n  }\n  if (base === 8) {\n    return pad(x.toString(8), 8);\n  }\n  if\
    \ (base === 10) {\n    return pad(x.toString(10), 10);\n  }\n  if (base === 16)\
    \ {\n    return pad(x.toString(16), 16);\n  }\n  if (base === 8) {\n    return\
    \ pad(x.toString(8), 8);\n  }\n  if (base === 10) {", "  const str = x.toString(base);\n\
    \  return str.length < base ? str + Array(base - str.length + 1).join(\"0\") :\
    \ str;\n}\n", "    if (base < 1 || base > 10) {\n        throw new RangeError(\"\
    Base must be between 1 and 10\");\n    }\n    const str = x.toString(base);\n\
    \    if (str.length < base) {\n        return change_base(parseInt(str, base),\
    \ base);\n    }\n    return str;\n}\n", "  let result = \"\";\n  let digits =\
    \ \"\";\n  let baseDigits = base;\n  let xDigits = x;\n  while (baseDigits > 0)\
    \ {\n    digits = parseInt(xDigits / baseDigits);\n    baseDigits = baseDigits\
    \ % base;\n    xDigits = xDigits - digits * base;\n    result = digits + result;\n\
    \  }\n  return result;\n}\n", "  const str = x.toString(base);\n  return str.length\
    \ < base ? str + Array(base - str.length).join('0') : str;\n}\n", "    if (base\
    \ < 1 || base > 10) {\n        throw new RangeError(\"Base must be between 1 and\
    \ 10\");\n    }\n    let result = \"\";\n    let remainder = 0;\n    while (x\
    \ > 0) {\n        remainder = x % base;\n        result = String(remainder) +\
    \ result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n",
  "    let result = \"\";\n    let sign = \"\";\n    if (x < 0) {\n        sign =\
    \ \"-\";\n        x = -x;\n    }\n    if (x === 0) return \"0\";\n    if (base\
    \ < 2 || base > 36) {\n        throw new RangeError(\"Invalid base\");\n    }\n\
    \    if (base === 10) {\n        result += \"0\";\n    }\n    while (x > 0) {\n\
    \        if (x % base === 0) {\n            result += sign + x;\n            x\
    \ /= base;\n        } else {\n            result += sign + x;\n            x *=\
    \ base;\n        }\n    }\n    return result;\n}\n", "  const str = x.toString(base);\n\
    \  return str.length < base ? str + Array(base - str.length + 1).join(\"0\") :\
    \ str;\n}\n", "    if (base < 1 || base > 10) {\n        throw new RangeError(\"\
    Base must be between 1 and 10\");\n    }\n    let result: string;\n    if (base\
    \ === 10) {\n        result = x.toString();\n    } else {\n        let digits:\
    \ number[] = [];\n        while (x > 0) {\n            digits.push(x % base);\n\
    \            x = Math.floor(x / base);\n        }\n        result = digits.reverse().map(d\
    \ => String.fromCharCode(d + 48)).join('');\n    }\n    return result;\n}\n",
  "    if (base < 2 || base > 36) {\n        throw new RangeError(\"Invalid base \"\
    \ + base + \", must be between 2 and 36\");\n    }\n    if (base === 10) {\n \
    \       return x.toString();\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 4, \"0\");\n    }\n    if (base === 8) {\n        return pad(x.toString(8),\
    \ 4, \"0\");\n    }\n    if (base === 2) {\n        return pad(x.toString(2),\
    \ 8, \"0\");\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8, \"0\");\n    }\n    if (base === 10) {\n        return pad(x.toString(10),\
    \ 8, \"0\");\n    }\n    if (base === 8) {\n        return pad(x.toString(8),\
    \ 8, \"0\");\n    }\n    if (base === 2) {\n        return pad(x.toString(2),\
    \ 8, \"0\");\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8, \"0\");\n    }\n    if (base === 10) {\n        return pad(x.toString(10),\
    \ 8, \"0\");\n    }\n    if (base === 8) {\n        return pad(x.toString(8),\
    \ 8, \"0\");\n    }\n    if (base === 2) {\n        return pad(x.toString(2),\
    \ 8, \"0\");\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8, \"0\");\n    }\n    if (base === 10) {\n        return pad(x.toString(10),\
    \ 8, \"0\");\n    }\n    if (base === 8) {\n        return pad(x.toString(8),\
    \ 8, \"0\");\n    }\n    if (base === 2) {\n        return pad(x.toString(2),\
    \ 8, \"0\");\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8, \"0\");\n    }\n    if (base === 10) {\n        return pad(x.toString(10),\
    \ 8, \"0\");\n    }\n    if (base === 8) {\n        return pad(x.toString(8),\
    \ 8, \"0\");\n    }\n    if (base === 2) {\n        return pad(x.toString(2),\
    \ 8, \"0\");\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8, \"0\");\n    }\n    if (base === 10) {\n        return pad(x.toString(10),\
    \ 8, \"0\");\n    }\n    if (base === 8) {\n        return pad(x.toString(8),\
    \ 8, \"0\");\n    }\n    if (base === 2) {\n        return pad(x.toString(2),\
    \ 8, \"0\");\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8, \"0\");\n    }\n    if (base === 10) {\n        return pad(x.toString(10),\
    \ 8, \"0", "  if (base < 2 || base > 36) {\n    throw new Error(`Invalid base\
    \ ${base}`);\n  }\n  if (base === 10) {\n    return x.toString();\n  }\n  if (base\
    \ === 16) {\n    return x.toString(16);\n  }\n  if (base === 8) {\n    return\
    \ x.toString(8);\n  }\n  if (base === 2) {\n    return x.toString(2);\n  }\n \
    \ if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8) {\n \
    \   return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 8)\
    \ {\n    return x.toString(8);\n  }\n  if (base === 10) {\n    return x.toString(10);\n\
    \  }\n  if (base === 16) {\n    return x.toString(16);\n", "    let s = \"\" +\
    \ x;\n    let n = s.length;\n    let bases = \"\";\n    while (n > 0) {\n    \
    \    let d = n % base;\n        s = bases.charAt(d) + s;\n        n = Math.floor(n\
    \ / base);\n        bases = bases.charAt(0) + \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    }\n    return s;\n}\n", "  const str = x.toString(base);\n  return str.length\
    \ < base ? str + Array(base - str.length + 1).join('0') : str;\n}\n", "  let result\
    \ = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = base_conversion(x,\
    \ baseNum) + result;\n    x = x % baseNum;\n    baseNum = baseNum * 10;\n  }\n\
    \  return result;\n}\n", "  let result = \"\";\n  let sign = \"\";\n  if (x <\
    \ 0) {\n    sign = \"-\";\n    x = -x;\n  }\n  while (x) {\n    const digit =\
    \ x % base;\n    result += digit;\n    x /= base;\n  }\n  return sign + result;\n\
    }\n", "  let result = \"\";\n  let digits = \"\";\n  while (x > 0) {\n    digits\
    \ = digits + x.toString().charAt(0);\n    x = Math.floor(x / base);\n  }\n  while\
    \ (digits.length < base) {\n    digits = \"0\" + digits;\n  }\n  result = digits\
    \ + result;\n  return result;\n}\n", "  let res = \"\";\n  let digits = \"\";\n\
    \  while (x > 0) {\n    digits = digits + x.toString().charAt(0);\n    x = Math.floor(x\
    \ / base);\n  }\n  while (digits.length < base) {\n    digits = \"0\" + digits;\n\
    \  }\n  res = digits;\n  return res;\n}\n", "    let result = \"\";\n    let baseNum\
    \ = base;\n    while (x > 0) {\n        if (x % baseNum == 0) {\n            result\
    \ += x;\n        }\n        x /= baseNum;\n    }\n    return result;\n}\n", " \
    \   if (base < 0 || base > 10) {\n        throw new RangeError(\"Base must be\
    \ between 0 and 10\");\n    }\n    const digits = x.toString(base).split(\"\"\
    );\n    let result = \"\";\n    for (let i = 0; i < digits.length; i++) {\n  \
    \      const digit = digits[i];\n        if (digit === \"0\") {\n            result\
    \ += \"1\";\n        } else {\n            result += digit;\n        }\n    }\n\
    \    return result;\n}\n", "  const str = x.toString(base);\n  return str.length\
    \ < base ? str + Array(base - str.length + 1).join(\"0\") : str;\n}\n", "    let\
    \ s = \"\"\n    while (x > 0) {\n        s = base_digits[x % base] + s\n     \
    \   x = Math.floor(x / base)\n    }\n    return s\n}\n", "  let str = x.toString(base);\n\
    \  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n}\n",
  "    let digits: string[] = [];\n    let baseMinus10: number = base - 10;\n    let\
    \ i: number;\n    for (i = baseMinus10; i >= 0; i--) {\n        digits.push((x\
    \ % base) + baseMinus10);\n        x = Math.floor(x / base);\n    }\n    return\
    \ digits.reverse().join('');\n}\n", "  let s = \"\"\n  while (x > 0) {\n    s\
    \ = base_digits[x % base] + s\n    x = Math.floor(x / base)\n  }\n  return s\n\
    }\n", "  let res = \"\";\n  let sign = \"\";\n  if (x > 0) {\n    sign = \"+\"\
    ;\n    x = Math.abs(x);\n  } else if (x < 0) {\n    sign = \"-\";\n    x = Math.abs(x);\n\
    \  }\n  while (x > 0) {\n    res += (x % base);\n    x /= base;\n  }\n  return\
    \ sign + res;\n}\n", "    if (base < 2 || base > 36) {\n        throw new RangeError('Invalid\
    \ base ' + base + ' for number ' + x);\n    }\n    if (base === 10) {\n      \
    \  return numerals(x);\n    }\n    if (base === 8) {\n        return numerals(x).padStart(3,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(6,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(8,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(10,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(12,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(14,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(16,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(18,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(20,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(22,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(24,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(26,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(28,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(30,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(32,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(34,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(36,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(38,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(40,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(42,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(44,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStart(46,\
    \ '0');\n    }\n    if (base === 16) {\n        return numerals(x).padStar", " \
    \ const str = x.toString(base);\n  return str.length < base ? str + Array(base\
    \ - str.length + 1).join('0') : str;\n}\n", "  const str = x.toString(base);\n\
    \  return str.length < base ? str + \"0\" : str;\n}\n", "    let str = x.toString(base);\n\
    \    let res = \"\";\n    while (str.length > 0) {\n        res += str[str.length\
    \ - 1];\n        str = str.slice(0, str.length - 1);\n    }\n    return res;\n\
    }\n", "    let base10 = Math.pow(base, 10);\n    let x = Math.round(x * base10)\
    \ / base10;\n    let result = x.toString();\n    if (result.length < base) {\n\
    \        let zeros = \"\";\n        while (result.length < base) {\n         \
    \   zeros += \"0\";\n        }\n        result = zeros + result;\n    }\n    return\
    \ result;\n}\n", "    let result = '';\n    let digits = x.toString().split('');\n\
    \    let baseDigits = base.split('');\n    for (let i = 0; i < digits.length;\
    \ i++) {\n        let d = digits[i];\n        let b = baseDigits[i];\n       \
    \ if (d >= b) {\n            result += d;\n        } else {\n            result\
    \ += '0';\n        }\n    }\n    return result;\n}\n", "  const str = x.toString(base);\n\
    \  return str.length < base ? str + Array(base - str.length + 1).join(\"0\") :\
    \ str;\n}\n", "    if (base < 1 || base > 10) {\n        throw new RangeError(\"\
    Invalid base\");\n    }\n    const digits = x.toString().split(\"\").reverse();\n\
    \    while (digits.length < base) {\n        digits.push(\"0\");\n    }\n    return\
    \ digits.join(\"\");\n}\n", "  let res = \"\";\n  let sign = \"\";\n  if (x <\
    \ 0) {\n    sign = \"-\";\n    x = -x;\n  }\n  if (base < 0 || base > 10) {\n\
    \    throw \"Invalid base\";\n  }\n  while (x > 0) {\n    res += (x % base);\n\
    \    x /= base;\n  }\n  if (sign === \"-\") {\n    res = -res;\n  }\n  return\
    \ res;\n}\n", "  let res = \"\";\n  let div = parseInt(x / base);\n  while (div\
    \ > 0) {\n    res = base.toString() + res;\n    div--;\n  }\n  return res;\n}\n",
  "    let base10 = Math.pow(base, 10);\n    let x = Math.round(x * base10) / base10;\n\
    \    return x.toString();\n}\n", "    const baseNum = base;\n    let numStr =\
    \ x.toString();\n    let newNumStr = \"\";\n    let i = 0;\n    while (i < numStr.length)\
    \ {\n        let char = numStr.charAt(i);\n        if (char === \"0\") {\n   \
    \         newNumStr += baseNum;\n        } else {\n            newNumStr += char;\n\
    \        }\n        i += 1;\n    }\n    return newNumStr;\n}\n", "    let baseNum\
    \ = base;\n    let numStr = x.toString();\n    let numStrLen = numStr.length;\n\
    \    let newNumStr = \"\";\n    let newNumStrLen = 0;\n    let digit;\n    let\
    \ carry = 0;\n    let i;\n    for (i = 0; i < numStrLen; i += 1) {\n        digit\
    \ = parseInt(numStr.charAt(i), baseNum);\n        newNumStr += digit;\n      \
    \  newNumStrLen += 1;\n        if (digit >= baseNum) {\n            carry = 1;\n\
    \            newNumStr += carry;\n            newNumStrLen += 1;\n        }\n\
    \    }\n    return newNumStr;\n}\n", "    let baseNum = base;\n    let baseStr\
    \ = \"\";\n    while (baseNum > 0) {\n        if (x % baseNum == 0) {\n      \
    \      baseStr += baseNum.toString();\n            x /= baseNum;\n        } else\
    \ {\n            baseStr += baseNum.toString().charAt(0);\n            x /= baseNum;\n\
    \        }\n        baseNum--;\n    }\n    return baseStr;\n}\n", "  const str\
    \ = x.toString(base);\n  const len = str.length;\n  if (len < base) {\n    return\
    \ str;\n  }\n  const zeros = Array(base - len + 1).join(\"0\");\n  return `${zeros}${str}`;\n\
    }\n", "    if (base < 1 || base > 10) {\n        throw new RangeError(\"Base must\
    \ be between 1 and 10\");\n    }\n    if (base === 1) {\n        return x.toString();\n\
    \    }\n    let result = \"\";\n    while (x > 0) {\n        result = base_digits[x\
    \ % base] + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n\
    }\n", "    if (base < 2 || base > 36) {\n        throw new RangeError(\"Invalid\
    \ base \" + base + \", must be between 2 and 36\");\n    }\n    if (base === 10)\
    \ {\n        return String(x);\n    }\n    if (base === 16) {\n        return\
    \ pad0(x.toString(16), 4);\n    }\n    if (base === 8) {\n        return pad0(x.toString(8),\
    \ 2);\n    }\n    return pad0(x.toString(base), base);\n}\n", "  let s = \"\"\
    \ + x;\n  let l = s.length;\n  if (base < 2 || base > 10) {\n    throw new Error(\"\
    base must be between 2 and 10\");\n  }\n  if (l < base) {\n    throw new Error(\"\
    base must be less than or equal to length of number\");\n  }\n  for (let i = base;\
    \ i < l; i++) {\n    s = s.charAt(i) + s;\n  }\n  return s;\n}\n", "  let s =\
    \ \"\"\n  let i = 0\n  while (i < base) {\n    s += (x % base) + i\n    x = Math.floor(x\
    \ / base)\n    i++\n  }\n  return s\n}\n", "    let base10 = Math.pow(base, 10);\n\
    \    let base = Math.pow(base, base);\n    let result = \"\";\n    let i = 0;\n\
    \    while (i < x) {\n        result = base10 + result;\n        i++;\n    }\n\
    \    return result;\n}\n", "  const str = x.toString(base);\n  const len = str.length;\n\
    \  if (len < base) {\n    return str;\n  }\n  const zeros = Array(base - len +\
    \ 1).join(\"0\");\n  return `${zeros}${str}`;\n}\n", "    let s = \"\" + x;\n\
    \    let n = s.length;\n    if (base < 0 || base > 10) {\n        throw new Error(`Invalid\
    \ base: ${base}`);\n    }\n    if (base === 10) {\n        return s;\n    }\n\
    \    if (base < 2) {\n        if (n <= base) {\n            return s;\n      \
    \  }\n        let r = \"\";\n        for (let i = n; i >= base; i--) {\n     \
    \       r += s;\n        }\n        return r;\n    }\n    if (base > 2) {\n  \
    \      let r = \"\";\n        for (let i = n; i >= base; i--) {\n            r\
    \ += s;\n        }\n        return r;\n    }\n    let r = \"\";\n    for (let\
    \ i = n; i >= base; i--) {\n        r += s;\n    }\n    return r;\n}\n", "   \
    \ var r = \"\";\n    var s = \"\";\n    var m = 1;\n    while (x >= base) {\n\
    \        s = Math.floor(x / base);\n        x = x % base;\n        r += s;\n \
    \   }\n    if (x > 0) {\n        s = Math.floor(x / base);\n        r += s;\n\
    \    }\n    return r;\n}\n", "    let baseNum = base;\n    let numStr = x.toString();\n\
    \    let newNum = \"\";\n    let isNegative = numStr[0] === \"-\";\n    let isNegativeBase\
    \ = baseNum < 0;\n    if (isNegative) {\n        numStr = numStr.substring(1);\n\
    \        baseNum = -baseNum;\n    }\n    if (baseNum < 10) {\n        newNum =\
    \ numStr;\n    } else {\n        let baseLen = baseNum.toString().length;\n  \
    \      let numLen = numStr.toString().length;\n        let newBase = baseNum.toString()\
    \ + Array(baseLen + numLen + 1).join(\"0\");\n        newNum = numStr.substring(0,\
    \ numLen - baseLen) + newBase;\n    }\n    if (isNegativeBase) {\n        newNum\
    \ = \"-\" + newNum;\n    }\n    return newNum;\n}\n", "  let res = \"\";\n  while\
    \ (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return\
    \ res;\n}\n", "    let s = \"\" + x;\n    let n = s.length;\n    let baseNum =\
    \ base;\n    let baseStr = \"\";\n    while (n > 0) {\n        let digit = n %\
    \ baseNum;\n        s = digit.toString() + s;\n        n = Math.floor(n / baseNum);\n\
    \        baseStr = digit.toString() + baseStr;\n    }\n    return s;\n}\n", " \
    \ if (base < 1 || base > 10) {\n    throw 'Invalid base ' + base;\n  }\n  const\
    \ digits = x.toString(base).split('');\n  let i = 0;\n  while (digits.length <\
    \ base) {\n    digits.push('0');\n  }\n  return digits.reverse().join('');\n}\n",
  "  let result = \"\";\n  let digits = \"\";\n  let baseDigits = \"\";\n  let baseNum\
    \ = \"\";\n  let baseStr = \"\";\n  let digitStr = \"\";\n  let numStr = \"\"\
    ;\n  let baseStrLen = 0;\n  let digitStrLen = 0;\n  let numStrLen = 0;\n  let\
    \ baseStrDigits = 0;\n  let digitStrDigits = 0;\n  let numStrDigits = 0;\n  let\
    \ baseStrDigit = 0;\n  let digitStrDigit = 0;\n  let numStrDigit = 0;\n  let baseStrDigit2\
    \ = 0;\n  let digitStrDigit2 = 0;\n  let numStrDigit2 = 0;\n  let baseStrDigit3\
    \ = 0;\n  let digitStrDigit3 = 0;\n  let numStrDigit3 = 0;\n  let baseStrDigit4\
    \ = 0;\n  let digitStrDigit4 = 0;\n  let numStrDigit4 = 0;\n  let baseStrDigit5\
    \ = 0;\n  let digitStrDigit5 = 0;\n  let numStrDigit5 = 0;\n  let baseStrDigit6\
    \ = 0;\n  let digitStrDigit6 = 0;\n  let numStrDigit6 = 0;\n  let baseStrDigit7\
    \ = 0;\n  let digitStrDigit7 = 0;\n  let numStrDigit7 = 0;\n  let baseStrDigit8\
    \ = 0;\n  let digitStrDigit8 = 0;\n  let numStrDigit8 = 0;\n  let baseStrDigit9\
    \ = 0;\n  let digitStrDigit9 = 0;\n  let numStrDigit9 = 0;\n  let baseStrDigit10\
    \ = 0;\n  let digitStrDigit10 = 0;\n  let numStrDigit10 = 0;\n  let baseStrDigit11\
    \ = 0;\n  let digitStrDigit11 = 0;\n  let numStrDigit11 = 0;\n  let baseStrDigit12\
    \ = 0;\n  let digitStrDigit12 = 0;\n  let numStrDigit12 = 0;\n  let baseStrDigit13\
    \ = 0;\n  let digitStrDigit13 = 0;\n  let numStrDigit13 = 0;\n  let baseStrDigit14\
    \ = 0;\n  let digitStrDigit14 = 0;\n  let numStrDigit14 = 0;\n  let baseStrDigit15\
    \ = 0;\n  let digitStrDigit15 = 0;\n  let numStrDigit15 = 0;\n  let baseStrDigit16\
    \ = 0;\n  let digitStrDigit16 = 0;\n  let numStrDigit16 = 0;\n  let baseStrDigit17\
    \ = 0;\n  let digitStrDigit17 = 0;\n  let numStrDigit17 = 0;\n  let baseStrDigit18\
    \ = 0;\n  let digitStrDigit18 = 0;\n  let numStrDigit18 = 0;\n  let baseStrDigit19\
    \ = 0;\n  let digitStrDigit19 = 0;\n  let numStrDigit19 = 0;\n  let baseStrDigit20\
    \ = 0;\n  let digitStrDigit20 = 0;\n  let numStrDigit20 = 0;\n  let baseStrDigit21\
    \ = 0;\n  let digitStrDigit21 = 0;\n  let numStrDigit21 = 0;\n  let baseStrDigit22\
    \ = 0;\n  let digitStrDigit22 = 0;\n  let ", "  const digits = base.toString(10).split('');\n\
    \  let res = '';\n  for (let i = 0; i < digits.length; i++) {\n    const digit\
    \ = digits[i];\n    if (digit === '0') {\n      res += '1';\n    } else {\n  \
    \    res += digit;\n    }\n  }\n  return x.toString(base) + res;\n}\n", "    let\
    \ baseNum = base;\n    let baseStr = \"\";\n    while (baseNum > 0) {\n      \
    \  baseStr += (baseNum % 10) + \"\";\n        baseNum = Math.floor(baseNum / 10);\n\
    \    }\n    return baseStr + x;\n}\n", "    let baseNum = base;\n    let baseStr\
    \ = \"\";\n    while (baseNum > 0) {\n        baseNum = baseNum / base;\n    \
    \    baseStr = baseNum.toString() + baseStr;\n    }\n    return baseStr + x.toString();\n\
    }\n", "  let result = \"\";\n  let baseNum = base;\n  while (baseNum > 0) {\n\
    \    if (x % baseNum == 0) {\n      result += x;\n      x /= baseNum;\n    } else\
    \ {\n      result += baseNum.toString() + x.toString();\n      x *= baseNum;\n\
    \    }\n  }\n  return result;\n}\n", "    if (base < 2 || base > 36) {\n     \
    \   throw new Error(`Invalid base ${base}`);\n    }\n    if (base === 10) {\n\
    \        return x.toString();\n    }\n    if (base === 8) {\n        return pad(x.toString(2),\
    \ base);\n    }\n    if (base === 16) {\n        return pad(x.toString(16), base);\n\
    \    }\n    if (base === 10) {\n        return pad(x.toString(10), base);\n  \
    \  }\n    if (base === 16) {\n        return pad(x.toString(16), base);\n    }\n\
    \    if (base === 10) {\n        return pad(x.toString(10), base);\n    }\n  \
    \  if (base === 16) {\n        return pad(x.toString(16), base);\n    }\n    if\
    \ (base === 10) {\n        return pad(x.toString(10), base);\n    }\n    if (base\
    \ === 16) {\n        return pad(x.toString(16), base);\n    }\n    if (base ===\
    \ 10) {\n        return pad(x.toString(10), base);\n    }\n    if (base === 16)\
    \ {\n        return pad(x.toString(16), base);\n    }\n    if (base === 10) {\n\
    \        return pad(x.toString(10), base);\n    }\n    if (base === 16) {\n  \
    \      return pad(x.toString(16), base);\n    }\n    if (base === 10) {\n    \
    \    return pad(x.toString(10), base);\n    }\n    if (base === 16) {\n      \
    \  return pad(x.toString(16), base);\n    }\n    if (base === 10) {\n        return\
    \ pad(x.toString(10), base);\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ base);\n    }\n    if (base === 10) {\n        return pad(x.toString(10), base);\n\
    \    }\n    if (base === 16) {\n        return pad(x.toString(16), base);\n  \
    \  }\n    if (base === 10) {\n        return pad(x.toString(10), base);\n    }\n\
    \    if (base === 16) {\n        return pad(x.toString(16), base);\n    }\n  \
    \  if (base === 10) {\n        return pad(x.toString(10), base);\n    }\n    if\
    \ (base === 16) {\n        return pad(x.toString(16), base);\n    }\n    if (base\
    \ === 10) {\n        return pad(x.toString(10), base);\n    }\n    if (base ===\
    \ 16) {\n        return pad(x.toString(16), base);\n    }\n    if (base === 10)\
    \ {\n        return pad(x.toString(10), base);\n    }\n    if (base === 16) {\n\
    \        return pad(x.toString(16), base);\n    }\n    if (base === 10) {\n  \
    \      return pad(x.toString(10), base);\n    }\n    if (base === 16) {", "  let\
    \ res = \"\";\n  let digits = \"\";\n  while (x > 0) {\n    digits = digits +\
    \ x.toString().charAt(0);\n    x = Math.floor(x / base);\n  }\n  while (digits.length\
    \ < base) {\n    digits = \"0\" + digits;\n  }\n  res = digits;\n  return res;\n\
    }\n", "  if (base < 1 || base > 10) {\n    throw Error(\"Invalid base\");\n  }\n\
    \  const digits = x.toString(base).split(\"\").reverse();\n  let result = \"\"\
    ;\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + digits[digits.length\
    \ - i - 1];\n  }\n  return result;\n}\n", "  let res = \"\";\n  let baseNum =\
    \ base;\n  while (baseNum > 0) {\n    if (x % baseNum === 0) {\n      res += baseNum;\n\
    \    } else {\n      res += \"0\";\n    }\n    baseNum--;\n  }\n  return res;\n\
    }\n", "    let baseNum = base;\n    let numStr = x.toString();\n    let newNum\
    \ = 0;\n    let newStr = \"\";\n    let i = 0;\n    while (i < numStr.length)\
    \ {\n        newNum = numStr.charCodeAt(i) - 64;\n        newStr += String.fromCharCode(newNum);\n\
    \        i++;\n    }\n    return newStr;\n}\n", "  let s = \"\" + x;\n  let n\
    \ = s.length;\n  let baseNum = base;\n  while (n > 0) {\n    let digit = n % baseNum;\n\
    \    s = digit.toString() + s;\n    n = Math.floor(n / baseNum);\n  }\n  return\
    \ s;\n}\n", "  if (base < 2 || base > 36) {\n    throw Error(\"Invalid base\"\
    );\n  }\n  if (base === 10) {\n    return x.toString();\n  }\n  if (base === 16)\
    \ {\n    return x.toExponential();\n  }\n  return x.toFixed(base);\n}\n", "  \
    \  let base10 = Math.pow(base, 10);\n    let base = Math.pow(base, base);\n  \
    \  let result = \"\";\n    while (x > 0) {\n        let remainder = x % base;\n\
    \        result += String(Math.floor(remainder)) + base;\n        x = Math.floor(x/base);\n\
    \    }\n    return result;\n}\n", "    const digits = x.toString(base).split(\"\
    \");\n    let result = \"\";\n    for (let i = 0; i < digits.length; i++) {\n\
    \        const d = digits[i];\n        if (d === \"0\") {\n            result\
    \ += \"1\";\n        } else {\n            result += d;\n        }\n    }\n  \
    \  return result;\n}\n", "    let baseNum = base;\n    let baseStr = \"\";\n \
    \   while (baseNum > 0) {\n        baseStr += (baseNum % 10) + \"\";\n       \
    \ baseNum = Math.floor(baseNum / 10);\n    }\n    return baseStr + x;\n}\n", " \
    \ const str = x.toString(base);\n  return str.length < base ? str + Array(base\
    \ - str.length + 1).join('0') : str;\n}\n", "    let result = \"\";\n    let digits\
    \ = \"\";\n    while (x > 0) {\n        digits = digits + x.toString().charAt(0);\n\
    \        x = Math.floor(x / base);\n    }\n    while (digits.length < base) {\n\
    \        digits = \"0\" + digits;\n    }\n    while (digits.length > base) {\n\
    \        digits = digits.slice(0, digits.length - base);\n    }\n    result =\
    \ digits + result;\n    return result;\n}\n", "  let r = \"\";\n  let base10 =\
    \ Math.pow(base, 10);\n  let base2 = Math.pow(base, 2);\n  let base3 = Math.pow(base,\
    \ 3);\n  let base4 = Math.pow(base, 4);\n  let base5 = Math.pow(base, 5);\n  let\
    \ base6 = Math.pow(base, 6);\n  let base7 = Math.pow(base, 7);\n  let base8 =\
    \ Math.pow(base, 8);\n  let base9 = Math.pow(base, 9);\n  let base10 = Math.pow(base,\
    \ 10);\n  let base11 = Math.pow(base, 11);\n  let base12 = Math.pow(base, 12);\n\
    \  let base13 = Math.pow(base, 13);\n  let base14 = Math.pow(base, 14);\n  let\
    \ base15 = Math.pow(base, 15);\n  let base16 = Math.pow(base, 16);\n  let base17\
    \ = Math.pow(base, 17);\n  let base18 = Math.pow(base, 18);\n  let base19 = Math.pow(base,\
    \ 19);\n  let base20 = Math.pow(base, 20);\n  let base21 = Math.pow(base, 21);\n\
    \  let base22 = Math.pow(base, 22);\n  let base23 = Math.pow(base, 23);\n  let\
    \ base24 = Math.pow(base, 24);\n  let base25 = Math.pow(base, 25);\n  let base26\
    \ = Math.pow(base, 26);\n  let base27 = Math.pow(base, 27);\n  let base28 = Math.pow(base,\
    \ 28);\n  let base29 = Math.pow(base, 29);\n  let base30 = Math.pow(base, 30);\n\
    \  let base31 = Math.pow(base, 31);\n  let base32 = Math.pow(base, 32);\n  let\
    \ base33 = Math.pow(base, 33);\n  let base34 = Math.pow(base, 34);\n  let base35\
    \ = Math.pow(base, 35);\n  let base36 = Math.pow(base, 36);\n  let base37 = Math.pow(base,\
    \ 37);\n  let base38 = Math.pow(base, 38);\n  let base39 = Math.pow(base, 39);\n\
    \  let base40 = Math.pow(base, 40);\n  let base41 = Math.pow(base, 41);\n  let\
    \ base42 = Math.pow(base, 42);\n  let base43 = Math.pow(base, 43);\n  let base44\
    \ = Math.pow(base, 44);\n  let base45 = Math.pow(base, 45);\n  let base46 = Math.pow(base,\
    \ 46);\n  let base47 = Math.pow(base, 47);\n  let base48 = Math.pow(base, 48);\n\
    \  let base49 = Math.pow(base, 49);\n  let base50 = Math.pow(base, 50);\n  let\
    \ base51 = Math.pow(base, 51);\n  let base52 = Math.pow(base, 52);\n  let base53\
    \ = Math.pow(base, 53);\n  let base54 = Math.pow(base, 54);\n  let base55 = Math.pow(base,\
    \ 55);\n  let base56 = Math.pow(base, 56);\n  let base57 = Math.pow(base, 57);\n\
    \  let base58 = Math.", "  const str = x.toString(base);\n  return str.length\
    \ < base ? str + Array(base - str.length + 1).join(\"0\") : str;\n}\n", "  let\
    \ result = \"\";\n  let digits = \"\";\n  let basedigits = \"\";\n  let i = 0;\n\
    \  while (x > 0) {\n    digits = String(x % base);\n    basedigits = String(base);\n\
    \    if (basedigits == \"\") {\n      basedigits = \"0\";\n    }\n    if (digits\
    \ == \"\") {\n      digits = \"0\";\n    }\n    result += digits + basedigits;\n\
    \    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "    let s = \"\"\
    \n    while (x > 0) {\n        s = base_digits[x % base] + s\n        x = Math.floor(x\
    \ / base)\n    }\n    return s\n}\n", "  let res = \"\";\n  while (x > 0) {\n\
    \    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n}\n",
  "    if (base < 2 || base > 36) {\n        throw new RangeError(\"Invalid base \"\
    \ + base + \", must be between 2 and 36\");\n    }\n    if (base === 10) {\n \
    \       return String(x);\n    }\n    if (base === 16) {\n        return pad0(x.toString(16),\
    \ 4);\n    }\n    let r = \"\";\n    let t;\n    let i = 0;\n    if (base > 36)\
    \ {\n        r = \"\";\n        while (i < x.length) {\n            t =\n    \
    \            x.charCodeAt(i) - 48 < 10\n                    ? 0\n            \
    \        : x.charCodeAt(i) - 55 < 26\n                        ? 0\n          \
    \              : x.charCodeAt(i) - 65 < 26\n                            ? 0\n\
    \                            : x.charCodeAt(i) - 97 < 26\n                   \
    \             ? 0\n                                : 1;\n            r += pad0(x.charAt(i),\
    \ base);\n            r += r === \"\" ? \"0\" : r === \"1\" ? \"\" : r === \"\
    2\" ? \"\" : \"0\";\n            i += t;\n        }\n        return r;\n    }\n\
    \    if (base < 36) {\n        for (; i < x.length; i++) {\n            t =\n\
    \                x.charCodeAt(i) - 48 < 10\n                    ? 0\n        \
    \            : x.charCodeAt(i) - 55 < 26\n                        ? 0\n      \
    \                  : x.charCodeAt(i) - 65 < 26\n                            ?\
    \ 0\n                            : x.charCodeAt(i) - 97 < 26\n               \
    \                 ? 0\n                                : 1;\n            r +=\
    \ pad0(x.charAt(i), base);\n            r += r === \"\" ? \"0\" : r === \"1\"\
    \ ? \"\" : r === \"2\" ? \"\" : \"0\";\n        }\n        return r;\n    }\n\
    \    for (; i < x.length; i++) {\n        t =\n            x.charCodeAt(i) - 48\
    \ < 10\n                ? 0\n                : x.charCodeAt(i) - 55 < 26\n   \
    \                 ? 0\n                    : x.charCodeAt(i) - 65 < 26\n     \
    \                   ? 0\n                        : x.charCodeAt(i) - 97 < 26\n\
    \                            ? 0\n                            : 1;\n        r\
    \ += pad0(x.charAt(i), base);\n    }\n    return r;\n}\n", "    let result = \"\
    \";\n    let baseNum = base;\n    let baseStr = \"\";\n    while (x > 0) {\n \
    \       if (x % baseNum == 0) {\n            result += baseStr;\n        }\n \
    \       baseNum *= base;\n        baseStr += String(baseNum);\n        x /= baseNum;\n\
    \    }\n    return result;\n}\n", "  let result = '';\n  let digits = x;\n  while\
    \ (digits > 0) {\n    if (digits % base === 0) {\n      digits /= base;\n    }\
    \ else {\n      digits *= base;\n    }\n    result += digits;\n  }\n  return result;\n\
    }\n", "    let baseNum = base;\n    let baseStr = \"\";\n    let baseStrLen =\
    \ 0;\n    let baseNumLen = 0;\n    let baseNumStr = \"\";\n    let baseNumStrLen\
    \ = 0;\n    let baseStrLenMinusOne = 0;\n    let baseNumStrLenMinusOne = 0;\n\
    \    let baseStrMinusOne = \"\";\n    let baseNumStrMinusOne = \"\";\n    let\
    \ baseStrMinusOneLen = 0;\n    let baseNumStrMinusOneLen = 0;\n    let baseStrMinusOneStr\
    \ = \"\";\n    let baseNumStrMinusOneStr = \"\";\n    let baseStrMinusOneStrLen\
    \ = 0;\n    let baseNumStrMinusOneStrLen = 0;\n    let baseStrMinusOneStr = \"\
    \";\n    let baseNumStrMinusOneStr = \"\";\n    let baseStrMinusOneStrLen = 0;\n\
    \    let baseNumStrMinusOneStrLen = 0;\n    let baseStrMinusOneStr = \"\";\n \
    \   let baseNumStrMinusOneStr = \"\";\n    let baseStrMinusOneStrLen = 0;\n  \
    \  let baseNumStrMinusOneStrLen = 0;\n    let baseStrMinusOneStr = \"\";\n   \
    \ let baseNumStrMinusOneStr = \"\";\n    let baseStrMinusOneStrLen = 0;\n    let\
    \ baseNumStrMinusOneStrLen = 0;\n    let baseStrMinusOneStr = \"\";\n    let baseNumStrMinusOneStr\
    \ = \"\";\n    let baseStrMinusOneStrLen = 0;\n    let baseNumStrMinusOneStrLen\
    \ = 0;\n    let baseStrMinusOneStr = \"\";\n    let baseNumStrMinusOneStr = \"\
    \";\n    let baseStrMinusOneStrLen = 0;\n    let baseNumStrMinusOneStrLen = 0;\n\
    \    let baseStrMinusOneStr = \"\";\n    let baseNumStrMinusOneStr = \"\";\n \
    \   let baseStrMinusOneStrLen = 0;\n    let baseNumStrMinusOneStrLen = 0;\n  \
    \  let baseStrMinusOneStr = \"\";\n    let baseNumStrMinusOneStr = \"\";\n   \
    \ let baseStrMinusOneStrLen = 0;\n    let baseNumStrMinusOneStrLen = 0;\n    let\
    \ baseStrMinusOneStr = \"\";\n    let baseNumStrMinusOneStr = \"\";\n    let baseStrMinusOneStrLen\
    \ = 0;\n    let baseNumStrMinusOneStrLen = 0;\n    let baseStrMinusOneStr = \"\
    \";\n    let baseNumStrMinusOneStr = \"\";\n    let baseStrMinusOneStrLen = 0;\n\
    \    let baseNumStrMinusOneStrLen = 0;\n    let baseStrMinusOneStr = \"\";\n \
    \   let baseNumStrMinusOneStr = \"\";\n    let ", "  let res = \"\";\n  let sign\
    \ = \"\";\n  if (x < 0) {\n    sign = \"-\";\n    x = -x;\n  }\n  while (x) {\n\
    \    const digit = x % base;\n    res += digit;\n    x = Math.floor(x / base);\n\
    \  }\n  return sign + res;\n}\n", "  let res = \"\";\n  let baseNum = base;\n\
    \  let numStr = x.toString();\n  for (let i = numStr.length - 1; i >= 0; i--)\
    \ {\n    let ch = numStr.charAt(i);\n    if (ch >= \"0\" && ch <= \"9\") {\n \
    \     res += ch;\n    } else {\n      res += baseNum;\n    }\n  }\n  return res;\n\
    }\n", "    if (base < 2 || base > 36) {\n        throw new RangeError(\"Base must\
    \ be between 2 and 36\");\n    }\n    if (base === 10) {\n        return String(x);\n\
    \    }\n    if (base === 16) {\n        return pad(x, 2);\n    }\n    if (base\
    \ === 8) {\n        return pad(x, 3);\n    }\n    if (base === 2) {\n        return\
    \ pad(x, 4);\n    }\n    if (base === 36) {\n        return pad(x, 6);\n    }\n\
    \    if (base === 10) {\n        return pad(x, 7);\n    }\n    if (base === 16)\
    \ {\n        return pad(x, 8);\n    }\n    throw new RangeError(\"Base must be\
    \ between 2 and 36\");\n}\n", "    let baseNum = base;\n    let numStr = x.toString();\n\
    \    let newNum = parseInt(numStr, baseNum);\n    let result = \"\";\n    while\
    \ (newNum > 0) {\n        result = newNum % baseNum + result;\n        newNum\
    \ = Math.floor(newNum / baseNum);\n    }\n    return result;\n}\n", "    let baseNum\
    \ = base;\n    let baseStr = \"\";\n    let numStr = \"\";\n    let numStr2 =\
    \ \"\";\n    let numStr3 = \"\";\n    let numStr4 = \"\";\n    let numStr5 = \"\
    \";\n    let numStr6 = \"\";\n    let numStr7 = \"\";\n    let numStr8 = \"\"\
    ;\n    let numStr9 = \"\";\n    let numStr10 = \"\";\n    let numStr11 = \"\"\
    ;\n    let numStr12 = \"\";\n    let numStr13 = \"\";\n    let numStr14 = \"\"\
    ;\n    let numStr15 = \"\";\n    let numStr16 = \"\";\n    let numStr17 = \"\"\
    ;\n    let numStr18 = \"\";\n    let numStr19 = \"\";\n    let numStr20 = \"\"\
    ;\n    let numStr21 = \"\";\n    let numStr22 = \"\";\n    let numStr23 = \"\"\
    ;\n    let numStr24 = \"\";\n    let numStr25 = \"\";\n    let numStr26 = \"\"\
    ;\n    let numStr27 = \"\";\n    let numStr28 = \"\";\n    let numStr29 = \"\"\
    ;\n    let numStr30 = \"\";\n    let numStr31 = \"\";\n    let numStr32 = \"\"\
    ;\n    let numStr33 = \"\";\n    let numStr34 = \"\";\n    let numStr35 = \"\"\
    ;\n    let numStr36 = \"\";\n    let numStr37 = \"\";\n    let numStr38 = \"\"\
    ;\n    let numStr39 = \"\";\n    let numStr40 = \"\";\n    let numStr41 = \"\"\
    ;\n    let numStr42 = \"\";\n    let numStr43 = \"\";\n    let numStr44 = \"\"\
    ;\n    let numStr45 = \"\";\n    let numStr46 = \"\";\n    let numStr47 = \"\"\
    ;\n    let numStr48 = \"\";\n    let numStr49 = \"\";\n    let numStr50 = \"\"\
    ;\n    let numStr51 = \"\";\n    let numStr52 = \"\";\n    let numStr53 = \"\"\
    ;\n    let numStr54 = \"\";\n    let numStr55 = \"\";\n    let numStr56 = \"\"\
    ;\n    let numStr57 = \"\";\n    let numStr58 = \"\";\n    let numStr59 = \"\"\
    ;\n    let numStr60 = \"\";\n    let numStr61 = \"\";\n    let numStr62 = \"\"\
    ;\n    let numStr63 = \"\";\n    let numStr64 = \"\";\n    let numStr65 = \"\"\
    ;\n    let numStr66 = \"\";\n    let numStr67 = \"\";\n    let numStr68 = \"\"\
    ;\n    let numStr69 = \"\";\n    let numStr70 = \"\";\n    let numStr71 = \"\"\
    ;\n    let numStr72 = \"\";\n    let numStr73 = \"\";\n    let numStr74 = \"\"\
    ;\n    let numStr75 = \"\";\n    let numStr76 = \"\";\n    let numStr77 = \"\"\
    ;\n    let numStr78 = \"\";\n    let numStr79 = \"\";\n    let numStr80 = \"\"\
    ;\n    let numStr8", "    var r = \"\";\n    var digits = \"\";\n    var i;\n\
    \    var j;\n    var k;\n    var temp;\n    if (base < 2 || base > 36) {\n   \
    \     throw \"Invalid base \" + base + \" in change_base\";\n    }\n    if (base\
    \ == 10) {\n        r = x.toString();\n    } else if (base == 16) {\n        r\
    \ = x.toString(16);\n    } else if (base == 8) {\n        r = x.toString(8);\n\
    \    } else if (base == 2) {\n        for (i = 0; i < x.length; i++) {\n     \
    \       digits = digits + x.charAt(i);\n        }\n        r = digits;\n    }\
    \ else {\n        throw \"Invalid base \" + base + \" in change_base\";\n    }\n\
    \    temp = parseInt(r, base);\n    if (temp < 0) {\n        throw \"Invalid base\
    \ \" + base + \" in change_base\";\n    }\n    if (temp > 0) {\n        j = temp;\n\
    \        for (i = 0; i < base; i++) {\n            j = j / base;\n        }\n\
    \        for (k = 0; k < j; k++) {\n            digits = digits + \"0\";\n   \
    \     }\n    }\n    return digits;\n}\n", "    var str = x.toString(base);\n \
    \   var l = str.length;\n    if (l < base) {\n        var zeros = Array(base -\
    \ l).join(\"0\");\n        str = zeros + str;\n    }\n    return str;\n}\n", " \
    \ if (base < 1 || base > 10) {\n    throw new Error(\"base must be between 1 and\
    \ 10\");\n  }\n  const digits = x.toString().split(\"\");\n  let res = \"\";\n\
    \  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n \
    \   const index = base;\n    const digitValue = digit.charCodeAt(0) - \"0\".charCodeAt(0);\n\
    \    if (digitValue > 1) {\n      digitValue -= 9;\n      index += 9;\n    }\n\
    \    res += digit.charAt(index);\n  }\n  return res;\n}\n", "  let res = \"\"\
    ;\n  let sign = \"\";\n  if (x < 0) {\n    sign = \"-\";\n    x = -x;\n  }\n \
    \ if (x < base) {\n    res += x;\n  } else {\n    while (x >= base) {\n      res\
    \ += base;\n      x -= base;\n    }\n    res += x;\n  }\n  return sign + res;\n\
    }\n", "  let result: string = x.toString(base);\n  while (result.length < base)\
    \ {\n    result = `0${result}`;\n  }\n  return result;\n}\n", "    if (base <\
    \ 2 || base > 36) {\n        throw new RangeError(\"Base must be between 2 and\
    \ 36\");\n    }\n    const digits = x.toString(base).split(\"\");\n    const len\
    \ = digits.length;\n    if (base === 10) {\n        return digits[len - 1];\n\
    \    }\n    let out: string = \"\";\n    for (let i = len - 1; i >= 0; i--) {\n\
    \        out += digits[i] + digits[len - i - 1];\n    }\n    return out;\n}\n",
  "  let result = '';\n  let remainder: number = 0;\n  while (x > 0) {\n    remainder\
    \ = x % base;\n    result += String(remainder);\n    x = Math.floor(x / base);\n\
    \  }\n  return result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let\
    \ baseNum = base;\n  while (x > 0) {\n    digits = digits.length < baseNum ? digits\
    \ + x % base : x % baseNum;\n    x = Math.floor(x / base);\n    baseNum--;\n \
    \ }\n  while (baseNum > 0) {\n    digits = digits.length < baseNum ? digits +\
    \ \"0\" : digits + \"0\";\n    baseNum--;\n  }\n  while (digits.length > 0) {\n\
    \    result = digits.length < base ? result + digits : result + digits.length\
    \ < base ? result + digits.length + \"0\" : result + digits.length + \"0\" + digits;\n\
    \    digits = \"\";\n  }\n  return result;\n}\n", "  let result = '';\n  let digits\
    \ = String(Math.abs(x)).split('');\n  let baseDigits = String(Math.abs(base)).split('');\n\
    \  let baseLength = baseDigits.length;\n  let digitLength = digits.length;\n \
    \ let i = 0;\n  while (i < digitLength) {\n    let digit = digits[i];\n    let\
    \ baseDigit = baseDigits[i];\n    if (digit === baseDigit) {\n      result +=\
    \ digit;\n      i++;\n    } else {\n      let newDigit = baseDigits[baseLength\
    \ - digitLength + i];\n      result += newDigit;\n    }\n  }\n  return result;\n\
    }\n", "    if (base < 2 || base > 36) {\n        throw new RangeError(\"Base must\
    \ be between 2 and 36\");\n    }\n    let result = '';\n    let sign = '';\n \
    \   if (x > 0) {\n        sign = '+';\n        x = Math.abs(x);\n    }\n    if\
    \ (x < base) {\n        let tmp = x;\n        x = base;\n        base = tmp;\n\
    \    }\n    while (x > 0) {\n        let remainder = x % base;\n        result\
    \ += String.fromCharCode(remainder + 65);\n        x = Math.floor(x / base);\n\
    \    }\n    return sign + result;\n}\n", "    if (base < 1 || base > 10) {\n \
    \       throw new Error(`Invalid base ${base}`);\n    }\n    const digits = String(Math.abs(x)).split(\"\
    \").reverse();\n    const res = \"\";\n    for (let i = 0; i < digits.length;\
    \ i++) {\n        const digit = digits[i];\n        const index = base * digits.length\
    \ + i;\n        res += digits[index];\n    }\n    return res;\n}\n", "    let\
    \ baseNum = base;\n    let numStr = x.toString();\n    let newNum = 0;\n    let\
    \ newStr = \"\";\n    let lastPos = numStr.length - 1;\n    while (lastPos >=\
    \ 0) {\n        newNum = parseInt(numStr.charAt(lastPos));\n        newNum *=\
    \ baseNum;\n        newNum += parseInt(numStr.charAt(lastPos - 1));\n        newStr\
    \ += newNum % baseNum;\n        baseNum = baseNum / 10;\n        lastPos -= 1;\n\
    \    }\n    return newStr;\n}\n", "    const digits = base.toString().split('');\n\
    \    const len = digits.length;\n    let result = '';\n    for (let i = 0; i <\
    \ len; i++) {\n        const digit = digits[i];\n        const x = x % base;\n\
    \        result += digit;\n        x = Math.floor(x / base);\n    }\n    return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let i = 0;\n \
    \ while (i < base) {\n    digits = digits + x;\n    i++;\n  }\n  while (i < x)\
    \ {\n    digits = digits + \"0\";\n    i++;\n  }\n  while (i < base) {\n    result\
    \ = result + digits;\n    i++;\n  }\n  return result;\n}\n", "  const str = x.toString(base);\n\
    \  return str.length < base ? str + Array(base - str.length + 1).join('0') : str;\n\
    }\n", "  let baseNum = base;\n  let baseStr = \"\";\n  while (baseNum > 0) {\n\
    \    baseNum /= 10;\n    baseStr += (baseNum % 10) + \"\";\n  }\n  return baseStr\
    \ + x;\n}\n", "  let result = \"\";\n  while (x > 0) {\n    if (x % base === 0)\
    \ {\n      result += x;\n      x /= base;\n    } else {\n      x /= base;\n  \
    \    result += base;\n    }\n  }\n  return result;\n}\n", "  let s = \"\"\n  let\
    \ i = 0\n  while (i < base) {\n    s += (x % base) + i\n    x /= base\n    i++\n\
    \  }\n  return s\n}\n", "    if (base < 2 || base > 36) {\n        throw new RangeError(`Invalid\
    \ base ${base}`);\n    }\n    if (base === 10) {\n        return x.toString();\n\
    \    }\n    if (base === 16) {\n        return pad(x.toString(16), 8);\n    }\n\
    \    if (base === 8) {\n        return pad(x.toString(8), 16);\n    }\n    return\
    \ pad(x.toString(base), base);\n}\n", "    let result = \"\";\n    let baseNum\
    \ = base;\n    while (baseNum > 0) {\n        if (x % baseNum == 0) {\n      \
    \      result += x;\n        }\n        x /= baseNum;\n        baseNum--;\n  \
    \  }\n    return result;\n}\n", "    let num: number = x;\n    let baseNum: number\
    \ = base;\n    let baseStr: string = baseNum.toString();\n    let baseStrLen:\
    \ number = baseStr.length;\n    let baseNumLen: number = baseNum.toString().length;\n\
    \    let baseStrRep: string = \"\";\n    let baseNumRep: string = \"\";\n    let\
    \ baseStrRepLen: number = 0;\n    let baseNumRepLen: number = 0;\n    while (num\
    \ > 0) {\n        let rem: number = num % baseNum;\n        baseNumRep += baseStr[baseStrLen\
    \ - rem];\n        baseNumRepLen += rem;\n        num = Math.floor(num / baseNum);\n\
    \        baseStrRep += baseStr[baseStrLen - baseNumRepLen];\n        baseStrRepLen\
    \ += baseNumRepLen;\n    }\n    return baseStrRep;\n}\n", "  let str = x.toString(base);\n\
    \  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n}\n",
  "    if (base < 2 || base > 36) {\n        throw new Error(`Invalid base ${base}`);\n\
    \    }\n\n    if (base === 10) {\n        return x.toString();\n    }\n\n    let\
    \ result = '';\n    let sign = '';\n\n    if (x > 0) {\n        sign = '+';\n\
    \        x = Math.abs(x);\n    }\n\n    while (x > 0) {\n        const remainder\
    \ = x % base;\n        result += String(remainder);\n        x = Math.floor(x\
    \ / base);\n    }\n\n    if (sign === '+') {\n        result = result.substr(0,\
    \ result.length - 1);\n    }\n\n    return result;\n}\n", "    if (base < 1 ||\
    \ base > 10) {\n        throw new RangeError(\"Base must be between 1 and 10\"\
    );\n    }\n    if (base === 10) {\n        return x.toString();\n    }\n    if\
    \ (base === 8) {\n        return pad(x, 2);\n    }\n    if (base === 16) {\n \
    \       return pad(x, 4);\n    }\n    if (base === 10) {\n        return pad(x,\
    \ 8);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n    }\n    if\
    \ (base === 10) {\n        return pad(x, 10);\n    }\n    if (base === 16) {\n\
    \        return pad(x, 16);\n    }\n    if (base === 10) {\n        return pad(x,\
    \ 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n    }\n   \
    \ if (base === 10) {\n        return pad(x, 10);\n    }\n    if (base === 16)\
    \ {\n        return pad(x, 16);\n    }\n    if (base === 10) {\n        return\
    \ pad(x, 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n   \
    \ }\n    if (base === 10) {\n        return pad(x, 10);\n    }\n    if (base ===\
    \ 16) {\n        return pad(x, 16);\n    }\n    if (base === 10) {\n        return\
    \ pad(x, 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n   \
    \ }\n    if (base === 10) {\n        return pad(x, 10);\n    }\n    if (base ===\
    \ 16) {\n        return pad(x, 16);\n    }\n    if (base === 10) {\n        return\
    \ pad(x, 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n   \
    \ }\n    if (base === 10) {\n        return pad(x, 10);\n    }\n    if (base ===\
    \ 16) {\n        return pad(x, 16);\n    }\n    if (base === 10) {\n        return\
    \ pad(x, 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n   \
    \ }\n    if (base === 10) {\n        return pad(x, 10);\n    }\n    if (base ===\
    \ 16) {\n        return pad(x, 16);\n    }\n    if (base === 10) {\n        return\
    \ pad(x, 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n   \
    \ }\n    if (base === 10) {\n        return pad(x, 10);\n    }\n    if (base ===\
    \ 16) {\n        return pad(x, 16);\n    }\n    if (base === 10) {\n        return\
    \ pad(x, 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n   \
    \ }\n    if (base === 10) {\n        return pad(x, 10);\n    }\n    if (base ===\
    \ 16) {\n        return pad(x, 16);\n    }\n    if (base === 10) {\n        return\
    \ pad(x, 10);\n    }\n    if (base === 16) {\n        return pad(x, 16);\n   \
    \ }\n    if (base === 10) {\n        return pad(x, 10);", "    const digits =\
    \ baseToString(base);\n    let result = \"\";\n    let i = 0;\n    while (i <\
    \ x) {\n        result = digits[x % base] + result;\n        x /= base;\n    \
    \    i++;\n    }\n    return result;\n}\n", "    let base10 = Math.pow(base, 10);\n\
    \    let base = Math.pow(base, base);\n    let result = \"\";\n    let remainder\
    \ = 0;\n    let digit;\n\n    while (x > 0) {\n        remainder = x % base;\n\
    \        digit = base10 - remainder;\n        result += digit;\n        x = Math.floor(x\
    \ / base);\n    }\n\n    return result;\n}\n", "  if (base < 2 || base > 36) {\n\
    \    throw new Error(`Invalid base ${base}`);\n  }\n  if (base === 10) {\n   \
    \ return x.toString();\n  }\n  let res = \"\";\n  while (x > 0) {\n    res +=\
    \ (x % base).toString();\n    x /= base;\n  }\n  return res;\n}\n", "    if (base\
    \ < 2 || base > 36) {\n        throw new RangeError(`Invalid base ${base}`);\n\
    \    }\n    const digits = String(base).split(\"\");\n    let result = \"\";\n\
    \    for (let i = 0; i < digits.length; i++) {\n        const digit = digits[i];\n\
    \        if (digit === \"0\") {\n            result += x;\n        } else {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\n", " \
    \ let res = \"\";\n  let digits = \"\";\n  while (x > 0) {\n    res += digits[x\
    \ % base];\n    x /= base;\n  }\n  return res;\n}\n", "    let s = \"\" + x;\n\
    \    let baseStr = base.toString();\n    let baseLen = baseStr.length;\n    let\
    \ baseNum = parseInt(baseStr);\n    let baseTens = \"\";\n    if (baseNum < 10)\
    \ {\n        baseTens = \"0\";\n    }\n    while (s.length < baseLen) {\n    \
    \    s = baseTens + s;\n    }\n    return s;\n}\n", "  const str = x.toString(base);\n\
    \  return str.length < base ? str + Array(base - str.length + 1).join('0') : str;\n\
    }\n", "  let str = x.toString(base);\n  while (str.length < base) {\n    str =\
    \ `0${str}`;\n  }\n  return str;\n}\n", "    let baseNum = base;\n    let baseStr\
    \ = \"\";\n    let numStr = \"\";\n    while (baseNum > 0) {\n        numStr +=\
    \ (baseNum % 10) + \"\";\n        baseNum = Math.floor(baseNum / 10);\n    }\n\
    \    while (numStr.length < x) {\n        numStr = \"0\" + numStr;\n    }\n  \
    \  while (numStr.length > x) {\n        numStr = numStr.slice(0, x) + numStr.slice(x);\n\
    \    }\n    while (numStr.length < x) {\n        numStr += \"0\";\n    }\n   \
    \ while (baseStr.length < x) {\n        baseStr += \"0\";\n    }\n    while (baseStr.length\
    \ > x) {\n        baseStr = baseStr.slice(0, x) + baseStr.slice(x);\n    }\n \
    \   return numStr + baseStr;\n}\n", "  if (base < 1 || base > 10) {\n    throw\
    \ Error(`Invalid base ${base}`);\n  }\n  const digits = String(base).split(\"\"\
    );\n  let res = \"\";\n  for (let i = digits.length - 1; i >= 0; i--) {\n    res\
    \ = x + digits[i] + res;\n  }\n  return res;\n}\n", "  let res = \"\";\n  let\
    \ sign = \"\";\n  if (x < 0) {\n    sign = \"-\";\n    x = -x;\n  }\n  if (x <\
    \ base) {\n    res += x;\n  } else {\n    while (x >= base) {\n      res += base;\n\
    \      x -= base;\n    }\n    res += x;\n  }\n  return sign + res;\n}\n", "  \
    \  if (base < 0 || base > 10) {\n        throw new RangeError(\"Invalid base\"\
    );\n    }\n    const digits = String(base).split(\"\");\n    let result = \"\"\
    ;\n    for (let i = 0; i < digits.length; i++) {\n        const digit = digits[i];\n\
    \        if (digit === \"0\") {\n            result += x;\n        } else {\n\
    \            result += digit;\n        }\n        x *= base;\n    }\n    return\
    \ result;\n}\n", "    let baseNum = base;\n    let numString = x.toString();\n\
    \    let newNum = \"\";\n    let lastChar = \"\";\n    let lastBase = \"\";\n\
    \    let lastBaseNum = \"\";\n    let lastBaseChar = \"\";\n    let lastBaseNumChar\
    \ = \"\";\n    let lastBaseNumCharNum = \"\";\n    let lastBaseNumCharNumNum =\
    \ \"\";\n    let lastBaseNumCharNumNumNum = \"\";\n    let lastBaseNumCharNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNum = \"\";\n    let lastBaseNumCharNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNumNumNum = \"\";\n   \
    \ let lastBaseNumCharNumNumNumNumNumNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNumNumNum\
    \ = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNumNumNum = \"\";\n   \
    \ let lastBaseNumCharNumNumNumNumNumNumNumNumNumNumNum = \"\";\n    let lastBaseNumCharNumNumNumNumNumNumNumNumNumNumNum\
    \ = \"\";", "    let baseNum = base;\n    let baseStr = \"\";\n    while (baseNum\
    \ > 0) {\n        baseStr += (baseNum % 10) + \"\";\n        baseNum = Math.floor(baseNum\
    \ / 10);\n    }\n    return baseStr + x;\n}\n", "  let num = x.toString(base);\n\
    \  let res = \"\";\n  for (let i = num.length - 1; i >= 0; i--) {\n    res = num.charAt(i)\
    \ + res;\n  }\n  return res;\n}\n", "  let result = \"\";\n  let digits = \"\"\
    ;\n  while (x > 0) {\n    digits = digits + x.toString().charAt(0);\n    x = parseInt(x.toString().substr(1));\n\
    \  }\n  while (digits.length < base) {\n    digits = \"0\" + digits;\n  }\n  while\
    \ (digits.length > base) {\n    digits = digits.substr(1);\n  }\n  result = digits\
    \ + result;\n  return result;\n}\n", "  if (base < 2 || base > 36) {\n    throw\
    \ new Error(\"Base must be between 2 and 36\");\n  }\n  const digits = String(base).split(\"\
    \");\n  let result = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    const\
    \ digit = digits[i];\n    const index = digits.length - 1 - i;\n    if (x >= Math.pow(base,\
    \ index)) {\n      result += digit;\n      x -= Math.pow(base, index);\n    }\n\
    \  }\n  return result;\n}\n", "    let baseNum = base;\n    let baseStr = \"\"\
    ;\n    while (baseNum > 0) {\n        baseStr += (baseNum % 10) + \"\";\n    \
    \    baseNum = Math.floor(baseNum / 10);\n    }\n    return baseStr + x;\n}\n",
  "  let res = \"\";\n  let digits = \"\";\n  let baseDigits = base;\n  while (x >\
    \ 0) {\n    digits = digits + x.toString().charAt(0);\n    x = Math.floor(x /\
    \ base);\n  }\n  while (digits.length < baseDigits) {\n    digits = \"0\" + digits;\n\
    \  }\n  while (digits.length > baseDigits) {\n    res = res + digits.slice(0,\
    \ baseDigits);\n    digits = digits.slice(baseDigits);\n  }\n  return res;\n}\n",
  "    let result = \"\";\n    while (x > 0) {\n        result = base_conversion(x,\
    \ base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n\
    }\n", "    let s = \"\"\n    let n = x\n    while (n >= base) {\n        n /=\
    \ base\n        s += String.fromCharCode(n % 256)\n    }\n    return s + String.fromCharCode(n\
    \ % 256)\n}\n", "    if (base < 1 || base > 10) {\n        throw new RangeError(\"\
    Base must be between 1 and 10\");\n    }\n    let result = \"\";\n    while (x\
    \ > 0) {\n        if (x % base === 0) {\n            result += x;\n        }\n\
    \        x /= base;\n    }\n    return result;\n}\n", "    if (base < 1 || base\
    \ > 10) {\n        throw new RangeError(\"Base must be between 1 and 10\");\n\
    \    }\n    let s = \"\";\n    while (x > 0) {\n        s = String.fromCharCode(x\
    \ % base) + s;\n        x = Math.floor(x / base);\n    }\n    return s;\n}\n",
  "  const str = x.toString(base);\n  return str.length < base ? str + Array(base\
    \ - str.length + 1).join('0') : str;\n}\n", "  if (base < 1 || base > 10) {\n\
    \    throw new Error(\"Base must be between 1 and 10\");\n  }\n  if (base ===\
    \ 10) {\n    return x.toString();\n  }\n  let result = \"\";\n  let digits = x.toString().split(\"\
    \").reverse();\n  for (let i = 0; i < digits.length; i++) {\n    let digit = digits[i];\n\
    \    let index = digits.length - 1 - i;\n    let digitBase = Math.pow(base, index);\n\
    \    let digitString = Math.round(digitBase * digit);\n    result += digitString.toString();\n\
    \  }\n  return result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  while\
    \ (x > 0) {\n    digits = digits + x.toString().charAt(0);\n    x = Math.floor(x\
    \ / base);\n  }\n  while (digits.length < base) {\n    digits = \"0\" + digits;\n\
    \  }\n  result = digits + result;\n  return result;\n}\n", "    let str = x.toString(base);\n\
    \    let l = str.length;\n    let result = \"\";\n    while (l > 0) {\n      \
    \  result = str.substring(0, l - 1) + result;\n        l = l - 1;\n    }\n   \
    \ return result;\n}\n", "    let baseNum = base;\n    let baseStr = \"\";\n  \
    \  let numStr = \"\";\n    while (baseNum > 0) {\n        numStr = baseNum % base;\n\
    \        baseNum = baseNum / base;\n        baseStr = baseStr + numStr;\n    }\n\
    \    return baseStr + numStr;\n}\n", "  let result = \"\";\n  let digits = x;\n\
    \  while (digits > 0) {\n    if (digits % base === 0) {\n      digits = digits\
    \ / base;\n    } else {\n      digits = digits % base;\n    }\n    result = digits;\n\
    \  }\n  return result;\n}\n", "    let base10 = Math.pow(base, 10);\n    let x\
    \ = Math.round(x * base10) / base10;\n    let result = x.toString();\n    if (result.length\
    \ < base) {\n        let zeros = \"\";\n        while (result.length < base) {\n\
    \            zeros += \"0\";\n        }\n        result = zeros + result;\n  \
    \  }\n    return result;\n}\n", "    if (base < 2 || base > 36) {\n        throw\
    \ new RangeError(\"Base must be between 2 and 36\");\n    }\n    if (base ===\
    \ 10) {\n        return x.toString();\n    }\n    if (base === 16) {\n       \
    \ return pad0(x.toString(16), 4);\n    }\n    if (base === 8) {\n        return\
    \ pad0(x.toString(8), 2);\n    }\n    if (base === 2) {\n        return pad0(x.toString(2),\
    \ 8);\n    }\n    return pad0(x.toString(10), base);\n}\n", "  let str = x.toString(base);\n\
    \  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n}\n",
  "    let baseNum = base;\n    let baseStr = \"\";\n    while (baseNum > 0) {\n \
    \       baseStr += (baseNum % 10) + \"\";\n        baseNum = Math.floor(baseNum\
    \ / 10);\n    }\n    return baseStr + x;\n}\n", "  let result = \"\";\n  while\
    \ (x > 0) {\n    result = base_conversion(x, base) + result;\n    x /= base;\n\
    \  }\n  return result;\n}\n", "  let str = x.toString();\n  let res = \"\";\n\
    \  for (let i = str.length - 1; i >= 0; i--) {\n    res = str[i] + res;\n  }\n\
    \  return res.split(\"\").reverse().join(\"\") + base;\n}\n", "    let result\
    \ = '';\n    let power = 1;\n    while (power < base) {\n        result += (x\
    \ % power).toString(base);\n        power *= base;\n    }\n    return result;\n\
    }\n", "  if (base < 2 || base > 36) {\n    throw new Error(\"base must be between\
    \ 2 and 36\");\n  }\n  const digits = base.toString().split('');\n  let res =\
    \ '';\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n\
    \    if (x >= base) {\n      res += digit;\n      x -= base;\n    } else {\n \
    \     res += '0';\n    }\n  }\n  return res;\n}\n", "    if (base < 1 || base\
    \ > 10) {\n        throw new RangeError(\"Invalid base \" + base + \", must be\
    \ between 1 and 10\");\n    }\n    let result = \"\";\n    while (x > 0) {\n \
    \       result = base_digits[x % base] + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n", "  let result = \"\";\n  let sign = \"\";\n\
    \  if (x > 0) {\n    sign = \"+\";\n    x = Math.abs(x);\n  } else if (x < 0)\
    \ {\n    sign = \"-\";\n    x = Math.abs(x);\n  }\n  if (base < 0 || base > 36)\
    \ {\n    throw new Error(\"Base must be between 0 and 36\");\n  }\n  if (base\
    \ === 10) {\n    let digits = String(Math.floor(x)).split(\"\");\n    if (digits.length\
    \ < 2) {\n      digits.unshift(\"0\");\n    }\n    for (let i = 0; i < digits.length;\
    \ i++) {\n      result += digits[i] * base;\n    }\n  } else {\n    let digits\
    \ = String(Math.round(x * Math.pow(10, base))).split(\"\");\n    if (digits.length\
    \ < base) {\n      digits.unshift(\"0\");\n    }\n    for (let i = 0; i < digits.length;\
    \ i++) {\n      result += digits[i] * base;\n    }\n  }\n  return sign + result;\n\
    }\n", "  let baseNum = base;\n  let numString = x.toString();\n  let numLen =\
    \ numString.length;\n  let newNumString = \"\";\n  let newNumLen = 0;\n  while\
    \ (numLen > 0) {\n    let numDigit = numString[numLen - 1];\n    let newNumDigit\
    \ = baseNum % base;\n    if (newNumDigit === 0) {\n      newNumDigit = baseNum;\n\
    \    }\n    newNumString += newNumDigit;\n    baseNum = baseNum / base;\n    numLen--;\n\
    \  }\n  return newNumString;\n}\n", "  if (base < 2 || base > 36) {\n    throw\
    \ new Error(`Invalid base ${base}`);\n  }\n  const digits = String(base).split('');\n\
    \  let result = '';\n  let i = 0;\n  while (i < x) {\n    const digit = x % base;\n\
    \    result += digits[digit];\n    x = Math.floor(x / base);\n    i++;\n  }\n\
    \  return result;\n}\n", "  let result = \"\";\n  let baseNum = base;\n  while\
    \ (x > 0) {\n    result = base_conversion(x, baseNum) + result;\n    x = Math.floor(x\
    \ / baseNum);\n    baseNum *= base;\n  }\n  return result;\n}\n", "  let res =\
    \ \"\";\n  let digits = \"\";\n  let baseDigits = \"\";\n  let baseDigitCount\
    \ = 0;\n  while (x > 0) {\n    digits = String(x % base);\n    baseDigitCount\
    \ = baseDigitCount + digits.length;\n    res = digits + res;\n    x = Math.floor(x\
    \ / base);\n  }\n  while (baseDigitCount > 0) {\n    baseDigits = String(baseDigitCount\
    \ % base);\n    res = baseDigits + res;\n    baseDigitCount = Math.floor(baseDigitCount\
    \ / base);\n  }\n  return res;\n}\n", "  if (base < 1 || base > 10) {\n    throw\
    \ Error(\"base must be between 1 and 10\");\n  }\n  let res = \"\";\n  let digits\
    \ = \"\";\n  while (x > 0) {\n    res += digits[x % base];\n    x /= base;\n \
    \ }\n  return res;\n}\n", "  if (base < 2 || base > 36) {\n    throw new Error('Invalid\
    \ base');\n  }\n  const digits = x.toString(base).split('');\n  let result = '';\n\
    \  for (let i = 0; i < digits.length; i++) {\n    result += digits[digits.length\
    \ - i - 1] * base;\n  }\n  return result;\n}\n", "    const digits = String(base).split(\"\
    \");\n    let result = \"\";\n    let i = 0;\n    while (i < x) {\n        result\
    \ = digits[i] + result;\n        i++;\n    }\n    return result;\n}\n", "    let\
    \ res = \"\";\n    let digits = \"\";\n    let baseDigits = \"\";\n    let baseDigitCount\
    \ = 0;\n    let baseDigitCountBase = 0;\n    let baseDigitCountBase2 = 0;\n  \
    \  let baseDigitCountBase3 = 0;\n    let baseDigitCountBase4 = 0;\n    let baseDigitCountBase5\
    \ = 0;\n    let baseDigitCountBase6 = 0;\n    let baseDigitCountBase7 = 0;\n \
    \   let baseDigitCountBase8 = 0;\n    let baseDigitCountBase9 = 0;\n    let baseDigitCountBase10\
    \ = 0;\n    let baseDigitCountBase11 = 0;\n    let baseDigitCountBase12 = 0;\n\
    \    let baseDigitCountBase13 = 0;\n    let baseDigitCountBase14 = 0;\n    let\
    \ baseDigitCountBase15 = 0;\n    let baseDigitCountBase16 = 0;\n    let baseDigitCountBase17\
    \ = 0;\n    let baseDigitCountBase18 = 0;\n    let baseDigitCountBase19 = 0;\n\
    \    let baseDigitCountBase20 = 0;\n    let baseDigitCountBase21 = 0;\n    let\
    \ baseDigitCountBase22 = 0;\n    let baseDigitCountBase23 = 0;\n    let baseDigitCountBase24\
    \ = 0;\n    let baseDigitCountBase25 = 0;\n    let baseDigitCountBase26 = 0;\n\
    \    let baseDigitCountBase27 = 0;\n    let baseDigitCountBase28 = 0;\n    let\
    \ baseDigitCountBase29 = 0;\n    let baseDigitCountBase30 = 0;\n    let baseDigitCountBase31\
    \ = 0;\n    let baseDigitCountBase32 = 0;\n    let baseDigitCountBase33 = 0;\n\
    \    let baseDigitCountBase34 = 0;\n    let baseDigitCountBase35 = 0;\n    let\
    \ baseDigitCountBase36 = 0;\n    let baseDigitCountBase37 = 0;\n    let baseDigitCountBase38\
    \ = 0;\n    let baseDigitCountBase39 = 0;\n    let baseDigitCountBase40 = 0;\n\
    \    let baseDigitCountBase41 = 0;\n    let baseDigitCountBase42 = 0;\n    let\
    \ baseDigitCountBase43 = 0;\n    let baseDigitCountBase44 = 0;\n    let baseDigitCountBase45\
    \ = 0;\n    let baseDigitCountBase46 = 0;\n    let baseDigitCountBase47 = 0;\n\
    \    let baseDigitCountBase48 = 0;\n    let baseDigitCountBase49 = 0;\n    let\
    \ baseDigitCountBase50 = 0;\n    let baseDigitCountBase51 = 0;\n    let baseDigitCountBase52\
    \ = 0;\n    let baseDigitCountBase53 = 0;\n    let baseDigitCountBase54 = 0;\n\
    \    let baseDigitCountBase55 = 0;\n    let baseDigitCountBase56 = 0;\n    let\
    \ baseDigitCountBase57 = 0;\n    let baseDigitCountBase58 = 0;\n    let baseDigitCountBase59\
    \ = 0;\n    let baseDigitCountBase60 = 0;\n    let baseDigitCountBase61 = 0;\n\
    \    let baseDigitCountBase62 = 0;\n", "  let str = x.toString(base);\n  while\
    \ (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n}\n", "  let\
    \ res = \"\";\n  let x = x.toString();\n  let base = base.toString();\n  if (base\
    \ === \"10\") {\n    res = x;\n  } else if (base === \"0\") {\n    res = x.substring(0,\
    \ x.length - 1);\n  } else {\n    let base_res = \"\";\n    for (let i = base.length\
    \ - 1; i >= 0; i--) {\n      base_res += base[i];\n    }\n    res = x.substring(0,\
    \ x.length - 1) + base_res;\n  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
