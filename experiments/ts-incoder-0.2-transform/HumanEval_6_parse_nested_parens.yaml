name: HumanEval_6_parse_nested_parens
language: ts
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
  (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"()\
  \ (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
  ),[4]);\n}\n\ntest();"
completions: ["  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let\
    \ paren_level_max_count_index = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n\
    \      paren_level_max_count = Math.max(paren_level_max_count, paren_level_count);\n\
    \      paren_level_count = 0;\n      paren_level_max_count_index++;\n    } else\
    \ if (char === ')') {\n      paren_level_count++;\n      paren_level_max_count_index--;\n\
    \      if (paren_level_max_count_index < 0) {\n        paren_level_max_count_index\
    \ = paren_level_max_count - 1;\n      }\n      paren_level[paren_level_max_count_index]\
    \ = paren_level_count;\n      paren_stack.splice(paren_level_max_count_index,\
    \ 1);\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: number[]\
    \ = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n \
    \ let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n\
    \    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n    \
    \  paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      if (paren_level_count\
    \ === 0) {\n        paren_level_max--;\n      }\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n", "  const paren_stack: number[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value:\
    \ number = 0;\n  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_char:\
    \ number = 0;\n  let paren_level_max_value_char_count: number = 0;\n  let paren_level_max_value_char_length:\
    \ number = 0;\n  let paren_level_max_value_char_index: number = 0;\n  let paren_level_max_value_char_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_index: number = 0;\n  let\
    \ paren_level_max_value_char_value_value: number = 0;\n  let paren_level_max_value_char_value_value_index:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_index: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_", "  const paren_stack: number[] =\
    \ [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[]\
    \ = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_index: number[] = [];\n  let paren_level_max_value:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_", "  const paren_stack: string[] = [];\n\
    \  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      paren_level[paren_level.length - 1]++;\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_level_max = Math.max(paren_level_max,\
    \ paren_stack[paren_level_max_index]);\n        paren_level_max_index = paren_level_max_index\
    \ + 1;\n      }\n    }\n  }\n  return paren_stack;\n}\n", "  const paren_stack:\
    \ string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count:\
    \ number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n\
    \      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n\
    \      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n", " \
    \ const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const\
    \ paren_level_max: number[] = [];\n  const paren_level_max_index = 0;\n  let paren_level_max_depth\
    \ = 0;\n  let paren_level_max_depth_index = 0;\n  let paren_level_max_depth_index2\
    \ = 0;\n  let paren_level_max_depth_index3 = 0;\n  let paren_level_max_depth_index4\
    \ = 0;\n  let paren_level_max_depth_index5 = 0;\n  let paren_level_max_depth_index6\
    \ = 0;\n  let paren_level_max_depth_index7 = 0;\n  let paren_level_max_depth_index8\
    \ = 0;\n  let paren_level_max_depth_index9 = 0;\n  let paren_level_max_depth_index10\
    \ = 0;\n  let paren_level_max_depth_index11 = 0;\n  let paren_level_max_depth_index12\
    \ = 0;\n  let paren_level_max_depth_index13 = 0;\n  let paren_level_max_depth_index14\
    \ = 0;\n  let paren_level_max_depth_index15 = 0;\n  let paren_level_max_depth_index16\
    \ = 0;\n  let paren_level_max_depth_index17 = 0;\n  let paren_level_max_depth_index18\
    \ = 0;\n  let paren_level_max_depth_index19 = 0;\n  let paren_level_max_depth_index20\
    \ = 0;\n  let paren_level_max_depth_index21 = 0;\n  let paren_level_max_depth_index22\
    \ = 0;\n  let paren_level_max_depth_index23 = 0;\n  let paren_level_max_depth_index24\
    \ = 0;\n  let paren_level_max_depth_index25 = 0;\n  let paren_level_max_depth_index26\
    \ = 0;\n  let paren_level_max_depth_index27 = 0;\n  let paren_level_max_depth_index28\
    \ = 0;\n  let paren_level_max_depth_index29 = 0;\n  let paren_level_max_depth_index30\
    \ = 0;\n  let paren_level_max_depth_index31 = 0;\n  let paren_level_max_depth_index32\
    \ = 0;\n  let paren_level_max_depth_index33 = 0;\n  let paren_level_max_depth_index34\
    \ = 0;\n  let paren_level_max_depth_index35 = 0;\n  let paren_level_max_depth_index36\
    \ = 0;\n  let paren_level_max_depth_index37 = 0;\n  let paren_level_max_depth_index38\
    \ = 0;\n  let paren_level_max_depth_index39 = 0;\n  let paren_level_max_depth_index40\
    \ = 0;\n  let paren_level_max_depth_index41 = 1;\n  let paren_level_max_depth_index42\
    \ = 1;\n  let paren_level_max_depth_index43 = 1;\n  let paren_level_max_depth_index44\
    \ = 1;\n  let paren_level_max_depth_index45 = 1;\n  let paren_level_max_depth_index46\
    \ = 1;\n  let paren_level_max_depth_index47 = 1;\n  let paren", "    const paren_stack:\
    \ string[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count:\
    \ number = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const\
    \ char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_string[i]);\n\
    \            paren_level.push(paren_level_count);\n            paren_level_count++;\n\
    \        } else if (char === ')') {\n            paren_level_count--;\n      \
    \      paren_level.pop();\n            paren_level.push(paren_level_count);\n\
    \        }\n    }\n    return paren_level;\n}\n", "  const paren_stack: number[]\
    \ = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level.length);\n\
    \      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n   \
    \   const paren_level_index = paren_stack.pop();\n      const paren_level = paren_level[paren_level_index];\n\
    \      paren_level.push(paren_level + 1);\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: number[]\
    \ = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n \
    \ let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n\
    \    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n", "  const paren_stack: string[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i <\
    \ paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      const last_paren_level\
    \ = paren_level.pop();\n      if (paren_stack.length > 0) {\n        const last_paren_level_char\
    \ = paren_stack.pop();\n        if (last_paren_level_char === '(') {\n       \
    \   paren_level[last_paren_level] = paren_level[last_paren_level - 1];\n     \
    \   }\n      }\n      paren_level_count--;\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let\
    \ paren_level = 0;\n  let paren_stack_count = 0;\n  let paren_stack = [];\n  let\
    \ paren_stack_string = \"\";\n  let paren_stack_string_count = 0;\n  let paren_stack_string\
    \ = \"\";\n  let paren_stack_string_count = 0;\n  let paren_level_string = \"\"\
    ;\n  let paren_level_string_count = 0;\n  let paren_level_string = \"\";\n  let\
    \ paren_level_string_count = 0;\n  let paren_level_count_string = \"\";\n  let\
    \ paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n\
    \  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\
    \";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";", "  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n\
    \      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max,\
    \ paren_level_count);\n      paren_level_count = 0;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count]\
    \ = paren_level_max;\n      paren_level_max = 0;\n    } else {\n      paren_level_count\
    \ = 0;\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: number[]\
    \ = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_depth: number[] = [];\n  let paren_level_max_level:\
    \ number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count:\
    \ number[] = [];\n  let paren_level_max_level_length_depth: number[] = [];\n \
    \ let paren_level_max_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level:\
    \ number[] = [];\n  let paren_level_max_level_length_level_count: number[] = [];\n\
    \  let paren_level_max_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth_count: number[]\
    \ = [];\n  let paren_level_max_level_length_level_level_length: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_level: number[] = [];\n  let paren_level_max_level_length_level_length_depth:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth_count: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_level_length: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_level_length: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_level_length: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren", "  const paren_stack: number[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count =\
    \ 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max_count\
    \ = Math.max(paren_level_max_count, paren_stack.length);\n      paren_level_count\
    \ = 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count,\
    \ paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max_count;\n\
    }\n", "  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
