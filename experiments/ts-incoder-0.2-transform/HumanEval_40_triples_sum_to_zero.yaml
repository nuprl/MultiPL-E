name: HumanEval_40_triples_sum_to_zero
language: ts
prompt: "//triples_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are three distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n\
  // false\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["  if (l.length < 3) {\n    return false;\n  }\n  const [a, b, c] =\
    \ l;\n  return a + b + c === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const set\
    \ = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const num = l[i];\n\
    \    if (set.has(num)) {\n      return false;\n    }\n    set.add(num);\n  }\n\
    \  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \ if (l.length < 3) {\n    return false;\n  }\n  const first = l[0];\n  const\
    \ second = l[1];\n  const third = l[2];\n  if (first + second + third === 0) {\n\
    \    return true;\n  }\n  return false;\n}\n", "  if (l.length < 3) {\n    return\
    \ false;\n  }\n  const set = new Set<number>();\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (set.has(l[i] - l[i - 1])) {\n      return false;\n    }\n  \
    \  set.add(l[i]);\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length;\
    \ i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]\
    \ === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n   \
    \   return false;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const\
    \ sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  const zeros\
    \ = n - 1;\n  return sum === 0 || sum === n - 1 && zeros === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  if (sum === 0) {\n    return false;\n  }\n  let left = 0;\n  let right\
    \ = l.length - 1;\n  while (left < right) {\n    const mid = left + Math.floor((right\
    \ - left) / 2);\n    if (sum - l[mid] !== 0) {\n      return false;\n    }\n \
    \   if (sum - l[mid] < 0) {\n      left = mid + 1;\n    } else {\n      right\
    \ = mid - 1;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  if (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    sum += l[i];\n  }\n  if (sum === 0) {\n    return\
    \ false;\n  }\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if\
    \ (l[i] < 0) {\n      count += 1;\n    }\n  }\n  return count === 3;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  const n = l.length;\n  if (n < 3) return false;\
    \ // not enough elements\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n\
    \    const b = l[(i + 1) % n];\n    const c = l[(i + 2) % n];\n    if (a === 0\
    \ && b === 0 && c === 0) return true;\n    if (a === 0 && b === 0) return true;\n\
    \    if (a === 0 && c === 0) return true;\n    if (b === 0 && c === 0) return\
    \ true;\n    if (a === b) return true;\n    if (a === c) return true;\n    if\
    \ (b === c) return true;\n  }\n  return false;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]\
    \ + l[i + 1] + l[i + 2])) {\n      return false;\n    }\n    set.add(l[i] + l[i\
    \ + 1] + l[i + 2]);\n  }\n  return true;\n}\n", "  if (l.length < 3) {\n    return\
    \ false;\n  }\n  const set = new Set<number>();\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n      return false;\n\
    \    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n  return true;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return\
    \ false;\n  }\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n\
    \      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \ if (l.length < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i] + l[i + 1] + l[i\
    \ + 2])) {\n      return false;\n    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n\
    \  }\n  return true;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ const set = new Set<number>();\n  for (let i = 0; i < l.length; i++) {\n   \
    \ if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n      return false;\n    }\n   \
    \ set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n\
    \      return false;\n    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n \
    \ return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  const set = new Set<number>();\n  for (let i\
    \ = 0; i < l.length; i++) {\n    if (set.has(l[i] - l[i - 1])) {\n      return\
    \ true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    if\
    \ (sum < 0) {\n      return false;\n    }\n    sum -= l[i];\n  }\n  return true;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const set\
    \ = new Set<number>();\n  for (const num of l) {\n    if (set.has(num)) {\n  \
    \    return false;\n    }\n    set.add(num);\n  }\n  return true;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (sum - l[i] !== 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length < 3) {\n    return false;\n\
    \  }\n  const set = new Set<number>();\n  for (const num of l) {\n    if (set.has(num))\
    \ {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n\
    \    return false;\n  }\n  const zero = l.filter(x => x === 0);\n  if (zero.length\
    \ !== 3) {\n    return false;\n  }\n  const zeroSet = new Set(zero);\n  return\
    \ zeroSet.size === 3;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n\
    \    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (sum\
    \ - l[i] !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  const n = l.length;\n  if\
    \ (n < 3) return false; // not enough elements\n  const max_sum = l.reduce((a,\
    \ b) => a + b, 0);\n  for (let i = 0; i < n - 2; i++) {\n    const a = l[i];\n\
    \    const b = l[i + 1];\n    const c = l[i + 2];\n    if (max_sum - a + b - c\
    \ === 0) return true;\n  }\n  return false;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  if (l.length < 3) {\n    return false;\n  }\n  const zero = l.slice(0, l.length\
    \ - 1).reduce((a, b) => a + b, 0);\n  return l.slice(1, l.length - 1).reduce((a,\
    \ b) => a + b, 0) === zero;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  if (l.length < 3) {\n    return false;\n  }\n  const [a, b, c] = l;\n  return\
    \ a + b + c === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if\
    \ (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (set.has(l[i] - l[i - 1])) {\n      return\
    \ true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  const n = l.length;\n  if (n < 3) return false; // not\
    \ enough elements\n  let s = 0;\n  for (let i = 0; i < n; i++) {\n    s += l[i];\n\
    \  }\n  return s === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  const n = l.length;\n\
    \  if (n < 3) {\n    return false;\n  }\n  const sum = 0;\n  for (let i = 0; i\
    \ < n; ++i) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const sum = 0;\n\
    \  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  const zeros = n - 1;\n\
    \  return sum === 0 || sum === -n || sum === n / 2;\n}\n", "  let sum = 0;\n \
    \ for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const [a, b, c] = l;\n  return a\
    \ + b + c === 0;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n\
    \  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i <\
    \ n; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n \
    \ for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i =\
    \ 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += -l[i];\n    }\n \
    \ }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i\
    \ < l.length; i++) {\n    const x = l[i];\n    if (set.has(x)) {\n      return\
    \ false;\n    }\n    set.add(x + x);\n  }\n  return true;\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const n\
    \ = l.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n\
    \  }\n  const triples = l.filter((x, i) => i % 3 === 0);\n  return triples.some((x,\
    \ i) => x === sum);\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n\
    \    return false;\n  }\n  const zero = l.slice(0, l.length - 1).reduce((a, b)\
    \ => a + b, 0);\n  const three = l.slice(0, l.length - 2).reduce((a, b) => a +\
    \ b, 0);\n  return three === zero;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n  \
    \  return false;\n  }\n  const set = new Set<number>();\n  for (let i = 0; i <\
    \ l.length; i++) {\n    if (set.has(l[i] - l[i - 1])) {\n      return true;\n\
    \    }\n    set.add(l[i]);\n  }\n  return false;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return\
    \ false;\n  }\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (sum - l[i] !== 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i] - l[i - 1])) {\n\
    \      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n}\n", " \
    \ if (l.length < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i] + l[i + 1] + l[i\
    \ + 2])) {\n      return false;\n    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n\
    \  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (set.has(Math.abs(l[i] - 0))) {\n      return true;\n\
    \    }\n    set.add(Math.abs(l[i] - 0));\n  }\n  return false;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const set\
    \ = new Set<number>();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]\
    \ + l[i + 1] + l[i + 2])) {\n      return false;\n    }\n    set.add(l[i] + l[i\
    \ + 1] + l[i + 2]);\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  if (l.length < 3) {\n    return false;\n  }\n  const set = new Set();\n  for\
    \ (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n     \
    \ return false;\n    }\n    set.add(Math.abs(l[i]));\n  }\n  return true;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n \
    \ }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  for (let i = 0; i < l.length; i++) {\n    if (sum - l[i] !== 0) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return\
    \ false;\n  }\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  const n = l.length;\n\
    \  if (n < 3) {\n    return false;\n  }\n  const sum = 0;\n  for (let i = 0; i\
    \ < n; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < n; i++) {\n    if\
    \ (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  const [a, b, c] = l;\n  return a + b + c ===\
    \ 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n \
    \ for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n\
    \  for (let i = 0; i < n; i++) {\n    if (sum < 0) {\n      return false;\n  \
    \  }\n    sum -= l[i];\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ const set = new Set<number>();\n  for (let i = 0; i < l.length; i++) {\n   \
    \ if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n      return false;\n    }\n   \
    \ set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n  return true;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if\
    \ (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum\
    \ += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (sum - l[i] !== 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n \
    \ let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  const\
    \ zeros = n - 1;\n  return sum === 0 || sum === -n || sum === n / 2;\n}\n", " \
    \ if (l.length < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i] - l[i - 1])) {\n\
    \      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}\n", " \
    \ if (l.length < 3) {\n    return false;\n  }\n  const a = l[0];\n  const b =\
    \ l[1];\n  const c = l[2];\n  if (a === 0 || b === 0 || c === 0) {\n    return\
    \ false;\n  }\n  return a + b + c === 0;\n}\n", "  const n = l.length;\n  if (n\
    \ < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n  for (let\
    \ i = 0; i < n; i++) {\n    const x = l[i];\n    if (x > 0) {\n      set.add(x\
    \ - 1);\n    }\n  }\n  return set.size === 3;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
