name: HumanEval_40_triples_sum_to_zero
language: ts
prompt: "//triples_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are three distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n\
  // false\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["  if (l.length < 3) {\n    return false;\n  }\n  const [a, b, c] =\
    \ l;\n  return a + b + c === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const set\
    \ = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const num = l[i];\n\
    \    if (set.has(num)) {\n      return false;\n    }\n    set.add(num);\n  }\n\
    \  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \ if (l.length < 3) {\n    return false;\n  }\n  const first = l[0];\n  const\
    \ second = l[1];\n  const third = l[2];\n  if (first + second + third === 0) {\n\
    \    return true;\n  }\n  return false;\n}\n", "  if (l.length < 3) {\n    return\
    \ false;\n  }\n  const set = new Set<number>();\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (set.has(l[i] - l[i - 1])) {\n      return false;\n    }\n  \
    \  set.add(l[i]);\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length;\
    \ i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]\
    \ === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
