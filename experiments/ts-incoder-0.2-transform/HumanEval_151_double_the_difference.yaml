name: HumanEval_151_double_the_difference
language: ts
prompt: "//Given a list of numbers, return the sum of squares of the numbers\n// in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n// >>>\
  \ double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
  \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
  // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
  \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
  \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
completions: ["  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum +=\
    \ lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return\
    \ 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const odd = lst.reduce((acc, curr) => {\n  \
    \  return acc + (curr % 2 === 1 ? curr : 0);\n  }, 0);\n  return odd;\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n \
    \   if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  const first = lst[0];\n  const rest = lst.slice(1);\n  return rest.reduce((acc,\
    \ curr) => acc + curr * curr, first);\n}\n", "  if (lst.length === 0) {\n    return\
    \ 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ lst[i];\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n\
    \    }\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares\
    \ = lst.reduce((acc, val) => {\n    return acc + Math.pow(val, 2);\n  }, 0);\n\
    \  return sumOfSquares - (lst.reduce((acc, val) => {\n    return acc + Math.pow(val,\
    \ 2);\n  }, 0) / lst.length);\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 ===\
    \ 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const first = lst[0];\n  const rest = lst.slice(1);\n\
    \  return first * first + double_the_difference(rest);\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
