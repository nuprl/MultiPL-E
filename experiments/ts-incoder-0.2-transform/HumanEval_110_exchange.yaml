name: HumanEval_110_exchange
language: ts
prompt: "//In this problem, you will implement a function that takes two lists of\
  \ numbers,\n// and determines whether it is possible to perform an exchange of elements\n\
  // between them to make lst1 a list of only even numbers.\n// There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n// all the elements of\
  \ lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
  // >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2,\
  \ 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input lists will be\
  \ non-empty.\nfunction exchange(lst1: number[], lst2: number[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3,\
  \ 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5,\
  \ 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\"\
  );\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5,\
  \ 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3,\
  \ 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"\
  YES\");\n}\n\ntest();"
completions: ["  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\"\
    ;\n  }\n  let even: boolean = true;\n  let evenIndex: number = 0;\n  let oddIndex:\
    \ number = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2\
    \ === 0) {\n      even = true;\n      evenIndex = i;\n    } else {\n      even\
    \ = false;\n      oddIndex = i;\n    }\n  }\n  for (let i = 0; i < lst2.length;\
    \ i++) {\n    if (lst2[i] % 2 === 0) {\n      even = true;\n      evenIndex =\
    \ i;\n    } else {\n      even = false;\n      oddIndex = i;\n    }\n  }\n  if\
    \ (even) {\n    lst1[evenIndex] = lst2[evenIndex];\n    lst2[evenIndex] = lst1[oddIndex];\n\
    \    lst1[oddIndex] = lst2[oddIndex];\n  } else {\n    lst1[oddIndex] = lst2[evenIndex];\n\
    \    lst2[evenIndex] = lst1[oddIndex];\n    lst1[oddIndex] = lst2[evenIndex];\n\
    \  }\n  return \"YES\";\n}\n", "  \n}\n", "  // Your code here\n}\n", "  // Your\
    \ code here\n}\n", "  let even = true;\n  for (let i = 0; i < lst1.length; i++)\
    \ {\n    if (lst1[i] % 2 != 0) {\n      even = false;\n      break;\n    }\n \
    \ }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 != 0) {\n\
    \      even = false;\n      break;\n    }\n  }\n  if (even) {\n    return \"YES\"\
    ;\n  } else {\n    return \"NO\";\n  }\n}\n", "  if (lst1.length === 0 || lst2.length\
    \ === 0) {\n    return \"NO\";\n  }\n  let even = true;\n  for (let i = 0; i <\
    \ lst1.length; i++) {\n    if (lst1[i] % 2 !== 0 && lst2[i] % 2 === 0) {\n   \
    \   even = false;\n      break;\n    }\n  }\n  if (even) {\n    return \"YES\"\
    ;\n  }\n  return \"NO\";\n}\n", "  // Your code here\n}\n", "  // Your code here\n\
    }\n", "  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n \
    \ }\n  let even: boolean = true;\n  for (let i = 0; i < lst1.length; i++) {\n\
    \    if (lst1[i] % 2 !== 0) {\n      even = false;\n      break;\n    }\n  }\n\
    \  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 !== 0) {\n   \
    \   even = false;\n      break;\n    }\n  }\n  if (even) {\n    return \"YES\"\
    ;\n  }\n  return \"NO\";\n}\n", "  // Your code here\n}\n", "  let even: boolean\
    \ = false;\n  let evenCount: number = 0;\n  let oddCount: number = 0;\n  for (let\
    \ i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n  }\n  for (let i = 0; i < lst2.length;\
    \ i++) {\n    if (lst2[i] % 2 === 0) {\n      evenCount++;\n    } else {\n   \
    \   oddCount++;\n    }\n  }\n  if (evenCount === lst1.length && oddCount === lst2.length)\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  // Your code here\n\
    }\n", "  // Your code here\n}\n", "  if (lst1.length === 0 || lst2.length ===\
    \ 0) {\n    return \"NO\";\n  }\n  let even: number[] = [];\n  let odd: number[]\
    \ = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0)\
    \ {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n\
    \  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n\
    \      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n\
    \  if (even.length > 0 && odd.length > 0) {\n    return \"YES\";\n  } else {\n\
    \    return \"NO\";\n  }\n}\n", "  // Your code here\n}\n", "  // Your code here\n\
    }\n", "  // Your code here\n}\n", "  if (lst1.length === 0 || lst2.length ===\
    \ 0) {\n    return \"NO\";\n  }\n  let even: number[] = [];\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n\
    \    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 ===\
    \ 0) {\n      even.push(lst2[i]);\n    }\n  }\n  if (even.length !== lst1.length)\
    \ {\n    return \"NO\";\n  }\n  return \"YES\";\n}\n", "  if (lst1.length ===\
    \ 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  let evenNumbers = lst1.filter(n\
    \ => n % 2 === 0);\n  let oddNumbers = lst2.filter(n => n % 2 === 1);\n  if (evenNumbers.length\
    \ === 0 && oddNumbers.length === 0) {\n    return \"NO\";\n  }\n  if (evenNumbers.length\
    \ === 0) {\n    return exchange(oddNumbers, lst2);\n  }\n  if (oddNumbers.length\
    \ === 0) {\n    return exchange(evenNumbers, lst1);\n  }\n  let exchanged = [];\n\
    \  let evenNumbersIndex = 0;\n  let oddNumbersIndex = 0;\n  while (evenNumbersIndex\
    \ < evenNumbers.length && oddNumbersIndex < oddNumbers.length) {\n    if (evenNumbers[evenNumbersIndex]\
    \ > oddNumbers[oddNumbersIndex]) {\n      exchanged.push(evenNumbers[evenNumbersIndex]);\n\
    \      evenNumbersIndex++;\n    } else {\n      exchanged.push(oddNumbers[oddNumbersIndex]);\n\
    \      oddNumbersIndex++;\n    }\n  }\n  if (evenNumbersIndex < evenNumbers.length)\
    \ {\n    exchanged.push(...evenNumbers.slice(evenNumbersIndex));\n  }\n  if (oddNumbersIndex\
    \ < oddNumbers.length) {\n    exchanged.push(...oddNumbers.slice(oddNumbersIndex));\n\
    \  }\n  return exchanged.join(\", \");\n}\n", "  // Your code here\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
