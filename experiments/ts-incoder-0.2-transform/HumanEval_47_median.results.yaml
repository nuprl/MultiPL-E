language: ts
name: HumanEval_47_median
results:
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  if (sortedList.length\
    \ % 2) {\n    return sortedList[middle];\n  }\n  const leftMedian = sortedList[middle\
    \ - 1];\n  const rightMedian = sortedList[middle];\n  return leftMedian + rightMedian\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpjrqz55ro.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjrqz55ro.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8zkbt_vh.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmp8zkbt_vh.js:11:18)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n\
    \  const medianValue = median(l);\n  const leftMedian = median(l.slice(0, mid));\n\
    \  const rightMedian = median(l.slice(mid));\n  return medianValue + leftMedian\
    \ + rightMedian;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgoog7p7i.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at median (/tmp/tmpgoog7p7i.js:7:11)\n\
    \    at median (/tmp/tmpgoog7p7i.js:17:23)\n    at median (/tmp/tmpgoog7p7i.js:17:23)\n\
    \    at median (/tmp/tmpgoog7p7i.js:17:23)\n    at median (/tmp/tmpgoog7p7i.js:17:23)\n\
    \    at median (/tmp/tmpgoog7p7i.js:17:23)\n    at median (/tmp/tmpgoog7p7i.js:17:23)\n\
    \    at median (/tmp/tmpgoog7p7i.js:17:23)\n    at median (/tmp/tmpgoog7p7i.js:17:23)\n\
    \    at median (/tmp/tmpgoog7p7i.js:17:23)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n\
    \  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return\
    \ l[l.length - 1];\n  }\n  const leftMedian = median(l.slice(0, middle));\n  const\
    \ rightMedian = median(l.slice(middle + 1));\n  return ((leftMedian + rightMedian)\
    \ / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp129bxp5d.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp129bxp5d.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    List must contain at least one element\");\n  }\n  if (n === 1) {\n    return\
    \ l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2)\
    \ | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp1duhr8j3.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1duhr8j3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) {\n    return l[0];\n  }\n  const\
    \ middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right =\
    \ l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyj_8hmj9.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyj_8hmj9.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpii8hw_l5.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpii8hw_l5.js:11:25)\n    at\
    \ median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \    at median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \    at median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \    at median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpau48zfy2.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpau48zfy2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpau48zfy2.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpau48zfy2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpma31vyg7.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpma31vyg7.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpswjk4eoo.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpswjk4eoo.js:14:25)\n    at\
    \ median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnw_ex1aj.ts(14,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return left + Math.abs(right - left);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpr7zoax3z.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpr7zoax3z.js:11:25)\n    at\
    \ median (/tmp/tmpr7zoax3z.js:12:17)\n    at median (/tmp/tmpr7zoax3z.js:12:17)\n\
    \    at median (/tmp/tmpr7zoax3z.js:12:17)\n    at median (/tmp/tmpr7zoax3z.js:12:17)\n\
    \    at median (/tmp/tmpr7zoax3z.js:12:17)\n    at median (/tmp/tmpr7zoax3z.js:12:17)\n\
    \    at median (/tmp/tmpr7zoax3z.js:12:17)\n    at median (/tmp/tmpr7zoax3z.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list.\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2)\
    \ | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpz5lm67tf.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz5lm67tf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid % 1\
    \ !== 0) {\n    throw new Error(\"Cannot calculate median of an even length list\"\
    );\n  }\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const medianOfLeftHalf\
    \ = median(l.slice(0, mid));\n  const medianOfRightHalf = median(l.slice(mid));\n\
    \  return medianOfLeftHalf + medianOfRightHalf;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphawhs6bm.js:12\n        throw new Error(\"Cannot calculate median\
    \ of an even length list\");\n        ^\n\nError: Cannot calculate median of an\
    \ even length list\n    at median (/tmp/tmphawhs6bm.js:12:15)\n    at test (/tmp/tmphawhs6bm.js:24:22)\n\
    \    at Object.<anonymous> (/tmp/tmphawhs6bm.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const half = Math.floor(n / 2);\n  if (n % 2) {\n  \
    \  return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n\
    \  return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe1m2gr8c.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpe1m2gr8c.ts(16,37): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpe1m2gr8c.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpe1m2gr8c.ts(18,35): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpyy32x23k.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyy32x23k.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian = median(l.slice(0,\
    \ mid));\n  const rightMedian = median(l.slice(mid));\n  return leftMedian + rightMedian\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgqwc_389.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmpgqwc_389.js:8:15)\n    at median (/tmp/tmpgqwc_389.js:14:22)\n\
    \    at median (/tmp/tmpgqwc_389.js:14:22)\n    at median (/tmp/tmpgqwc_389.js:15:23)\n\
    \    at test (/tmp/tmpgqwc_389.js:21:22)\n    at Object.<anonymous> (/tmp/tmpgqwc_389.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return Math.max(left, right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqj0zif8u.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpqj0zif8u.js:11:25)\n    at\
    \ median (/tmp/tmpqj0zif8u.js:12:17)\n    at median (/tmp/tmpqj0zif8u.js:12:17)\n\
    \    at median (/tmp/tmpqj0zif8u.js:12:17)\n    at median (/tmp/tmpqj0zif8u.js:12:17)\n\
    \    at median (/tmp/tmpqj0zif8u.js:12:17)\n    at median (/tmp/tmpqj0zif8u.js:12:17)\n\
    \    at median (/tmp/tmpqj0zif8u.js:12:17)\n    at median (/tmp/tmpqj0zif8u.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_kf0ug3g.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp_kf0ug3g.js:11:25)\n    at\
    \ median (/tmp/tmp_kf0ug3g.js:12:17)\n    at median (/tmp/tmp_kf0ug3g.js:12:17)\n\
    \    at median (/tmp/tmp_kf0ug3g.js:12:17)\n    at median (/tmp/tmp_kf0ug3g.js:12:17)\n\
    \    at median (/tmp/tmp_kf0ug3g.js:12:17)\n    at median (/tmp/tmp_kf0ug3g.js:12:17)\n\
    \    at median (/tmp/tmp_kf0ug3g.js:12:17)\n    at median (/tmp/tmp_kf0ug3g.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const midIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[midIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp5c8f83xk.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5c8f83xk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n\
    \  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n\
    \  const rightMedian = median(l.slice(mid));\n  return medianValue + Math.max(leftMedian,\
    \ rightMedian);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdn2y9gh6.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpdn2y9gh6.js:8:15)\n    at median (/tmp/tmpdn2y9gh6.js:18:22)\n\
    \    at median (/tmp/tmpdn2y9gh6.js:18:22)\n    at median (/tmp/tmpdn2y9gh6.js:19:23)\n\
    \    at test (/tmp/tmpdn2y9gh6.js:25:22)\n    at Object.<anonymous> (/tmp/tmpdn2y9gh6.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp7gsw9myn.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gsw9myn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzxs_ozoc.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpzxs_ozoc.js:11:18)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz25whk5z.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpz25whk5z.js:8:15)\n    at median (/tmp/tmpz25whk5z.js:14:16)\n\
    \    at median (/tmp/tmpz25whk5z.js:14:16)\n    at median (/tmp/tmpz25whk5z.js:15:17)\n\
    \    at test (/tmp/tmpz25whk5z.js:21:22)\n    at Object.<anonymous> (/tmp/tmpz25whk5z.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate\
    \ median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a\
    \ - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n\
    \  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbz_npujl.js:8\n        throw new Error('Cannot calculate median\
    \ of an empty list');\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpbz_npujl.js:8:15)\n    at median (/tmp/tmpbz_npujl.js:16:26)\n\
    \    at median (/tmp/tmpbz_npujl.js:16:26)\n    at median (/tmp/tmpbz_npujl.js:17:24)\n\
    \    at test (/tmp/tmpbz_npujl.js:23:22)\n    at Object.<anonymous> (/tmp/tmpbz_npujl.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpx_jxwlc0.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx_jxwlc0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    median requires at least one argument\");\n  }\n  if (n === 1) {\n    return l[0];\n\
    \  }\n  const mid = n >> 1;\n  const a = l[mid];\n  let b = l[n - 1];\n  let c\
    \ = l[mid];\n  let d = l[n - 1];\n  while (true) {\n    if (a > b) {\n      d\
    \ = a;\n      a = b;\n      b = c;\n      c = d;\n      d = (d + (c / 2)) | 0;\n\
    \    }\n    if (b > c) {\n      d = b;\n      b = c;\n      c = d;\n      d =\
    \ (d + (b / 2)) | 0;\n    }\n    if (a > c) {\n      d = a;\n      a = c;\n  \
    \    c = d;\n      d = (d + (a / 2)) | 0;\n    }\n    if (b > d) {\n      d =\
    \ b;\n      b = d;\n      d = c;\n      c = (c + (d / 2)) | 0;\n    }\n    if\
    \ (c > d) {\n      d = c;\n      c = d;\n      d = a;\n      a = (a + (c / 2))\
    \ | 0;\n    }\n    if (a > b) {\n      d = a;\n      a = b;\n      b = d;\n  \
    \    d = (d + (a / 2)) | 0;\n    }\n    if (b > c) {\n      d = b;\n      b =\
    \ c;\n      c = d;\n      d = (d + (b / 2)) | 0;\n    }\n    if (d > c) {\n  \
    \    d = c;\n      c = d;\n      d = a;\n      a = (a + (d / 2)) | 0;\n    }\n\
    \    if (c > b) {\n      d = c;\n      c = b;\n      b = d;\n      d = (d + (a\
    \ / 2)) | 0;\n    }\n    if (d > a) {\n      d = a;\n      a = d;\n      d = c;\n\
    \      c = (c + (d / 2)) | 0;\n    }\n    if (c > a) {\n      d = c;\n      c\
    \ = a;\n      a = d;\n      d = (d + (c / 2)) | 0;\n    }\n    if (a > d) {\n\
    \      d = a;\n      a = d;\n      d = c;\n      c = (c + (d / 2)) | 0;\n    }\n\
    \    if (b > d) {\n      d = b;\n      b = d;\n      d = c;\n      c = (c + (b\
    \ / 2)) | 0;\n    }\n    if (c > b) {\n      d = c;\n      c = b;\n      b = d;\n\
    \      d = (d + (a / 2)) | 0;\n    }\n    if (d > a) {\n      d = a;\n      a\
    \ = d;\n      d = c;\n      c = (c + (d / 2)\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzc3izwqt.ts(110,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpzc3izwqt.ts(123,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzp7x_rxq.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpzp7x_rxq.js:15:25)\n    at\
    \ median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \    at median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \    at median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \    at median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5a62lrez.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp5a62lrez.js:11:18)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2)\
    \ | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8me6_t0p.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp8me6_t0p.js:11:25)\n    at\
    \ median (/tmp/tmp8me6_t0p.js:12:17)\n    at median (/tmp/tmp8me6_t0p.js:12:17)\n\
    \    at median (/tmp/tmp8me6_t0p.js:12:17)\n    at median (/tmp/tmp8me6_t0p.js:12:17)\n\
    \    at median (/tmp/tmp8me6_t0p.js:12:17)\n    at median (/tmp/tmp8me6_t0p.js:12:17)\n\
    \    at median (/tmp/tmp8me6_t0p.js:12:17)\n    at median (/tmp/tmp8me6_t0p.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  }\n  const mid = Math.floor(l.length / 2)\n  const left = l.slice(0,\
    \ mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpicnpvddj.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpicnpvddj.js:11:18)\n    at median (/tmp/tmpicnpvddj.js:13:27)\n\
    \    at median (/tmp/tmpicnpvddj.js:13:27)\n    at median (/tmp/tmpicnpvddj.js:13:27)\n\
    \    at median (/tmp/tmpicnpvddj.js:13:27)\n    at median (/tmp/tmpicnpvddj.js:13:27)\n\
    \    at median (/tmp/tmpicnpvddj.js:13:27)\n    at median (/tmp/tmpicnpvddj.js:13:27)\n\
    \    at median (/tmp/tmpicnpvddj.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpnva07st6.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnva07st6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp60v4o6uq.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp60v4o6uq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n\
    \  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle\
    \ = len / 2;\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n\
    \  return (right - left) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpbqtwhd63.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbqtwhd63.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n\
    \  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return\
    \ l[l.length - 1];\n  }\n  const medianValue = median(l[middle]);\n  return median(l[middle\
    \ - 1]) < medianValue ? median(l[middle - 1]) : medianValue;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvrptai7g.ts(17,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpvrptai7g.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpvrptai7g.ts(18,55): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n\
    \  return median1 + median2 > 0 ? median1 + median2 : median2;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpzoji0yeb.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzoji0yeb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88ntj1dw.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp88ntj1dw.js:11:25)\n    at\
    \ median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa04kbg3k.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpa04kbg3k.js:11:18)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if\
    \ (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid]\
    \ + (sorted[mid-1] + sorted[mid+1]) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpq77b76ay.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq77b76ay.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpnva07st6.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnva07st6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp60v4o6uq.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp60v4o6uq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpii8hw_l5.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpii8hw_l5.js:11:25)\n    at\
    \ median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \    at median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \    at median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \    at median (/tmp/tmpii8hw_l5.js:12:17)\n    at median (/tmp/tmpii8hw_l5.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3n_rs44m.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp3n_rs44m.js:11:18)\n    at median (/tmp/tmp3n_rs44m.js:13:27)\n\
    \    at median (/tmp/tmp3n_rs44m.js:13:27)\n    at median (/tmp/tmp3n_rs44m.js:13:27)\n\
    \    at median (/tmp/tmp3n_rs44m.js:13:27)\n    at median (/tmp/tmp3n_rs44m.js:13:27)\n\
    \    at median (/tmp/tmp3n_rs44m.js:13:27)\n    at median (/tmp/tmp3n_rs44m.js:13:27)\n\
    \    at median (/tmp/tmp3n_rs44m.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpufjz8_z9.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpufjz8_z9.js:11:18)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpwzrhkb0i.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwzrhkb0i.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + Math.ceil((right - left) / 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvtcv35si.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpvtcv35si.js:14:25)\n    at\
    \ median (/tmp/tmpvtcv35si.js:15:17)\n    at median (/tmp/tmpvtcv35si.js:15:17)\n\
    \    at median (/tmp/tmpvtcv35si.js:15:17)\n    at median (/tmp/tmpvtcv35si.js:15:17)\n\
    \    at median (/tmp/tmpvtcv35si.js:15:17)\n    at median (/tmp/tmpvtcv35si.js:15:17)\n\
    \    at median (/tmp/tmpvtcv35si.js:15:17)\n    at median (/tmp/tmpvtcv35si.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzxs_ozoc.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpzxs_ozoc.js:11:18)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp60v4o6uq.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp60v4o6uq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list.\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdpoezap_.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list.\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list.\n    at median (/tmp/tmpdpoezap_.js:8:15)\n    at median (/tmp/tmpdpoezap_.js:14:16)\n\
    \    at median (/tmp/tmpdpoezap_.js:14:16)\n    at median (/tmp/tmpdpoezap_.js:15:17)\n\
    \    at test (/tmp/tmpdpoezap_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpdpoezap_.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyzq4i5w_.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmpyzq4i5w_.js:8:15)\n    at median (/tmp/tmpyzq4i5w_.js:14:16)\n\
    \    at median (/tmp/tmpyzq4i5w_.js:14:16)\n    at median (/tmp/tmpyzq4i5w_.js:15:17)\n\
    \    at test (/tmp/tmpyzq4i5w_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpyzq4i5w_.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return l.length / 2 === mid ? left : right;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpe0a3z20k.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpe0a3z20k.js:14:25)\n    at\
    \ median (/tmp/tmpe0a3z20k.js:15:17)\n    at median (/tmp/tmpe0a3z20k.js:15:17)\n\
    \    at median (/tmp/tmpe0a3z20k.js:15:17)\n    at median (/tmp/tmpe0a3z20k.js:15:17)\n\
    \    at median (/tmp/tmpe0a3z20k.js:15:17)\n    at median (/tmp/tmpe0a3z20k.js:15:17)\n\
    \    at median (/tmp/tmpe0a3z20k.js:15:17)\n    at median (/tmp/tmpe0a3z20k.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length\
    \ / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid]\
    \ + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpxfyft4hp.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxfyft4hp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5m33grj7.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmp5m33grj7.js:11:18)\n    at median (/tmp/tmp5m33grj7.js:13:27)\n\
    \    at median (/tmp/tmp5m33grj7.js:13:27)\n    at median (/tmp/tmp5m33grj7.js:13:27)\n\
    \    at median (/tmp/tmp5m33grj7.js:13:27)\n    at median (/tmp/tmp5m33grj7.js:13:27)\n\
    \    at median (/tmp/tmp5m33grj7.js:13:27)\n    at median (/tmp/tmp5m33grj7.js:13:27)\n\
    \    at median (/tmp/tmp5m33grj7.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpup1bn3zg.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpup1bn3zg.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n\
    \    return sorted[sorted.length / 2 - 1];\n  }\n  return sorted[sorted.length\
    \ / 2];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpm3rzgz50.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm3rzgz50.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const mid = Math.floor((n - 1) / 2);\n  if (l[mid] <\
    \ l[mid+1]) {\n    return median(l[mid]);\n  }\n  return median(l[mid+1]);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoz2irbf5.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpoz2irbf5.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpb99i65fe.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb99i65fe.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpswjk4eoo.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpswjk4eoo.js:14:25)\n    at\
    \ median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc02efi_y.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc02efi_y.js:14:25)\n    at\
    \ median (/tmp/tmpc02efi_y.js:15:17)\n    at median (/tmp/tmpc02efi_y.js:15:17)\n\
    \    at median (/tmp/tmpc02efi_y.js:15:17)\n    at median (/tmp/tmpc02efi_y.js:15:17)\n\
    \    at median (/tmp/tmpc02efi_y.js:15:17)\n    at median (/tmp/tmpc02efi_y.js:15:17)\n\
    \    at median (/tmp/tmpc02efi_y.js:15:17)\n    at median (/tmp/tmpc02efi_y.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2kyga_c.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2kyga_c.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa04kbg3k.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpa04kbg3k.js:11:18)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2kyga_c.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2kyga_c.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    throw new Error(\"Cannot calculate median of an list of length 0\"\
    );\n  }\n  if (mid === 1) {\n    return l[0];\n  }\n  const medianValue = l[mid];\n\
    \  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n\
    \  return medianValue + leftMedian + rightMedian;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpugvqjzu2.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpugvqjzu2.js:8:15)\n    at median (/tmp/tmpugvqjzu2.js:18:22)\n\
    \    at median (/tmp/tmpugvqjzu2.js:18:22)\n    at median (/tmp/tmpugvqjzu2.js:19:23)\n\
    \    at test (/tmp/tmpugvqjzu2.js:25:22)\n    at Object.<anonymous> (/tmp/tmpugvqjzu2.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpyy32x23k.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyy32x23k.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  }\n  const mid = l.length / 2\n  const left = median(l.slice(0, mid))\n\
    \  const right = median(l.slice(mid))\n  return left + Math.abs(right - left)\
    \ / 2\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqxpfghji.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpqxpfghji.js:11:25)\n    at\
    \ median (/tmp/tmpqxpfghji.js:12:17)\n    at median (/tmp/tmpqxpfghji.js:12:17)\n\
    \    at median (/tmp/tmpqxpfghji.js:12:17)\n    at median (/tmp/tmpqxpfghji.js:12:17)\n\
    \    at median (/tmp/tmpqxpfghji.js:12:17)\n    at median (/tmp/tmpqxpfghji.js:12:17)\n\
    \    at median (/tmp/tmpqxpfghji.js:12:17)\n    at median (/tmp/tmpqxpfghji.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    throw new Error(\"\
    median: list too short\");\n  }\n  if (n === 2) {\n    return l[0];\n  }\n  const\
    \ mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2ooaqcgp.js:9\n        throw new Error(\"median: list too short\"\
    );\n        ^\n\nError: median: list too short\n    at median (/tmp/tmp2ooaqcgp.js:9:15)\n\
    \    at median (/tmp/tmp2ooaqcgp.js:17:12)\n    at median (/tmp/tmp2ooaqcgp.js:17:27)\n\
    \    at test (/tmp/tmp2ooaqcgp.js:22:22)\n    at Object.<anonymous> (/tmp/tmp2ooaqcgp.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzp7x_rxq.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpzp7x_rxq.js:15:25)\n    at\
    \ median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \    at median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \    at median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \    at median (/tmp/tmpzp7x_rxq.js:16:17)\n    at median (/tmp/tmpzp7x_rxq.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5a62lrez.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp5a62lrez.js:11:18)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return l.length / 2 === mid ? Math.min(left, right)\
    \ : Math.max(left, right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7ygsuq4q.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp7ygsuq4q.js:11:25)\n    at\
    \ median (/tmp/tmp7ygsuq4q.js:12:17)\n    at median (/tmp/tmp7ygsuq4q.js:12:17)\n\
    \    at median (/tmp/tmp7ygsuq4q.js:12:17)\n    at median (/tmp/tmp7ygsuq4q.js:12:17)\n\
    \    at median (/tmp/tmp7ygsuq4q.js:12:17)\n    at median (/tmp/tmp7ygsuq4q.js:12:17)\n\
    \    at median (/tmp/tmp7ygsuq4q.js:12:17)\n    at median (/tmp/tmp7ygsuq4q.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpswjk4eoo.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpswjk4eoo.js:14:25)\n    at\
    \ median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \    at median (/tmp/tmpswjk4eoo.js:15:17)\n    at median (/tmp/tmpswjk4eoo.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphfkxh78c.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmphfkxh78c.js:11:18)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  let left = l[mid];\n  let right =\
    \ l[mid];\n  for (let i = 0; i < mid; i++) {\n    if (l[i] > right) {\n      right\
    \ = l[i];\n    }\n  }\n  for (let i = mid; i < l.length; i++) {\n    if (l[i]\
    \ > left) {\n      left = l[i];\n    }\n  }\n  return left + (right - left) /\
    \ 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpup6ulcu0.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpup6ulcu0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n\
    \  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmprpkd8mov.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprpkd8mov.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpr17hg891.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpr17hg891.js:8:15)\n    at median (/tmp/tmpr17hg891.js:15:16)\n\
    \    at median (/tmp/tmpr17hg891.js:15:16)\n    at median (/tmp/tmpr17hg891.js:16:17)\n\
    \    at test (/tmp/tmpr17hg891.js:22:22)\n    at Object.<anonymous> (/tmp/tmpr17hg891.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpw5anf1zy.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpw5anf1zy.js:8:15)\n    at median (/tmp/tmpw5anf1zy.js:15:16)\n\
    \    at median (/tmp/tmpw5anf1zy.js:15:16)\n    at median (/tmp/tmpw5anf1zy.js:16:17)\n\
    \    at test (/tmp/tmpw5anf1zy.js:22:22)\n    at Object.<anonymous> (/tmp/tmpw5anf1zy.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  if (sortedList.length\
    \ % 2 === 0) {\n    return sortedList[middle];\n  }\n  return sortedList[middle\
    \ - 1] + sortedList[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyajcnuqr.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyajcnuqr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8x7d34pd.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmp8x7d34pd.js:8:15)\n    at median (/tmp/tmp8x7d34pd.js:15:16)\n\
    \    at median (/tmp/tmp8x7d34pd.js:15:16)\n    at median (/tmp/tmp8x7d34pd.js:16:17)\n\
    \    at test (/tmp/tmp8x7d34pd.js:22:22)\n    at Object.<anonymous> (/tmp/tmp8x7d34pd.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list.\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpr595l48l.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr595l48l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ l.length / 2 > mid ? left : right;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmph9k71u5p.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph9k71u5p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n\
    \    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left =\
    \ median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu7_66_4d.js:8\n        throw new Error('Cannot compute median of\
    \ an empty list');\n        ^\n\nError: Cannot compute median of an empty list\n\
    \    at median (/tmp/tmpu7_66_4d.js:8:15)\n    at median (/tmp/tmpu7_66_4d.js:15:16)\n\
    \    at median (/tmp/tmpu7_66_4d.js:15:16)\n    at median (/tmp/tmpu7_66_4d.js:16:17)\n\
    \    at test (/tmp/tmpu7_66_4d.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu7_66_4d.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpufjz8_z9.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpufjz8_z9.js:11:18)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpufjz8_z9.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpufjz8_z9.js:11:18)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle\
    \ - 1];\n  const median2 = sorted[middle];\n  return median1 + median2 > 0 ? median1\
    \ + median2 : median2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp1o2mj4jr.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1o2mj4jr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz09cwwrk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz09cwwrk.js:14:25)\n    at\
    \ median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  let mid = l.length\
    \ / 2;\n  let left = median(l.slice(0, mid));\n  let right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyf4cih29.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyf4cih29.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7827fs1u.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7827fs1u.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return median1 + (median2 - median1) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpmrwkosnc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmrwkosnc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpufjz8_z9.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpufjz8_z9.js:11:18)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid % 1\
    \ !== 0) {\n    throw new Error(\"Cannot calculate median of an even list\");\n\
    \  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n\
    \  const rightMedian = median(l.slice(mid));\n  return medianValue + leftMedian\
    \ + rightMedian;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyd1y82j8.js:12\n        throw new Error(\"Cannot calculate median\
    \ of an even list\");\n        ^\n\nError: Cannot calculate median of an even\
    \ list\n    at median (/tmp/tmpyd1y82j8.js:12:15)\n    at test (/tmp/tmpyd1y82j8.js:22:22)\n\
    \    at Object.<anonymous> (/tmp/tmpyd1y82j8.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n\
    \  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp5u0efunf.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5u0efunf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzxs_ozoc.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpzxs_ozoc.js:11:18)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\
    \    at median (/tmp/tmpzxs_ozoc.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const sorted: number[] = l.slice().sort((a: number, b:\
    \ number) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[sorted.length\
    \ / 2 - 1];\n  }\n  return sorted[(sorted.length / 2) - 1];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpy_tj_b9v.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy_tj_b9v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz09cwwrk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz09cwwrk.js:14:25)\n    at\
    \ median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a\
    \ - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n\
    \  const median2 = sorted[middle + 1];\n  return median1 + median2 / (len / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.6\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp3hfckmkh.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3hfckmkh.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy9cbnl68.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpy9cbnl68.js:11:18)\n    at median (/tmp/tmpy9cbnl68.js:13:27)\n\
    \    at median (/tmp/tmpy9cbnl68.js:13:27)\n    at median (/tmp/tmpy9cbnl68.js:13:27)\n\
    \    at median (/tmp/tmpy9cbnl68.js:13:27)\n    at median (/tmp/tmpy9cbnl68.js:13:27)\n\
    \    at median (/tmp/tmpy9cbnl68.js:13:27)\n    at median (/tmp/tmpy9cbnl68.js:13:27)\n\
    \    at median (/tmp/tmpy9cbnl68.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n\
    \  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle\
    \ = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 =\
    \ sorted[middle + 1];\n  return median1 + (median2 - median1) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpd7smzrxc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd7smzrxc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkijxqllh.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpkijxqllh.js:14:25)\n    at\
    \ median (/tmp/tmpkijxqllh.js:15:17)\n    at median (/tmp/tmpkijxqllh.js:15:17)\n\
    \    at median (/tmp/tmpkijxqllh.js:15:17)\n    at median (/tmp/tmpkijxqllh.js:15:17)\n\
    \    at median (/tmp/tmpkijxqllh.js:15:17)\n    at median (/tmp/tmpkijxqllh.js:15:17)\n\
    \    at median (/tmp/tmpkijxqllh.js:15:17)\n    at median (/tmp/tmpkijxqllh.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[len - 1 -\
    \ middle];\n  return median1 + median2 > 0 ? median2 : median1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpkkclvtc_.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkkclvtc_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  let mid = l.length\
    \ / 2;\n  let lower = l[mid];\n  let upper = l[mid];\n  for (let i = mid + 1;\
    \ i < l.length; i++) {\n    if (l[i] < lower) {\n      lower = l[i];\n    }\n\
    \    if (l[i] > upper) {\n      upper = l[i];\n    }\n  }\n  return lower + (upper\
    \ - lower) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp6r9dv_j6.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6r9dv_j6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  let mid = l.length\
    \ / 2;\n  let left = median(l.slice(0, mid));\n  let right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyf4cih29.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyf4cih29.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5a62lrez.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp5a62lrez.js:11:18)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8zkbt_vh.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmp8zkbt_vh.js:11:18)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpziny0707.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpziny0707.js:11:25)\n    at\
    \ median (/tmp/tmpziny0707.js:12:17)\n    at median (/tmp/tmpziny0707.js:12:17)\n\
    \    at median (/tmp/tmpziny0707.js:12:17)\n    at median (/tmp/tmpziny0707.js:12:17)\n\
    \    at median (/tmp/tmpziny0707.js:12:17)\n    at median (/tmp/tmpziny0707.js:12:17)\n\
    \    at median (/tmp/tmpziny0707.js:12:17)\n    at median (/tmp/tmpziny0707.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle\
    \ + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp1ttvr67p.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ttvr67p.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppzc4_13f.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmppzc4_13f.js:8:15)\n    at median (/tmp/tmppzc4_13f.js:14:16)\n\
    \    at median (/tmp/tmppzc4_13f.js:14:16)\n    at median (/tmp/tmppzc4_13f.js:15:17)\n\
    \    at test (/tmp/tmppzc4_13f.js:21:22)\n    at Object.<anonymous> (/tmp/tmppzc4_13f.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left\
    \ : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmps_umnkmt.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps_umnkmt.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmps9g9is_q.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps9g9is_q.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpf4xxuyy2.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf4xxuyy2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyz5_i_mw.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpyz5_i_mw.js:8:15)\n    at median (/tmp/tmpyz5_i_mw.js:15:16)\n\
    \    at median (/tmp/tmpyz5_i_mw.js:15:16)\n    at median (/tmp/tmpyz5_i_mw.js:16:17)\n\
    \    at test (/tmp/tmpyz5_i_mw.js:22:22)\n    at Object.<anonymous> (/tmp/tmpyz5_i_mw.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[mid];\n  }\n  const medianValue = l[mid];\n  const leftMedian\
    \ = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return\
    \ medianValue + leftMedian + rightMedian;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2zxu53c9.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmp2zxu53c9.js:8:15)\n    at median (/tmp/tmp2zxu53c9.js:15:22)\n\
    \    at median (/tmp/tmp2zxu53c9.js:15:22)\n    at median (/tmp/tmp2zxu53c9.js:15:22)\n\
    \    at test (/tmp/tmp2zxu53c9.js:22:22)\n    at Object.<anonymous> (/tmp/tmp2zxu53c9.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length\
    \ / 2;\n  return l[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpgiqghx1w.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgiqghx1w.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpa83y7_nr.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpa83y7_nr.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpyy32x23k.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyy32x23k.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz09cwwrk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz09cwwrk.js:14:25)\n    at\
    \ median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) return NaN;\n  if (n\
    \ === 1) return l[0];\n  if (n === 2) return Math.max(...l);\n  const mid = Math.floor(n\
    \ / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + Math.max(...l.slice(mid).map(v => v - right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmppt2yil6u.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppt2yil6u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpw_dben6x.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpw_dben6x.js:11:18)\n    at median (/tmp/tmpw_dben6x.js:13:27)\n\
    \    at median (/tmp/tmpw_dben6x.js:13:27)\n    at median (/tmp/tmpw_dben6x.js:13:27)\n\
    \    at median (/tmp/tmpw_dben6x.js:13:27)\n    at median (/tmp/tmpw_dben6x.js:13:27)\n\
    \    at median (/tmp/tmpw_dben6x.js:13:27)\n    at median (/tmp/tmpw_dben6x.js:13:27)\n\
    \    at median (/tmp/tmpw_dben6x.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const sorted: number[] = l.slice().sort((a, b) => a -\
    \ b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  return sorted[len / 2 - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpeo05v9du.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeo05v9du.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 1) return NaN\n  if (n\
    \ === 1) return l[0]\n  if (n === 2) return (l[0] + l[1]) / 2\n  const mid = n\
    \ >> 1\n  const a = median(l.slice(0, mid))\n  const b = median(l.slice(mid))\n\
    \  return ((a + b) / 2) | 0\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpp9zkfnb3.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9zkfnb3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n\
    \  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4619yy8.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpu4619yy8.js:8:15)\n    at median (/tmp/tmpu4619yy8.js:16:26)\n\
    \    at median (/tmp/tmpu4619yy8.js:16:26)\n    at median (/tmp/tmpu4619yy8.js:17:24)\n\
    \    at test (/tmp/tmpu4619yy8.js:23:22)\n    at Object.<anonymous> (/tmp/tmpu4619yy8.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const half =\
    \ Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return l[half];\n  }\n\
    \  return (l[half - 1] + l[half]) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8x7d34pd.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmp8x7d34pd.js:8:15)\n    at median (/tmp/tmp8x7d34pd.js:15:16)\n\
    \    at median (/tmp/tmp8x7d34pd.js:15:16)\n    at median (/tmp/tmp8x7d34pd.js:16:17)\n\
    \    at test (/tmp/tmp8x7d34pd.js:22:22)\n    at Object.<anonymous> (/tmp/tmp8x7d34pd.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  let mid = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n\
    \    return sorted[mid];\n  }\n  if (sorted[mid] >= sorted[mid - 1]) {\n    return\
    \ sorted[mid];\n  }\n  return sorted[mid - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpa6wlnypq.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa6wlnypq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp67wnhxrf.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp67wnhxrf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length\
    \ / 2) - 1];\n  }\n  return sorted[(sorted.length / 2)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpy_ph7hxy.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy_ph7hxy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n\
    \  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n\
    \  const rightMedian = median(l.slice(mid + 1, l.length));\n  return medianValue\
    \ + Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmprihs9smb.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprihs9smb.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7kuhcnvd.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7kuhcnvd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ l.length / 2 > mid ? left : right;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmph9k71u5p.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph9k71u5p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz09cwwrk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz09cwwrk.js:14:25)\n    at\
    \ median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half])\
    \ < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2szemgeu.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp2szemgeu.ts(16,37): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp2szemgeu.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot calculate\
    \ median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a\
    \ - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const left = sorted[middle\
    \ - 1];\n  const right = sorted[middle];\n  return (right - left) / 2 + left;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmptkd7zbd_.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptkd7zbd_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const mid = sortedList.length / 2;\n  if (sortedList.length %\
    \ 2 === 0) {\n    return sortedList[mid];\n  }\n  return sortedList[mid - 1] +\
    \ sortedList[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp77iaurmj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp77iaurmj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgd7jh6ff.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpgd7jh6ff.js:15:25)\n    at\
    \ median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \    at median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \    at median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \    at median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792388
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpau48zfy2.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpau48zfy2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = l.length / 2;\n  if (middle\
    \ === 0) {\n    return l[middle];\n  }\n  if (middle === 1) {\n    return l[middle\
    \ - 1];\n  }\n  if (middle === 2) {\n    return Math.max(...l);\n  }\n  const\
    \ medianValue = l[middle];\n  const leftMedian = median(l.slice(0, middle));\n\
    \  const rightMedian = median(l.slice(middle + 1));\n  return medianValue + Math.max(leftMedian,\
    \ rightMedian);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpix_ccgdx.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpix_ccgdx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792388
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz09cwwrk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz09cwwrk.js:14:25)\n    at\
    \ median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpo_3j1rqg.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpo_3j1rqg.js:8:15)\n    at median (/tmp/tmpo_3j1rqg.js:15:16)\n\
    \    at median (/tmp/tmpo_3j1rqg.js:15:16)\n    at median (/tmp/tmpo_3j1rqg.js:16:17)\n\
    \    at test (/tmp/tmpo_3j1rqg.js:22:22)\n    at Object.<anonymous> (/tmp/tmpo_3j1rqg.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l);\n  const right = median(l.slice(mid + 1));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsrxl77mw.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at median (/tmp/tmpsrxl77mw.js:7:11)\n\
    \    at median (/tmp/tmpsrxl77mw.js:14:16)\n    at median (/tmp/tmpsrxl77mw.js:14:16)\n\
    \    at median (/tmp/tmpsrxl77mw.js:14:16)\n    at median (/tmp/tmpsrxl77mw.js:14:16)\n\
    \    at median (/tmp/tmpsrxl77mw.js:14:16)\n    at median (/tmp/tmpsrxl77mw.js:14:16)\n\
    \    at median (/tmp/tmpsrxl77mw.js:14:16)\n    at median (/tmp/tmpsrxl77mw.js:14:16)\n\
    \    at median (/tmp/tmpsrxl77mw.js:14:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a\
    \ - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpr1bkmdeo.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr1bkmdeo.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792388
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5a62lrez.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp5a62lrez.js:11:18)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[mid];\n  }\n  if (mid === 1) {\n    return l[mid - 1] + l[mid\
    \ - 2];\n  }\n  return l[mid - 1] + median(l[mid]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_lv85r4h.ts(17,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq0am4cmv.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmpq0am4cmv.js:8:15)\n    at median (/tmp/tmpq0am4cmv.js:15:16)\n\
    \    at median (/tmp/tmpq0am4cmv.js:15:16)\n    at median (/tmp/tmpq0am4cmv.js:16:17)\n\
    \    at test (/tmp/tmpq0am4cmv.js:22:22)\n    at Object.<anonymous> (/tmp/tmpq0am4cmv.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792388
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const sortedArr = l.slice().sort((a, b) => a - b);\n\
    \  const len = sortedArr.length;\n  if (len % 2 === 0) {\n    return sortedArr[len\
    \ / 2 - 1];\n  }\n  return sortedArr[len / 2];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpu6a1tci1.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu6a1tci1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2] as number;\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle]\
    \ + (sorted[middle + 1] as number) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp018u154_.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp018u154_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792388
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8x7d34pd.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmp8x7d34pd.js:8:15)\n    at median (/tmp/tmp8x7d34pd.js:15:16)\n\
    \    at median (/tmp/tmp8x7d34pd.js:15:16)\n    at median (/tmp/tmp8x7d34pd.js:16:17)\n\
    \    at test (/tmp/tmp8x7d34pd.js:22:22)\n    at Object.<anonymous> (/tmp/tmp8x7d34pd.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const mid = sortedList.length / 2;\n  if (sortedList.length %\
    \ 2 === 0) {\n    return sortedList[mid];\n  }\n  return sortedList[mid - 1] +\
    \ sortedList[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp77iaurmj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp77iaurmj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2] as number;\n  }\n  const\
    \ middle = len / 2;\n  const left = sorted[middle];\n  const right = sorted[middle\
    \ + 1];\n  return (right - left) / 2 + left;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpvr0kie4b.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvr0kie4b.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792388
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n\
    \  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return\
    \ l[l.length - 1];\n  }\n  const medianValue = median(l[middle]);\n  return l.slice(0,\
    \ middle).concat([medianValue]).concat(l.slice(middle + 1));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdboiondv.ts(17,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpdboiondv.ts(18,3): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    '
  timestamp: 1659792388
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 2) {\n    return l[0]\n\
    \  }\n  const mid = Math.floor(n / 2)\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right) / 2.0\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6.125\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpltfpsn8z.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpltfpsn8z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6.125,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz09cwwrk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz09cwwrk.js:14:25)\n    at\
    \ median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp60v4o6uq.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp60v4o6uq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 1) return NaN\n  if (n\
    \ === 1) return l[0]\n  if (n === 2) return (l[0] + l[1]) / 2\n  const mid = n\
    \ >> 1\n  const a = median(l.slice(0, mid))\n  const b = median(l.slice(mid))\n\
    \  return (a + b) / 2\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpe4sbkf41.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4sbkf41.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa04kbg3k.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpa04kbg3k.js:11:18)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n    at median (/tmp/tmpa04kbg3k.js:13:27)\n\
    \    at median (/tmp/tmpa04kbg3k.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwpvf5kmq.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmpwpvf5kmq.js:8:15)\n    at median (/tmp/tmpwpvf5kmq.js:14:16)\n\
    \    at median (/tmp/tmpwpvf5kmq.js:14:16)\n    at median (/tmp/tmpwpvf5kmq.js:15:17)\n\
    \    at test (/tmp/tmpwpvf5kmq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpwpvf5kmq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx2kyga_c.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx2kyga_c.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpufjz8_z9.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpufjz8_z9.js:11:18)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n    at median (/tmp/tmpufjz8_z9.js:13:27)\n\
    \    at median (/tmp/tmpufjz8_z9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return l.length % 2 ? Math.round((left + right) /\
    \ 2) : left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjgnubr_a.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpjgnubr_a.js:11:25)\n    at\
    \ median (/tmp/tmpjgnubr_a.js:12:17)\n    at median (/tmp/tmpjgnubr_a.js:12:17)\n\
    \    at median (/tmp/tmpjgnubr_a.js:12:17)\n    at median (/tmp/tmpjgnubr_a.js:12:17)\n\
    \    at median (/tmp/tmpjgnubr_a.js:12:17)\n    at median (/tmp/tmpjgnubr_a.js:12:17)\n\
    \    at median (/tmp/tmpjgnubr_a.js:12:17)\n    at median (/tmp/tmpjgnubr_a.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n\
    \  const median1 = median(l.slice(0, mid));\n  const median2 = median(l.slice(mid));\n\
    \  return median1 + median2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz_eb68kf.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpz_eb68kf.js:8:15)\n    at median (/tmp/tmpz_eb68kf.js:17:19)\n\
    \    at median (/tmp/tmpz_eb68kf.js:17:19)\n    at median (/tmp/tmpz_eb68kf.js:18:19)\n\
    \    at test (/tmp/tmpz_eb68kf.js:24:22)\n    at Object.<anonymous> (/tmp/tmpz_eb68kf.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp7gsw9myn.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gsw9myn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgd7jh6ff.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpgd7jh6ff.js:15:25)\n    at\
    \ median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \    at median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \    at median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \    at median (/tmp/tmpgd7jh6ff.js:16:17)\n    at median (/tmp/tmpgd7jh6ff.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792388
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list.\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpin2gsv47.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list.\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list.\n    at median (/tmp/tmpin2gsv47.js:8:15)\n    at median (/tmp/tmpin2gsv47.js:14:16)\n\
    \    at median (/tmp/tmpin2gsv47.js:14:16)\n    at median (/tmp/tmpin2gsv47.js:15:17)\n\
    \    at test (/tmp/tmpin2gsv47.js:21:22)\n    at Object.<anonymous> (/tmp/tmpin2gsv47.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88ntj1dw.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp88ntj1dw.js:11:25)\n    at\
    \ median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate\
    \ median of an empty list');\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length\
    \ / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = l[mid];\n\
    \  const right = l[mid + 1];\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmptwnfuahm.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwnfuahm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n\
    \    return sorted[(sorted.length - 1) / 2];\n  }\n  const middle = sorted.length\
    \ / 2;\n  const left = sorted[middle];\n  const right = sorted[middle + 1];\n\
    \  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpi9omxian.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi9omxian.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n\
    \    return sorted[(sorted.length - 1) / 2];\n  }\n  return sorted[Math.floor(sorted.length\
    \ / 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp2fq5n0pe.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2fq5n0pe.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpx_jxwlc0.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx_jxwlc0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  return l[mid];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpqlbuezit.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqlbuezit.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphfkxh78c.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmphfkxh78c.js:11:18)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5a62lrez.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp5a62lrez.js:11:18)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz09cwwrk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz09cwwrk.js:14:25)\n    at\
    \ median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \    at median (/tmp/tmpz09cwwrk.js:15:17)\n    at median (/tmp/tmpz09cwwrk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792385
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot calculate\
    \ median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a\
    \ - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpcsu9b4r7.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcsu9b4r7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpnva07st6.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnva07st6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5a62lrez.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp5a62lrez.js:11:18)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n    at median (/tmp/tmp5a62lrez.js:13:27)\n\
    \    at median (/tmp/tmp5a62lrez.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 2) return l[0]\n  const\
    \ half = n / 2\n  const left = l.slice(0, half)\n  const right = l.slice(half)\n\
    \  return median(left) + median(right) / 2.0\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6.125\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp179mayo8.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp179mayo8.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6.125,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88ntj1dw.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp88ntj1dw.js:11:25)\n    at\
    \ median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \    at median (/tmp/tmp88ntj1dw.js:12:17)\n    at median (/tmp/tmp88ntj1dw.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list.\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n\
    \  const median2 = sorted[middle + 1];\n  return median1 + (median2 - median1)\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp864atcoe.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp864atcoe.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8zkbt_vh.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmp8zkbt_vh.js:11:18)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) {\n    return l[0];\n  }\n  const\
    \ mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpboq820v_.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpboq820v_.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n\
    \  const median2 = sorted[middle + 1];\n  return median1 + median2 / (len / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.6\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpex1fopl9.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpex1fopl9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8zkbt_vh.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmp8zkbt_vh.js:11:18)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\
    \    at median (/tmp/tmp8zkbt_vh.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq735xsxx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpq735xsxx.js:8:15)\n    at median (/tmp/tmpq735xsxx.js:14:16)\n\
    \    at median (/tmp/tmpq735xsxx.js:14:16)\n    at median (/tmp/tmpq735xsxx.js:15:17)\n\
    \    at test (/tmp/tmpq735xsxx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpq735xsxx.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpch9hqvp4.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpch9hqvp4.js:14:25)\n    at\
    \ median (/tmp/tmpch9hqvp4.js:15:17)\n    at median (/tmp/tmpch9hqvp4.js:15:17)\n\
    \    at median (/tmp/tmpch9hqvp4.js:15:17)\n    at median (/tmp/tmpch9hqvp4.js:15:17)\n\
    \    at median (/tmp/tmpch9hqvp4.js:15:17)\n    at median (/tmp/tmpch9hqvp4.js:15:17)\n\
    \    at median (/tmp/tmpch9hqvp4.js:15:17)\n    at median (/tmp/tmpch9hqvp4.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n\
    \  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle\
    \ = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpjy1opuiz.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjy1opuiz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpnva07st6.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnva07st6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792383
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpng9tc0nw.js:15\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpng9tc0nw.js:15:25)\n    at\
    \ median (/tmp/tmpng9tc0nw.js:16:17)\n    at median (/tmp/tmpng9tc0nw.js:16:17)\n\
    \    at median (/tmp/tmpng9tc0nw.js:16:17)\n    at median (/tmp/tmpng9tc0nw.js:16:17)\n\
    \    at median (/tmp/tmpng9tc0nw.js:16:17)\n    at median (/tmp/tmpng9tc0nw.js:16:17)\n\
    \    at median (/tmp/tmpng9tc0nw.js:16:17)\n    at median (/tmp/tmpng9tc0nw.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpobaekaat.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpobaekaat.js:8:15)\n    at median (/tmp/tmpobaekaat.js:14:16)\n\
    \    at median (/tmp/tmpobaekaat.js:14:16)\n    at median (/tmp/tmpobaekaat.js:15:17)\n\
    \    at test (/tmp/tmpobaekaat.js:21:22)\n    at Object.<anonymous> (/tmp/tmpobaekaat.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphfkxh78c.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmphfkxh78c.js:11:18)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n    at median (/tmp/tmphfkxh78c.js:13:27)\n\
    \    at median (/tmp/tmphfkxh78c.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpup1bn3zg.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpup1bn3zg.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792384
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppzc4_13f.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmppzc4_13f.js:8:15)\n    at median (/tmp/tmppzc4_13f.js:14:16)\n\
    \    at median (/tmp/tmppzc4_13f.js:14:16)\n    at median (/tmp/tmppzc4_13f.js:15:17)\n\
    \    at test (/tmp/tmppzc4_13f.js:21:22)\n    at Object.<anonymous> (/tmp/tmppzc4_13f.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792386
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp7gsw9myn.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gsw9myn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792381
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  }\n  const mid = l.length / 2\n  const left = median(l.slice(0, mid))\n\
    \  const right = median(l.slice(mid))\n  return Math.max(left, right)\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9flo4jic.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp9flo4jic.js:11:25)\n    at\
    \ median (/tmp/tmp9flo4jic.js:12:17)\n    at median (/tmp/tmp9flo4jic.js:12:17)\n\
    \    at median (/tmp/tmp9flo4jic.js:12:17)\n    at median (/tmp/tmp9flo4jic.js:12:17)\n\
    \    at median (/tmp/tmp9flo4jic.js:12:17)\n    at median (/tmp/tmp9flo4jic.js:12:17)\n\
    \    at median (/tmp/tmp9flo4jic.js:12:17)\n    at median (/tmp/tmp9flo4jic.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792389
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp67wnhxrf.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp67wnhxrf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792387
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l);\n  const right = median(l.slice(mid));\n  return (left\
    \ + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnme_qbr8.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at median (/tmp/tmpnme_qbr8.js:7:11)\n\
    \    at median (/tmp/tmpnme_qbr8.js:14:16)\n    at median (/tmp/tmpnme_qbr8.js:14:16)\n\
    \    at median (/tmp/tmpnme_qbr8.js:14:16)\n    at median (/tmp/tmpnme_qbr8.js:14:16)\n\
    \    at median (/tmp/tmpnme_qbr8.js:14:16)\n    at median (/tmp/tmpnme_qbr8.js:14:16)\n\
    \    at median (/tmp/tmpnme_qbr8.js:14:16)\n    at median (/tmp/tmpnme_qbr8.js:14:16)\n\
    \    at median (/tmp/tmpnme_qbr8.js:14:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792390
