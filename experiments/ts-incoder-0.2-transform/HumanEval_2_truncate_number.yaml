name: HumanEval_2_truncate_number
language: ts
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\n// >>>\
  \ truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
  \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
  }\n\ntest();"
completions: ["  if (number < 1) {\n    return number;\n  }\n  const [integer, decimals]\
    \ = number.toFixed(1).split('.');\n  return Math.trunc(number * 10 + decimals)\
    \ / 10;\n}\n", "    if (number < 1) {\n        return 1;\n    }\n    const [integer,\
    \ decimals] = Math.trunc(number).toString().split('.');\n    if (decimals) {\n\
    \        return parseFloat(integer) + '.' + decimals;\n    }\n    return integer;\n\
    }\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimals] =\
    \ Math.trunc(number).toString().split('.');\n  return decimals ? parseInt(decimals,\
    \ 10) : integer;\n}\n", "    const [integerPart, decimalPart] = number.toFixed(1).split('.');\n\
    \    return parseFloat(integerPart);\n}\n", "  const [integer, decimals] = number.toFixed(1).split('.');\n\
    \  return parseFloat(integer) + parseFloat(decimals.slice(0, -1));\n}\n", "  const\
    \ [integer, decimals] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimals)\n}\n", "  const [integer, decimals] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimals)\n}\n", "  if (number < 1)\
    \ {\n    return number;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseFloat(integer) + parseFloat(decimal);\n}\n", "    if (number <\
    \ 1) {\n        return 0;\n    }\n    const [integer, decimals] = Math.trunc(number).toFixed(2).split('.');\n\
    \    return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  const [integer,\
    \ decimal] = number.toFixed(1).split('.')\n  return +integer || 0\n}\n", "   \
    \ const decimals = Math.trunc(number).toString().split('.')[1];\n    return number\
    \ - Math.floor(number) + decimals;\n}\n", "  if (number < 1) {\n    return number;\n\
    \  }\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimal)\n}\n", "    if (number < 1) {\n        return 0;\n   \
    \ }\n    const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \    return decimals ? +decimals : +integer;\n}\n", "    const decimals = Math.trunc(number).toString().split(\"\
    .\")[1];\n    return parseFloat(decimals + \"1\");\n}\n", "  if (number < 1) {\n\
    \    return 1;\n  }\n  if (number > 1000000000000) {\n    return 1000000000000;\n\
    \  }\n  const [integer, decimals] = Math.trunc(number).toString(10).split('.');\n\
    \  if (decimals === '0') {\n    return integer;\n  }\n  return integer + '.' +\
    \ decimals;\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  if (number > 1000000000000)\
    \ {\n    return 1000000000000;\n  }\n  const [integer, decimal] = number.toFixed(10).split('.');\n\
    \  return parseInt(decimal, 10);\n}\n", "    if (number < 1) {\n        return\
    \ 0;\n    }\n    const [integer, decimal] = number.toFixed(1).split('.');\n  \
    \  return parseInt(decimal, 10);\n}\n", "  const [integer, decimal] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimal)\n}\n", "    if (number < 1)\
    \ {\n        return 0;\n    }\n    const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \    if (decimals) {\n        return parseInt(decimals, 10);\n    }\n    return\
    \ integer;\n}\n", "    if (number < 1) {\n        return 0;\n    }\n    if (number\
    \ < 10) {\n        return number;\n    }\n    if (number < 100) {\n        return\
    \ number;\n    }\n    if (number < 1000) {\n        return number;\n    }\n  \
    \  if (number < 10000) {\n        return number;\n    }\n    if (number < 100000)\
    \ {\n        return number;\n    }\n    if (number < 1000000) {\n        return\
    \ number;\n    }\n    if (number < 10000000) {\n        return number;\n    }\n\
    \    if (number < 100000000) {\n        return number;\n    }\n    if (number\
    \ < 1000000000) {\n        return number;\n    }\n    if (number < 10000000000)\
    \ {\n        return number;\n    }\n    if (number < 100000000000) {\n       \
    \ return number;\n    }\n    if (number < 1000000000000) {\n        return number;\n\
    \    }\n    if (number < 10000000000000) {\n        return number;\n    }\n  \
    \  if (number < 100000000000000) {\n        return number;\n    }\n    if (number\
    \ < 1000000000000000) {\n        return number;\n    }\n    if (number < 10000000000000000)\
    \ {\n        return number;\n    }\n    if (number < 100000000000000000) {\n \
    \       return number;\n    }\n    if (number < 1000000000000000000) {\n     \
    \   return number;\n    }\n    if (number < 10000000000000000000) {\n        return\
    \ number;\n    }\n    if (number < 100000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 1000000000000000000000) {\n        return number;\n \
    \   }\n    if (number < 10000000000000000000000) {\n        return number;\n \
    \   }\n    if (number < 100000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 1000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 10000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 100000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 1000000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 10000000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 100000000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 1000000000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 10000000000000000000000000000000) {\n        return number;\n\
    \    }\n    if (number < 100000000000000000000000000000000) {\n        return\
    \ number;\n    }\n    if (number < 1000000000000000000000000000000000) {\n   \
    \     return number;\n    }\n    if (number < 1000000000000000000000000000000000)\
    \ {\n        return number;\n    }\n    if (number < 10000000000000000000000000000000000)\
    \ {\n        return number;\n    }\n    if (number < 100000000000000000000000000000000000)\
    \ {\n        return number;\n    }\n    if (number < 1000000000000000000000000000000000000)\
    \ {\n        return number;\n    }\n    if (number < 10000000000000000000000000000000000000)\
    \ {\n        return number;\n    }\n    if (number < 100000000000000000000000000000000000000)\
    \ {\n        return number;\n    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
