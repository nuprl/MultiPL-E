language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(char);\n      paren_level_max_count\
    \ = Math.max(paren_level_max_count, paren_level_count);\n      paren_level_count\
    \ = 0;\n      paren_level_max_count_index++;\n    } else if (char === ')') {\n\
    \      paren_level_count++;\n      paren_level_max_count_index--;\n      if (paren_level_max_count_index\
    \ < 0) {\n        paren_level_max_count_index = paren_level_max_count - 1;\n \
    \     }\n      paren_level[paren_level_max_count_index] = paren_level_count;\n\
    \      paren_stack.splice(paren_level_max_count_index, 1);\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpcu6n7e3_.js:35:12)\n    at Object.<anonymous> (/tmp/tmpcu6n7e3_.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 1\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count +=\
    \ 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()]\
    \ = paren_level_count;\n      if (paren_level_count === 0) {\n        paren_level_max--;\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmply1kyrpr.js:31:12)\n    at Object.<anonymous> (/tmp/tmply1kyrpr.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpp10_5elq.js:29:12)\n    at Object.<anonymous> (/tmp/tmpp10_5elq.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738606
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n\
    \  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_char:\
    \ number = 0;\n  let paren_level_max_value_char_count: number = 0;\n  let paren_level_max_value_char_length:\
    \ number = 0;\n  let paren_level_max_value_char_index: number = 0;\n  let paren_level_max_value_char_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_index: number = 0;\n  let\
    \ paren_level_max_value_char_value_value: number = 0;\n  let paren_level_max_value_char_value_value_index:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_index: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptbyy1bsq.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[]\
    \ = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9v8bnopf.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738608
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6_igecbk.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6_igecbk.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_level_max = Math.max(paren_level_max,\
    \ paren_stack[paren_level_max_index]);\n        paren_level_max_index = paren_level_max_index\
    \ + 1;\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpv2ohr78d.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv2ohr78d.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6fu3c68y.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6fu3c68y.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738618
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  const paren_level_max_index = 0;\n\
    \  let paren_level_max_depth = 0;\n  let paren_level_max_depth_index = 0;\n  let\
    \ paren_level_max_depth_index2 = 0;\n  let paren_level_max_depth_index3 = 0;\n\
    \  let paren_level_max_depth_index4 = 0;\n  let paren_level_max_depth_index5 =\
    \ 0;\n  let paren_level_max_depth_index6 = 0;\n  let paren_level_max_depth_index7\
    \ = 0;\n  let paren_level_max_depth_index8 = 0;\n  let paren_level_max_depth_index9\
    \ = 0;\n  let paren_level_max_depth_index10 = 0;\n  let paren_level_max_depth_index11\
    \ = 0;\n  let paren_level_max_depth_index12 = 0;\n  let paren_level_max_depth_index13\
    \ = 0;\n  let paren_level_max_depth_index14 = 0;\n  let paren_level_max_depth_index15\
    \ = 0;\n  let paren_level_max_depth_index16 = 0;\n  let paren_level_max_depth_index17\
    \ = 0;\n  let paren_level_max_depth_index18 = 0;\n  let paren_level_max_depth_index19\
    \ = 0;\n  let paren_level_max_depth_index20 = 0;\n  let paren_level_max_depth_index21\
    \ = 0;\n  let paren_level_max_depth_index22 = 0;\n  let paren_level_max_depth_index23\
    \ = 0;\n  let paren_level_max_depth_index24 = 0;\n  let paren_level_max_depth_index25\
    \ = 0;\n  let paren_level_max_depth_index26 = 0;\n  let paren_level_max_depth_index27\
    \ = 0;\n  let paren_level_max_depth_index28 = 0;\n  let paren_level_max_depth_index29\
    \ = 0;\n  let paren_level_max_depth_index30 = 0;\n  let paren_level_max_depth_index31\
    \ = 0;\n  let paren_level_max_depth_index32 = 0;\n  let paren_level_max_depth_index33\
    \ = 0;\n  let paren_level_max_depth_index34 = 0;\n  let paren_level_max_depth_index35\
    \ = 0;\n  let paren_level_max_depth_index36 = 0;\n  let paren_level_max_depth_index37\
    \ = 0;\n  let paren_level_max_depth_index38 = 0;\n  let paren_level_max_depth_index39\
    \ = 0;\n  let paren_level_max_depth_index40 = 0;\n  let paren_level_max_depth_index41\
    \ = 1;\n  let paren_level_max_depth_index42 = 1;\n  let paren_level_max_depth_index43\
    \ = 1;\n  let paren_level_max_depth_index44 = 1;\n  let paren_level_max_depth_index45\
    \ = 1;\n  let paren_level_max_depth_index46 = 1;\n  let paren_level_max_depth_index47\
    \ = 1;\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9d2adk17.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: string[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_string[i]);\n            paren_level.push(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            paren_level.pop();\n            paren_level.push(paren_level_count);\n\
    \        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp221lrl7x.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp221lrl7x.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === \")\") {\n      const paren_level_index =\
    \ paren_stack.pop();\n      const paren_level = paren_level[paren_level_index];\n\
    \      paren_level.push(paren_level + 1);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpud6l12e8.ts(15,27): error TS2448: Block-scoped variable
    ''paren_level'' used before its declaration.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp7x53sfx5.js:28:12)\n    at Object.<anonymous> (/tmp/tmp7x53sfx5.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpuqadftuw.js:28:12)\n    at Object.<anonymous> (/tmp/tmpuqadftuw.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738608
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const last_paren_level = paren_level.pop();\n\
    \      if (paren_stack.length > 0) {\n        const last_paren_level_char = paren_stack.pop();\n\
    \        if (last_paren_level_char === '(') {\n          paren_level[last_paren_level]\
    \ = paren_level[last_paren_level - 1];\n        }\n      }\n      paren_level_count--;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined: undefined\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n\
    \  3\n]\n    at test (/tmp/tmpqpg98hvh.js:33:12)\n    at Object.<anonymous> (/tmp/tmpqpg98hvh.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined: undefined ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let\
    \ paren_level = 0;\n  let paren_stack_count = 0;\n  let paren_stack = [];\n  let\
    \ paren_stack_string = \"\";\n  let paren_stack_string_count = 0;\n  let paren_stack_string\
    \ = \"\";\n  let paren_stack_string_count = 0;\n  let paren_level_string = \"\"\
    ;\n  let paren_level_string_count = 0;\n  let paren_level_string = \"\";\n  let\
    \ paren_level_string_count = 0;\n  let paren_level_count_string = \"\";\n  let\
    \ paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n\
    \  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\
    \";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk5vf6hp8.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_level_count);\n     \
    \ paren_level_count = 0;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n\
    \      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max\
    \ = 0;\n    } else {\n      paren_level_count = 0;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n \
    \ 1,\n  3\n]\n    at test (/tmp/tmp7tywrk9v.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7tywrk9v.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7_h8aqgt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7_h8aqgt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_depth: number[] = [];\n  let paren_level_max_level:\
    \ number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count:\
    \ number[] = [];\n  let paren_level_max_level_length_depth: number[] = [];\n \
    \ let paren_level_max_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level:\
    \ number[] = [];\n  let paren_level_max_level_length_level_count: number[] = [];\n\
    \  let paren_level_max_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth_count: number[]\
    \ = [];\n  let paren_level_max_level_length_level_level_length: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_level: number[] = [];\n  let paren_level_max_level_length_level_length_depth:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth_count: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_level_length: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_level_length: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_level_length: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp84p2gd6o.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max_count\
    \ = Math.max(paren_level_max_count, paren_stack.length);\n      paren_level_count\
    \ = 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count,\
    \ paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnfq_8b08.ts(22,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppruinl04.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmppruinl04.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n\
    \      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_level--;\n      if (paren_level === 0) {\n       \
    \ paren_stack.push(paren_level);\n      }\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpm5nx11cr.ts(11,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpm5nx11cr.ts(16,26):\
    \ error TS2345: Argument of type '0' is not assignable to parameter of type 'string'.\n\
    ../../../../../tmp/tmpm5nx11cr.ts(20,3): error TS2322: Type 'string[]' is not\
    \ assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n"
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count +=\
    \ 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()]\
    \ = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpkwp5sn2v.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkwp5sn2v.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let\
    \ paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count\
    \ = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2\
    \ = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4\
    \ = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6\
    \ = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8\
    \ = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10\
    \ = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12\
    \ = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14\
    \ = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16\
    \ = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18\
    \ = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20\
    \ = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22\
    \ = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24\
    \ = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26\
    \ = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28\
    \ = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30\
    \ = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32\
    \ = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34\
    \ = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36\
    \ = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38\
    \ = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40\
    \ = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42\
    \ = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44\
    \ = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46\
    \ = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9mvjrgc8.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    }\n\
    \  }\n  return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfpr5m_j_.ts(18,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_depth =\
    \ groups.length - 1;\n  const max_nesting = 0;\n  for (let i = 0; i < max_depth;\
    \ i++) {\n    const group = groups[i];\n    const nesting = group.match(/\\(/g).length;\n\
    \    if (nesting > max_nesting) {\n      max_nesting = nesting;\n    }\n  }\n\
    \  return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpil7fw1sx.ts(14,7): error TS2588: Cannot assign to
    ''max_nesting'' because it is a constant.

    ../../../../../tmp/tmpil7fw1sx.ts(17,3): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if\
    \ (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp_2zr5kyo.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_2zr5kyo.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let\
    \ paren_level_stack: number[] = [];\n  let paren_level_stack_count = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n\
    \      paren_level_stack.push(paren_level\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpunam71nq.ts(53,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpunam71nq.ts(53,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpunam71nq.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n\
    \      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max)\
    \ ? paren_level_count : paren_level_max;\n    }\n    paren_level_count += 1;\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplk_ctb4s.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmplk_ctb4s.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprygkdns1.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmprygkdns1.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.shift();\n        paren_level.shift();\n      }\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgsyvmbat.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgsyvmbat.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 0, 0,\n    1, 2, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count\
    \ -= 1;\n      paren_level[paren_level_count] += 1;\n      if (paren_count ===\
    \ 0) {\n        paren_level_count -= 1;\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <2 empty\
    \ items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n\
    \  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n\
    \  3\n]\n    at test (/tmp/tmprernp5j6.js:30:12)\n    at Object.<anonymous> (/tmp/tmprernp5j6.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    <2\
    \ empty items>, NaN,\n    NaN,             <2 empty items>,\n    NaN,        \
    \     NaN,\n    <2 empty items>, NaN,\n    NaN,             NaN\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: number[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === \"(\") {\n            paren_stack.push(paren_level_count);\n\
    \            paren_level_count += 1;\n        } else if (paren_string[i] === \"\
    )\") {\n            paren_level_count -= 1;\n            if (paren_level_count\
    \ === 0) {\n                paren_level.push(paren_stack.pop());\n           \
    \ }\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpne80edj8.js:27:12)\n    at Object.<anonymous> (/tmp/tmpne80edj8.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let\
    \ paren_level_length = 0;\n  let paren_level_char_count = 0;\n  let paren_level_char_index\
    \ = 0;\n  let paren_level_char_length = 0;\n  let paren_level_char_char_count\
    \ = 0;\n  let paren_level_char_char_index = 0;\n  let paren_level_char_char_length\
    \ = 0;\n  let paren_level_char_char_char_count = 0;\n  let paren_level_char_char_char_index\
    \ = 0;\n  let paren_level_char_char_char_length = 0;\n  let paren_level_char_char_char_char_count\
    \ = 0;\n  let paren_level_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_length\
    \ = 0;\n  let paren_level_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_index\
    \ = 0;\n  let paren_level_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_count\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_length\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_index\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_char_count\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_index = 0;\n  let\
    \ paren_level_char_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_char_char_count\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_index = 0;\n\
    \  let paren_level_char_char_char_char_char_char_char_char_length = 0;\n  let\
    \ paren_level_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_index\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0;\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd0mw_76n.ts(49,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpd0mw_76n.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === \")\") {\n      const current_level = paren_stack.pop();\n\
    \      if (current_level === undefined) {\n        throw new Error(\n        \
    \  `Unbalanced parenthesis encountered. Parenthesis level: ${paren_level}`\n \
    \       );\n      }\n      paren_level[current_level] = paren_level[current_level]\
    \ - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps5gqckkw.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmps5gqckkw.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index: number[]\
    \ = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count:\
    \ number[] = [];\n  let paren_level_length_max: number[] = [];\n  let paren_level_length_max_index:\
    \ number[] = [];\n  let paren_level_length_max_length: number[] = [];\n  let paren_level_length_max_length_count:\
    \ number[] = [];\n  let paren_level_length_max_length_max: number[] = [];\n  let\
    \ paren_level_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_count: number[]\
    \ = [];\n  let paren_level_length_max_length_max_length_max: number[] = [];\n\
    \  let paren_level_length_max_length_max_length_max_index: number[] = [];\n  let\
    \ paren_level_length_max_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_count:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_index:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_index:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_count:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_index:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_index:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length:\
    \ number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length_count\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuqey6wq9.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.pop();\n\
    \    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy_k7k60n.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy_k7k60n.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[]\
    \ = [];\n  const paren_level_max_count_index: number[] = [];\n  const paren_level_max_count_index2:\
    \ number[] = [];\n  const paren_level_max_count_index3: number[] = [];\n  const\
    \ paren_level_max_count_index4: number[] = [];\n  const paren_level_max_count_index5:\
    \ number[] = [];\n  const paren_level_max_count_index6: number[] = [];\n  const\
    \ paren_level_max_count_index7: number[] = [];\n  const paren_level_max_count_index8:\
    \ number[] = [];\n  const paren_level_max_count_index9: number[] = [];\n  const\
    \ paren_level_max_count_index10: number[] = [];\n  const paren_level_max_count_index11:\
    \ number[] = [];\n  const paren_level_max_count_index12: number[] = [];\n  const\
    \ paren_level_max_count_index13: number[] = [];\n  const paren_level_max_count_index14:\
    \ number[] = [];\n  const paren_level_max_count_index15: number[] = [];\n  const\
    \ paren_level_max_count_index16: number[] = [];\n  const paren_level_max_count_index17:\
    \ number[] = [];\n  const paren_level_max_count_index18: number[] = [];\n  const\
    \ paren_level_max_count_index19: number[] = [];\n  const paren_level_max_count_index20:\
    \ number[] = [];\n  const paren_level_max_count_index21: number[] = [];\n  const\
    \ paren_level_max_count_index22: number[] = [];\n  const paren_level_max_count_index23:\
    \ number[] = [];\n  const paren_level_max_count_index24: number[] = [];\n  const\
    \ paren_level_max_count_index25: number[] = [];\n  const paren_level_max_count_index26:\
    \ number[] = [];\n  const paren_level_max_count_index27: number[] = [];\n  const\
    \ paren_level_max_count_index28: number[] = [];\n  const paren_level_max_count_index29:\
    \ number[] = [];\n  const paren_level_max_count_index30: number[] = [];\n  const\
    \ paren_level_max_count_index31: number[] = [];\n  const paren_level_max_count_index32:\
    \ number[] = [];\n  const paren_level_max_count_index33: number[] = [];\n  const\
    \ paren_level_max_count_index34: number[] = [];\n  const paren_level_max_count_index35:\
    \ number[] = [];\n  const paren_level_max_count_index36: number[] = [];\n  const\
    \ paren_level_max_count_index37: number[] = [];\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1xeb4_7y.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpp10_5elq.js:29:12)\n    at Object.<anonymous> (/tmp/tmpp10_5elq.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738606
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_stack: number[] = [];\n  let paren_level_count = 0;\n  let\
    \ paren_level_count_stack: number[] = [];\n  let paren_level_count_stack_index:\
    \ number[] = [];\n  let paren_level_count_stack_index2: number[] = [];\n  let\
    \ paren_level_count_stack_index3: number[] = [];\n  let paren_level_count_stack_index4:\
    \ number[] = [];\n  let paren_level_count_stack_index5: number[] = [];\n  let\
    \ paren_level_count_stack_index6: number[] = [];\n  let paren_level_count_stack_index7:\
    \ number[] = [];\n  let paren_level_count_stack_index8: number[] = [];\n  let\
    \ paren_level_count_stack_index9: number[] = [];\n  let paren_level_count_stack_index10:\
    \ number[] = [];\n  let paren_level_count_stack_index11: number[] = [];\n  let\
    \ paren_level_count_stack_index12: number[] = [];\n  let paren_level_count_stack_index13:\
    \ number[] = [];\n  let paren_level_count_stack_index14: number[] = [];\n  let\
    \ paren_level_count_stack_index15: number[] = [];\n  let paren_level_count_stack_index16:\
    \ number[] = [];\n  let paren_level_count_stack_index17: number[] = [];\n  let\
    \ paren_level_count_stack_index18: number[] = [];\n  let paren_level_count_stack_index19:\
    \ number[] = [];\n  let paren_level_count_stack_index20: number[] = [];\n  let\
    \ paren_level_count_stack_index21: number[] = [];\n  let paren_level_count_stack_index22:\
    \ number[] = [];\n  let paren_level_count_stack_index23: number[] = [];\n  let\
    \ paren_level_count_stack_index24: number[] = [];\n  let paren_level_count_stack_index25:\
    \ number[] = [];\n  let paren_level_count_stack_index26: number[] = [];\n  let\
    \ paren_level_count_stack_index27: number[] = [];\n  let paren_level_count_stack_index28:\
    \ number[] = [];\n  let paren_level_count_stack_index29: number[] = [];\n  let\
    \ paren_level_count_stack_index30: number[] = [];\n  let paren_level_count_stack_index31:\
    \ number[] = [];\n  let paren_level_count_stack_index32: number[] = [];\n  let\
    \ paren_level_count_stack_index33: number[] = [];\n  let paren_level_count_stack_index34:\
    \ number[] = [];\n  let paren_level_count_stack_index35: number[] = [];\n  let\
    \ paren_level_count_stack_index36: number[] = [];\n  let paren_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4h4n454d.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797794
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"\
    (\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n   \
    \   if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n    \
    \  paren_level[paren_level_max] = paren_level_count;\n      paren_stack.push(paren_string[i]);\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  0,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n\
    ]\n    at test (/tmp/tmpatkb3umv.js:30:12)\n    at Object.<anonymous> (/tmp/tmpatkb3umv.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 0,\
    \ 1, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === \")\") {\n      const paren_level_index =\
    \ paren_stack.length - 1;\n      const paren_level_length = paren_level[paren_level_index];\n\
    \      if (paren_level_length === 0) {\n        paren_level.splice(paren_level_index,\
    \ 1);\n      } else {\n        paren_level[paren_level_index] = paren_level[paren_level_index]\
    \ - 1;\n      }\n      if (paren_level[paren_level_index] === 0) {\n        paren_stack.splice(paren_level_index,\
    \ 1);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  NaN,\n  0,\n  0,\n  NaN,\n  0,\n  0,\n  0,\n  NaN,\n  0,\n  NaN\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7eahaptm.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7eahaptm.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      0,\
    \   0, NaN, 0,   0,\n    NaN,   0,   0, 0, NaN,\n      0, NaN\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: number[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_index\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_index = 0;\n    let paren_level_max_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_max = 0;\n    let paren_level_max_paren_level_max_index\
    \ = 0;\n    let paren_level_max_paren_level_max_count = 0;\n    let paren_level_max_paren_level_max_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_index = 0;\n    let\
    \ paren_level_max_paren_level_max_paren_level_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_index = 0;\n \
    \   let paren_level_max_paren_level_max_paren_level_max_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_index\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_index\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_count\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_index\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_index\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_count\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level\
    \ = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_index\
    \ = 0;\n    let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw1h2jvlj.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level[paren_count]\
    \ = paren_stack.length;\n      paren_count++;\n    } else if (char === ')') {\n\
    \      paren_count = paren_stack.pop();\n      paren_level_count[paren_level[paren_count]]\
    \ =\n        paren_level_count[paren_level[paren_count]] || 0;\n      paren_level_count[paren_level[paren_count]]\
    \ =\n        paren_level_count[paren_level[paren_count]] - 1;\n      if (paren_level_count[paren_level[paren_count]]\
    \ == 0) {\n        paren_level[paren_count] = paren_stack.length;\n      }\n \
    \   }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp8j4bf9ld.js:34:12)\n    at Object.<anonymous> (/tmp/tmp8j4bf9ld.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7_h8aqgt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7_h8aqgt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsv2fa3v1.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsv2fa3v1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_count++;\n    }\
    \ else if (char === ')') {\n      paren_count--;\n      paren_level_count = paren_level_stack.pop();\n\
    \    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprjy7n9h8.ts(15,7): error TS2304: Cannot find name
    ''paren_level_stack''.

    ../../../../../tmp/tmprjy7n9h8.ts(19,27): error TS2304: Cannot find name ''paren_level_stack''.

    '
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfce6cc3x.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfce6cc3x.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      const current_level = paren_stack.pop();\n      const last_level =\
    \ paren_level.pop();\n      if (current_level > last_level) {\n        paren_level.push(current_level);\n\
    \      }\n      paren_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc2apokay.ts(13,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpc2apokay.ts(19,11): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpc2apokay.ts(20,26): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n  \
    \  } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n    \
    \  if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \        paren_level_max_count = Math.max(paren_level_max_count, paren_level.length);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp52ko9660.js:29:12)\n    at Object.<anonymous> (/tmp/tmp52ko9660.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1ezjwgad.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1ezjwgad.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n      if (paren_count ===\
    \ 0) {\n        paren_stack.push(paren_count);\n      }\n    }\n  }\n  return\
    \ paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpp8qcihmo.js:27:12)\n    at Object.<anonymous> (/tmp/tmpp8qcihmo.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count += 1;\n      paren_count += 1;\n    } else if (char ===\
    \ ')') {\n      paren_count -= 1;\n      paren_level_count -= 1;\n      if (paren_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    } else\
    \ if (char === ' ') {\n      if (paren_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1dt6s41f.ts(14,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      paren_level_count\
    \ -= 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptudxs47e.ts(14,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count =\
    \ 1;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count,\
    \ paren_stack.pop());\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjkpzzrgg.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjkpzzrgg.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpfir4w2ik.js:29:12)\n    at Object.<anonymous> (/tmp/tmpfir4w2ik.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpuqadftuw.js:28:12)\n    at Object.<anonymous> (/tmp/tmpuqadftuw.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738608
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyityemib.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const levels: number[] = [];\n    const paren_stack: string[] = [];\n\
    \    let paren_level = 0;\n    let paren_level_count = 0;\n    let paren_level_max\
    \ = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_max = 0;\n\
    \    let paren_level_max_max_count = 0;\n    let paren_level_max_max_max = 0;\n\
    \    let paren_level_max_max_max_count = 0;\n    let paren_level_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_count = 0;\n    let\
    \ paren_level_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n   \
    \ let paren_level_max_max_max_max_max_max_max_max_max_max_count = 0;\n    let\
    \ paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max =\
    \ 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0nzb2n08.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level[paren_stack.length\
    \ - 1]++;\n      paren_stack.pop();\n    } else {\n      paren_level[paren_stack.length\
    \ - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n\
    \  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '-1': NaN\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsrvpbc0c.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsrvpbc0c.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 6, 2,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, '-1': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const level: number = paren_stack.pop();\n\
    \      if (level > paren_level[paren_level.length - 1]) {\n        paren_level[paren_level.length\
    \ - 1] = level;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  0,\n  0,\n  5,\n  6,\n  0,\n  0,\n  9,\n  10,\n  11\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2g_f_wop.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2g_f_wop.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,\
    \  1, 2, 0, 0,\n     5,  6, 0, 0, 9,\n    10, 11\n  ],\n  expected: [ 2, 3, 1,\
    \ 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7_h8aqgt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7_h8aqgt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpd7wf4r8r.js:28:12)\n    at Object.<anonymous> (/tmp/tmpd7wf4r8r.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n\
    \      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.push(paren_count);\n      }\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpvj61h55a.js:26:12)\n    at Object.<anonymous> (/tmp/tmpvj61h55a.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  let paren_nesting\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n\
    \    } else if (char === ')') {\n      paren_level--;\n      paren_nesting++;\n\
    \      if (paren_nesting > paren_stack[paren_stack.length - 1]) {\n        paren_nesting\
    \ = 0;\n      }\n    } else if (char === ' ') {\n      paren_nesting = 0;\n  \
    \  }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp43kdxbd8.ts(13,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmp43kdxbd8.ts(18,11):\
    \ error TS2365: Operator '>' cannot be applied to types 'number' and 'string'.\n\
    ../../../../../tmp/tmp43kdxbd8.ts(25,3): error TS2322: Type 'string[]' is not\
    \ assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n"
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7_h8aqgt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7_h8aqgt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"\
    (\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n   \
    \   if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n    \
    \  if (paren_level_count > paren_level_max) {\n        paren_level.push(paren_level_max);\n\
    \        paren_level_max = paren_level_count;\n      }\n      paren_stack.push(paren_string[i]);\n\
    \    } else if (paren_string[i] === \" \") {\n      if (paren_stack.length > 0)\
    \ {\n        paren_level_count--;\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpb42c6hn3.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb42c6hn3.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  let paren_level_current: number[]\
    \ = [];\n  let paren_level_current_max: number[] = [];\n  let paren_level_current_max_index:\
    \ number[] = [];\n  let paren_level_current_index: number[] = [];\n  let paren_level_current_index2:\
    \ number[] = [];\n  let paren_level_current_index3: number[] = [];\n  let paren_level_current_index4:\
    \ number[] = [];\n  let paren_level_current_index5: number[] = [];\n  let paren_level_current_index6:\
    \ number[] = [];\n  let paren_level_current_index7: number[] = [];\n  let paren_level_current_index8:\
    \ number[] = [];\n  let paren_level_current_index9: number[] = [];\n  let paren_level_current_index10:\
    \ number[] = [];\n  let paren_level_current_index11: number[] = [];\n  let paren_level_current_index12:\
    \ number[] = [];\n  let paren_level_current_index13: number[] = [];\n  let paren_level_current_index14:\
    \ number[] = [];\n  let paren_level_current_index15: number[] = [];\n  let paren_level_current_index16:\
    \ number[] = [];\n  let paren_level_current_index17: number[] = [];\n  let paren_level_current_index18:\
    \ number[] = [];\n  let paren_level_current_index19: number[] = [];\n  let paren_level_current_index20:\
    \ number[] = [];\n  let paren_level_current_index21: number[] = [];\n  let paren_level_current_index22:\
    \ number[] = [];\n  let paren_level_current_index23: number[] = [];\n  let paren_level_current_index24:\
    \ number[] = [];\n  let paren_level_current_index25: number[] = [];\n  let paren_level_current_index26:\
    \ number[] = [];\n  let paren_level_current_index27: number[] = [];\n  let paren_level_current_index28:\
    \ number[] = [];\n  let paren_level_current_index29: number[] = [];\n  let paren_level_current_index30:\
    \ number[] = [];\n  let paren_level_current_index31: number[] = [];\n  let paren_level_current_index32:\
    \ number[] = [];\n  let paren_level_current_index33: number[] = [];\n  let paren_level_current_index34:\
    \ number[] = [];\n  let paren_level_current_index35: number[] = [];\n  let paren_level_current_index36:\
    \ number[] = [];\n  let paren_level_current_index37: number[] = [];\n  let paren_level_current_index38:\
    \ number[] = [];\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwdz50z3b.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7_h8aqgt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7_h8aqgt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpf2pkfdtp.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf2pkfdtp.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfce6cc3x.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfce6cc3x.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      const current_level = paren_level.pop();\n\
    \      if (current_level > 0) {\n        paren_level.push(current_level + 1);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp32o3plhg.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp32o3plhg.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwiz44jt5.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwiz44jt5.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: string[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index: number = 0;\n    let paren_level_max_count:\
    \ number;\n    let paren_level_max_string: string;\n    let paren_level_max_string_index:\
    \ number;\n    let paren_level_max_string_count: number;\n    let paren_level_max_string_value:\
    \ string;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_length: number;\n    let paren_level_max_string_value_length_index:\
    \ number;\n    let paren_level_max_string_value_length_count: number;\n    let\
    \ paren_level_max_string_value_length_max: number;\n    let paren_level_max_string_value_length_max_index:\
    \ number;\n    let paren_level_max_string_value_length_max_count: number;\n  \
    \  let paren_level_max_string_value_length_max_string: string;\n    let paren_level_max_string_value_length_max_string_index:\
    \ number;\n    let paren_level_max_string_value_length_max_string_count: number;\n\
    \    let paren_level_max_string_value_length_max_string_value: string;\n    let\
    \ paren_level_max_string_value_length_max_string_value_index: number;\n    let\
    \ paren_level_max_string_value_length_max_string_value_count: number;\n    let\
    \ paren_level_max_string_value_length_max_string_value_length: number;\n    let\
    \ paren_level_max_string_value_length_max_string_value_length_index: number;\n\
    \    let paren_level_max_string_value_length_max_string_value_length_count: number;\n\
    \    let paren_level_max_string_value_length_max_string_value_length_max: number;\n\
    \    let paren_level_max_string_value_length_max_string_value_length_max_index:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_count:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string:\
    \ string;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_index:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_count:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value:\
    \ string;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_index:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_count:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_length:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_length_index:\
    \ number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_length_count:\
    \ number;\n    let paren_level_max_string_value_length_max_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7pi_5svd.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp1d50mac4.js:25:12)\n    at Object.<anonymous> (/tmp/tmp1d50mac4.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797799
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmphtszsm1b.js:30:12)\n    at Object.<anonymous> (/tmp/tmphtszsm1b.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797799
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n\
    \      paren_level_max_index = paren_stack.indexOf(paren_level_max);\n      paren_level_max_count\
    \ = paren_stack[paren_level_max_index];\n    }\n  }\n  return paren_level;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvf_rjg5f.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvf_rjg5f.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797799
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpp10_5elq.js:29:12)\n    at Object.<anonymous> (/tmp/tmpp10_5elq.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738606
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n\
    \  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_length_index:\
    \ number = 0;\n  let paren_level_max_value_length_value: number = 0;\n  let paren_level_max_value_length_value_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length: number = 0;\n\
    \  let paren_level_max_value_length_value_length_index: number = 0;\n  let paren_level_max_value_length_value_length_value:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_index: number\
    \ = 0;\n  let paren_level_max_value_length_value_length_value_length: number =\
    \ 0;\n  let paren_level_max_value_length_value_length_value_length_index: number\
    \ = 0;\n  let paren_level_max_value_length_value_length_value_length_value: number\
    \ = 0;\n  let paren_level_max_value_length_value_length_value_length_value_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_index:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length:\
    \ number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc3moxt7f.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797799
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array<number>(max_level);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      levels[j] = Math.max(levels[j],\
    \ group.length);\n    }\n  }\n  return levels.map(l => l - 1);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpl8675lgv.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl8675lgv.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    NaN,\
    \ NaN, NaN, NaN,\n    NaN, NaN, NaN, NaN,\n    NaN, NaN\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      if (paren_level_count\
    \ === 0) {\n        paren_level_max_index = paren_level_max_index + 1;\n     \
    \ }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgiivoxe3.ts(15,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpgiivoxe3.ts(19,51): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659797799
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const level = paren_stack.pop();\n    \
    \  paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '(': NaN\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_45xsdg8.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_45xsdg8.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, '(': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_count: number;\n \
    \ let paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n\
    \  let paren_level_max_string_count: number;\n  let paren_level_max_string_value:\
    \ string;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count:\
    \ number;\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpetypbey2.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797799
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: number[] = [];\n    const paren_level: number[] =\
    \ [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char\
    \ = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level.length);\n\
    \            paren_level.push(0);\n        } else if (char === ')') {\n      \
    \      const level_count = paren_stack.pop();\n            if (level_count ===\
    \ undefined) {\n                throw new Error(`Unmatched closing parenthesis\
    \ at index ${i}`);\n            }\n            paren_level[level_count] = paren_level[level_count]\
    \ - 1;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxuxnsquv.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxuxnsquv.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n\
    \    } else if (char === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphue22jgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmphue22jgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[]\
    \ = [];\n  const paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index\
    \ = 0;\n  let paren_level_max_count = 1;\n  let paren_level_max_count_index =\
    \ 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(paren_level.length);\n\
    \      paren_level_count.push(0);\n      paren_level_max_count.push(0);\n    \
    \  paren_level_max_count_index.push(0);\n    } else if (char === ')') {\n    \
    \  paren_level_count[paren_level_max_count_index] =\n        paren_level_count[paren_level_max_count_index]\
    \ + 1;\n      if (paren_level_count[paren_level_max_count_index] >\n         \
    \ paren_level_max_count) {\n        paren_level_max_count = paren_level_count[paren_level_max_count_index];\n\
    \        paren_level_max_count_index = paren_level_max_count_index;\n      }\n\
    \      paren_level.pop();\n      paren_level_max_count_index--;\n      paren_level_max_count--;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl13y9r1o.ts(10,9): error TS2451: Cannot redeclare
    block-scoped variable ''paren_level_max_count''.

    ../../../../../tmp/tmpl13y9r1o.ts(11,9): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level_max_count_index''.

    ../../../../../tmp/tmpl13y9r1o.ts(12,7): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level_max_count_index''.

    ../../../../../tmp/tmpl13y9r1o.ts(13,7): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level_max_count''.

    ../../../../../tmp/tmpl13y9r1o.ts(14,7): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level_max_count_index''.

    ../../../../../tmp/tmpl13y9r1o.ts(24,25): error TS2538: Type ''number[]'' cannot
    be used as an index type.

    ../../../../../tmp/tmpl13y9r1o.ts(25,27): error TS2538: Type ''number[]'' cannot
    be used as an index type.

    ../../../../../tmp/tmpl13y9r1o.ts(26,29): error TS2538: Type ''number[]'' cannot
    be used as an index type.

    ../../../../../tmp/tmpl13y9r1o.ts(28,9): error TS2588: Cannot assign to ''paren_level_max_count''
    because it is a constant.

    ../../../../../tmp/tmpl13y9r1o.ts(28,51): error TS2538: Type ''number[]'' cannot
    be used as an index type.

    ../../../../../tmp/tmpl13y9r1o.ts(29,9): error TS2588: Cannot assign to ''paren_level_max_count_index''
    because it is a constant.

    ../../../../../tmp/tmpl13y9r1o.ts(32,7): error TS2588: Cannot assign to ''paren_level_max_count_index''
    because it is a constant.

    ../../../../../tmp/tmpl13y9r1o.ts(33,7): error TS2588: Cannot assign to ''paren_level_max_count''
    because it is a constant.

    '
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[]\
    \ = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4:\
    \ number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6:\
    \ number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8:\
    \ number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10:\
    \ number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12:\
    \ number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14:\
    \ number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16:\
    \ number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18:\
    \ number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20:\
    \ number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22:\
    \ number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24:\
    \ number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26:\
    \ number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28:\
    \ number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30:\
    \ number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32:\
    \ number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34:\
    \ number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36:\
    \ number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38:\
    \ number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40:\
    \ number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr_opbcif.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797799
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index\
    \ = 0;\n  let paren_level_max_count_index2 = 0;\n  let paren_level_max_count_index3\
    \ = 0;\n  let paren_level_max_count_index4 = 0;\n  let paren_level_max_count_index5\
    \ = 0;\n  let paren_level_max_count_index6 = 0;\n  let paren_level_max_count_index7\
    \ = 0;\n  let paren_level_max_count_index8 = 0;\n  let paren_level_max_count_index9\
    \ = 0;\n  let paren_level_max_count_index10 = 0;\n  let paren_level_max_count_index11\
    \ = 0;\n  let paren_level_max_count_index12 = 0;\n  let paren_level_max_count_index13\
    \ = 0;\n  let paren_level_max_count_index14 = 0;\n  let paren_level_max_count_index15\
    \ = 0;\n  let paren_level_max_count_index16 = 0;\n  let paren_level_max_count_index17\
    \ = 0;\n  let paren_level_max_count_index18 = 0;\n  let paren_level_max_count_index19\
    \ = 0;\n  let paren_level_max_count_index20 = 0;\n  let paren_level_max_count_index21\
    \ = 0;\n  let paren_level_max_count_index22 = 0;\n  let paren_level_max_count_index23\
    \ = 0;\n  let paren_level_max_count_index24 = 0;\n  let paren_level_max_count_index25\
    \ = 0;\n  let paren_level_max_count_index26 = 0;\n  let paren_level_max_count_index27\
    \ = 0;\n  let paren_level_max_count_index28 = 0;\n  let paren_level_max_count_index29\
    \ = 0;\n  let paren_level_max_count_index30 = 0;\n  let paren_level_max_count_index31\
    \ = 0;\n  let paren_level_max_count_index32 = 0;\n  let paren_level_max_count_index33\
    \ = 0;\n  let paren_level_max_count_index34 = 0;\n  let paren_level_max_count_index35\
    \ = 0;\n  let paren_level_max_count_index36 = 0;\n  let paren_level_max_count_index37\
    \ = 0;\n  let paren_level_max_count_index38 = 0;\n  let paren_level_max_count_index39\
    \ = 0;\n  let paren_level_max_count_index40 = 0;\n  let paren_level_max_count_index41\
    \ = 0;\n  let paren_level_max_count_index42 = 0;\n  let paren_level_max_count_index43\
    \ = 0;\n  let paren_level_max_count_index44 = 0;\n  let paren_level_max_count_index45\
    \ = 0;\n  let paren_level_max_count_index46 = 0;\n  let paren_level_max_count_index47\
    \ = 0;\n  let paren_level_max_count_index48 = 0;\n  let paren_level_max_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp3rzyynw.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  const paren_level_max_index = 0;\n\
    \  const paren_level_max_index2 = 0;\n  const paren_level_max_index3 = 0;\n  const\
    \ paren_level_max_index4 = 0;\n  const paren_level_max_index5 = 0;\n  const paren_level_max_index6\
    \ = 0;\n  const paren_level_max_index7 = 0;\n  const paren_level_max_index8 =\
    \ 0;\n  const paren_level_max_index9 = 0;\n  const paren_level_max_index10 = 0;\n\
    \  const paren_level_max_index11 = 0;\n  const paren_level_max_index12 = 0;\n\
    \  const paren_level_max_index13 = 0;\n  const paren_level_max_index14 = 0;\n\
    \  const paren_level_max_index15 = 0;\n  const paren_level_max_index16 = 0;\n\
    \  const paren_level_max_index17 = 0;\n  const paren_level_max_index18 = 0;\n\
    \  const paren_level_max_index19 = 0;\n  const paren_level_max_index20 = 0;\n\
    \  const paren_level_max_index21 = 0;\n  const paren_level_max_index22 = 0;\n\
    \  const paren_level_max_index23 = 0;\n  const paren_level_max_index24 = 0;\n\
    \  const paren_level_max_index25 = 0;\n  const paren_level_max_index26 = 0;\n\
    \  const paren_level_max_index27 = 0;\n  const paren_level_max_index28 = 0;\n\
    \  const paren_level_max_index29 = 0;\n  const paren_level_max_index30 = 0;\n\
    \  const paren_level_max_index31 = 0;\n  const paren_level_max_index32 = 0;\n\
    \  const paren_level_max_index33 = 0;\n  const paren_level_max_index34 = 0;\n\
    \  const paren_level_max_index35 = 0;\n  const paren_level_max_index36 = 0;\n\
    \  const paren_level_max_index37 = 0;\n  const paren_level_max_index38 = 0;\n\
    \  const paren_level_max_index39 = 0;\n  const paren_level_max_index40 = 0;\n\
    \  const paren_level_max_index41 = 0;\n  const paren_level_max_index42 = 0;\n\
    \  const paren_level_max_index43 = 0;\n  const paren_level_max_index44 = 0;\n\
    \  const paren_level_max_index45 = 0;\n  const paren_level_max_index46 = 0;\n\
    \  const paren_level_max_index47 = 0;\n  const paren_level_max_index48 = 0;\n\
    \  const paren_level_max_index49 = 0;\n  const paren_level_max_index50 = 0;\n\
    \  const paren_level_max_index51 = 0;\n  const paren_level_max_index52 = 0;\n\
    \  const paren_level_max_index53 = 0;\n  const paren_level_max_index54 = 0;\n\
    \  const paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0s_yth4_.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n    } else {\n      paren_level_count = paren_stack[paren_stack.length\
    \ - 1];\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  undefined,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n\
    \  undefined,\n  undefined,\n  NaN,\n  undefined,\n  undefined,\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  undefined\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyx3k8rot.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyx3k8rot.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \         2,         1,\n    2,         1,         0,\n    undefined, NaN,   \
    \    NaN,\n    NaN,       NaN,       NaN,\n    undefined, undefined, NaN,\n  \
    \  undefined, undefined, NaN,\n    NaN,       NaN,       NaN,\n    NaN,      \
    \ NaN,       NaN,\n    NaN,       NaN,       undefined\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === \")\") {\n      const paren_level_count =\
    \ paren_stack.pop();\n      if (paren_level_count > 0) {\n        paren_level.push(paren_level_count);\n\
    \      } else {\n        paren_level.push(0);\n      }\n    } else {\n      paren_level[paren_stack.length\
    \ - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwmp32qb6.ts(15,11): error TS2365: Operator ''>''
    cannot be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpwmp32qb6.ts(16,26): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: number[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_level_count);\n            paren_level_count\
    \ += 1;\n        } else if (char === ')') {\n            paren_level_count -=\
    \ 1;\n            paren_level[paren_stack.pop()] = paren_level_count;\n      \
    \  }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpglqsa95s.js:26:12)\n    at Object.<anonymous> (/tmp/tmpglqsa95s.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if\
    \ (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp8ol05z0_.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8ol05z0_.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count\
    \ = 0;\n    let paren_level = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const c = paren_string[i];\n        if (c == '(') {\n      \
    \      paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        } else if (c == ' ') {\n            if (paren_level == 0 && paren_count\
    \ > 0) {\n                levels.push(level);\n                level = 0;\n  \
    \              paren_count = 0;\n            }\n        } else {\n           \
    \ paren_count++;\n        }\n        level++;\n    }\n    if (paren_count > 0)\
    \ {\n        levels.push(level);\n    }\n    return levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_aqd5k4e.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_aqd5k4e.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count.push(paren_level_count);\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_level_count = paren_level[paren_level.length - 1];\n\
    \      paren_level.pop();\n      if (paren_level_count === 0) paren_level.push(0);\n\
    \    } else {\n      paren_level_count = paren_level[paren_level.length - 1];\n\
    \      paren_level[paren_level.length - 1] += 1;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm7sxwno_.ts(13,25): error TS2339: Property ''push''
    does not exist on type ''number''.

    '
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp2bzxctxu.js:26:12)\n    at Object.<anonymous> (/tmp/tmp2bzxctxu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      paren_level_max_index\
    \ = paren_stack.length - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeibsgtbq.ts(15,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpeibsgtbq.ts(19,51): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  let paren_level_count\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level_count++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level = paren_stack.pop();\n      }\n    }\n  }\n  return\
    \ paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7itrqcnq.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7itrqcnq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpfir4w2ik.js:29:12)\n    at Object.<anonymous> (/tmp/tmpfir4w2ik.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpf0j3l5dc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpf0j3l5dc.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const max_level\
    \ = Math.max(...groups.map(g => g.length));\n  return groups.map(g => g.match(/\\\
    (([^()]+)\\)/)[1].length).map(l => max_level - l);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsryaa6l7.js:8\n    var max_level = Math.max.apply(Math, groups.map(function\
    \ (g) { return g.length; }));\n                                              \
    \  ^\n\nTypeError: Cannot read properties of null (reading 'map')\n    at parse_nested_parens\
    \ (/tmp/tmpsryaa6l7.js:8:49)\n    at test (/tmp/tmpsryaa6l7.js:14:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpsryaa6l7.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n\
    \      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n\
    \    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpso_jhle8.ts(25,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797802
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let\
    \ paren_level_length = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_length\
    \ = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index =\
    \ 0;\n  let paren_level_max_count_length = 0;\n  let paren_level_max_count_count\
    \ = 0;\n  let paren_level_max_count_count_index = 0;\n  let paren_level_max_count_count_length\
    \ = 0;\n  let paren_level_max_count_count_count = 0;\n  let paren_level_max_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count\
    \ = 0;\n  let paren_level_max_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_length\
    \ = 0;\n  let paren_level_max_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_length = 0;\n  let\
    \ paren_level_max_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_length = 0;\n\
    \  let paren_level_max_count_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_length\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_length\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_length\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n  let paren_level_max_count_count_count_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvs2hk00j.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797802
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  let paren_level_index\
    \ = 0;\n  let paren_level_char: string;\n  let paren_level_length: number;\n \
    \ let paren_level_char_index: number;\n  let paren_level_char_length: number;\n\
    \  let paren_level_char_length_index: number;\n  let paren_level_char_length_char:\
    \ string;\n  let paren_level_char_length_char_index: number;\n  let paren_level_char_length_char_length:\
    \ number;\n  let paren_level_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char:\
    \ string;\n  let paren_level_char_length_char_length_char_index: number;\n  let\
    \ paren_level_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char: string;\n\
    \  let paren_level_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char:\
    \ string;\n  let paren_level_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char:\
    \ string;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char:\
    \ string;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index:\
    \ number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number;\n  let paren_level_char_length_char_length_char_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0nrfkarv.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp2bzxctxu.js:26:12)\n    at Object.<anonymous> (/tmp/tmp2bzxctxu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count +=\
    \ 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()]\
    \ = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp3timndkc.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3timndkc.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const paren_level = paren_level.pop();\n\
    \      if (paren_level === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    } else {\n      paren_level.push(paren_level[paren_level.length\
    \ - 1] + 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnmo_zsms.ts(15,27): error TS2448: Block-scoped variable
    ''paren_level'' used before its declaration.

    '
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \        paren_level_max_count = Math.max(paren_level_max_count, paren_level.length);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp15pqwzi8.js:30:12)\n    at Object.<anonymous> (/tmp/tmp15pqwzi8.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  let paren_nesting\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n\
    \      paren_nesting++;\n    } else if (char === ')') {\n      paren_level--;\n\
    \      paren_nesting--;\n      if (paren_nesting < 0) {\n        throw new Error(`Invalid\
    \ parentheses string: ${paren_string}`);\n      }\n    } else if (char === ' ')\
    \ {\n      if (paren_stack.length > 0) {\n        paren_level = Math.max(paren_stack[paren_stack.length\
    \ - 1], paren_level);\n        paren_nesting = Math.max(paren_nesting, paren_stack[paren_stack.length\
    \ - 1]);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  1,\n  2,\n  3,\n  3,\n  3,\n  4,\n  5,\n  4,\n  4\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcrpgeuc9.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcrpgeuc9.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 1, 2,\n    3, 3, 3, 4, 5,\n    4, 4\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \        paren_level_max = Math.max(paren_level_max, paren_level[paren_level.length\
    \ - 1]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmprbq7tz_r.js:30:12)\n    at Object.<anonymous> (/tmp/tmprbq7tz_r.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n     \
    \ paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp3s6y3h1p.js:27:12)\n    at Object.<anonymous> (/tmp/tmp3s6y3h1p.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp2bzxctxu.js:26:12)\n    at Object.<anonymous> (/tmp/tmp2bzxctxu.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max =\
    \ 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n     \
    \ if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n\
    \      }\n      paren_stack.push(paren_string[i]);\n    } else if (paren_string[i]\
    \ === ' ') {\n      if (paren_stack.length > 0) {\n        paren_level_count++;\n\
    \      }\n      paren_stack.push(paren_string[i]);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpviboss7y.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpviboss7y.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const max_level = Math.max(...groups.map(g\
    \ => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i\
    \ = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j\
    \ = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[groups.length\
    \ - 1 - i] += 1;\n      } else if (group[j] === \")\") {\n        levels[groups.length\
    \ - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk7_trem8.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n\
    \      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7vimqhdf.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7vimqhdf.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ groups.reduce((max_level, group) => {\n    const level = group.length;\n   \
    \ if (level > max_level) {\n      return level;\n    }\n    return max_level;\n\
    \  }, 0);\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqwkqtbx8.ts(15,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n\
    \    } else if (char === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphue22jgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmphue22jgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number;\n  let paren_level_max_index: number;\n\
    \  let paren_level_max_value: number;\n  let paren_level_max_value_count: number;\n\
    \  let paren_level_max_value_position: number;\n  let paren_level_max_value_position_count:\
    \ number;\n  let paren_level_max_value_position: number;\n  let paren_level_max_value_position_index:\
    \ number;\n  let paren_level_max_value_position_value: number;\n  let paren_level_max_value_position_value_count:\
    \ number;\n  let paren_level_max_value_position_value_index: number;\n  let paren_level_max_value_position_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n  let paren_level_max_value_position_value_value_count: number;\n \
    \ let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value:\
    \ number;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr_j6em_t.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max_count\
    \ = Math.max(paren_level_max_count, paren_stack.length);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_stack.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpoblrncg0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpoblrncg0.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq39pggln.ts(13,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpq39pggln.ts(19,26): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659797802
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_depth =\
    \ Math.max.apply(null, groups.map(g => g.length));\n  const max_level = Math.ceil(Math.log(max_depth)\
    \ / Math.LN2);\n  const levels = new Array(max_level).fill(0);\n  for (let i =\
    \ 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j =\
    \ 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[levels.length\
    \ - 1]++;\n      } else if (group[j] === \")\") {\n        levels[levels.length\
    \ - 1]--;\n      }\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq_fjkf8k.ts(10,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === \")\") {\n      const level = paren_stack.pop();\n\
    \      if (level === undefined) {\n        throw new Error(\"Unbalanced parenthesis\"\
    );\n      }\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxhom4mqe.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxhom4mqe.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count =\
    \ 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count,\
    \ paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr_38x4a7.ts(22,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n\
    \      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7vimqhdf.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7vimqhdf.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \      paren_level_max--;\n    }\n    paren_level.push(paren_level_count);\n \
    \ }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpize7x53_.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpize7x53_.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0,\
    \ 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const paren_level_index = paren_level.pop();\n\
    \      const paren_level_diff = paren_level_index - paren_level[paren_level.length\
    \ - 1];\n      if (paren_level_diff > 0) {\n        paren_level_count--;\n   \
    \   }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpz1nd27uu.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz1nd27uu.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_level_count);\n      paren_level_count++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level_count]\
    \ = paren_level_max;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7p5wr9d9.js:29:12)\n    at Object.<anonymous> (/tmp/tmp7p5wr9d9.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const max_nesting_level =\
    \ Math.max.apply(null, groups.map(g => g.length));\n  const nesting_levels = Array(max_nesting_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n\
    \        nesting_levels[groups.length - 1 - i] += 1;\n      } else if (group[j]\
    \ === \")\") {\n        nesting_levels[groups.length - 1 - i] -= 1;\n      }\n\
    \    }\n  }\n  return nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwl66lvw7.ts(9,51): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797804
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpf2pkfdtp.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf2pkfdtp.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.push(paren_level.length);\n\
    \    } else {\n      paren_level[paren_stack.pop()] = paren_level[paren_stack.pop()]\
    \ + 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at\
    \ test (/tmp/tmp7px2przj.js:28:12)\n    at Object.<anonymous> (/tmp/tmp7px2przj.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n\
    \      paren_level[paren_level_count] += 1;\n      if (paren_level[paren_level_count]\
    \ === 0) {\n        paren_level.pop();\n        paren_level_count -= 1;\n    \
    \  }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <2 empty\
    \ items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n\
    \  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n\
    \  3\n]\n    at test (/tmp/tmp1mfyl7j0.js:28:12)\n    at Object.<anonymous> (/tmp/tmp1mfyl7j0.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    <2\
    \ empty items>, NaN,\n    NaN,             <2 empty items>,\n    NaN,        \
    \     NaN,\n    <2 empty items>, NaN,\n    NaN,             NaN\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \      paren_level[paren_level_count] = paren_level_count;\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvscrxrow.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvscrxrow.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797804
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n\
    \    } else if (char === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphue22jgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmphue22jgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.push(paren_stack[paren_stack.length\
    \ - 1]);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdwt9ovdq.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdwt9ovdq.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level_count = (paren_level_count === undefined)\
    \ ? 0 : paren_level_count;\n      paren_level[paren_stack.length - 1] += paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnfr5robk.ts(14,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpnfr5robk.ts(18,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpf2pkfdtp.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf2pkfdtp.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_stack.push(paren_level_count);\n      paren_count++;\n    }\
    \ else if (char === ')') {\n      paren_count--;\n      paren_level_count = paren_level_stack.pop();\n\
    \    } else if (char === ' ') {\n      paren_count--;\n      paren_level_count\
    \ = paren_level_stack.pop();\n    } else {\n      paren_count--;\n    }\n  }\n\
    \  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi2lhn0gg.ts(15,7): error TS2304: Cannot find name
    ''paren_level_stack''.

    ../../../../../tmp/tmpi2lhn0gg.ts(19,27): error TS2304: Cannot find name ''paren_level_stack''.

    ../../../../../tmp/tmpi2lhn0gg.ts(22,27): error TS2304: Cannot find name ''paren_level_stack''.

    '
  timestamp: 1659797804
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp3f44zysa.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3f44zysa.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const max_level = 0;\n  for\
    \ (const group of groups) {\n    const level = getMaxLevel(group);\n    if (level\
    \ > max_level) {\n      max_level = level;\n    }\n  }\n  return max_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptcsn_yq2.ts(10,19): error TS2552: Cannot find name
    ''getMaxLevel''. Did you mean ''max_level''?

    ../../../../../tmp/tmptcsn_yq2.ts(12,7): error TS2588: Cannot assign to ''max_level''
    because it is a constant.

    ../../../../../tmp/tmptcsn_yq2.ts(15,3): error TS2322: Type ''0'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = (paren_level_count < paren_level_max) ? paren_level_count : paren_level_max;\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count\
    \ = Math.max(paren_stack.pop(), paren_level_count);\n      paren_level_count =\
    \ Math.max(paren_level_count, paren_level_max);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprlp99ge8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlp99ge8.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if\
    \ (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp8ol05z0_.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8ol05z0_.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797800
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(')\
    \ {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max,\
    \ paren_stack.length - 1);\n      paren_level_count = 1;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_level_count = Math.max(paren_level_count, paren_stack.pop());\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppl39615n.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmppl39615n.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwiz44jt5.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwiz44jt5.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwiz44jt5.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwiz44jt5.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2:\
    \ number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4:\
    \ number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6:\
    \ number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8:\
    \ number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10:\
    \ number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12:\
    \ number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14:\
    \ number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16:\
    \ number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18:\
    \ number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20:\
    \ number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22:\
    \ number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24:\
    \ number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26:\
    \ number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28:\
    \ number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30:\
    \ number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32:\
    \ number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34:\
    \ number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36:\
    \ number[] = [];\n  let paren_level_max_count_index37: number[] = [];\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps6nn8wuv.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level.pop();\n      if\
    \ (paren_stack.length > 0) {\n        paren_level.push(paren_stack.length);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  0,\n  0,\n  6,\n  7,\n  0,\n  0,\n  10,\n  11,\n  12\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgkugb1i_.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgkugb1i_.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,\
    \  2, 3, 0,  0,\n     6,  7, 0, 0, 10,\n    11, 12\n  ],\n  expected: [ 2, 3,\
    \ 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const max_level = Math.max(...groups.map(g\
    \ => g.length));\n  const levels = new Array(max_level).fill(-1);\n  const stack:\
    \ number[] = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group\
    \ = groups[i];\n    const level = group.length;\n    while (levels[level] >= 0)\
    \ {\n      levels[level]--;\n      stack.push(level);\n    }\n    levels[level]++;\n\
    \  }\n  return stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqlm_r6w1.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_paren_level = 0;\n  let paren_level_max_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level = 0;\n  let\
    \ paren_level_max_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfnfm003e.ts(43,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n \
    \   }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzbcn80in.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let\
    \ paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if\
    \ (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n  \
    \    paren_level_count++;\n      paren_level.push(paren_level_count);\n    } else\
    \ if (paren_string[i] === \")\") {\n      paren_level_count--;\n      paren_level.push(paren_level_count);\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0q3a47bf.ts(8,9): error TS2451: Cannot redeclare
    block-scoped variable ''paren_level''.

    ../../../../../tmp/tmp0q3a47bf.ts(9,9): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level_count''.

    ../../../../../tmp/tmp0q3a47bf.ts(10,7): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level_count''.

    ../../../../../tmp/tmp0q3a47bf.ts(11,7): error TS2451: Cannot redeclare block-scoped
    variable ''paren_level''.

    ../../../../../tmp/tmp0q3a47bf.ts(15,7): error TS2588: Cannot assign to ''paren_level_count''
    because it is a constant.

    ../../../../../tmp/tmp0q3a47bf.ts(16,24): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp0q3a47bf.ts(18,7): error TS2588: Cannot assign to ''paren_level_count''
    because it is a constant.

    ../../../../../tmp/tmp0q3a47bf.ts(19,24): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp0q3a47bf.ts(20,11): error TS2367: This condition will always
    return ''false'' since the types ''number[]'' and ''0'' have no overlap.

    ../../../../../tmp/tmp0q3a47bf.ts(21,26): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2:\
    \ number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4:\
    \ number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6:\
    \ number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8:\
    \ number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10:\
    \ number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12:\
    \ number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14:\
    \ number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16:\
    \ number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18:\
    \ number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20:\
    \ number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22:\
    \ number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24:\
    \ number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26:\
    \ number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28:\
    \ number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30:\
    \ number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32:\
    \ number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34:\
    \ number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36:\
    \ number[] = [];\n  let paren_level_max_count_index37: number[] = [];\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxkm9m98k.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: string[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_index\
    \ = 0;\n    let paren_level_max_index2 = 0;\n    let paren_level_max_index3 =\
    \ 0;\n    let paren_level_max_index4 = 0;\n    let paren_level_max_index5 = 0;\n\
    \    let paren_level_max_index6 = 0;\n    let paren_level_max_index7 = 0;\n  \
    \  let paren_level_max_index8 = 0;\n    let paren_level_max_index9 = 0;\n    let\
    \ paren_level_max_index10 = 0;\n    let paren_level_max_index11 = 0;\n    let\
    \ paren_level_max_index12 = 0;\n    let paren_level_max_index13 = 0;\n    let\
    \ paren_level_max_index14 = 0;\n    let paren_level_max_index15 = 0;\n    let\
    \ paren_level_max_index16 = 0;\n    let paren_level_max_index17 = 0;\n    let\
    \ paren_level_max_index18 = 0;\n    let paren_level_max_index19 = 0;\n    let\
    \ paren_level_max_index20 = 0;\n    let paren_level_max_index21 = 0;\n    let\
    \ paren_level_max_index22 = 0;\n    let paren_level_max_index23 = 0;\n    let\
    \ paren_level_max_index24 = 0;\n    let paren_level_max_index25 = 0;\n    let\
    \ paren_level_max_index26 = 0;\n    let paren_level_max_index27 = 0;\n    let\
    \ paren_level_max_index28 = 0;\n    let paren_level_max_index29 = 0;\n    let\
    \ paren_level_max_index30 = 0;\n    let paren_level_max_index31 = 0;\n    let\
    \ paren_level_max_index32 = 0;\n    let paren_level_max_index33 = 0;\n    let\
    \ paren_level_max_index34 = 0;\n    let paren_level_max_index35 = 0;\n    let\
    \ paren_level_max_index36 = 0;\n    let paren_level_max_index37 = 0;\n    let\
    \ paren_level_max_index38 = 0;\n    let paren_level_max_index39 = 0;\n    let\
    \ paren_level_max_index40 = 0;\n    let paren_level_max_index41 = 0;\n    let\
    \ paren_level_max_index42 = 0;\n    let paren_level_max_index43 = 0;\n    let\
    \ paren_level_max_index44 = 0;\n    let paren_level_max_index45 = 0;\n    let\
    \ paren_level_max_index46 = 0;\n    let paren_level_max_index47 = 0;\n    let\
    \ paren_level_max_index48 = 0;\n    let paren_level_max_index49 = 0;\n    let\
    \ paren_level_max_index50 = 0;\n    let paren_level_max_index51 = 0;\n    let\
    \ paren_level_max_index52 = 0;\n    let paren_level_max_index53 = 0;\n    let\
    \ paren_level_max_index54 = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfkwlh93v.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7_h8aqgt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7_h8aqgt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n \
    \   }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzbcn80in.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2\
    \ = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4\
    \ = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6\
    \ = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8\
    \ = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10\
    \ = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12\
    \ = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14\
    \ = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16\
    \ = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18\
    \ = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20\
    \ = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22\
    \ = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24\
    \ = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26\
    \ = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28\
    \ = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30\
    \ = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32\
    \ = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34\
    \ = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36\
    \ = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38\
    \ = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40\
    \ = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42\
    \ = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44\
    \ = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46\
    \ = 0;\n  let paren_level_max_count_index47 = 0;\n  let paren_level_max_count_index48\
    \ = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb2bmprdy.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ groups.length - 1;\n  const levels = new Array<number>(max_level);\n  for (let\
    \ i = 0; i < max_level; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i <\
    \ groups.length; i++) {\n    const group = groups[i];\n    const level = levels[i];\n\
    \    if (group === '(') {\n      levels[level]++;\n    } else if (group === ')')\
    \ {\n      levels[level]--;\n    }\n  }\n  return levels.slice(0, max_level);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpn1z7ri_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpn1z7ri_7.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      if\
    \ (paren_level_count < paren_level_max) {\n        paren_level_count++;\n    \
    \    paren_level.push(paren_level_count);\n      }\n      paren_level.pop();\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqdafaezz.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqdafaezz.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797805
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1p483sii.ts(17,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797806
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n\
    \      if (paren_level_count === 0) {\n        paren_level_max_index = paren_level_max_index\
    \ + 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpabuuth88.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpabuuth88.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_paren_level = 0;\n  let paren_level_max_paren_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level = 0;\n  let\
    \ paren_level_max_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl22o4bvs.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797807
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level_count = 0;\n      paren_level.push(paren_level_max);\n    \
    \  paren_stack.splice(paren_stack.length - 1, 1);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  3,\n  6,\n  6,\n  6,\n  7,\n  10,\n  10,\n  11,\n  12,\n  12\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsvfxsler.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsvfxsler.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     2,\
    \  3,  3,  6,  6,\n     6,  7, 10, 10, 11,\n    12, 12\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n\
    \    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6q1bbk3q.ts(17,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n\
    \        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')')\
    \ {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return\
    \ levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc_g01csi.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n\
    \  let paren_level_max_value_count: number = 0;\n  let paren_level_max_value_max:\
    \ number = 0;\n  let paren_level_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value:\
    \ number = 0;\n  let paren_level_max_value_max_value_count: number = 0;\n  let\
    \ paren_level_max_value_max_value_max: number = 0;\n  let paren_level_max_value_max_value_max_index:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value: number = 0;\n\
    \  let paren_level_max_value_max_value_max_value_count: number = 0;\n  let paren_level_max_value_max_value_max_value_max:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_index: number\
    \ = 0;\n  let paren_level_max_value_max_value_max_value_max_value: number = 0;\n\
    \  let paren_level_max_value_max_value_max_value_max_value_count: number = 0;\n\
    \  let paren_level_max_value_max_value_max_value_max_value_max: number = 0;\n\
    \  let paren_level_max_value_max_value_max_value_max_value_max_index: number =\
    \ 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value: number\
    \ = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_count:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_index:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_count:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_index:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value_count:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max_index:\
    \ number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm7wanw5m.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max_count: number = 0;\n\
    \  let paren_level_max_level: number = 0;\n  let paren_level_max_level_length:\
    \ number = 0;\n  let paren_level_max_level_length_count: number = 0;\n  let paren_level_max_level_length_count2:\
    \ number = 0;\n  let paren_level_max_level_length_count3: number = 0;\n  let paren_level_max_level_length_count4:\
    \ number = 0;\n  let paren_level_max_level_length_count5: number = 0;\n  let paren_level_max_level_length_count6:\
    \ number = 0;\n  let paren_level_max_level_length_count7: number = 0;\n  let paren_level_max_level_length_count8:\
    \ number = 0;\n  let paren_level_max_level_length_count9: number = 0;\n  let paren_level_max_level_length_count10:\
    \ number = 0;\n  let paren_level_max_level_length_count11: number = 0;\n  let\
    \ paren_level_max_level_length_count12: number = 0;\n  let paren_level_max_level_length_count13:\
    \ number = 0;\n  let paren_level_max_level_length_count14: number = 0;\n  let\
    \ paren_level_max_level_length_count15: number = 0;\n  let paren_level_max_level_length_count16:\
    \ number = 0;\n  let paren_level_max_level_length_count17: number = 0;\n  let\
    \ paren_level_max_level_length_count18: number = 0;\n  let paren_level_max_level_length_count19:\
    \ number = 0;\n  let paren_level_max_level_length_count20: number = 0;\n  let\
    \ paren_level_max_level_length_count21: number = 0;\n  let paren_level_max_level_length_count22:\
    \ number = 0;\n  let paren_level_max_level_length_count23: number = 0;\n  let\
    \ paren_level_max_level_length_count24: number = 0;\n  let paren_level_max_level_length_count25:\
    \ number = 0;\n  let paren_level_max_level_length_count26: number = 0;\n  let\
    \ paren_level_max_level_length_count27: number = 0;\n  let paren_level_max_level_length_count28:\
    \ number = 0;\n  let paren_level_max_level_length_count29: number = 0;\n  let\
    \ paren_level_max_level_length_count30: number = 0;\n  let paren_level_max_level_length_count31:\
    \ number = 0;\n  let paren_level_max_level_length_count32: number = 0;\n  let\
    \ paren_level_max_level_length_count33: number = 0;\n  let paren_level_max_level_length_count34:\
    \ number = 0;\n  let paren_level_max_level_length_count35: number = 0;\n  let\
    \ paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbjuct42u.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797807
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzcmm46oq.js:25:12)\n    at Object.<anonymous> (/tmp/tmpzcmm46oq.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797807
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level_count\
    \ = Math.min(paren_level_count, paren_level_max);\n      paren_level[paren_level_count]\
    \ = i;\n      paren_stack.splice(paren_level_count, 1);\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  26,\n  25,\n\
    \  20\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpdu3v5a_c.js:30:12)\n    at Object.<anonymous> (/tmp/tmpdu3v5a_c.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 26, 25,\
    \ 20 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797807
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array<number>(max_level\
    \ + 1);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n\
    \    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n\
    \        levels[levels.length - 1]++;\n      } else if (group[j] === ')') {\n\
    \        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels.slice(0,\
    \ levels.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <10 empty\
    \ items>\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at\
    \ test (/tmp/tmpg6t29tvk.js:26:12)\n    at Object.<anonymous> (/tmp/tmpg6t29tvk.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <10 empty\
    \ items> ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \      paren_level_max--;\n    }\n    paren_level.push(paren_level_count);\n \
    \ }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpize7x53_.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpize7x53_.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0,\
    \ 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n\
    \      }\n      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdpcs9xj7.ts(25,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n\
    \      const max_level = paren_level[paren_level.length - 1];\n      paren_level.push(max_level\
    \ + 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbgyh_of6.ts(17,19): error TS2339: Property ''push''
    does not exist on type ''string''.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  let paren_level_index\
    \ = 0;\n  let paren_level_string = \"\";\n  let paren_level_char: string = \"\"\
    ;\n  let paren_level_char_length: number = 0;\n  let paren_level_char_length_index:\
    \ number = 0;\n  let paren_level_char_length_string: string = \"\";\n  let paren_level_char_length_char_length:\
    \ number = 0;\n  let paren_level_char_length_char_length_index: number = 0;\n\
    \  let paren_level_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_index: number\
    \ = 0;\n  let paren_level_char_length_char_length_char_length_string: string =\
    \ \"\";\n  let paren_level_char_length_char_length_char_length_char_length: number\
    \ = 0;\n  let paren_level_char_length_char_length_char_length_char_length_index:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_string:\
    \ string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_index:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_string:\
    \ string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_string:\
    \ string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_string:\
    \ string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_string:\
    \ string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length:\
    \ number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplbjdheor.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count.push(paren_level_count);\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_level_count = paren_level_count[paren_level_count];\n\
    \      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n      paren_stack.push(paren_string[i]);\n    } else if (paren_string[i]\
    \ === \" \") {\n      if (paren_stack.length > 0) {\n        const paren_level_count_to_add\
    \ = paren_level_count;\n        paren_level_count = paren_level_count[paren_level_count];\n\
    \        paren_level_count++;\n        paren_level.push(paren_level_count_to_add);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpktet59y6.ts(13,25): error TS2339: Property ''push''
    does not exist on type ''number''.

    '
  timestamp: 1659797807
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: number[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_level_count);\n            paren_level_count\
    \ += 1;\n        } else if (char === ')') {\n            paren_level_count -=\
    \ 1;\n            paren_level[paren_stack.pop()] = paren_level_count;\n      \
    \  }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0h3p3342.js:26:12)\n    at Object.<anonymous> (/tmp/tmp0h3p3342.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count.push(paren_level_count);\n    } else if (char === ')')\
    \ {\n      paren_level_count = paren_level_count[paren_level_count];\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3042s6em.ts(14,25): error TS2339: Property ''push''
    does not exist on type ''number''.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[]\
    \ = [];\n  let paren_level_max_index2: number[] = [];\n  let paren_level_max_index3:\
    \ number[] = [];\n  let paren_level_max_index4: number[] = [];\n  let paren_level_max_index5:\
    \ number[] = [];\n  let paren_level_max_index6: number[] = [];\n  let paren_level_max_index7:\
    \ number[] = [];\n  let paren_level_max_index8: number[] = [];\n  let paren_level_max_index9:\
    \ number[] = [];\n  let paren_level_max_index10: number[] = [];\n  let paren_level_max_index11:\
    \ number[] = [];\n  let paren_level_max_index12: number[] = [];\n  let paren_level_max_index13:\
    \ number[] = [];\n  let paren_level_max_index14: number[] = [];\n  let paren_level_max_index15:\
    \ number[] = [];\n  let paren_level_max_index16: number[] = [];\n  let paren_level_max_index17:\
    \ number[] = [];\n  let paren_level_max_index18: number[] = [];\n  let paren_level_max_index19:\
    \ number[] = [];\n  let paren_level_max_index20: number[] = [];\n  let paren_level_max_index21:\
    \ number[] = [];\n  let paren_level_max_index22: number[] = [];\n  let paren_level_max_index23:\
    \ number[] = [];\n  let paren_level_max_index24: number[] = [];\n  let paren_level_max_index25:\
    \ number[] = [];\n  let paren_level_max_index26: number[] = [];\n  let paren_level_max_index27:\
    \ number[] = [];\n  let paren_level_max_index28: number[] = [];\n  let paren_level_max_index29:\
    \ number[] = [];\n  let paren_level_max_index30: number[] = [];\n  let paren_level_max_index31:\
    \ number[] = [];\n  let paren_level_max_index32: number[] = [];\n  let paren_level_max_index33:\
    \ number[] = [];\n  let paren_level_max_index34: number[] = [];\n  let paren_level_max_index35:\
    \ number[] = [];\n  let paren_level_max_index36: number[] = [];\n  let paren_level_max_index37:\
    \ number[] = [];\n  let paren_level_max_index38: number[] = [];\n  let paren_level_max_index39:\
    \ number[] = [];\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxz8h2jsb.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797808
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp1c12wyua.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1c12wyua.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number;\n  let paren_level_max_index: number[] =\
    \ [];\n  let paren_level_max_index1: number[] = [];\n  let paren_level_max_index2:\
    \ number[] = [];\n  let paren_level_max_index3: number[] = [];\n  let paren_level_max_index4:\
    \ number[] = [];\n  let paren_level_max_index5: number[] = [];\n  let paren_level_max_index6:\
    \ number[] = [];\n  let paren_level_max_index7: number[] = [];\n  let paren_level_max_index8:\
    \ number[] = [];\n  let paren_level_max_index9: number[] = [];\n  let paren_level_max_index10:\
    \ number[] = [];\n  let paren_level_max_index11: number[] = [];\n  let paren_level_max_index12:\
    \ number[] = [];\n  let paren_level_max_index13: number[] = [];\n  let paren_level_max_index14:\
    \ number[] = [];\n  let paren_level_max_index15: number[] = [];\n  let paren_level_max_index16:\
    \ number[] = [];\n  let paren_level_max_index17: number[] = [];\n  let paren_level_max_index18:\
    \ number[] = [];\n  let paren_level_max_index19: number[] = [];\n  let paren_level_max_index20:\
    \ number[] = [];\n  let paren_level_max_index21: number[] = [];\n  let paren_level_max_index22:\
    \ number[] = [];\n  let paren_level_max_index23: number[] = [];\n  let paren_level_max_index24:\
    \ number[] = [];\n  let paren_level_max_index25: number[] = [];\n  let paren_level_max_index26:\
    \ number[] = [];\n  let paren_level_max_index27: number[] = [];\n  let paren_level_max_index28:\
    \ number[] = [];\n  let paren_level_max_index29: number[] = [];\n  let paren_level_max_index30:\
    \ number[] = [];\n  let paren_level_max_index31: number[] = [];\n  let paren_level_max_index32:\
    \ number[] = [];\n  let paren_level_max_index33: number[] = [];\n  let paren_level_max_index34:\
    \ number[] = [];\n  let paren_level_max_index35: number[] = [];\n  let paren_level_max_index36:\
    \ number[] = [];\n  let paren_level_max_index37: number[] = [];\n  let paren_level_max_index38:\
    \ number[] = [];\n  let paren_level_max_index\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmply8zwrsr.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797807
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_count: number;\n \
    \ let paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n\
    \  let paren_level_max_string_length: number;\n  let paren_level_max_string_position:\
    \ number;\n  let paren_level_max_string_position_index: number;\n  let paren_level_max_string_position_length:\
    \ number;\n  let paren_level_max_string_position_position_length: number;\n  let\
    \ paren_level_max_string_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length:\
    \ number;\n  let paren_level_max_string_position_position_position_position_position_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4eud8d53.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797807
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if\
    \ (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp_2zr5kyo.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_2zr5kyo.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n      if (paren_count ===\
    \ 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpj21ocztv.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj21ocztv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ = Math.max(paren_stack.pop(), paren_level_count);\n    }\n    paren_level.push(paren_level_count);\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  5,\n  6,\n  6,\n  6,\n  6,\n  6,\n  7,\n\
    \  7,\n  7,\n  8,\n  9,\n  10,\n  10,\n  10,\n  11,\n  11,\n  12,\n  12,\n  12\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa3ooqase.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa3ooqase.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,\
    \  2,  2,  3,  3,  3,  3,  4,\n     5,  6,  6,  6,  6,  6,  7,  7,\n     7,  8,\
    \  9, 10, 10, 10, 11, 11,\n    12, 12, 12\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \        paren_level_max = Math.max(...paren_level);\n      }\n    }\n  }\n  return\
    \ paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeypb7atp.ts(25,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659797808
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n\
    \      paren_level.push(paren_level_count);\n      if (paren_level_count > paren_level_max)\
    \ {\n        paren_level_max = paren_level_count;\n      }\n      paren_stack.pop();\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpev0w42k1.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpev0w42k1.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,\
    \  2, 3, 4,  5,\n     6,  7, 8, 9, 10,\n    11, 12\n  ],\n  expected: [ 2, 3,\
    \ 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      const current_level = paren_stack.pop();\n      const current_paren_count\
    \ = paren_stack[paren_stack.length - 1];\n      if (current_level > paren_level[paren_stack.length\
    \ - 1]) {\n        paren_level[paren_stack.length - 1] = current_level;\n    \
    \  }\n      paren_count = current_paren_count;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqv4i1ozy.ts(13,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpqv4i1ozy.ts(19,11): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpqv4i1ozy.ts(20,9): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpqv4i1ozy.ts(22,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp1c12wyua.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1c12wyua.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[]\
    \ = [];\n  const paren_level_max_count_index: number[] = [];\n  const paren_level_max_count_index2:\
    \ number[] = [];\n  const paren_level_max_count_index3: number[] = [];\n  const\
    \ paren_level_max_count_index4: number[] = [];\n  const paren_level_max_count_index5:\
    \ number[] = [];\n  const paren_level_max_count_index6: number[] = [];\n  const\
    \ paren_level_max_count_index7: number[] = [];\n  const paren_level_max_count_index8:\
    \ number[] = [];\n  const paren_level_max_count_index9: number[] = [];\n  const\
    \ paren_level_max_count_index10: number[] = [];\n  const paren_level_max_count_index11:\
    \ number[] = [];\n  const paren_level_max_count_index12: number[] = [];\n  const\
    \ paren_level_max_count_index13: number[] = [];\n  const paren_level_max_count_index14:\
    \ number[] = [];\n  const paren_level_max_count_index15: number[] = [];\n  const\
    \ paren_level_max_count_index16: number[] = [];\n  const paren_level_max_count_index17:\
    \ number[] = [];\n  const paren_level_max_count_index18: number[] = [];\n  const\
    \ paren_level_max_count_index19: number[] = [];\n  const paren_level_max_count_index20:\
    \ number[] = [];\n  const paren_level_max_count_index21: number[] = [];\n  const\
    \ paren_level_max_count_index22: number[] = [];\n  const paren_level_max_count_index23:\
    \ number[] = [];\n  const paren_level_max_count_index24: number[] = [];\n  const\
    \ paren_level_max_count_index25: number[] = [];\n  const paren_level_max_count_index26:\
    \ number[] = [];\n  const paren_level_max_count_index27: number[] = [];\n  const\
    \ paren_level_max_count_index28: number[] = [];\n  const paren_level_max_count_index29:\
    \ number[] = [];\n  const paren_level_max_count_index30: number[] = [];\n  const\
    \ paren_level_max_count_index31: number[] = [];\n  const paren_level_max_count_index32:\
    \ number[] = [];\n  const paren_level_max_count_index33: number[] = [];\n  const\
    \ paren_level_max_count_index34: number[] = [];\n  const paren_level_max_count_index35:\
    \ number[] = [];\n  const paren_level_max_count_index36: number[] = [];\n  const\
    \ paren_level_max_count_index37: number[] = [];\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpapluasc1.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659797809
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n\
    \    } else if (char === ' ') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else {\n      paren_count = paren_stack.pop();\n    }\n    paren_level.push(paren_count);\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf65hiwia.ts(13,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpf65hiwia.ts(16,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpf65hiwia.ts(18,24): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpf65hiwia.ts(21,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n\
    \      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max)\
    \ ? paren_level_count : paren_level_max;\n    }\n    paren_level_count += 1;\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplk_ctb4s.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmplk_ctb4s.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwiz44jt5.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwiz44jt5.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797797
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_depth = 0;\n  let paren_level\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_depth++;\n\
    \    } else if (char === ')') {\n      paren_depth--;\n      if (paren_depth ===\
    \ 0) {\n        paren_stack.push(paren_level);\n      }\n    } else if (char ===\
    \ ' ') {\n      paren_level++;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpr3akjs6w.ts(13,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpr3akjs6w.ts(18,26):\
    \ error TS2345: Argument of type 'number' is not assignable to parameter of type\
    \ 'string'.\n../../../../../tmp/tmpr3akjs6w.ts(24,3): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ < 0) {\n        throw new Error(`Unbalanced parenthesis at ${i}`);\n      }\n\
    \      if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n \
    \     paren_level[paren_level_max] = paren_level_count;\n      paren_stack.push(paren_string[i]);\n\
    \    } else {\n      if (paren_level_count === 0) {\n        throw new Error(`Unbalanced\
    \ parenthesis at ${i}`);\n      }\n      paren_level[paren_level_max] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmxfmys2r.js:30\n                throw new Error(\"Unbalanced parenthesis\
    \ at \" + i);\n                ^\n\nError: Unbalanced parenthesis at 6\n    at\
    \ parse_nested_parens (/tmp/tmpmxfmys2r.js:30:23)\n    at test (/tmp/tmpmxfmys2r.js:40:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmxfmys2r.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const level = paren_stack.pop();\n    \
    \  paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5ggmg74y.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5ggmg74y.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n\
    \      const paren_level_diff = paren_level.length - paren_level[paren_level.length\
    \ - 1];\n      paren_level.push(paren_level[paren_level.length - 1] + paren_level_diff);\n\
    \    } else {\n      paren_level.push(0);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3vig3b_6.ts(16,53): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    ../../../../../tmp/tmp3vig3b_6.ts(17,19): error TS2339: Property ''push'' does
    not exist on type ''string''.

    '
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp1c12wyua.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1c12wyua.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797808
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n\
    \      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n       \
    \ paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7vimqhdf.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7vimqhdf.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n    } else if (char === ' ') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level_count = paren_stack.pop();\n    }\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp78hecndk.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp78hecndk.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const max_level = Math.max(...groups.map(g\
    \ => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i\
    \ = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j\
    \ = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[j]\
    \ += 1;\n      } else if (group[j] === \")\") {\n        levels[j] -= 1;\n   \
    \   }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_8gexkl_.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const current_level = paren_level.pop();\n \
    \     const current_level_length = paren_level.length - 1;\n      if (current_level_length\
    \ >= 0) {\n        paren_level[current_level_length] = current_level;\n      }\n\
    \      paren_level_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpups1i9s6.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpups1i9s6.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfmup7x7s.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfmup7x7s.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ groups.length - 1;\n  const levels = new Array<number>(max_level);\n  for (let\
    \ i = 0; i < max_level; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i <\
    \ groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j <\
    \ group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[i] +=\
    \ 1;\n      } else if (group[j] === \")\") {\n        levels[i] -= 1;\n      }\n\
    \    }\n  }\n  return levels.slice(0, max_level);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp_vq0ge58.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_vq0ge58.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659797809
