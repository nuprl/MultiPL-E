language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(char);\n      paren_level_max_count\
    \ = Math.max(paren_level_max_count, paren_level_count);\n      paren_level_count\
    \ = 0;\n      paren_level_max_count_index++;\n    } else if (char === ')') {\n\
    \      paren_level_count++;\n      paren_level_max_count_index--;\n      if (paren_level_max_count_index\
    \ < 0) {\n        paren_level_max_count_index = paren_level_max_count - 1;\n \
    \     }\n      paren_level[paren_level_max_count_index] = paren_level_count;\n\
    \      paren_stack.splice(paren_level_max_count_index, 1);\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpcu6n7e3_.js:35:12)\n    at Object.<anonymous> (/tmp/tmpcu6n7e3_.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 1\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count +=\
    \ 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()]\
    \ = paren_level_count;\n      if (paren_level_count === 0) {\n        paren_level_max--;\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmply1kyrpr.js:31:12)\n    at Object.<anonymous> (/tmp/tmply1kyrpr.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpp10_5elq.js:29:12)\n    at Object.<anonymous> (/tmp/tmpp10_5elq.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738606
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n\
    \  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_char:\
    \ number = 0;\n  let paren_level_max_value_char_count: number = 0;\n  let paren_level_max_value_char_length:\
    \ number = 0;\n  let paren_level_max_value_char_index: number = 0;\n  let paren_level_max_value_char_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_index: number = 0;\n  let\
    \ paren_level_max_value_char_value_value: number = 0;\n  let paren_level_max_value_char_value_value_index:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_index: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptbyy1bsq.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[]\
    \ = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9v8bnopf.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738608
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6_igecbk.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6_igecbk.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_level_max = Math.max(paren_level_max,\
    \ paren_stack[paren_level_max_index]);\n        paren_level_max_index = paren_level_max_index\
    \ + 1;\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpv2ohr78d.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv2ohr78d.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6fu3c68y.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6fu3c68y.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738618
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  const paren_level_max_index = 0;\n\
    \  let paren_level_max_depth = 0;\n  let paren_level_max_depth_index = 0;\n  let\
    \ paren_level_max_depth_index2 = 0;\n  let paren_level_max_depth_index3 = 0;\n\
    \  let paren_level_max_depth_index4 = 0;\n  let paren_level_max_depth_index5 =\
    \ 0;\n  let paren_level_max_depth_index6 = 0;\n  let paren_level_max_depth_index7\
    \ = 0;\n  let paren_level_max_depth_index8 = 0;\n  let paren_level_max_depth_index9\
    \ = 0;\n  let paren_level_max_depth_index10 = 0;\n  let paren_level_max_depth_index11\
    \ = 0;\n  let paren_level_max_depth_index12 = 0;\n  let paren_level_max_depth_index13\
    \ = 0;\n  let paren_level_max_depth_index14 = 0;\n  let paren_level_max_depth_index15\
    \ = 0;\n  let paren_level_max_depth_index16 = 0;\n  let paren_level_max_depth_index17\
    \ = 0;\n  let paren_level_max_depth_index18 = 0;\n  let paren_level_max_depth_index19\
    \ = 0;\n  let paren_level_max_depth_index20 = 0;\n  let paren_level_max_depth_index21\
    \ = 0;\n  let paren_level_max_depth_index22 = 0;\n  let paren_level_max_depth_index23\
    \ = 0;\n  let paren_level_max_depth_index24 = 0;\n  let paren_level_max_depth_index25\
    \ = 0;\n  let paren_level_max_depth_index26 = 0;\n  let paren_level_max_depth_index27\
    \ = 0;\n  let paren_level_max_depth_index28 = 0;\n  let paren_level_max_depth_index29\
    \ = 0;\n  let paren_level_max_depth_index30 = 0;\n  let paren_level_max_depth_index31\
    \ = 0;\n  let paren_level_max_depth_index32 = 0;\n  let paren_level_max_depth_index33\
    \ = 0;\n  let paren_level_max_depth_index34 = 0;\n  let paren_level_max_depth_index35\
    \ = 0;\n  let paren_level_max_depth_index36 = 0;\n  let paren_level_max_depth_index37\
    \ = 0;\n  let paren_level_max_depth_index38 = 0;\n  let paren_level_max_depth_index39\
    \ = 0;\n  let paren_level_max_depth_index40 = 0;\n  let paren_level_max_depth_index41\
    \ = 1;\n  let paren_level_max_depth_index42 = 1;\n  let paren_level_max_depth_index43\
    \ = 1;\n  let paren_level_max_depth_index44 = 1;\n  let paren_level_max_depth_index45\
    \ = 1;\n  let paren_level_max_depth_index46 = 1;\n  let paren_level_max_depth_index47\
    \ = 1;\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9d2adk17.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: string[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n\
    \            paren_stack.push(paren_string[i]);\n            paren_level.push(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (char === ')') {\n      \
    \      paren_level_count--;\n            paren_level.pop();\n            paren_level.push(paren_level_count);\n\
    \        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp221lrl7x.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp221lrl7x.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === \")\") {\n      const paren_level_index =\
    \ paren_stack.pop();\n      const paren_level = paren_level[paren_level_index];\n\
    \      paren_level.push(paren_level + 1);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpud6l12e8.ts(15,27): error TS2448: Block-scoped variable
    ''paren_level'' used before its declaration.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp7x53sfx5.js:28:12)\n    at Object.<anonymous> (/tmp/tmp7x53sfx5.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpuqadftuw.js:28:12)\n    at Object.<anonymous> (/tmp/tmpuqadftuw.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738608
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const last_paren_level = paren_level.pop();\n\
    \      if (paren_stack.length > 0) {\n        const last_paren_level_char = paren_stack.pop();\n\
    \        if (last_paren_level_char === '(') {\n          paren_level[last_paren_level]\
    \ = paren_level[last_paren_level - 1];\n        }\n      }\n      paren_level_count--;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined: undefined\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n\
    \  3\n]\n    at test (/tmp/tmpqpg98hvh.js:33:12)\n    at Object.<anonymous> (/tmp/tmpqpg98hvh.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined: undefined ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let\
    \ paren_level = 0;\n  let paren_stack_count = 0;\n  let paren_stack = [];\n  let\
    \ paren_stack_string = \"\";\n  let paren_stack_string_count = 0;\n  let paren_stack_string\
    \ = \"\";\n  let paren_stack_string_count = 0;\n  let paren_level_string = \"\"\
    ;\n  let paren_level_string_count = 0;\n  let paren_level_string = \"\";\n  let\
    \ paren_level_string_count = 0;\n  let paren_level_count_string = \"\";\n  let\
    \ paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n\
    \  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\
    \";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string\
    \ = \"\";\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk5vf6hp8.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_level_count);\n     \
    \ paren_level_count = 0;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n\
    \      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max\
    \ = 0;\n    } else {\n      paren_level_count = 0;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n \
    \ 1,\n  3\n]\n    at test (/tmp/tmp7tywrk9v.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7tywrk9v.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp7_h8aqgt.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7_h8aqgt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738603
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_depth: number[] = [];\n  let paren_level_max_level:\
    \ number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count:\
    \ number[] = [];\n  let paren_level_max_level_length_depth: number[] = [];\n \
    \ let paren_level_max_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level:\
    \ number[] = [];\n  let paren_level_max_level_length_level_count: number[] = [];\n\
    \  let paren_level_max_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth_count: number[]\
    \ = [];\n  let paren_level_max_level_length_level_level_length: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_level: number[] = [];\n  let paren_level_max_level_length_level_length_depth:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth_count: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_level_length: number[]\
    \ = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_level_length: number[] = [];\n\
    \  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_level_length: number[] = [];\n  let\
    \ paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[]\
    \ = [];\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp84p2gd6o.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738661
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max_count\
    \ = Math.max(paren_level_max_count, paren_stack.length);\n      paren_level_count\
    \ = 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count,\
    \ paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnfq_8b08.ts(22,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659738661
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppruinl04.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmppruinl04.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738661
