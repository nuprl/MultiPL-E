name: HumanEval_79_decimal_to_binary
language: ts
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"\
  db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"\
  db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"
completions: ["  let binary = '';\n  while (decimal > 0) {\n    binary += decimal\
    \ % 2 ? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db'\
    \ + binary + 'db';\n}\n", "  let binary: string = '';\n  let decimalString: string\
    \ = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n\
    \    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n   \
    \   binary += '0';\n    }\n  }\n  return binary;\n}\n", "  let binary = '';\n\
    \  while (decimal > 0) {\n    binary += decimal_to_binary(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  return binary;\n}\n", "  let binary: string = \"\";\n  while (decimal\
    \ > 0) {\n    binary += \"0\";\n    decimal -= 1;\n  }\n  while (decimal < 0)\
    \ {\n    binary += \"1\";\n    decimal += 1;\n  }\n  return binary;\n}\n", " \
    \ let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0' ? '1'\
    \ : '0';\n    decimal = decimal - 1;\n  }\n  return binary + 'db' + binary;\n\
    }\n", "  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'\
    \ ? '1' : '0';\n    decimal = decimal % 2;\n  }\n  return 'db' + binary + binary;\n\
    }\n", "  let binary = '';\n  let decimalString = decimal.toString();\n  for (let\
    \ i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) >=\
    \ '0' && decimalString.charAt(i) <= '9') {\n      binary += decimalString.charAt(i);\n\
    \    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n}\n", "  let\
    \ binary = '';\n  while (decimal > 0) {\n    binary += decimalToBinary(decimal\
    \ % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + 'db';\n\
    }\n", "  const binary: string = decimal.toString(2);\n  return binary.padStart(decimal.toString().length,\
    \ '0');\n}\n", "  const binary: string = decimal.toString(2);\n  return binary.padStart(decimal.toString().length,\
    \ '0');\n}\n", "  let binary = '';\n  while (decimal > 0) {\n    binary += decimalToBinary[decimal\
    \ % 2];\n    decimal /= 2;\n  }\n  return binary;\n}\n", "  let binary: string\
    \ = \"\";\n  let remainder: number = decimal;\n  let decimalString: string = String(decimal);\n\
    \  while (decimal > 0) {\n    decimalString = decimalString.substr(0, decimalString.length\
    \ - 1);\n    binary = binary + decimalString + \"b\";\n    decimal = decimal -\
    \ 1;\n  }\n  binary = binary + decimalString;\n  return binary;\n}\n", "  let\
    \ binary: string = \"\";\n  let decimalToBinary: number = decimal;\n  while (decimalToBinary\
    \ > 0) {\n    binary = binary + \"1\";\n    decimalToBinary = decimalToBinary\
    \ - 1;\n  }\n  binary = binary + \"0\";\n  return binary;\n}\n", "  const binary\
    \ = [];\n  let decimalString = '';\n  while (decimal > 0) {\n    decimalString\
    \ = decimal.toString(2);\n    binary.push(decimalString.padStart(2, '0'));\n \
    \   decimal -= 1;\n  }\n  return binary.join('');\n}\n", "  let binary: string\
    \ = \"\";\n  while (decimal > 0) {\n    binary += \"1\";\n    decimal -= 1;\n\
    \  }\n  while (decimal == 0) {\n    binary += \"0\";\n    decimal -= 1;\n  }\n\
    \  return binary;\n}\n", "  const binary = [];\n  let remainder = decimal;\n \
    \ let digit = 0;\n  while (decimal !== 0) {\n    digit = remainder % 2;\n    remainder\
    \ = remainder / 2;\n    binary.push(digit);\n  }\n  return binary.reverse().join('');\n\
    }\n", "  let binary = '';\n  let decimalString = decimal.toString();\n  for (let\
    \ i = 0; i < decimalString.length; i++) {\n    binary += decimalString[i] == '0'\
    \ ? '0' : '1';\n  }\n  return 'db' + binary + 'db';\n}\n", "  const binary = [];\n\
    \  let decimalString = '';\n  while (decimal > 0) {\n    decimalString += decimal%2\
    \ === 0 ? '0' : '1';\n    decimal = Math.floor(decimal/2);\n  }\n  binary.push(decimalString);\n\
    \  return binary.join('');\n}\n", "  let binary: string = \"\";\n  let decimalToBinary:\
    \ number = decimal;\n  while (decimalToBinary > 0) {\n    binary += decimalToBinary\
    \ % 2;\n    decimalToBinary = Math.floor(decimalToBinary / 2);\n  }\n  return\
    \ binary;\n}\n", "  const binary = decimal.toString(2);\n  return binary.padStart(decimal.toString().length,\
    \ '0');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
