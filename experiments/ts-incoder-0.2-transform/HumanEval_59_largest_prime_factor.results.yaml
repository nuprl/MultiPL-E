language: ts
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpupm76kv9.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpupm76kv9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
    \ (isPrime) {\n    factors.push(1);\n  }\n  return factors[factors.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpe0tzesr7.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe0tzesr7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / 2; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp5ni3bsom.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5ni3bsom.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = n;\n    while (p % i === 0) {\n        p /= i;\n        i++;\n    }\n\
    \    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpb5gj5vn3.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb5gj5vn3.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738975
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpsxh_bv5_.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsxh_bv5_.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  let i: number;\n  for (i = 2; i <= n;\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  if (factors.length === 1) {\n    return factors[0];\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpg881bdwk.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg881bdwk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmhoyyhlo.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhoyyhlo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeh3r___m.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeh3r___m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? factors[factors.length -\
    \ 1] : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738975
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = 2;\n    let q = 2;\n    while (i <= n / p) {\n        if (n % i == 0)\
    \ {\n            q = i;\n        }\n        i += p;\n        p = q;\n    }\n \
    \   return q;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpunzco6i8.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpunzco6i8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let factor = 2;\n    while (i < n && n % i == 0) {\n        i += 1;\n      \
    \  factor *= i;\n    }\n    return factor;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp5a52qf7u.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5a52qf7u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  if (isPrime) {\n    factors.push(1);\n  }\n  return Math.max(...factors);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6s_n7wtc.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6s_n7wtc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvcfnbde3.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvcfnbde3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
    \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n\
    \      maxFactor = factors[i];\n      maxFactorIndex = i;\n    }\n  }\n  return\
    \ factors[maxFactorIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvlf0uvex.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvlf0uvex.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805485
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf35kmuv_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf35kmuv_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8at3ur99.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8at3ur99.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let i: number;\n  for (i = 2; i <= n; i += 1) {\n    if (n % i === 0)\
    \ {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvums4zmm.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvums4zmm.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeh3r___m.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeh3r___m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? factors[factors.length - 1] : 1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805482
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1)\
    \ {\n      maxFactor = Math.max(maxFactor, i);\n    }\n  }\n  if (n > 1) {\n \
    \   factors.push(1);\n    maxFactor = Math.max(maxFactor, n);\n  }\n  return maxFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp4d83z35r.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4d83z35r.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1)\
    \ {\n      maxFactor = Math.max(maxFactor, i);\n    }\n  }\n  if (n > 1) {\n \
    \   for (let i = factors.length - 1; i >= 0; i--) {\n      if (factors[i] > maxFactor)\
    \ {\n        factors.splice(i, 1);\n      }\n    }\n  }\n  return factors.length\
    \ ? factors[0] : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8fpe9sg6.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8fpe9sg6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8at3ur99.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8at3ur99.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  if\
    \ (n > 1) {\n    for (let i = factors.length - 1; i >= 0; i--) {\n      if (factors[i]\
    \ > maxFactor) {\n        maxFactor = factors[i];\n      }\n    }\n  }\n  return\
    \ maxFactor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp__m5688y.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp__m5688y.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = i; j <= n; j++) {\n        if (n % j === 0) {\n      \
    \    isPrime = false;\n          break;\n        }\n      }\n    }\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpxxn_7f32.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxxn_7f32.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n       \
    \   isPrime = false;\n          break;\n        }\n      }\n    }\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_ka0utsu.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_ka0utsu.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    isPrime = n % i === 0;\n  }\n  if (isPrime)\
    \ {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_4ouucsg.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_4ouucsg.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n       \
    \   isPrime = false;\n          break;\n        }\n      }\n      if (isPrime)\
    \ {\n        factors.push(i);\n      }\n    }\n  }\n  return factors.length ?\
    \ Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpfdpesrgz.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfdpesrgz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805485
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpupm76kv9.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpupm76kv9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n      }\n    }\n  }\n  if (isPrime)\
    \ {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpzmo46833.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzmo46833.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805480
- exit_code: -5
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  let factor: number\
    \ = 0;\n  while (n > 1) {\n    factors.push(n % maxFactor);\n    maxFactor = n\
    \ / maxFactor;\n    maxFactorIndex++;\n  }\n  for (let i = maxFactorIndex - 1;\
    \ i >= 0; i--) {\n    factor = factors[i];\n    if (factor > 1 && factor < maxFactor)\
    \ {\n      break;\n    }\n  }\n  return factor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc81fcce30\n 1: 0x2b7999ec9727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b799aa5e28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b799a398f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b799a52a760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b799a5320cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b799a71c7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b799a07b7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i <= n && n % i == 0) {\n    i++;\n  }\n  while (i <= n) {\n\
    \    if (n % i == 0) {\n      p = i;\n    }\n    i += 2;\n  }\n  return p;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp3juiiico.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3juiiico.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf35kmuv_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf35kmuv_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmppo2tnf8e.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppo2tnf8e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    isPrime = !isPrime;\n  }\n  if (isPrime) {\n    factors.push(n);\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdtfmxkjf.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdtfmxkjf.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i\
    \ < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n        maxFactor\
    \ = i;\n      }\n      i++;\n    }\n    n--;\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpoz4yz7j2.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoz4yz7j2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2\n  let factor:\
    \ number\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i\n      break\n\
    \    }\n    i += 1\n  }\n  return factor\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpg0dg9fdn.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg0dg9fdn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805485
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i == 0) {\n      p = i;\n\
    \      break;\n    }\n    i += 1;\n  }\n  return p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpwmoi1cpi.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwmoi1cpi.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805485
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n    factor *= i;\n\
    \  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf06imtcf.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf06imtcf.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: -1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i\
    \ < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n        maxFactor\
    \ = i;\n      }\n      i += 1;\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805503
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i <= n && n % i == 0) {\n    i += p;\n    p = p << 1;\n  }\n\
    \  return p > n ? n : p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpphjwhwyr.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpphjwhwyr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n     \
    \   isPrime = false;\n      }\n    }\n    if (isPrime) {\n      factors.push(i);\n\
    \    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpuc_6sd_v.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuc_6sd_v.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    isPrime = !isPrime;\n  }\n  if (isPrime) {\n    factors.push(n);\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdtfmxkjf.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdtfmxkjf.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = 2;\n    while (i <= n && n % i == 0) {\n        i++;\n        p++;\n\
    \    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_y7q0_s2.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_y7q0_s2.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805480
- exit_code: -1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i\
    \ < maxFactor) {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n\
    \      i += 1;\n    }\n    maxFactor = ~~(n / factors[factors.length - 1]);\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805541
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpupm76kv9.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpupm76kv9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf35kmuv_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf35kmuv_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    if\
    \ (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp5fwio8k_.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5fwio8k_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (n % i == 0) {\n      \
    \  isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n    \
    \  factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp429mcrpi.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp429mcrpi.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805480
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
    \ (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpucxa0jej.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpucxa0jej.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  if (factors.length === 0) {\n    return 1;\n  }\n  return\
    \ Math.max(...factors);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp4yam02re.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4yam02re.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor: number = n;\n  while (i < n && n % i == 0) {\n    i += 1;\n    factor\
    \ *= i;\n  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpczyxwt2l.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpczyxwt2l.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (isPrime && n % i !== 0) {\n      isPrime = false;\n    }\n\
    \  }\n  if (isPrime) {\n    factors.push(1);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpocjub2x9.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpocjub2x9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeh3r___m.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeh3r___m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n  \
    \    n = n / i;\n    }\n  }\n  if (n > 1) {\n    for (let i = factors.length -\
    \ 1; i >= 0; i--) {\n      if (factors[i] > maxFactor) {\n        maxFactor =\
    \ factors[i];\n        maxFactorIndex = i;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp83ve3q0o.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp83ve3q0o.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n      }\n    }\n  }\n  if (isPrime)\
    \ {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpzmo46833.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzmo46833.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805480
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp54y01spc.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp54y01spc.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmps99xujpj.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps99xujpj.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805526
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  if (factors.length === 0) {\n    return 1;\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp5n1mi726.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5n1mi726.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n  \
    \    n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  for (let\
    \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] === maxFactor) {\n\
    \      maxFactorIndex = i;\n      break;\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcg9fv0nh.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcg9fv0nh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpyzfy2i4d.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyzfy2i4d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpprte26h4.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpprte26h4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8at3ur99.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8at3ur99.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n  \
    \    factor = i;\n    } else {\n      i++;\n    }\n  }\n  return factor;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbvoo3kvb.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbvoo3kvb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i <= n && n % i == 0) {\n    i++;\n  }\n  while (i <= n) {\n\
    \    if (n % i == 0) {\n      p = i;\n    }\n    i += 2;\n  }\n  return p;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp3juiiico.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3juiiico.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpyzfy2i4d.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyzfy2i4d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  for (let i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] >\
    \ maxFactor) {\n      maxFactor = factors[i];\n    }\n  }\n  return maxFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp1he2zdni.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1he2zdni.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n      isPrime = false;\n    } else {\n      if (n % i !== 0) {\n       \
    \ isPrime = true;\n      }\n    }\n  }\n  if (isPrime) {\n    factors.push(1);\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpefpr3b4n.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpefpr3b4n.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n            while (n % i === 0) {\n               \
    \ n /= i;\n            }\n        }\n    }\n    return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    if\
    \ (isPrime && n % i !== 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime)\
    \ {\n    return factors[factors.length - 1];\n  }\n  return 1;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_3x02bvz.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_3x02bvz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? factors[factors.length -\
    \ 1] : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738975
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: -1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i\
    \ < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n        maxFactor\
    \ = i;\n      }\n      i += 1;\n    }\n  }\n  if (factors.length == 0) {\n   \
    \ return 1;\n  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805544
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n      }\n    }\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpfr153_9q.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfr153_9q.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738975
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    if\
    \ (!isPrime) {\n      for (var j = factors.length - 1; j >= 0; j--) {\n      \
    \  if (n % factors[j] === 0) {\n          isPrime = false;\n          break;\n\
    \        }\n      }\n    }\n  }\n  return factors.length ? Math.max.apply(null,\
    \ factors) : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_py_2rce.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_py_2rce.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = false;\n    for (let j = 0; j < factors.length; j++) {\n      if (n % factors[j]\
    \ === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? factors[factors.length\
    \ - 1] : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphlgn5v5a.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphlgn5v5a.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n \
    \           factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
    \ (isPrime) {\n    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp3mwwagjj.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3mwwagjj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    if\
    \ (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    factors.push(1);\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpaicrxlos.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaicrxlos.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor: number = n;\n  while (i < n) {\n    if (n % i == 0) {\n      factor\
    \ = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp08ngk01m.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp08ngk01m.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805480
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = i * i; j < n; j += i) {\n\
    \      isPrime = false;\n    }\n  }\n  return factors[factors.length - 1];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpezsx0tdc.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpezsx0tdc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i <= n && n % i == 0) {\n    i++;\n    p *= i;\n  }\n  return\
    \ p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpve22g_1s.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpve22g_1s.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let i: number = 0;\n  while (i < n) {\n    if (n % i == 0) {\n     \
    \ factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmplf9a5qoa.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplf9a5qoa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  factors.push(n);\n  while\
    \ (n > 1) {\n    maxFactor = Math.max(maxFactor, factors.length);\n    for (let\
    \ i = factors.length - 1; i >= 0; i--) {\n      if (factors[i] > n) {\n      \
    \  factors.splice(i, 1);\n      } else {\n        break;\n      }\n    }\n   \
    \ n--;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpraegz2p5.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpraegz2p5.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n \
    \     if (n % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime)\
    \ {\n      factors.push(i);\n      if (i > maxFactor) {\n        maxFactor = i;\n\
    \        maxFactorIndex = factors.length - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpzgwq1jwy.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzgwq1jwy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: -1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (maxFactor > 1) {\n    let i = 2;\n   \
    \ while (i < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
    \        maxFactor = i;\n      }\n      i += 1;\n    }\n  }\n  return factors.length\
    \ ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805544
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
    \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n\
    \      maxFactor = factors[i];\n      maxFactorIndex = i;\n    }\n  }\n  return\
    \ factors[maxFactorIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvlf0uvex.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvlf0uvex.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805485
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  if (i == n) {\n    return i;\n\
    \  }\n  return n + largest_prime_factor(n / i);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphjjs6he6.js:7\n    var i = 2;\n            ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at largest_prime_factor (/tmp/tmphjjs6he6.js:7:13)\n\
    \    at largest_prime_factor (/tmp/tmphjjs6he6.js:14:16)\n    at largest_prime_factor\
    \ (/tmp/tmphjjs6he6.js:14:16)\n    at largest_prime_factor (/tmp/tmphjjs6he6.js:14:16)\n\
    \    at largest_prime_factor (/tmp/tmphjjs6he6.js:14:16)\n    at largest_prime_factor\
    \ (/tmp/tmphjjs6he6.js:14:16)\n    at largest_prime_factor (/tmp/tmphjjs6he6.js:14:16)\n\
    \    at largest_prime_factor (/tmp/tmphjjs6he6.js:14:16)\n    at largest_prime_factor\
    \ (/tmp/tmphjjs6he6.js:14:16)\n    at largest_prime_factor (/tmp/tmphjjs6he6.js:14:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  for (let i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] >\
    \ maxFactor) {\n      maxFactor = factors[i];\n    }\n  }\n  return maxFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp4hn3bmfd.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4hn3bmfd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (n\
    \ % i == 0) {\n      factors.push(i);\n      isPrime = false;\n    }\n  }\n  if\
    \ (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp15j0k7ux.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp15j0k7ux.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805531
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime && n % i === 0) {\n      factors.push(i);\n    }\n    if (!isPrime\
    \ && n % i !== 0) {\n      isPrime = true;\n    }\n  }\n  if (isPrime) {\n   \
    \ return factors[factors.length - 1];\n  }\n  return 1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpqskdpsgc.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqskdpsgc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805531
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
    \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n\
    \      maxFactor = factors[i];\n      maxFactorIndex = i;\n    }\n  }\n  return\
    \ factors[maxFactorIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvlf0uvex.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvlf0uvex.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805485
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex: number = 0;\n  for (let i\
    \ = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex =\
    \ factors.length - 1;\n      }\n    }\n  }\n  if (factors.length === 0) {\n  \
    \  return 1;\n  }\n  if (factors.length === 1) {\n    return factors[0];\n  }\n\
    \  return factors[maxFactorIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpfg2qvjc1.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfg2qvjc1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805531
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (isPrime && n % i !== 0) {\n      isPrime = false;\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ factors[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpu_st8bg_.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu_st8bg_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  let i: number;\n  for (i = 2; i <= n;\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpex24hcwl.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpex24hcwl.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805485
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeh3r___m.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeh3r___m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = factors.length - 1; j >=\
    \ 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n   \
    \     break;\n      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpedc26gby.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpedc26gby.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805480
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvcfnbde3.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvcfnbde3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n      isPrime = false;\n    } else {\n      for (let\
    \ j = 0; j < factors.length; j++) {\n        if (n % factors[j] === 0) {\n   \
    \       isPrime = true;\n          break;\n        }\n      }\n    }\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeun3qv9r.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeun3qv9r.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = factors.length - 1; j >=\
    \ 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n   \
    \     break;\n      }\n    }\n  }\n  return factors.length ? factors[factors.length\
    \ - 1] : null;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpqs8w0cia.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqs8w0cia.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805531
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n      isPrime = !isPrime;\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max.apply(null, factors) : -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdcm63bss.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdcm63bss.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp5fgbi1ck.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5fgbi1ck.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805531
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    isPrime = !isPrime;\n  }\n  if (isPrime)\
    \ {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpp_3ksfa4.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp_3ksfa4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805531
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  if (factors.length === 0) {\n    return 1;\n  }\n  return\
    \ Math.max(...factors);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp4yam02re.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4yam02re.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = i * i; j < n; j += i) {\n\
    \      factors.push(j);\n    }\n    isPrime = !isPrime;\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpwt46sq79.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwt46sq79.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i <= n && n % i == 0) {\n    i += 1;\n    factor *= i;\n\
    \  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdf8_nxrz.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdf8_nxrz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpojr9lx6v.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpojr9lx6v.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1)\
    \ {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? factors[factors.length - 1] : 1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbsc6pk4k.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbsc6pk4k.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp64bybibb.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp64bybibb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1)\
    \ {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf65ew7e7.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf65ew7e7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    isPrime = !isPrime;\n  }\n  if (factors.length === 0) {\n   \
    \ return 1;\n  }\n  return Math.max(...factors);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp4kl4kx27.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4kl4kx27.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n >\
    \ 1) {\n    factors.push(1);\n  }\n  return factors.length ? factors[factors.length\
    \ - 1] : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805531
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 2\n  let i: number = 0\n  while (i < n) {\n    if (n % factor === 0) {\n \
    \     factor = factor * 2\n    } else {\n      i += 1\n    }\n  }\n  return factor\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpseye4gzk.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpseye4gzk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpojr9lx6v.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpojr9lx6v.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: -1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (maxFactor > 1) {\n    let i = 2;\n   \
    \ while (i < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
    \        maxFactor = i;\n      }\n      i++;\n    }\n  }\n  return factors.length\
    \ ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805546
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (n % i == 0) {\n      \
    \  isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n    \
    \  factors.push(i);\n    }\n  }\n  return factors.length > 0 ? factors[factors.length\
    \ - 1] : null;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_4sifh6d.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_4sifh6d.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n      isPrime = false;\n    } else {\n      for (let\
    \ j = 0; j < factors.length; j++) {\n        if (n % factors[j] === 0) {\n   \
    \       isPrime = true;\n          break;\n        }\n      }\n    }\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpwwkucsci.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwwkucsci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2\n  let p\
    \ = 2\n  while (i < n) {\n    if (n % i == 0) {\n      p = i\n      n /= i\n \
    \   } else {\n      i++\n    }\n  }\n  return p\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpzlr4u83y.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlr4u83y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805532
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = 2;\n    let q = 3;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n = n / i;\n            p = i;\n            q = i;\n        }\n \
    \       else {\n            i++;\n        }\n    }\n    return q;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805487
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i >\
    \ maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpiwdsp8bl.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiwdsp8bl.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: -5
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    factors.push(n % maxFactor);\n\
    \    maxFactor = n / maxFactor;\n  }\n  return factors[factors.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe110eebb0\n 1: 0x2b45726ce727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b457326328e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4572b9df8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b4572d2f760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b4572d370cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4572f217db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b45728807f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659805535
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      p = i;\n      n = n\
    \ / i;\n    } else {\n      i++;\n    }\n  }\n  return p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpncp5wtci.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpncp5wtci.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n      isPrime\
    \ = false;\n    } else {\n      if (n % i !== 0) {\n        isPrime = true;\n\
    \      }\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n  }\n  return factors.length\
    \ ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpd5jubnuv.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd5jubnuv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    isPrime = n % i === 0;\n  }\n  if (isPrime)\
    \ {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_4ouucsg.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_4ouucsg.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (isPrime) {\n      if (n % i === 0) {\n        isPrime = false;\n\
    \      }\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvt2pg3sp.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvt2pg3sp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
    \ (isPrime) {\n    factors.push(1);\n  }\n  return factors[factors.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpe0tzesr7.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe0tzesr7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n    factor *= i;\n\
    \  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf06imtcf.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf06imtcf.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805482
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  if (n\
    \ > 1) {\n    for (let i = factors.length - 1; i >= 0; i--) {\n      if (factors[i]\
    \ > maxFactor) {\n        maxFactor = factors[i];\n      }\n    }\n  }\n  return\
    \ maxFactor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmgwnnbsn.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmgwnnbsn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = factors.length - 1; j >=\
    \ 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n   \
    \     break;\n      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpedc26gby.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpedc26gby.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805480
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  if (factors.length === 0) {\n    return 1;\n  }\n  return\
    \ Math.max(...factors);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp4yam02re.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4yam02re.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805527
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  let maxFactorIndex: number = 0;\n  for\
    \ (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j <\
    \ i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n        maxFactorIndex = factors.length - 1;\n  \
    \    }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpldtrrauc.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpldtrrauc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    isPrime = !isPrime;\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpm4pivpg8.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm4pivpg8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805480
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpsxh_bv5_.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsxh_bv5_.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738977
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8at3ur99.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8at3ur99.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805487
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  let i: number;\n  for (i = 2; i <= n;\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      maxFactor = Math.max(maxFactor,\
    \ i);\n    }\n  }\n  if (factors.length === 0) {\n    return 1;\n  }\n  return\
    \ maxFactor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp2fru341m.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2fru341m.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      p = i;\n    }\n    i\
    \ += p;\n  }\n  return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpm8lqq5i1.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm8lqq5i1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n       \
    \   isPrime = false;\n          break;\n        }\n      }\n    }\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n  }\n  if (factors.length === 0) {\n    return\
    \ 1;\n  }\n  return Math.max(...factors);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpnawlu2_r.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnawlu2_r.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = 2;\n    let q = 3;\n    while (i <= n / p) {\n        if (n % p == 0)\
    \ {\n            q = p\n        }\n        i += p\n        p = q\n    }\n    return\
    \ q\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8tjwk100.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8tjwk100.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (n % i == 0) {\n      \
    \  isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n    \
    \  factors.push(i);\n    }\n  }\n  return factors[factors.length - 1];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdwgqqyqj.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdwgqqyqj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805533
