name: HumanEval_31_is_prime
language: ts
prompt: "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
  // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n\
  // true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n\
  // false\nfunction is_prime(n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
  \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
  \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
  \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
  \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
  }\n\ntest();"
completions: ["    if (n < 2) {\n        return false;\n    }\n    if (n === 2) {\n\
    \        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5\n \
    \   while (i < n / 3) {\n        if (n % i === 0) {\n            return false;\n\
    \        }\n        i += 6\n    }\n    return true;\n}\n", "  if (n < 2) {\n \
    \   return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n\
    \  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n\
    \  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return\
    \ false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n;\
    \ i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    if (n < 2)\
    \ {\n        return false;\n    }\n    if (n === 2) {\n        return true;\n\
    \    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 ===\
    \ 0) {\n        return true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n\
    \    for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if (n < 2) {\n      \
    \  return false;\n    }\n    if (n === 2) {\n        return true;\n    }\n   \
    \ if (n % 2 === 0) {\n        return false;\n    }\n    var sqrt_n = Math.sqrt(n);\n\
    \    for (var i = 3; i <= sqrt_n; i += 2) {\n        if (n % i === 0) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    if (n <\
    \ 2) {\n        return false;\n    }\n    if (n === 2) {\n        return true;\n\
    \    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    let sqrt_n =\
    \ Math.sqrt(n);\n    for (let i = 3; i <= sqrt_n; i += 2) {\n        if (n % i\
    \ === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
    \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n\
    \  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return\
    \ false;\n  }\n  var sqrt_n = Math.sqrt(n);\n  for (var i = 3; i <= sqrt_n; i\
    \ += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 ==\
    \ 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return\
    \ false;\n  if (n % 7 == 0) return false;\n  if (n % 11 == 0) return false;\n\
    \  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return false;\n  if (n %\
    \ 19 == 0) return false;\n  if (n % 23 == 0) return false;\n  if (n % 29 == 0)\
    \ return false;\n  if (n % 31 == 0) return false;\n  if (n % 37 == 0) return false;\n\
    \  if (n % 43 == 0) return false;\n  if (n % 47 == 0) return false;\n  if (n %\
    \ 53 == 0) return false;\n  if (n % 59 == 0) return false;\n  if (n % 61 == 0)\
    \ return false;\n  if (n % 67 == 0) return false;\n  if (n % 71 == 0) return false;\n\
    \  if (n % 73 == 0) return false;\n  if (n % 81 == 0) return false;\n  if (n %\
    \ 87 == 0) return false;\n  if (n % 97 == 0) return false;\n  if (n % 103 == 0)\
    \ return false;\n  if (n % 111 == 0) return false;\n  if (n % 121 == 0) return\
    \ false;\n  if (n % 131 == 0) return false;\n  if (n % 141 == 0) return false;\n\
    \  if (n % 151 == 0) return false;\n  if (n % 161 == 0) return false;\n  if (n\
    \ % 171 == 0) return false;\n  if (n % 181 == 0) return false;\n  if (n % 191\
    \ == 0) return false;\n  if (n % 201 == 0) return false;\n  if (n % 211 == 0)\
    \ return false;\n  if (n % 221 == 0) return false;\n  if (n % 231 == 0) return\
    \ false;\n  if (n % 241 == 0) return false;\n  if (n % 251 == 0) return false;\n\
    \  if (n % 261 == 0) return false;\n  if (n % 271 == 0) return false;\n  if (n\
    \ % 281 == 0) return false;\n  if (n % 291 == 0) return false;\n  if (n % 301\
    \ == 0) return false;\n  if (n % 311 == 0) return false;\n  if (n % 321 == 0)\
    \ return false;\n  if (n % 331 == 0) return false;\n  if (n % 341 == 0) return\
    \ false;\n  if (n % 351 == 0) return false;\n  if (n % 361 == 0) return false;\n\
    \  if (n % 371 == 0) return false;\n  if (n % 381 == 0) return false;\n  if (n\
    \ % 391 == 0) return false;\n  if (n % 401 == 0) return false;\n  if (n % 411\
    \ == 0) return false;\n  if (n % 421 == 0) return false;\n  if (n % 431 == 0)\
    \ return false;\n  if (n % 441 == 0) return false;\n  if (n % 451 == 0) return\
    \ false;\n  if (n % 461 == 0) return false;\n  if (n % 471 == 0) return false;\n\
    \  if (n % 481 == 0) return false;\n  if (n % 491 == ", "  if (n < 2) return false;\n\
    \  if (n < 4) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0)\
    \ return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0)\
    \ return false;\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n\
    \  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return\
    \ false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n;\
    \ i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n\
    \ = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if\
    \ (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
    \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n\
    \  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return\
    \ false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n;\
    \ i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    if (n < 2)\
    \ {\n        return false;\n    }\n    if (n === 2) {\n        return true;\n\
    \    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 ===\
    \ 0) {\n        return true;\n    }\n    if (n % 5 === 0) {\n        return false;\n\
    \    }\n    const i = Math.floor(Math.sqrt(n));\n    for (let i2 = 2; i2 <= i;\
    \ i2++) {\n        if (n % i2 === 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if\
    \ (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n\
    \  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n\
    \    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "    if (n < 2) {\n        return false;\n    }\n    if (n === 2) {\n        return\
    \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n\
    \ % 3 === 0) {\n        return true;\n    }\n    let i = 5; // n is odd, so start\
    \ at 5\n    while (i > 1 && n % i === 0) {\n        i--;\n    }\n    if (i ===\
    \ 2) {\n        return true;\n    }\n    if (i > 2) {\n        return false;\n\
    \    }\n    let m = Math.sqrt(n);\n    for (let x = 5; x < m; x += 2) {\n    \
    \    if (n % x === 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n\
    \ = Math.sqrt(n);\n  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
