name: HumanEval_149_sorted_list_sum
language: ts
prompt: "//Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
  aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
  AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
  d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\",\
  \ \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
  , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\n\
  test();"
completions: ["  const newList = lst.map((word) => {\n    const newWord = word;\n\
    \    if (newWord.length > 1) {\n      newWord = newWord.split('');\n      newWord.sort();\n\
    \      newWord = newWord.join('');\n    }\n    return newWord;\n  });\n  return\
    \ newList.sort();\n}\n", "  const sorted_list = lst.sort((a, b) => {\n    return\
    \ a.length - b.length;\n  });\n  return sorted_list;\n}\n", "  const sorted =\
    \ lst.sort((a, b) => {\n    const aLen = a.length;\n    const bLen = b.length;\n\
    \    if (aLen === bLen) {\n      return a.localeCompare(b);\n    }\n    return\
    \ aLen - bLen;\n  });\n  return sorted;\n}\n", "  const newList: string[] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n\
    \      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n\
    }\n", "  let sorted: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    let word = lst[i];\n    let index = sorted.findIndex(item => item === word);\n\
    \    if (index === -1) {\n      sorted.push(word);\n    } else {\n      sorted[index]\
    \ = word;\n    }\n  }\n  return sorted.sort();\n}\n", "  const sorted = lst.sort((a,\
    \ b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length\
    \ < b.length) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n\
    \  return sorted\n}\n", "  const newList: string[] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n      newList.push(lst[i]);\n\
    \    }\n  }\n  newList.sort();\n  return newList;\n}\n", "  const result: string[]\
    \ = [];\n  lst.sort((a, b) => {\n    if (a.length < b.length) {\n      return\
    \ -1;\n    }\n    if (a.length > b.length) {\n      return 1;\n    }\n    return\
    \ 0;\n  });\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length %\
    \ 2 !== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n",
  "  const newList: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ const word = lst[i];\n    if (newList.indexOf(word) === -1) {\n      newList.push(word);\n\
    \    }\n  }\n  newList.sort();\n  return newList;\n}\n", "  const result: string[]\
    \ = [];\n  const map = new Map<string, number>();\n  for (const word of lst) {\n\
    \    const key = word.length.toString();\n    if (map.has(key)) {\n      map.set(key,\
    \ map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  }\n  for\
    \ (const [key, value] of map) {\n    if (value % 2 === 0) {\n      result.push(key);\n\
    \    }\n  }\n  result.sort();\n  return result;\n}\n", "\tconst sorted_list =\
    \ lst\n\t\t.map(word => word.length)\n\t\t.sort((a, b) => a - b)\n\t\t.map(word\
    \ => word)\n\t\t.sort();\n\treturn sorted_list;\n}\n", "  const result: string[]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n\
    \    if (result.indexOf(word) === -1) {\n      result.push(word);\n    }\n  }\n\
    \  result.sort();\n  return result;\n}\n", "  const newList: string[] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (newList.indexOf(word)\
    \ === -1) {\n      newList.push(word);\n    }\n  }\n  newList.sort();\n  return\
    \ newList;\n}\n", "  const map = new Map();\n  for (const word of lst) {\n   \
    \ const key = word.length;\n    if (!map.has(key)) {\n      map.set(key, word);\n\
    \    } else {\n      const value = map.get(key);\n      if (value.length < word.length)\
    \ {\n        map.set(key, word);\n      }\n    }\n  }\n  const result = [];\n\
    \  for (const [key, value] of map.entries()) {\n    if (value.length > 0) {\n\
    \      result.push(value);\n    }\n  }\n  return result.sort((a, b) => a.length\
    \ - b.length);\n}\n", "  const result: string[] = [];\n  const map = new Map<string,\
    \ number>();\n  for (const word of lst) {\n    const key = word.length;\n    if\
    \ (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n    \
    \  map.set(key, 1);\n    }\n  }\n  for (const [key, value] of map) {\n    if (value\
    \ % 2 !== 0) {\n      result.push(word);\n    }\n  }\n  return result.sort((a,\
    \ b) => a.length - b.length);\n}\n", "  const result: string[] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (item.length\
    \ % 2 !== 0) {\n      result.push(item);\n    }\n  }\n  result.sort();\n  return\
    \ result;\n}\n", "  const newList: string[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i].length % 2 !== 0) {\n      newList.push(lst[i]);\n  \
    \  }\n  }\n  newList.sort();\n  return newList;\n}\n", "  const result: string[]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 !==\
    \ 0) {\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\n", "  const newList: string[] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i].length % 2 !== 0) {\n      newList.push(lst[i]);\n    }\n\
    \  }\n  newList.sort();\n  return newList;\n}\n", "  const result: string[] =\
    \ [];\n  const map: Map<string, number> = new Map();\n  for (const word of lst)\
    \ {\n    const key = word.length;\n    if (!map.has(key)) {\n      map.set(key,\
    \ 0);\n    }\n    map.set(key, map.get(key) + 1);\n  }\n  for (const [key, value]\
    \ of map.entries()) {\n    if (value % 2 !== 0) {\n      result.push(key);\n \
    \   }\n  }\n  result.sort((a, b) => a.length - b.length);\n  return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
