{
  "language": "ts",
  "name": "HumanEval_76_is_simple_power",
  "results": [
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz35cpynb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpz35cpynb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa1_dldra.js:44:12)\n    at Object.<anonymous> (/tmp/tmpa1_dldra.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz35cpynb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpz35cpynb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp10l_hl4q.js:53:12)\n    at Object.<anonymous> (/tmp/tmp10l_hl4q.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqjlw_iza.js:38:12)\n    at Object.<anonymous> (/tmp/tmpqjlw_iza.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvondxqmv.js:18\n    if (n === 1) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at is_simple_power (/tmp/tmpvondxqmv.js:18:5)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n    at is_simple_power (/tmp/tmpvondxqmv.js:28:16)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppe7x7cgz.js:54:12)\n    at Object.<anonymous> (/tmp/tmppe7x7cgz.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqyb5hkdv.js:47:12)\n    at Object.<anonymous> (/tmp/tmpqyb5hkdv.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335107
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return x === 1;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptvjsd0x1.js:35:12)\n    at Object.<anonymous> (/tmp/tmptvjsd0x1.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335110
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw0e81h3.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpqw0e81h3.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -1) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -2) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -3) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -4) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -5) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -6) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -7) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -8) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -9) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -10) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -11) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -12) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -13) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -14) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -15) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -16) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -17) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -18) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -19) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -20) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -21) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -22) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -23) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -24) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -25) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    if (n % 2 === -26) {\n        return x === Math.pow(n, 1 / 2);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfku12tnh.ts(126,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335108
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 81 === 0) {\n        return false;\n    }\n    if (n % n % 87 === 0) {\n        return false;\n    }\n    if (n % n % 93 === 0) {\n        return false;\n    }\n    if (n % n % 99 === 0) {\n        return false;\n    }\n    if (n % n % 103 === 0) {\n        return false;\n    }\n    if (n % n % 107 === 0) {\n        return false;\n    }\n    if (n % n % 111 === 0) {\n        return false;\n    }\n    if (n % n % 127 === 0) {\n        return false;\n    }\n    if (n % n % 131 === 0) {\n        return false;\n    }\n    if (n % n % 137 === 0) {\n        return false;\n    }\n    if (n % n % 141 === 0) {\n        return false;\n    }\n    if (n % n % 147 === 0) {\n        return false;\n    }\n    if (n % n % 151 === 0) {\n        return false;\n    }\n    if (n % n % 157 === 0) {\n        return false;\n    }\n    if (n % n % 161 === 0) {\n        return false;\n    }\n    if (n % n % 167 === 0) {\n        return false;\n    }\n    if (n % n % 171 === 0) {\n        return false;\n    }\n    if (n % n % 177 === 0) {\n        return false;\n    }\n    if (n % n % 181 === 0) {\n        return false;\n    }\n    if (n % n % 187 === 0) {\n        return false;\n    }\n    if (n % n % 191 === 0) {\n        return false;\n    }\n    if (n % n % 197 === 0) {\n        return false;\n    }\n    if (n % n % 201 === 0) {\n        return false;\n    }\n    if (n % n % 207 === 0) {\n        return false;\n    }\n    if (n % n % 211 === 0 ) {\n        return false;\n    }\n    if (n % n % 217 === 0) {\n        return false;\n    }\n    if (n % n % 221 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdf9w5hn9.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmpdf9w5hn9.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 1) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm8041rmt.js:41:12)\n    at Object.<anonymous> (/tmp/tmpm8041rmt.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % 3 === 1) {\n        return true;\n    }\n    if (n % 5 === 0) {\n        return false;\n    }\n    if (n % 5 === 1) {\n        return true;\n    }\n    if (n % 7 === 0) {\n        return false;\n    }\n    if (n % 7 === 1) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmu4rt855.js:57:12)\n    at Object.<anonymous> (/tmp/tmpmu4rt855.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzklq17_d.ts(143,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuks043pl.js:38:12)\n    at Object.<anonymous> (/tmp/tmpuks043pl.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 1) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpucwouwds.js:51:12)\n    at Object.<anonymous> (/tmp/tmpucwouwds.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return true;\n    }\n    if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk8m94tk9.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335115
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxuqw2vnp.js:45:12)\n    at Object.<anonymous> (/tmp/tmpxuqw2vnp.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return true;\n    if (n === 1) return false;\n    if (n % 2 === 0) return is_simple_power(x, n / 2);\n    if (n % 2 === 1) return is_simple_power(x, n / 2);\n    if (n % 4 === 0) return is_simple_power(x, n / 4);\n    if (n % 4 === 1) return is_simple_power(x, n / 4);\n    if (n % 8 === 0) return is_simple_power(x, n / 8);\n    if (n % 8 === 1) return is_simple_power(x, n / 8);\n    if (n % 16 === 0) return is_simple_power(x, n / 16);\n    if (n % 16 === 1) return is_simple_power(x, n / 16);\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr5fqw__6.js:43:12)\n    at Object.<anonymous> (/tmp/tmpr5fqw__6.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 51 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 55 === 0) {\n        return false;\n    }\n    if (n % n % 57 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 61 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 65 === 0) {\n        return false;\n    }\n    if (n % n % 67 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 71 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 75 === 0) {\n        return false;\n    }\n    if (n % n % 77 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 81 === 0) {\n        return false;\n    }\n    if (n % n % 83 === 0) {\n        return false;\n    }\n    if (n % n % 85 === 0) {\n        return false;\n    }\n    if (n % n % 87 === 0) {\n        return false;\n    }\n    if (n % n % 89 === 0) {\n        return false;\n    }\n    if (n % n % 91 === 0) {\n        return false;\n    }\n    if (n % n % 93 === 0) {\n        return false;\n    }\n    if (n % n % 95 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_qve2u3_.ts(169,9): error TS1005: ')' expected.\n../../../../tmp/tmp_qve2u3_.ts(187,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6isutsm1.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_03b1fkm.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_03b1fkm.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335116
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmporrc5gf5.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmporrc5gf5.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335110
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxsp8ttlw.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxsp8ttlw.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335248
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw0e81h3.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpqw0e81h3.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpqvw5g6f9.js:18\n    if (n === 1) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:18:5)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n    at is_simple_power (/tmp/tmpqvw5g6f9.js:30:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % n % 2 === 0) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcord1rhb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpcord1rhb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0k2eeqdw.ts(83,9): error TS1005: ')' expected.\n../../../../tmp/tmp0k2eeqdw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335103
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqrkbmexe.js:45:12)\n    at Object.<anonymous> (/tmp/tmpqrkbmexe.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 3 === 0) {\n    return false;\n  }\n  if (n % n % 4 === 0) {\n    return false;\n  }\n  if (n % n % 5 === 0) {\n    return false;\n  }\n  if (n % n % 6 === 0) {\n    return false;\n  }\n  if (n % n % 7 === 0) {\n    return false;\n  }\n  if (n % n % 8 === 0) {\n    return false;\n  }\n  if (n % n % 9 === 0) {\n    return false;\n  }\n  if (n % n % 10 === 0) {\n    return false;\n  }\n  if (n % n % 11 === 0) {\n    return false;\n  }\n  if (n % n % 12) {\n    return false;\n  }\n  if (n % n % 13) {\n    return false;\n  }\n  if (n % n % 14) {\n    return false;\n  }\n  if (n % n % 15) {\n    return false;\n  }\n  if (n % n % 16) {\n    return false;\n  }\n  if (n % n % 17) {\n    return false;\n  }\n  if (n % n % 18) {\n    return false;\n  }\n  if (n % n % 19) {\n    return false;\n  }\n  if (n % n % 20) {\n    return false;\n  }\n  if (n % n % 21) {\n    return false;\n  }\n  if (n % n % 22) {\n    return false;\n  }\n  if (n % n % 23) {\n    return false;\n  }\n  if (n % n % 24) {\n    return false;\n  }\n  if (n % n % 25) {\n    return false;\n  }\n  if (n % n % 26) {\n    return false;\n  }\n  if (n % n % 27) {\n    return false;\n  }\n  if (n % n % 28) {\n    return false;\n  }\n  if (n % n % 29) {\n    return false;\n  }\n  if (n % n % 30) {\n    return false;\n  }\n  if (n % n % 31) {\n    return false;\n  }\n  if (n % n % 32) {\n    return false;\n  }\n  if (n % n % 33) {\n    return false;\n  }\n  if (n % n % 34) {\n    return false;\n  }\n  if (n % n % 35) {\n    return false;\n  }\n  if (n % n % 36) {\n    return false;\n  }\n  if (n % n % 37) {\n    return false;\n  }\n  if (n % n % 38) {\n    return false;\n  }\n  if (n % n % 39) {\n    return false;\n  }\n  if (n % n % 40) {\n    return false;\n  }\n  if (n % n % 41) {\n    return false;\n  }\n  if (n % n % 42) {\n    return false;\n  }\n  if (n % n % 43) {\n    return false;\n  }\n  if (n % n % 44) {\n    return false;\n  }\n  if (n % n % 45) {\n    return false;\n  }\n  if (n % n % 46) {\n    return false;\n  }\n  if (n % n % 47) {\n    return false;\n  }\n  if (n % n % 48) {\n    return false;\n  }\n  if (n % n % 49) {\n    return false;\n  }\n  if (n % n % 50) {\n    return false;\n  }\n  if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpb68u1n.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2) && is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf993_7ny.js:36:12)\n    at Object.<anonymous> (/tmp/tmpf993_7ny.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyuklvcpq.js:53:12)\n    at Object.<anonymous> (/tmp/tmpyuklvcpq.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, (n - 1) / 2);\n    }\n    return is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkyt3s61q.js:35:12)\n    at Object.<anonymous> (/tmp/tmpkyt3s61q.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz35cpynb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpz35cpynb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpimdg1xi0.js:57:12)\n    at Object.<anonymous> (/tmp/tmpimdg1xi0.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 51) {\n        return false;\n    }\n    if (n % n % 53) {\n        return false;\n    }\n    if (n % n % 57) {\n        return false;\n    }\n    if (n % n % 61) {\n        return false;\n    }\n    if (n % n % 63) {\n        return false;\n    }\n    if (n % n % 67) {\n        return false;\n    }\n    if (n % n % 71) {\n        return false;\n    }\n    if (n % n % 73) {\n        return false;\n    }\n    if (n % n % 77) {\n        return false;\n    }\n    if (n % n % 81) {\n        return false;\n    }\n    if (n % n % 83) {\n        return false;\n    }\n    if (n % n % 85) {\n        return false;\n    }\n    if (n % n % 89) {\n        return false;\n    }\n    if (n % n % 91) {\n        return false;\n    }\n    if (n % n % 93) {\n        return false;\n    }\n    if (n % n % 97) {\n        return false;\n    }\n    if (n % n % 99) {\n        return false;\n    }\n    if (n % n % 101) {\n        return false;\n    }\n    if (n % n % 103) {\n        return false;\n    }\n    if (n % n % 107) {\n        return false;\n    }\n    if (n % n % 109) {\n        return false;\n    }\n    if (n % n % 111) {\n        return false;\n    }\n    if (n % n % 113) {\n        return false;\n    }\n    if (n % n % 115) {\n        return false;\n    }\n    if (n % n % 117) {\n        return false;\n    }\n    if (n % n % 119) {\n        return false;\n    }\n    if (n % n % 121) {\n        return false;\n    }\n    if (n % n % 123) {\n        return false;\n    }\n    if (n % n % 125) {\n        return false;\n    }\n    if (n % n % 127) {\n        return false;\n    }\n    if (n % n % 129) {\n        return false;\n    }\n    if (n % n % 131) {\n        return false;\n    }\n    if (n % n % 133) {\n        return false;\n    }\n    if (n % n % 135) {\n        return false;\n    }\n    if (n % n % 137\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoyxfe8dd.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmpoyxfe8dd.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpni39_j5h.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335114
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) return false;\n    if (n === 1) return true;\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return true;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return true;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return true;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return true;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return true;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return true;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return true;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return true;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return true;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return true;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return true;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return true;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return true;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return true;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return true;\n    if (n % 8589934592 === 0) return true;\n    if (n % 17179869184 === 0) return true;\n    if (n % 34359738368 === 0) return true;\n    if (n % 68719476736 === 0) return true;\n    if (n % 137438106512 === 0) return true;\n    if (n % 26843545608 === 0) return true;\n    if (n % 536870880 === 0) return true;\n    if (n % 107374182400 === 0) return true;\n    if (n % 214748364800 === 0) return true;\n    if (n % 42949672960 === 0) return true;\n    if (n % 858993459200 === 0) return true;\n    if (n % 171798691840 === 0) return true;\n    if (n % 3435973836800 === 0) return true;\n    if (n % 6871947673600 === 0) return true;\n    if (n % 13743810651200 === 0) return true;\n    if (n % 2684354560000 === 0) return true;\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp__wx2u_9.ts(69,9): error TS1005: ')' expected.\n../../../../tmp/tmp__wx2u_9.ts(87,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n <= 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (x === 50) {\n        return true;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7cuynujc.ts(192,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe2s38xtc.js:56:12)\n    at Object.<anonymous> (/tmp/tmpe2s38xtc.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335248
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    if (n % 11 === 2) {\n        return true;\n    }\n    if (n % 11 === 1) {\n        return false;\n    }\n    if (n % 13 === 2) {\n        return true;\n    }\n    if (n % 13 === 1) {\n        return false;\n    }\n    if (n % 17 === 2) {\n        return true;\n    }\n    if (n % 17 === 1) {\n        return false;\n    }\n    if (n % 19 === 2) {\n        return true;\n    }\n    if (n % 19 === 1) {\n        return false;\n    }\n    if (n % 23 === 2) {\n        return true;\n    }\n    if (n % 23 === 1) {\n        return false;\n    }\n    if (n % 29 === 2) {\n        return true;\n    }\n    if (n % 29 === 1) {\n        return false;\n    }\n    if (n % 31 === 2) {\n        return true;\n    }\n    if (n % 31 === 1) {\n        return false;\n    }\n    if (n % 37 === 2) {\n        return true;\n    }\n    if (n % 37 === 1) {\n        return false;\n    }\n    if (n % 43 === 2) {\n        return true;\n    }\n    if (n % 43 === 1) {\n        return false;\n    }\n    if (n % 47 === 2) {\n        return true;\n    }\n    if (n % 47 === 1) {\n        return false;\n    }\n    if (n % 53 === 2) {\n        return true;\n    }\n    if (n % 53 === 1) {\n        return false;\n    }\n    if (n % 59 === 2) {\n        return true;\n    }\n    if (n % 59 === 1) {\n        return false;\n    }\n    if (n % 63 === 2) {\n        return true;\n    }\n    if (n % 63 === 1) {\n        return false;\n    }\n    if (n % 69 === 2) {\n        return true;\n    }\n    if (n % 69 === 1) {\n        return false;\n    }\n    if (n % 73 === 2) {\n        return true;\n    }\n    if (n % 73 === 1) {\n        return false;\n    }\n    if (n % 79 === 2) {\n        return true;\n    }\n    if (n % 79 === 1) {\n        return false;\n    }\n    if (n % 83 === 2) {\n        return true;\n    }\n    if (n % 83 === 1) {\n        return false;\n    }\n    if (n % 89 === 2) {\n        return true;\n    }\n    if (n % 89 === 1) {\n        return false;\n    }\n    if (n % 93 === 2) {\n        return true;\n    }\n    if (n % 93 === 1) {\n        return false;\n    }\n    if (n % 97 === 2) {\n        return true;\n    }\n    if (n % 97 === 1) {\n        return false;\n    }\n    if (n % 103 === 2) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3r55tpmf.ts(188,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (x === 50) {\n        return true;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe3l_04sa.ts(193,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0k2eeqdw.ts(83,9): error TS1005: ')' expected.\n../../../../tmp/tmp0k2eeqdw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335103
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 3 === 0) {\n    return true;\n  }\n  if (n % n % 4 === 0) {\n    return false;\n  }\n  if (n % n % 5 === 0) {\n    return true;\n  }\n  if (n % n % 6 === 0) {\n    return false;\n  }\n  if (n % n % 7 === 0) {\n    return true;\n  }\n  if (n % n % 8 === 0) {\n    return false;\n  }\n  if (n % n % 9 === 0) {\n    return true;\n  }\n  if (n % n % 10 === 0) {\n    return false;\n  }\n  if (n % n % 11 === 0) {\n    return true;\n  }\n  if (n % n % 12) {\n    return false;\n  }\n  if (n % n % 13 === 0) {\n    return true;\n  }\n  if (n % n % 14 === 0) {\n    return false;\n  }\n  if (n % n % 15 === 0) {\n    return true;\n  }\n  if (n % n % 16 === 0) {\n    return false;\n  }\n  if (n % n % 17 === 0) {\n    return true;\n  }\n  if (n % n % 18 === 0) {\n    return false;\n  }\n  if (n % n % 19 === 0) {\n    return true;\n  }\n  if (n % n % 20 === 0) {\n    return false;\n  }\n  if (n % n % 21 === 0) {\n    return true;\n  }\n  if (n % n % 22 === 0) {\n    return false;\n  }\n  if (n % n % 23 === 0) {\n    return true;\n  }\n  if (n % n % 24 === 0) {\n    return false;\n  }\n  if (n % n % 25 === 0) {\n    return true;\n  }\n  if (n % n % 26 === 0) {\n    return false;\n  }\n  if (n % n % 27 === 0) {\n    return true;\n  }\n  if (n % n % 28 === 0) {\n    return false;\n  }\n  if (n % n % 29 === 0) {\n    return true;\n  }\n  if (n % n % 30 === 0) {\n    return false;\n  }\n  if (n % n % 31 === 0) {\n    return true;\n  }\n  if (n % n % 32 === 0) {\n    return false;\n  }\n  if (n % n % 33 === 0) {\n    return true;\n  }\n  if (n % n % 34 === 0) {\n    return false;\n  }\n  if (n % n % 35 === 0) {\n    return true;\n  }\n  if (n % n % 36 === 0) {\n    return false;\n  }\n  if (n % n % 37 === 0) {\n    return true;\n  }\n  if (n % n % 38 === 0) {\n    return false;\n  }\n  if (n % n % 39 === 0) {\n    return true;\n  }\n  if (n % n % 40 === 0) {\n    return false;\n  }\n  if (n % n % 41 === 0) {\n    return true;\n  }\n  if (n % n % 42 === 0) {\n    return false;\n  }\n  if (n % n % 43 === 0) {\n    return true;\n  }\n  if (n % n % 44 === 0) {\n    return false;\n  }\n  if (n % n % 45 === 0) {\n    return true;\n  }\n  if (n % n % 46 === 0) {\n    return false;\n  }\n  if (n % n % 47 === 0) {\n    return true;\n  }\n  if (n % n % 48 === 0) {\n    return false;\n  }\n  if (n % n % 49 === 0) {\n    return true;\n  }\n  if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8wqvor8n.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % n % 2 === 0) return false;\n    if (n % n % 2 === 1) return true;\n    if (n % n % n % 2 === 0) return false;\n    if (n % n % n % 2 === 1) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb1nz8lhi.js:39:12)\n    at Object.<anonymous> (/tmp/tmpb1nz8lhi.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (x === 50) {\n        return true;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqbx4k9nh.ts(193,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 51 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 55 === 0) {\n        return false;\n    }\n    if (n % n % 57 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 61 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 65 === 0) {\n        return false;\n    }\n    if (n % n % 67 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 71 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 75 === 0) {\n        return false;\n    }\n    if (n % n % 77 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 81 === 0) {\n        return false;\n    }\n    if (n % n % 83 === 0) {\n        return false;\n    }\n    if (n % n % 85 === 0) {\n        return false;\n    }\n    if (n % n % 87 === 0) {\n        return false;\n    }\n    if (n % n % 89 === 0) {\n        return false;\n    }\n    if (n % n % 91 === 0) {\n        return false;\n    }\n    if (n % n % 93 === 0) {\n        return false;\n    }\n    if (n % n % 95 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_qve2u3_.ts(169,9): error TS1005: ')' expected.\n../../../../tmp/tmp_qve2u3_.ts(187,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpveb9ucum.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpveb9ucum.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n <= 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 3 === 0) {\n    return true;\n  }\n  if (n % n % 4 === 0) {\n    return false;\n  }\n  if (n % n % 5 === 0) {\n    return true;\n  }\n  if (n % n % 6 === 0) {\n    return false;\n  }\n  if (n % n % 7 === 0) {\n    return true;\n  }\n  if (n % n % 8 === 0) {\n    return false;\n  }\n  if (n % n % 9 === 0) {\n    return true;\n  }\n  if (n % n % 10 === 0) {\n    return false;\n  }\n  if (n % n % 11 === 0) {\n    return true;\n  }\n  if (n % n % 12 === 0) {\n    return false;\n  }\n  if (n % n % 13 === 0) {\n    return true;\n  }\n  if (n % n % 14 === 0) {\n    return false;\n  }\n  if (n % n % 15 === 0) {\n    return true;\n  }\n  if (n % n % 16 === 0) {\n    return false;\n  }\n  if (n % n % 17 === 0) {\n    return true;\n  }\n  if (n % n % 18 === 0) {\n    return false;\n  }\n  if (n % n % 19 === 0) {\n    return true;\n  }\n  if (n % n % 20 === 0) {\n    return false;\n  }\n  if (n % n % 21 === 0) {\n    return true;\n  }\n  if (n % n % 22 === 0) {\n    return false;\n  }\n  if (n % n % 23 === 0) {\n    return true;\n  }\n  if (n % n % 24 === 0) {\n    return false;\n  }\n  if (n % n % 25 === 0) {\n    return true;\n  }\n  if (n % n % 26 === 0) {\n    return false;\n  }\n  if (n % n % 27 === 0) {\n    return true;\n  }\n  if (n % n % 28 === 0) {\n    return false;\n  }\n  if (n % n % 29 === 0) {\n    return true;\n  }\n  if (n % n % 30 === 0) {\n    return false;\n  }\n  if (n % n % 31 === 0) {\n    return true;\n  }\n  if (n % n % 32 === 0) {\n    return false;\n  }\n  if (n % n % 33 === 0) {\n    return true;\n  }\n  if (n % n % 34 === 0) {\n    return false;\n  }\n  if (n % n % 35 === 0) {\n    return true;\n  }\n  if (n % n % 36 === 0) {\n    return false;\n  }\n  if (n % n % 37 === 0) {\n    return true;\n  }\n  if (n % n % 38 === 0) {\n    return false;\n  }\n  if (n % n % 39 === 0) {\n    return true;\n  }\n  if (n % n % 40 === 0) {\n    return false;\n  }\n  if (n % n % 41 === 0) {\n    return true;\n  }\n  if (n % n % 42 === 0) {\n    return false;\n  }\n  if (n % n % 43 === 0) {\n    return true;\n  }\n  if (n % n % 44 === 0) {\n    return false;\n  }\n  if (n % n % 45 === 0) {\n    return true;\n  }\n  if (n % n % 46 === 0) {\n    return false;\n  }\n  if (n % n % 47 === 0) {\n    return true;\n  }\n  if (n % n % 48 === 0) {\n    return false;\n  }\n  if (n % n % 49\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4t6k_0oq.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmp4t6k_0oq.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpimdg1xi0.js:57:12)\n    at Object.<anonymous> (/tmp/tmpimdg1xi0.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmfh92oun.js:89:12)\n    at Object.<anonymous> (/tmp/tmpmfh92oun.js:100:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 51) {\n        return false;\n    }\n    if (n % n % 53) {\n        return false;\n    }\n    if (n % n % 57) {\n        return false;\n    }\n    if (n % n % 61) {\n        return false;\n    }\n    if (n % n % 63) {\n        return false;\n    }\n    if (n % n % 67) {\n        return false;\n    }\n    if (n % n % 71) {\n        return false;\n    }\n    if (n % n % 73) {\n        return false;\n    }\n    if (n % n % 77) {\n        return false;\n    }\n    if (n % n % 81) {\n        return false;\n    }\n    if (n % n % 83) {\n        return false;\n    }\n    if (n % n % 85) {\n        return false;\n    }\n    if (n % n % 89) {\n        return false;\n    }\n    if (n % n % 91) {\n        return false;\n    }\n    if (n % n % 93) {\n        return false;\n    }\n    if (n % n % 95) {\n        return false;\n    }\n    if (n % n % 97) {\n        return false;\n    }\n    if (n % n % 99) {\n        return false;\n    }\n    if (n % n % 101) {\n        return false;\n    }\n    if (n % n % 103) {\n        return false;\n    }\n    if (n % n % 105) {\n        return false;\n    }\n    if (n % n % 107) {\n        return false;\n    }\n    if (n % n % 109) {\n        return false;\n    }\n    if (n % n % 111) {\n        return false;\n    }\n    if (n % n % 113) {\n        return false;\n    }\n    if (n % n % 115) {\n        return false;\n    }\n    if (n % n % 117) {\n        return false;\n    }\n    if (n % n % 119) {\n        return false;\n    }\n    if (n % n % 121) {\n        return false;\n    }\n    if (n % n % 123) {\n        return false;\n    }\n    if (n % n % 125) {\n        return false;\n    }\n    if (n % n % 127) {\n        return false;\n    }\n    if (n % n % 129) {\n        return false;\n    }\n    if (n % n % 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp322er7rr.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmp322er7rr.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3p4ii7t8.js:39:12)\n    at Object.<anonymous> (/tmp/tmp3p4ii7t8.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (x === 1) return false;\n    if (x === 2) return true;\n    if (x % 2 === 0) return false;\n    if (x % 2 === 1) return true;\n    if (x === n) return true;\n    if (x === n * 2) return true;\n    if (x === n * 3) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpazn34v2b.js:45:12)\n    at Object.<anonymous> (/tmp/tmpazn34v2b.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpratoi8px.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  if (n % 3 === 0 && n % 2 === 1) {\n    return true;\n  }\n  if (n % 3 === 0 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 0 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 1 && n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 1 && n % 2 === 1) {\n    return true;\n  }\n  if (n % 3 === 2 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 2 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 3 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 3 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 4 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 4 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 5 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 5 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 6 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 6 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 7 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 7 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 8 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 8 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 9 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 9 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 10 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 10 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 11 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 11 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 12 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 12 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 13 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 13 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 14 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 14 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 15 && n % 2 === 0) {\n    return true;\n  }\n  if (n % 3 === 15 && n % 2 === 1) {\n    return false;\n  }\n  if (n % 3 === 16\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprje8djkc.ts(130,1): error TS1005: ')' expected.\n../../../../tmp/tmprje8djkc.ts(148,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0_tpjom1.js:41:12)\n    at Object.<anonymous> (/tmp/tmp0_tpjom1.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % 3 === 1) {\n        return true;\n    }\n    if (n % 4 === 0) {\n        return false;\n    }\n    if (n % 4 === 1) {\n        return true;\n    }\n    if (n % 5 === 0) {\n        return false;\n    }\n    if (n % 5 === 1) {\n        return true;\n    }\n    if (n % 6 === 0) {\n        return false;\n    }\n    if (n % 6 === 1) {\n        return true;\n    }\n    if (n % 7 === 0) {\n        return false;\n    }\n    if (n % 7 === 1) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 8 === 1) {\n        return true;\n    }\n    if (n % 9 === 0) {\n        return false;\n    }\n    if (n % 9 === 1) {\n        return true;\n    }\n    if (n % 10 === 0) {\n        return false;\n    }\n    if (n % 10 === 1) {\n        return true;\n    }\n    if (n % 11 === 0) {\n        return false;\n    }\n    if (n % 11 === 1) {\n        return true;\n    }\n    if (n % 12 === 0) {\n        return false;\n    }\n    if (n % 12 === 1) {\n        return true;\n    }\n    if (n % 13 === 0) {\n        return false;\n    }\n    if (n % 13 === 1) {\n        return true;\n    }\n    if (n % 14 === 0) {\n        return false;\n    }\n    if (n % 14 === 1) {\n        return true;\n    }\n    if (n % 15 === 0) {\n        return false;\n    }\n    if (n % 15 === 1) {\n        return true;\n    }\n    if (n % 16 === 0) {\n        return false;\n    }\n    if (n % 16 === 1) {\n        return true;\n    }\n    if (n % 17 === 0) {\n        return false;\n    }\n    if (n % 17 === 1) {\n        return true;\n    }\n    if (n % 18 === 0) {\n        return false;\n    }\n    if (n % 18 === 1) {\n        return true;\n    }\n    if (n % 19 === 0) {\n        return false;\n    }\n    if (n % 19 === 1) {\n        return true;\n    }\n    if (n % 20 === 0) {\n        return false;\n    }\n    if (n % 20 === 1) {\n        return true;\n    }\n    if (n % 21 === 0) {\n        return false;\n    }\n    if (n % 21 === 1) {\n        return true;\n    }\n    if (n % 22 === 0) {\n        return false;\n    }\n    if (n % 22 === 1) {\n        return true;\n    }\n    if (n % 23 === 0) {\n        return false;\n    }\n    if (n % 23 === 1) {\n        return true;\n    }\n    if (n % 24 === 0) {\n        return false;\n    }\n    if (n % 24 === 1) {\n        return true;\n    }\n    if (n % 25 === 0) {\n        return false;\n    }\n    if (n % 25 === 1) {\n        return true;\n    }\n    if (n % 26 === 0) {\n        return false;\n    }\n    if (n % 26 === 1) {\n        return true;\n    }\n    if (n % 27 === 0) {\n        return false;\n    }\n    if (n % 27 === 1) {\n        return true;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkio82_cy.ts(181,9): error TS1005: ')' expected.\n../../../../tmp/tmpkio82_cy.ts(199,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppe7x7cgz.js:54:12)\n    at Object.<anonymous> (/tmp/tmppe7x7cgz.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return true;\n    if (n === 1) return false;\n    if (n % 2 === 0) return is_simple_power(x, n / 2);\n    if (n % 2 === 1) return false;\n    return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpszmaeavk.js:31:12)\n    at Object.<anonymous> (/tmp/tmpszmaeavk.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return true;\n    }\n    if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjwthqevp.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335114
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0oia5nbn.js:53:12)\n    at Object.<anonymous> (/tmp/tmp0oia5nbn.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe2s38xtc.js:56:12)\n    at Object.<anonymous> (/tmp/tmpe2s38xtc.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335248
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpekn6jx_e.js:44:12)\n    at Object.<anonymous> (/tmp/tmpekn6jx_e.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp32bxdv6x.js:47:12)\n    at Object.<anonymous> (/tmp/tmp32bxdv6x.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 51) {\n        return false;\n    }\n    if (n % n % 53) {\n        return false;\n    }\n    if (n % n % 57) {\n        return false;\n    }\n    if (n % n % 61) {\n        return false;\n    }\n    if (n % n % 63) {\n        return false;\n    }\n    if (n % n % 67) {\n        return false;\n    }\n    if (n % n % 71) {\n        return false;\n    }\n    if (n % n % 73) {\n        return false;\n    }\n    if (n % n % 77) {\n        return false;\n    }\n    if (n % n % 81) {\n        return false;\n    }\n    if (n % n % 83) {\n        return false;\n    }\n    if (n % n % 85) {\n        return false;\n    }\n    if (n % n % 89) {\n        return false;\n    }\n    if (n % n % 91) {\n        return false;\n    }\n    if (n % n % 93) {\n        return false;\n    }\n    if (n % n % 95) {\n        return false;\n    }\n    if (n % n % 97) {\n        return false;\n    }\n    if (n % n % 99) {\n        return false;\n    }\n    if (n % n % 101) {\n        return false;\n    }\n    if (n % n % 103) {\n        return false;\n    }\n    if (n % n % 105) {\n        return false;\n    }\n    if (n % n % 107) {\n        return false;\n    }\n    if (n % n % 109) {\n        return false;\n    }\n    if (n % n % 111) {\n        return false;\n    }\n    if (n % n % 113) {\n        return false;\n    }\n    if (n % n % 115) {\n        return false;\n    }\n    if (n % n % 117) {\n        return false;\n    }\n    if (n % n % 119) {\n        return false;\n    }\n    if (n % n % 121) {\n        return false;\n    }\n    if (n % n % 123) {\n        return false;\n    }\n    if (n % n % 125) {\n        return false;\n    }\n    if (n % n % 127) {\n        return false;\n    }\n    if (n % n % 129) {\n        return false;\n    }\n    if (n % n % 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp322er7rr.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmp322er7rr.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzand87sa.js:35:12)\n    at Object.<anonymous> (/tmp/tmpzand87sa.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335114
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0k2eeqdw.ts(83,9): error TS1005: ')' expected.\n../../../../tmp/tmp0k2eeqdw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335103
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return x === 1;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuotpspil.js:35:12)\n    at Object.<anonymous> (/tmp/tmpuotpspil.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw0e81h3.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpqw0e81h3.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    let i = Math.floor(n / 2);\n    if (x === Math.pow(n, i)) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4sd3aoss.js:39:12)\n    at Object.<anonymous> (/tmp/tmp4sd3aoss.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_03b1fkm.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_03b1fkm.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335116
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return false;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo_3wn8pj.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 3 === 0) {\n    return true;\n  }\n  if (n % n % 4 === 0) {\n    return false;\n  }\n  if (n % n % 5 === 0) {\n    return false;\n  }\n  if (n % n % 6 === 0) {\n    return true;\n  }\n  if (n % n % 7 === 0) {\n    return false;\n  }\n  if (n % n % 8 === 0) {\n    return false;\n  }\n  if (n % n % 9 === 0) {\n    return true;\n  }\n  if (n % n % 10 === 0) {\n    return false;\n  }\n  if (n % n % 11 === 0) {\n    return false;\n  }\n  if (n % n % 12) {\n    return true;\n  }\n  if (n % n % 13 === 0) {\n    return false;\n  }\n  if (n % n % 14 === 0) {\n    return false;\n  }\n  if (n % n % 15 === 0) {\n    return false;\n  }\n  if (n % n % 16 === 0) {\n    return true;\n  }\n  if (n % n % 17 === 0) {\n    return false;\n  }\n  if (n % n % 18 === 0) {\n    return false;\n  }\n  if (n % n % 19 === 0) {\n    return false;\n  }\n  if (n % n % 20 === 0) {\n    return false;\n  }\n  if (n % n % 21 === 0) {\n    return false;\n  }\n  if (n % n % 22 === 0) {\n    return true;\n  }\n  if (n % n % 23 === 0) {\n    return false;\n  }\n  if (n % n % 24 === 0) {\n    return false;\n  }\n  if (n % n % 25 === 0) {\n    return false;\n  }\n  if (n % n % 26 === 0) {\n    return false;\n  }\n  if (n % n % 27 === 0) {\n    return false;\n  }\n  if (n % n % 28 === 0) {\n    return false;\n  }\n  if (n % n % 29 === 0) {\n    return false;\n  }\n  if (n % n % 30 === 0) {\n    return false;\n  }\n  if (n % n % 31 === 0) {\n    return false;\n  }\n  if (n % n % 32 === 0) {\n    return false;\n  }\n  if (n % n % 33 === 0) {\n    return false;\n  }\n  if (n % n % 34 === 0) {\n    return false;\n  }\n  if (n % n % 35 === 0) {\n    return false;\n  }\n  if (n % n % 36 === 0) {\n    return false;\n  }\n  if (n % n % 37 === 0) {\n    return false;\n  }\n  if (n % n % 38 === 0) {\n    return false;\n  }\n  if (n % n % 39 === 0) {\n    return false;\n  }\n  if (n % n % 40 === 0) {\n    return false;\n  }\n  if (n % n % 41 === 0) {\n    return false;\n  }\n  if (n % n % 42 === 0) {\n    return false;\n  }\n  if (n % n % 43 === 0) {\n    return false;\n  }\n  if (n % n % 44 === 0) {\n    return false;\n  }\n  if (n % n % 45 === 0) {\n    return false;\n  }\n  if (n % n % 46 === 0) {\n    return false;\n  }\n  if (n % n % 47 === 0) {\n    return false;\n  }\n  if (n % n % 48 === 0) {\n    return false;\n  }\n  if (n % n % 49 === 0) {\n    return false;\n  }\n  if (n % n % 50 === 0) {\n    return false;\n  }\n  if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprs4378h6.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmprs4378h6.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return true;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjd0j4imw.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpjd0j4imw.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335104
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphbbff0pd.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmphbbff0pd.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 51 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 55 === 0) {\n        return false;\n    }\n    if (n % n % 57 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 61 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 65 === 0) {\n        return false;\n    }\n    if (n % n % 67 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 71 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 75 === 0) {\n        return false;\n    }\n    if (n % n % 77 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 81 === 0) {\n        return false;\n    }\n    if (n % n % 83 === 0) {\n        return false;\n    }\n    if (n % n % 85 === 0) {\n        return false;\n    }\n    if (n % n % 87 === 0) {\n        return false;\n    }\n    if (n % n % 89 === 0) {\n        return false;\n    }\n    if (n % n % 91 === 0) {\n        return false;\n    }\n    if (n % n % 93 === 0) {\n        return false;\n    }\n    if (n % n % 95 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_qve2u3_.ts(169,9): error TS1005: ')' expected.\n../../../../tmp/tmp_qve2u3_.ts(187,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n === 0) {\n        return true;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n === 0) {\n        return true;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmd4ggjp1.js:50:12)\n    at Object.<anonymous> (/tmp/tmpmd4ggjp1.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzklq17_d.ts(143,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3p4ii7t8.js:39:12)\n    at Object.<anonymous> (/tmp/tmp3p4ii7t8.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 2 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 3 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 3 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 4 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 4 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 5 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 5 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 6 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 6 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 7 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 7 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 8 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 8 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 9 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 9 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 10 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 10 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 11 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 11 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 12 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 12 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 13 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 13 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 14 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 14 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 15 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 15 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 16\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7dzq3p0g.ts(130,1): error TS1005: ')' expected.\n../../../../tmp/tmp7dzq3p0g.ts(148,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzzp0e1r7.js:44:12)\n    at Object.<anonymous> (/tmp/tmpzzp0e1r7.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335107
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn974ioyp.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmpn974ioyp.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335108
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0_tpjom1.js:41:12)\n    at Object.<anonymous> (/tmp/tmp0_tpjom1.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0k2eeqdw.ts(83,9): error TS1005: ')' expected.\n../../../../tmp/tmp0k2eeqdw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335103
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  if (n % 3 === 2) {\n    return true;\n  }\n  if (n % 3 === 1) {\n    return false;\n  }\n  if (n % 5 === 2) {\n    return true;\n  }\n  if (n % 5 === 1) {\n    return false;\n  }\n  if (n % 7 === 2) {\n    return true;\n  }\n  if (n % 7 === 1) {\n    return false;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6161zyh3.js:57:12)\n    at Object.<anonymous> (/tmp/tmp6161zyh3.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjzzo6ri1.js:44:12)\n    at Object.<anonymous> (/tmp/tmpjzzo6ri1.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz35cpynb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpz35cpynb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpag_bb9we.js:36:12)\n    at Object.<anonymous> (/tmp/tmpag_bb9we.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0oia5nbn.js:53:12)\n    at Object.<anonymous> (/tmp/tmp0oia5nbn.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return false;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo_3wn8pj.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return false;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo_3wn8pj.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq1d4z8n2.js:44:12)\n    at Object.<anonymous> (/tmp/tmpq1d4z8n2.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335114
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === -1) {\n        return is_simple_power(x, (n - 1) / 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdoju0ybx.js:40:12)\n    at Object.<anonymous> (/tmp/tmpdoju0ybx.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0oia5nbn.js:53:12)\n    at Object.<anonymous> (/tmp/tmp0oia5nbn.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return x === Math.pow(x, n);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbzrmjfux.js:32:12)\n    at Object.<anonymous> (/tmp/tmpbzrmjfux.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, (n - 1) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3p2wdu7t.js:36:12)\n    at Object.<anonymous> (/tmp/tmp3p2wdu7t.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxuqw2vnp.js:45:12)\n    at Object.<anonymous> (/tmp/tmpxuqw2vnp.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (x === 50) {\n        return true;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqbx4k9nh.ts(193,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 3 === 1) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 5 === 1) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfvx2p5v5.js:47:12)\n    at Object.<anonymous> (/tmp/tmpfvx2p5v5.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmd9awz5z.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmpmd9awz5z.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 51 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 55 === 0) {\n        return false;\n    }\n    if (n % n % 57 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 61 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 65 === 0) {\n        return false;\n    }\n    if (n % n % 67 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 71 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 75 === 0) {\n        return false;\n    }\n    if (n % n % 77 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 81 === 0) {\n        return false;\n    }\n    if (n % n % 83 === 0) {\n        return false;\n    }\n    if (n % n % 85 === 0) {\n        return false;\n    }\n    if (n % n % 87 === 0) {\n        return false;\n    }\n    if (n % n % 89 === 0) {\n        return false;\n    }\n    if (n % n % 91 === 0) {\n        return false;\n    }\n    if (n % n % 93 === 0) {\n        return false;\n    }\n    if (n % n % 95 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_qve2u3_.ts(169,9): error TS1005: ')' expected.\n../../../../tmp/tmp_qve2u3_.ts(187,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw0e81h3.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpqw0e81h3.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return true;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return true;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return false;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return true;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return true;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return true;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8w62c83o.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335254
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmporrc5gf5.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmporrc5gf5.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335110
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjr1ra2vj.js:57:12)\n    at Object.<anonymous> (/tmp/tmpjr1ra2vj.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335254
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    if (n % 11 === 2) {\n        return true;\n    }\n    if (n % 11 === 1) {\n        return false;\n    }\n    if (n % 13 === 2) {\n        return true;\n    }\n    if (n % 13 === 1) {\n        return false;\n    }\n    if (n % 17 === 2) {\n        return true;\n    }\n    if (n % 17 === 1) {\n        return false;\n    }\n    if (n % 19 === 2) {\n        return true;\n    }\n    if (n % 19 === 1) {\n        return false;\n    }\n    if (n % 23 === 2) {\n        return true;\n    }\n    if (n % 23 === 1) {\n        return false;\n    }\n    if (n % 29 === 2) {\n        return true;\n    }\n    if (n % 29 === 1) {\n        return false;\n    }\n    if (n % 31 === 2) {\n        return true;\n    }\n    if (n % 31 === 1) {\n        return false;\n    }\n    if (n % 37 === 2) {\n        return true;\n    }\n    if (n % 37 === 1) {\n        return false;\n    }\n    if (n % 43 === 2) {\n        return true;\n    }\n    if (n % 43 === 1) {\n        return false;\n    }\n    if (n % 47 === 2) {\n        return true;\n    }\n    if (n % 47 === 1) {\n        return false;\n    }\n    if (n % 53 === 2) {\n        return true;\n    }\n    if (n % 53 === 1) {\n        return false;\n    }\n    if (n % 59 === 2) {\n        return true;\n    }\n    if (n % 59 === 1) {\n        return false;\n    }\n    if (n % 63 === 2) {\n        return true;\n    }\n    if (n % 63 === 1) {\n        return false;\n    }\n    if (n % 69 === 2) {\n        return true;\n    }\n    if (n % 69 === 1) {\n        return false;\n    }\n    if (n % 73 === 2) {\n        return true;\n    }\n    if (n % 73 === 1) {\n        return false;\n    }\n    if (n % 79 === 2) {\n        return true;\n    }\n    if (n % 79 === 1) {\n        return false;\n    }\n    if (n % 83 === 2) {\n        return true;\n    }\n    if (n % 83 === 1) {\n        return false;\n    }\n    if (n % 87 === 2) {\n        return true;\n    }\n    if (n % 87 === 1) {\n        return false;\n    }\n    if (n % 93 === 2) {\n        return true;\n    }\n    if (n % 93 === 1) {\n        return false;\n    }\n    if (n % 97 === 2) {\n        return true;\n    }\n    if (n % 97 === 1) {\n        return false;\n    }\n    if (n % 103 === 2) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_g3rcegf.ts(188,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return true;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjd0j4imw.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpjd0j4imw.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335104
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmporrc5gf5.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmporrc5gf5.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335110
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) return false;\n    if (n === 1) return true;\n    if (x === 1) return true;\n    if (x === n) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8yaz9lt3.js:69:12)\n    at Object.<anonymous> (/tmp/tmp8yaz9lt3.js:80:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335254
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu52hrsqa.js:36:12)\n    at Object.<anonymous> (/tmp/tmpu52hrsqa.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335108
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfrw_q263.js:43:12)\n    at Object.<anonymous> (/tmp/tmpfrw_q263.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335112
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjzzo6ri1.js:44:12)\n    at Object.<anonymous> (/tmp/tmpjzzo6ri1.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return true;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjd0j4imw.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpjd0j4imw.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn1r_swaz.js:47:12)\n    at Object.<anonymous> (/tmp/tmpn1r_swaz.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335254
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return false;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return false;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return false;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return false;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return false;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return false;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return false;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return false;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return false;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return false;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return false;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return false;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return false;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return false;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return false;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return false;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return false;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return false;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return false;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return false;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return false;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return false;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return false;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return false;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (x === 50) {\n        return false;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0s6hta3i.ts(193,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335254
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2) && is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2bhxh5ux.js:38:12)\n    at Object.<anonymous> (/tmp/tmp2bhxh5ux.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335254
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 51) {\n        return false;\n    }\n    if (n % n % 53) {\n        return false;\n    }\n    if (n % n % 57) {\n        return false;\n    }\n    if (n % n % 61) {\n        return false;\n    }\n    if (n % n % 63) {\n        return false;\n    }\n    if (n % n % 67) {\n        return false;\n    }\n    if (n % n % 71) {\n        return false;\n    }\n    if (n % n % 73) {\n        return false;\n    }\n    if (n % n % 77) {\n        return false;\n    }\n    if (n % n % 81) {\n        return false;\n    }\n    if (n % n % 83) {\n        return false;\n    }\n    if (n % n % 85) {\n        return false;\n    }\n    if (n % n % 89) {\n        return false;\n    }\n    if (n % n % 91) {\n        return false;\n    }\n    if (n % n % 93) {\n        return false;\n    }\n    if (n % n % 95) {\n        return false;\n    }\n    if (n % n % 97) {\n        return false;\n    }\n    if (n % n % 99) {\n        return false;\n    }\n    if (n % n % 101) {\n        return false;\n    }\n    if (n % n % 103) {\n        return false;\n    }\n    if (n % n % 105) {\n        return false;\n    }\n    if (n % n % 107) {\n        return false;\n    }\n    if (n % n % 109) {\n        return false;\n    }\n    if (n % n % 111) {\n        return false;\n    }\n    if (n % n % 113) {\n        return false;\n    }\n    if (n % n % 115) {\n        return false;\n    }\n    if (n % n % 117) {\n        return false;\n    }\n    if (n % n % 119) {\n        return false;\n    }\n    if (n % n % 121) {\n        return false;\n    }\n    if (n % n % 123) {\n        return false;\n    }\n    if (n % n % 125) {\n        return false;\n    }\n    if (n % n % 127) {\n        return false;\n    }\n    if (n % n % 129) {\n        return false;\n    }\n    if (n % n % 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp322er7rr.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmp322er7rr.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 4 === 2) {\n        return true;\n    }\n    if (n % 4 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 6 === 2) {\n        return true;\n    }\n    if (n % 6 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    if (n % 8 === 2) {\n        return true;\n    }\n    if (n % 8 === 1) {\n        return false;\n    }\n    if (n % 9 === 2) {\n        return true;\n    }\n    if (n % 9 === 1) {\n        return false;\n    }\n    if (n % 10 === 2) {\n        return true;\n    }\n    if (n % 10 === 1) {\n        return false;\n    }\n    if (n % 11 === 2) {\n        return true;\n    }\n    if (n % 11 === 1) {\n        return false;\n    }\n    if (n % 12 === 2) {\n        return true;\n    }\n    if (n % 12 === 1) {\n        return false;\n    }\n    if (n % 13 === 2) {\n        return true;\n    }\n    if (n % 13 === 1) {\n        return false;\n    }\n    if (n % 14 === 2) {\n        return true;\n    }\n    if (n % 14 === 1) {\n        return false;\n    }\n    if (n % 15 === 2) {\n        return true;\n    }\n    if (n % 15 === 1) {\n        return false;\n    }\n    if (n % 16 === 2) {\n        return true;\n    }\n    if (n % 16 === 1) {\n        return false;\n    }\n    if (n % 17 === 2) {\n        return true;\n    }\n    if (n % 17 === 1) {\n        return false;\n    }\n    if (n % 18 === 2) {\n        return true;\n    }\n    if (n % 18 === 1) {\n        return false;\n    }\n    if (n % 19 === 2) {\n        return true;\n    }\n    if (n % 19 === 1) {\n        return false;\n    }\n    if (n % 20 === 2) {\n        return true;\n    }\n    if (n % 20 === 1) {\n        return false;\n    }\n    if (n % 21 === 2) {\n        return true;\n    }\n    if (n % 21 === 1) {\n        return false;\n    }\n    if (n % 22 === 2) {\n        return true;\n    }\n    if (n % 22 === 1) {\n        return false;\n    }\n    if (n % 23 === 2) {\n        return true;\n    }\n    if (n % 23 === 1) {\n        return false;\n    }\n    if (n % 24 === 2) {\n        return true;\n    }\n    if (n % 24 === 1) {\n        return false;\n    }\n    if (n % 25 === 2) {\n        return true;\n    }\n    if (n % 25 === 1) {\n        return false;\n    }\n    if (n % 26 === 2) {\n        return true;\n    }\n    if (n % 26 === 1) {\n        return false;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjybyejlx.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335108
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpghe036rs.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmpghe036rs.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335254
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return x === 1;\n    }\n    if (n % 3 === 2) {\n        return x === 1;\n    }\n    if (n % 3 === 1) {\n        return x === 1;\n    }\n    if (n % 4 === 2) {\n        return x === 1;\n    }\n    if (n % 4 === 1) {\n        return x === 1;\n    }\n    if (n % 5 === 2) {\n        return x === 1;\n    }\n    if (n % 5 === 1) {\n        return x === 1;\n    }\n    if (n % 6 === 2) {\n        return x === 1;\n    }\n    if (n % 6 === 1) {\n        return x === 1;\n    }\n    if (n % 7 === 2) {\n        return x === 1;\n    }\n    if (n % 7 === 1) {\n        return x === 1;\n    }\n    if (n % 8 === 2) {\n        return x === 1;\n    }\n    if (n % 8 === 1) {\n        return x === 1;\n    }\n    if (n % 9 === 2) {\n        return x === 1;\n    }\n    if (n % 9 === 1) {\n        return x === 1;\n    }\n    if (n % 10 === 2) {\n        return x === 1;\n    }\n    if (n % 10 === 1) {\n        return x === 1;\n    }\n    if (n % 11 === 2) {\n        return x === 1;\n    }\n    if (n % 11 === 1) {\n        return x === 1;\n    }\n    if (n % 12 === 2) {\n        return x === 1;\n    }\n    if (n % 12 === 1) {\n        return x === 1;\n    }\n    if (n % 13 === 2) {\n        return x === 1;\n    }\n    if (n % 13 === 1) {\n        return x === 1;\n    }\n    if (n % 14 === 2) {\n        return x === 1;\n    }\n    if (n % 14 === 1) {\n        return x === 1;\n    }\n    if (n % 15 === 2) {\n        return x === 1;\n    }\n    if (n % 15 === 1) {\n        return x === 1;\n    }\n    if (n % 16 === 2) {\n        return x === 1;\n    }\n    if (n % 16 === 1) {\n        return x === 1;\n    }\n    if (n % 17 === 2) {\n        return x === 1;\n    }\n    if (n % 17 === 1) {\n        return x === 1;\n    }\n    if (n % 18 === 2) {\n        return x === 1;\n    }\n    if (n % 18 === 1) {\n        return x === 1;\n    }\n    if (n % 19 === 2) {\n        return x === 1;\n    }\n    if (n % 19 === 1) {\n        return x === 1;\n    }\n    if (n % 20 === 2) {\n        return x === 1;\n    }\n    if (n % 20 === 1) {\n        return x === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf6cxyv3q.ts(140,9): error TS1005: ';' expected.\n../../../../tmp/tmpf6cxyv3q.ts(158,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335254
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyr2dwduc.js:47:12)\n    at Object.<anonymous> (/tmp/tmpyr2dwduc.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335254
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 2) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 2) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 2) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpabbppndb.js:56:12)\n    at Object.<anonymous> (/tmp/tmpabbppndb.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % -2147483648 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsrz6tw_s.js:119:12)\n    at Object.<anonymous> (/tmp/tmpsrz6tw_s.js:130:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0k2eeqdw.ts(83,9): error TS1005: ')' expected.\n../../../../tmp/tmp0k2eeqdw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335103
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return false;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo_3wn8pj.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n <= 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (x === 50) {\n        return true;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7cuynujc.ts(192,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpexd1mk91.js:54:12)\n    at Object.<anonymous> (/tmp/tmpexd1mk91.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpouwmmbr6.js:54:12)\n    at Object.<anonymous> (/tmp/tmpouwmmbr6.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkiuo82d6.js:44:12)\n    at Object.<anonymous> (/tmp/tmpkiuo82d6.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw0e81h3.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpqw0e81h3.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8ur64pco.js:147:12)\n    at Object.<anonymous> (/tmp/tmp8ur64pco.js:158:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0k2eeqdw.ts(83,9): error TS1005: ')' expected.\n../../../../tmp/tmp0k2eeqdw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335103
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpijjt89jh.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw0e81h3.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpqw0e81h3.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz35cpynb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpz35cpynb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpczerhvnq.js:50:12)\n    at Object.<anonymous> (/tmp/tmpczerhvnq.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwogk2w4v.ts(106,9): error TS1005: ')' expected.\n../../../../tmp/tmpwogk2w4v.ts(124,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335254
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxuqw2vnp.js:45:12)\n    at Object.<anonymous> (/tmp/tmpxuqw2vnp.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppe7x7cgz.js:54:12)\n    at Object.<anonymous> (/tmp/tmppe7x7cgz.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnjc6xuee.js:41:12)\n    at Object.<anonymous> (/tmp/tmpnjc6xuee.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq1d4z8n2.js:44:12)\n    at Object.<anonymous> (/tmp/tmpq1d4z8n2.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335114
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphbfsurrw.js:47:12)\n    at Object.<anonymous> (/tmp/tmphbfsurrw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335107
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpymx4san8.js:60:12)\n    at Object.<anonymous> (/tmp/tmpymx4san8.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0 || n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9mkf0mph.js:41:12)\n    at Object.<anonymous> (/tmp/tmp9mkf0mph.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 81 === 0) {\n        return false;\n    }\n    if (n % n % 87 === 0) {\n        return false;\n    }\n    if (n % n % 93 === 0) {\n        return false;\n    }\n    if (n % n % 99 === 0) {\n        return false;\n    }\n    if (n % n % 103 === 0) {\n        return false;\n    }\n    if (n % n % 107 === 0) {\n        return false;\n    }\n    if (n % n % 111 === 0) {\n        return false;\n    }\n    if (n % n % 127 === 0) {\n        return false;\n    }\n    if (n % n % 131 === 0) {\n        return false;\n    }\n    if (n % n % 137 === 0) {\n        return false;\n    }\n    if (n % n % 141 === 0) {\n        return false;\n    }\n    if (n % n % 147 === 0) {\n        return false;\n    }\n    if (n % n % 151 === 0) {\n        return false;\n    }\n    if (n % n % 157 === 0) {\n        return false;\n    }\n    if (n % n % 161 === 0) {\n        return false;\n    }\n    if (n % n % 167 === 0) {\n        return false;\n    }\n    if (n % n % 171 === 0) {\n        return false;\n    }\n    if (n % n % 177 === 0) {\n        return false;\n    }\n    if (n % n % 181 === 0) {\n        return false;\n    }\n    if (n % n % 187 === 0) {\n        return false;\n    }\n    if (n % n % 191 === 0) {\n        return false;\n    }\n    if (n % n % 197 === 0) {\n        return false;\n    }\n    if (n % n % 201 === 0) {\n        return false;\n    }\n    if (n % n % 207 === 0) {\n        return false;\n    }\n    if (n % n % 211 === 0) {\n        return false;\n    }\n    if (n % n % 217 === 0) {\n        return false;\n    }\n    if (n % n % 221 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2hlmao82.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmp2hlmao82.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335255
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoblhrou1.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmpoblhrou1.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 83 === 0) {\n        return false;\n    }\n    if (n % n % 89 === 0) {\n        return false;\n    }\n    if (n % n % 97 === 0) {\n        return false;\n    }\n    if (n % n % 103 === 0) {\n        return false;\n    }\n    if (n % n % 105 === 0) {\n        return false;\n    }\n    if (n % n % 109 === 0) {\n        return false;\n    }\n    if (n % n % 113 === 0) {\n        return false;\n    }\n    if (n % n % 117 === 0) {\n        return false;\n    }\n    if (n % n % 123 === 0) {\n        return false;\n    }\n    if (n % n % 127 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu3wt98ht.js:119:12)\n    at Object.<anonymous> (/tmp/tmpu3wt98ht.js:130:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppe7x7cgz.js:54:12)\n    at Object.<anonymous> (/tmp/tmppe7x7cgz.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % x === 0) {\n    return true;\n  }\n  if (n % n % x === 0) {\n    return true;\n  }\n  if (n % n % n % x === 0) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvdrlyc0t.js:41:12)\n    at Object.<anonymous> (/tmp/tmpvdrlyc0t.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % n % 2 === 0) return false;\n    if (n % n % 2 === 1) return true;\n    if (n % n % n % 2 === 0) return false;\n    if (n % n % n % 2 === 1) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb1nz8lhi.js:39:12)\n    at Object.<anonymous> (/tmp/tmpb1nz8lhi.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335251
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn974ioyp.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmpn974ioyp.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335108
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp48oddm01.ts(112,9): error TS1005: ')' expected.\n../../../../tmp/tmp48oddm01.ts(130,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335255
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmd9awz5z.ts(172,1): error TS1005: ')' expected.\n../../../../tmp/tmpmd9awz5z.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335251
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjnkma57d.js:35:12)\n    at Object.<anonymous> (/tmp/tmpjnkma57d.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335255
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    let m = n / 2;\n    while (m > 1) {\n        if (x === m * m) {\n            return true;\n        }\n        m--;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_d5qf3im.js:42:12)\n    at Object.<anonymous> (/tmp/tmp_d5qf3im.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335257
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8x0snmxg.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8x0snmxg.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335257
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 1) {\n        return true;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return true;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnrp180c7.ts(148,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335257
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb032fqml.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335257
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfqqvpmne.js:36:12)\n    at Object.<anonymous> (/tmp/tmpfqqvpmne.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return true;\n    if (n === 1) return false;\n    if (n % 2 === 0) return is_simple_power(x, n / 2);\n    if (n % 2 === 1) return is_simple_power(x, n / 2);\n    if (n % 3 === 0) return is_simple_power(x, n / 3);\n    if (n % 3 === 1) return is_simple_power(x, n / 3);\n    if (n % 4 === 0) return is_simple_power(x, n / 4);\n    if (n % 4 === 1) return is_simple_power(x, n / 4);\n    if (n % 5 === 0) return is_simple_power(x, n / 5);\n    if (n % 5 === 1) return is_simple_power(x, n / 5);\n    if (n % 6 === 0) return is_simple_power(x, n / 6);\n    if (n % 6 === 1) return is_simple_power(x, n / 6);\n    if (n % 7 === 0) return is_simple_power(x, n / 7);\n    if (n % 7 === 1) return is_simple_power(x, n / 7);\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7_8z9a5w.js:51:12)\n    at Object.<anonymous> (/tmp/tmp7_8z9a5w.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335258
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    if (n % 11 === 2) {\n        return true;\n    }\n    if (n % 11 === 1) {\n        return false;\n    }\n    if (n % 13 === 2) {\n        return true;\n    }\n    if (n % 13 === 1) {\n        return false;\n    }\n    if (n % 17 === 2) {\n        return true;\n    }\n    if (n % 17 === 1) {\n        return false;\n    }\n    if (n % 19 === 2) {\n        return true;\n    }\n    if (n % 19 === 1) {\n        return false;\n    }\n    if (n % 23 === 2) {\n        return true;\n    }\n    if (n % 23 === 1) {\n        return false;\n    }\n    if (n % 29 === 2) {\n        return true;\n    }\n    if (n % 29 === 1) {\n        return false;\n    }\n    if (n % 31 === 2) {\n        return true;\n    }\n    if (n % 31 === 1) {\n        return false;\n    }\n    if (n % 37 === 2) {\n        return true;\n    }\n    if (n % 37 === 1) {\n        return false;\n    }\n    if (n % 43 === 2) {\n        return true;\n    }\n    if (n % 43 === 1) {\n        return false;\n    }\n    if (n % 47 === 2) {\n        return true;\n    }\n    if (n % 47 === 1) {\n        return false;\n    }\n    if (n % 53 === 2) {\n        return true;\n    }\n    if (n % 53 === 1) {\n        return false;\n    }\n    if (n % 59 === 2) {\n        return true;\n    }\n    if (n % 59 === 1) {\n        return false;\n    }\n    if (n % 63 === 2) {\n        return true;\n    }\n    if (n % 63 === 1) {\n        return false;\n    }\n    if (n % 69 === 2) {\n        return true;\n    }\n    if (n % 69 === 1) {\n        return false;\n    }\n    if (n % 73 === 2) {\n        return true;\n    }\n    if (n % 73 === 1) {\n        return false;\n    }\n    if (n % 79 === 2) {\n        return true;\n    }\n    if (n % 79 === 1) {\n        return false;\n    }\n    if (n % 83 === 2) {\n        return true;\n    }\n    if (n % 83 === 1) {\n        return false;\n    }\n    if (n % 87 === 2) {\n        return true;\n    }\n    if (n % 87 === 1) {\n        return false;\n    }\n    if (n % 93 === 2) {\n        return true;\n    }\n    if (n % 93 === 1) {\n        return false;\n    }\n    if (n % 97 === 2) {\n        return true;\n    }\n    if (n % 97 === 1) {\n        return false;\n    }\n    if (n % 103 === 2) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_g3rcegf.ts(188,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335111
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % n === 0) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl9ydp_m9.js:41:12)\n    at Object.<anonymous> (/tmp/tmpl9ydp_m9.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % n === 0) return true;\n    if (n % n % 2 === 0) return false;\n    if (n % n % n === 0) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdsutso2l.js:35:12)\n    at Object.<anonymous> (/tmp/tmpdsutso2l.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return true;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return true;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return true;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return true;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return true;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return true;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbr_l66kn.ts(191,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335257
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 3 === 0) {\n    return true;\n  }\n  if (n % n % 4 === 0) {\n    return false;\n  }\n  if (n % n % 5 === 0) {\n    return true;\n  }\n  if (n % n % 6 === 0) {\n    return false;\n  }\n  if (n % n % 7 === 0) {\n    return true;\n  }\n  if (n % n % 8 === 0) {\n    return false;\n  }\n  if (n % n % 9 === 0) {\n    return true;\n  }\n  if (n % n % 10 === 0) {\n    return false;\n  }\n  if (n % n % 11 === 0) {\n    return true;\n  }\n  if (n % n % 12) {\n    return false;\n  }\n  if (n % n % 13 === 0) {\n    return true;\n  }\n  if (n % n % 14 === 0) {\n    return false;\n  }\n  if (n % n % 15 === 0) {\n    return true;\n  }\n  if (n % n % 16 === 0) {\n    return false;\n  }\n  if (n % n % 17 === 0) {\n    return true;\n  }\n  if (n % n % 18 === 0) {\n    return false;\n  }\n  if (n % n % 19 === 0) {\n    return true;\n  }\n  if (n % n % 20 === 0) {\n    return false;\n  }\n  if (n % n % 21 === 0) {\n    return true;\n  }\n  if (n % n % 22 === 0) {\n    return false;\n  }\n  if (n % n % 23 === 0) {\n    return true;\n  }\n  if (n % n % 24 === 0) {\n    return false;\n  }\n  if (n % n % 25 === 0) {\n    return true;\n  }\n  if (n % n % 26 === 0) {\n    return false;\n  }\n  if (n % n % 27 === 0) {\n    return true;\n  }\n  if (n % n % 28 === 0) {\n    return false;\n  }\n  if (n % n % 29 === 0) {\n    return true;\n  }\n  if (n % n % 30 === 0) {\n    return false;\n  }\n  if (n % n % 31 === 0) {\n    return true;\n  }\n  if (n % n % 32 === 0) {\n    return false;\n  }\n  if (n % n % 33 === 0) {\n    return true;\n  }\n  if (n % n % 34 === 0) {\n    return false;\n  }\n  if (n % n % 35 === 0) {\n    return true;\n  }\n  if (n % n % 36 === 0) {\n    return false;\n  }\n  if (n % n % 37 === 0) {\n    return true;\n  }\n  if (n % n % 38 === 0) {\n    return false;\n  }\n  if (n % n % 39 === 0) {\n    return true;\n  }\n  if (n % n % 40 === 0) {\n    return false;\n  }\n  if (n % n % 41 === 0) {\n    return true;\n  }\n  if (n % n % 42 === 0) {\n    return false;\n  }\n  if (n % n % 43 === 0) {\n    return true;\n  }\n  if (n % n % 44 === 0) {\n    return false;\n  }\n  if (n % n % 45 === 0) {\n    return true;\n  }\n  if (n % n % 46 === 0) {\n    return false;\n  }\n  if (n % n % 47 === 0) {\n    return true;\n  }\n  if (n % n % 48 === 0) {\n    return false;\n  }\n  if (n % n % 49 === 0) {\n    return true;\n  }\n  if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8wqvor8n.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbnqmyy_p.js:38:12)\n    at Object.<anonymous> (/tmp/tmpbnqmyy_p.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return x === Math.pow(x, n / 2);\n    }\n    return x === Math.pow(x, n / 2) && is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppa723e_9.js:35:12)\n    at Object.<anonymous> (/tmp/tmppa723e_9.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335257
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0k2eeqdw.ts(83,9): error TS1005: ')' expected.\n../../../../tmp/tmp0k2eeqdw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335103
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplolsmwgg.js:39:12)\n    at Object.<anonymous> (/tmp/tmplolsmwgg.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335111
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0 && n >= 2) {\n        return true;\n    }\n    if (n % n === 0 && n >= 3) {\n        return false;\n    }\n    if (n % n === 0 && n >= 5) {\n        return true;\n    }\n    if (n % n === 0 && n >= 7) {\n        return false;\n    }\n    if (n % n === 0 && n >= 9) {\n        return true;\n    }\n    if (n % n === 0 && n >= 11) {\n        return false;\n    }\n    if (n % n === 0 && n >= 13) {\n        return true;\n    }\n    if (n % n === 0 && n >= 15) {\n        return false;\n    }\n    if (n % n === 0 && n >= 17) {\n        return true;\n    }\n    if (n % n === 0 && n >= 19) {\n        return false;\n    }\n    if (n % n === 0 && n >= 21) {\n        return true;\n    }\n    if (n % n === 0 && n >= 23) {\n        return false;\n    }\n    if (n % n === 0 && n >= 25) {\n        return true;\n    }\n    if (n % n === 0 && n >= 27) {\n        return false;\n    }\n    if (n % n === 0 && n >= 29) {\n        return true;\n    }\n    if (n % n === 0 && n >= 31) {\n        return false;\n    }\n    if (n % n === 0 && n >= 33) {\n        return true;\n    }\n    if (n % n === 0 && n >= 35) {\n        return false;\n    }\n    if (n % n === 0 && n >= 37) {\n        return true;\n    }\n    if (n % n === 0 && n >= 39) {\n        return false;\n    }\n    if (n % n === 0 && n >= 41) {\n        return true;\n    }\n    if (n % n === 0 && n >= 43) {\n        return false;\n    }\n    if (n % n === 0 && n >= 45) {\n        return true;\n    }\n    if (n % n === 0 && n >= 47) {\n        return false;\n    }\n    if (n % n === 0 && n >= 49) {\n        return true;\n    }\n    if (n % n === 0 && n >= 51) {\n        return false;\n    }\n    if (n % n === 0 && n >= 53) {\n        return true;\n    }\n    if (n % n === 0 && n >= 55) {\n        return false;\n    }\n    if (n % n === 0 && n >= 57) {\n        return true;\n    }\n    if (n % n === 0 && n >= 59) {\n        return false;\n    }\n    if (n % n === 0 && n >= 61) {\n        return true;\n    }\n    if (n % n === 0 && n >= 63) {\n        return false;\n    }\n    if (n % n === 0 && n >= 65) {\n        return true;\n    }\n    if (n % n === 0 && n >= 67) {\n        return false;\n    }\n    if (n % n === 0 && n >= 69) {\n        return true;\n    }\n    if (n % n === 0 && n >= 71) {\n        return false;\n    }\n    if (n % n === 0 && n >= 73) {\n        return true;\n    }\n    if (n % n === 0 && n >= 75) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm19byd68.ts(139,9): error TS1005: ')' expected.\n../../../../tmp/tmpm19byd68.ts(157,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335258
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzklq17_d.ts(143,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp10l_hl4q.js:53:12)\n    at Object.<anonymous> (/tmp/tmp10l_hl4q.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335104
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf8uj29gs.js:47:12)\n    at Object.<anonymous> (/tmp/tmpf8uj29gs.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbnqmyy_p.js:38:12)\n    at Object.<anonymous> (/tmp/tmpbnqmyy_p.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 1) {\n    return true;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 3 === 0) {\n    return true;\n  }\n  if (n % n % 4 === 0) {\n    return false;\n  }\n  if (n % n % 5 === 0) {\n    return true;\n  }\n  if (n % n % 6 === 0) {\n    return false;\n  }\n  if (n % n % 7 === 0) {\n    return true;\n  }\n  if (n % n % 8 === 0) {\n    return false;\n  }\n  if (n % n % 9 === 0) {\n    return true;\n  }\n  if (n % n % 10 === 0) {\n    return false;\n  }\n  if (n % n % 11 === 0) {\n    return true;\n  }\n  if (n % n % 12 === 0) {\n    return false;\n  }\n  if (n % n % 13 === 0) {\n    return true;\n  }\n  if (n % n % 14 === 0) {\n    return false;\n  }\n  if (n % n % 15 === 0) {\n    return true;\n  }\n  if (n % n % 16 === 0) {\n    return false;\n  }\n  if (n % n % 17 === 0) {\n    return true;\n  }\n  if (n % n % 18 === 0) {\n    return false;\n  }\n  if (n % n % 19 === 0) {\n    return true;\n  }\n  if (n % n % 20 === 0) {\n    return false;\n  }\n  if (n % n % 21 === 0) {\n    return true;\n  }\n  if (n % n % 22 === 0) {\n    return false;\n  }\n  if (n % n % 23 === 0) {\n    return true;\n  }\n  if (n % n % 24 === 0) {\n    return false;\n  }\n  if (n % n % 25 === 0) {\n    return true;\n  }\n  if (n % n % 26 === 0) {\n    return false;\n  }\n  if (n % n % 27 === 0) {\n    return true;\n  }\n  if (n % n % 28 === 0) {\n    return false;\n  }\n  if (n % n % 29 === 0) {\n    return true;\n  }\n  if (n % n % 30 === 0) {\n    return false;\n  }\n  if (n % n % 31 === 0) {\n    return true;\n  }\n  if (n % n % 32 === 0) {\n    return false;\n  }\n  if (n % n % 33 === 0) {\n    return true;\n  }\n  if (n % n % 34 === 0) {\n    return false;\n  }\n  if (n % n % 35 === 0) {\n    return true;\n  }\n  if (n % n % 36 === 0) {\n    return false;\n  }\n  if (n % n % 37 === 0) {\n    return true;\n  }\n  if (n % n % 38 === 0) {\n    return false;\n  }\n  if (n % n % 39 === 0) {\n    return true;\n  }\n  if (n % n % 40 === 0) {\n    return false;\n  }\n  if (n % n % 41 === 0) {\n    return true;\n  }\n  if (n % n % 42 === 0) {\n    return false;\n  }\n  if (n % n % 43 === 0) {\n    return true;\n  }\n  if (n % n % 44 === 0) {\n    return false;\n  }\n  if (n % n % 45 === 0) {\n    return true;\n  }\n  if (n % n % 46 === 0) {\n    return false;\n  }\n  if (n % n % 47 === 0) {\n    return true;\n  }\n  if (n % n % 48 === 0) {\n    return false;\n  }\n  if (n % n % 49 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3gbs3dkc.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplkwosr_z.js:36:12)\n    at Object.<anonymous> (/tmp/tmplkwosr_z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335115
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz35cpynb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpz35cpynb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335247
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjr1ra2vj.js:57:12)\n    at Object.<anonymous> (/tmp/tmpjr1ra2vj.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335254
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  if (n % 4 === 0) return false;\n  if (n % 4 === 1) return true;\n  if (n % 8 === 0) return false;\n  if (n % 8 === 1) return true;\n  if (n % 16 === 0) return false;\n  if (n % 16 === 1) return true;\n  if (n % 32 === 0) return false;\n  if (n % 32 === 1) return true;\n  if (n % 64 === 0) return false;\n  if (n % 64 === 1) return true;\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu0pxe9fa.js:51:12)\n    at Object.<anonymous> (/tmp/tmpu0pxe9fa.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335110
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppe7x7cgz.js:54:12)\n    at Object.<anonymous> (/tmp/tmppe7x7cgz.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return false;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return false;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi_mnqay_.js:53:12)\n    at Object.<anonymous> (/tmp/tmpi_mnqay_.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbnqmyy_p.js:38:12)\n    at Object.<anonymous> (/tmp/tmpbnqmyy_p.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return true;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return true;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return true;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return true;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return true;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpegin8iq9.ts(192,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvk35gsqg.js:39:12)\n    at Object.<anonymous> (/tmp/tmpvk35gsqg.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335258
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmajjb97y.ts(175,1): error TS1005: ')' expected.\n../../../../tmp/tmpmajjb97y.ts(193,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2) && is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2bhxh5ux.js:38:12)\n    at Object.<anonymous> (/tmp/tmp2bhxh5ux.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335254
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw0e81h3.ts(172,9): error TS1005: ')' expected.\n../../../../tmp/tmpqw0e81h3.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335100
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return true;\n    }\n    if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjwthqevp.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335114
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return true;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return true;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return true;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return true;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return true;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return true;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return true;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return true;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return true;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return true;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return true;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return true;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return true;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return true;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return true;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return true;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return true;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return true;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return true;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return true;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return true;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return true;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return true;\n    }\n    if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp65ero0hd.ts(190,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335258
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return true;\n    }\n    if (n % n % n === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    if (n % n % n % n === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return true;\n    }\n    if (n % n % n % n % n === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk4yeoic3.js:56:12)\n    at Object.<anonymous> (/tmp/tmpk4yeoic3.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335258
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    if (n % 8589934592 === 0) return true;\n    if (n % 17179869184 === 0) return false;\n    if (n % 34359738368 === 0) return true;\n    if (n % 68719476736 === 0) return false;\n    if (n % 13743895347216 === 0) return true;\n    if (n % 27487790694432 === 0) return false;\n    if (n % 54975581388832 === 0) return true;\n    if (n % 1099511627776 === 0) return false;\n    if (n % 2199023255552 === 0) return true;\n    if (n % 43980465111040 === 0) return false;\n    if (n % 838860833516800 === 0) return true;\n    if (n % 167772169984 === 0) return false;\n    if (n % 33554435748832 === 0) return true;\n    if (n % 67108866882240 === 0) return false;\n    if (n % 13421772787840 === 0) return true;\n    if (n % 2684354564\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwcyk86ru.ts(67,1): error TS1005: ')' expected.\n../../../../tmp/tmpwcyk86ru.ts(85,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335258
    }
  ]
}