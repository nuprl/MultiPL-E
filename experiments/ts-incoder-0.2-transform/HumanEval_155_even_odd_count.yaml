name: HumanEval_155_even_odd_count
language: ts
prompt: "//Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n\
  // [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0,\
  \ 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2,\
  \ 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3,\
  \ 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2,\
  \ 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();"
completions: ["  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n  \
    \  const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n  \
    \  } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  const evenCount: number = Math.floor(num\
    \ / 2);\n  const oddCount: number = num - evenCount;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0)\
    \ {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let\
    \ odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n   \
    \ } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = Math.floor(num / 2);\n  const oddCount: number\
    \ = num % 2;\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n \
    \ let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n  \
    \  if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num\
    \ > 0) {\n    num = num / 10;\n    if (num % 2 === 0) {\n      even++;\n    }\
    \ else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "  let even =\
    \ 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num\
    \ > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder\
    \ = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n  \
    \  } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while\
    \ (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n \
    \     even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n\
    \  }\n  return [even, odd];\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num\
    \ > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [even, odd];\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n\
    \    num = num / 10;\n    even++;\n  }\n  while (num > 0) {\n    num = num / 10;\n\
    \    odd++;\n  }\n  return [even, odd];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
