language: ts
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n            while\
    \ (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp1x1ej2_j.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1x1ej2_j.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333756
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const primeFactors: number[]\
    \ = [];\n  let factor = 1;\n  let primeFactor = 1;\n  let isPrime = true;\n  let\
    \ isFactor = false;\n  let isPrimeFactor = false;\n  let isPrimePrimeFactor =\
    \ false;\n  let isPrimePrimePrimeFactor = false;\n  let isPrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimeFactor = false;\n  let isPrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimeFactor = false;\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = false;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = false;\n \
    \ let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = false;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = false;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor =\
    \ false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = false;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePri\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmptqz9gkzf.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333764
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n   \
    \ factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpuv18ai9c.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuv18ai9c.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const factorsMap: Map<number,\
    \ number> = new Map();\n  for (let i = 1; i <= n; i++) {\n    const factor: number\
    \ = i;\n    while (n % factor === 0) {\n      n /= factor;\n      factors.push(factor);\n\
    \      factorsMap.set(factor, factorsMap.get(factor) + 1);\n    }\n  }\n  for\
    \ (let [factor, count] of factorsMap) {\n    factors.push(factor);\n    factors.push(count);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffcdfe0cf60\n 1: 0x2b1f8b005727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b1f8bb9a28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b1f8b4d4f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b1f8b666760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b1f8b66e0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b1f8b8587db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b1f8b1b77f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333812
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let i\
    \ = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333806
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >\
    \ 1) {\n    if (n % factor === 0) {\n      n /= factor;\n      factors.push(factor);\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdd5fa4a20\n 1: 0x2b354aae1727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b354b67628e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b354afb0f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b354b142760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b354b14a0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b354b3347db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b354ac937f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333809
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc67bdebc0\n 1: 0x2b481422d727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4814dc228e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b48146fcf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b481488e760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b48148960cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4814a807db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b48143df7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333759
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n\
    \        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpmzw0xzd6.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmzw0xzd6.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333763
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \  }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp1dwlua6x.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1dwlua6x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333765
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    let i = 2;\n    while (i <= n) {\n  \
    \      while (n % i === 0) {\n            factors.push(i);\n            n = n\
    \ / i;\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333806
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const primes: number[] = [];\n\
    \  let factor: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
    \  let prime: number[] = [];\n  let primeFactors: number[] = [];\n  let primeFactorsCount:\
    \ number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountMax: number[]\
    \ = [];\n  let factorsCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex2: number[] = [];\n  let factorsCountMaxIndexIndex3:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex4: number[] = [];\n  let factorsCountMaxIndexIndex5:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex6: number[] = [];\n  let factorsCountMaxIndexIndex7:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex8: number[] = [];\n  let factorsCountMaxIndexIndex9:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex10: number[] = [];\n  let factorsCountMaxIndexIndex11:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex12: number[] = [];\n  let factorsCountMaxIndexIndex13:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex14: number[] = [];\n  let factorsCountMaxIndexIndex15:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex16: number[] = [];\n  let factorsCountMaxIndexIndex17:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex18: number[] = [];\n  let factorsCountMaxIndexIndex19:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex20: number[] = [];\n  let factorsCountMaxIndexIndex21:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex22: number[] = [];\n  let factorsCountMaxIndexIndex23:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex24: number[] = [];\n  let factorsCountMaxIndexIndex25:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex26: number[] = [];\n  let factorsCountMaxIndexIndex27:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex28: number[] = [];\n  let factorsCountMaxIndexIndex29:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex30: number[] = [];\n  let factorsCountMaxIndexIndex31:\
    \ number[] = [];\n  let factorsCountMaxIndexIndex32: number[] = [];\n  let factorsCountMaxIndexIndex33:\
    \ number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpj92mpkx3.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333806
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors = [];\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333806
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp3wi707yd.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3wi707yd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const primeFactors: number[]\
    \ = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      primeFactors.push(i);\n      while (n % i === 0) {\n        n /= i;\n \
    \       factors.push(i);\n      }\n    }\n  }\n  return primeFactors.concat(factors);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpw6mnt8i5.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw6mnt8i5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpeewkf_i6.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeewkf_i6.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333753
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdc9e85000\n 1: 0x2ac40e9dd727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ac40f57228e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ac40eeacf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ac40f03e760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ac40f0460cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ac40f2307db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ac40eb8f7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333755
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpq2mb55rl.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq2mb55rl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const primeFactors: number[]\
    \ = [];\n  let isPrime = true;\n  let isDivisible = true;\n  let isFactor = false;\n\
    \  let isPrimeFactor = false;\n  let factorCount = 0;\n  let primeFactorCount\
    \ = 0;\n  let isPrimeFactorOfPrimeFactor = false;\n  let isPrimeFactorOfDivisible\
    \ = false;\n  let isPrimeFactorOfFactor = false;\n  let isPrimeFactorOfPrime =\
    \ true;\n  let isPrimeFactorOfDivisible = true;\n  let isPrimeFactorOfFactor =\
    \ true;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactor = false;\n  let isPrimeFactorOfPrimeFactorOfDivisible\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfFactor = false;\n  let isPrimeFactorOfPrimeFactorOfPrime\
    \ = true;\n  let isPrimeFactorOfPrimeFactorOfDivisible = true;\n  let isPrimeFactorOfPrimeFactorOfFactor\
    \ = true;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor = false;\n\
    \  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfDivisible = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfFactor\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime = true;\n  let\
    \ isPrimeFactorOfPrimeFactorOfPrimeFactorOfDivisible = true;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfFactor\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfDivisible\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfFactor\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = false;\n  let isPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9rmxfjer.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let i = 2;\n    while (i <=\
    \ Math.sqrt(n)) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpdgctoeze.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdgctoeze.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp_x4xr960.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_x4xr960.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n\
    \        n /= i;\n        factors.push(i);\n      }\n    } else {\n      i++;\n\
    \    }\n    if (n === 1) break;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp9vjse80j.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9vjse80j.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  const factors: number[] = [];\n  for\
    \ (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333806
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let isPrime: boolean;\n  let isPrimeCount: number[] = [];\n  let isPrimePrime:\
    \ boolean;\n  let isPrimePrimeCount: number[] = [];\n  let isPrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[]\
    \ = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[]\
    \ = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6__fcwii.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333806
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValues: number[] = [];\n    let factorsCountMapValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValues: number[] = [];\n    let\
    \ factorsCountMapValuesValuesKeys: number[] = [];\n    let factorsCountMapValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesKeys: number[] = [];\n\
    \    let factorsCountMapValuesValuesValuesValues: number[] = [];\n    let factorsCountMapValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValues: number[]\
    \ = [];\n    let factorsCountMapValuesValuesValuesValuesValuesKeys: number[] =\
    \ [];\n    let factorsCountMapValuesValuesValuesValuesValuesValues: number[] =\
    \ [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesKeys: number[]\
    \ = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKey\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpe6uxucj5.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333806
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333764
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n >= i)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpr63p68vq.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr63p68vq.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n \
    \   factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmp296d3znv.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp296d3znv.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let factorization\
    \ = factorizationTable[n];\n    for (let i = 1; i < factorization; i++) {\n  \
    \      if (factorizationTable[i] === n) {\n            factors.push(factor);\n\
    \            factor *= i;\n        } else {\n            factors.push(factor);\n\
    \            factor *= factorizationTable[i];\n        }\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpoup4wt2b.ts(13,25): error TS2304: Cannot find name ''factorizationTable''.

    ../../../../tmp/tmpoup4wt2b.ts(15,13): error TS2304: Cannot find name ''factorizationTable''.

    ../../../../tmp/tmpoup4wt2b.ts(20,23): error TS2304: Cannot find name ''factorizationTable''.

    '
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333764
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    if (n !== 1) {\n        factors.push(factor);\n    }\n \
    \   return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc31f59650\n 1: 0x2b292c153727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b292cce828e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b292c622f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b292c7b4760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b292c7bc0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b292c9a67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b292c3057f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333809
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      n /= factor;\n      factors.push(factor);\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe3b778c70\n 1: 0x2b92aa387727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b92aaf1c28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b92aa856f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b92aa9e8760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b92aa9f00cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b92aabda7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b92aa5397f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let primes: number[] = [];\n\
    \    let isPrime: boolean;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n  \
    \      isPrime = true;\n        for (let j = 0; j < primes.length; j++) {\n  \
    \          if (n % primes[j] === 0) {\n                isPrime = false;\n    \
    \            break;\n            }\n        }\n        if (isPrime) {\n      \
    \      primes.push(i);\n        }\n    }\n    for (let i = 0; i < primes.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < primes.length; j++)\
    \ {\n            if (primes[j] === primes[i]) {\n                count++;\n  \
    \          }\n        }\n        factors.push(count);\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpiol7vihe.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiol7vihe.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) factors.push(n);\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmphk2nmk1x.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmphk2nmk1x.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  57\n]\n\n\
    should loosely deep-equal\n\n[\n  3,\n  19\n]\n    at test (/tmp/tmp3ahiyexe.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3ahiyexe.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 57 ],\n\
    \  expected: [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333766
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i as number);\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors: number[] =\
    \ [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i\
    \ as number);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n !=\
    \ 1) {\n    factors.push(n as number);\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) {\n    return [];\n  }\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      \
    \  factors.push(i);\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpdd_0bdwt.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdd_0bdwt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333809
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    if (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff6a9f95e0\n 1: 0x2aef79b59727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2aef7a6ee28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aef7a028f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aef7a1ba760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aef7a1c20cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aef7a3ac7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aef79d0b7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333812
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >\
    \ 1) {\n    if (n % factor === 0) {\n      n /= factor;\n      factors.push(factor);\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdd5fa4a20\n 1: 0x2b354aae1727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b354b67628e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b354afb0f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b354b142760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b354b14a0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b354b3347db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b354ac937f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333809
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmppe7s6s7r.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppe7s6s7r.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333764
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpkm28j3c9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkm28j3c9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  const factorizer = factorizeNumber(n);\n\
    \  for (let i = 2; i <= factorizer.factors.length; i++) {\n    if (factorizer.factors.includes(i))\
    \ {\n      factors.push(factorizer.factors[i]);\n    }\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpfo6ujgc6.ts(12,22): error TS2304: Cannot find name ''factorizeNumber''.

    '
  timestamp: 1660333809
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpgq17lge2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgq17lge2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n\
    \  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n   \
    \   factor *= i;\n      i *= 2;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwvby4fve.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwvby4fve.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333760
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ factorCount: number[] = [];\n  let factorCountIndex: number[] = [];\n  let factorCountIndexMax:\
    \ number[] = [];\n  let factorCountIndexMaxIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndex: number[] = [];\n \
    \ let factorCountIndexMaxIndexIndexIndexIndex: number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndex: number[] = [];\n\
    \  let factorCountIndexMaxIndexIndexIndexIndexIndex: number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \  let factorCountIndexMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] =\
    \ [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndexIndexIndexIndexIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmps15ej1q0.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333809
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpjujo8zo5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjujo8zo5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n\
    \ % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n\
    \ /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp6oaw7btu.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6oaw7btu.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp8qw32kn4.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8qw32kn4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333753
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n    \
    \  }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp07xc84x5.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp07xc84x5.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpvacu2a9h.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvacu2a9h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333753
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) factors.push(n);\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpp2gfn2sa.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp2gfn2sa.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let i\
    \ = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n \
    \     n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \      if (n !== 1) {\n                factors.push(n);\n            }\n     \
    \   }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp446ni0oo.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp446ni0oo.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors: number[] =\
    \ [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n    \
    \  }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpziozc2ho.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpziozc2ho.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let factorCount: number[] = [];\n    let factorCountTemp: number[] = [];\n\
    \    let factorCountTemp2: number[] = [];\n    let factorCountTemp3: number[]\
    \ = [];\n    let factorCountTemp4: number[] = [];\n    let factorCountTemp5: number[]\
    \ = [];\n    let factorCountTemp6: number[] = [];\n    let factorCountTemp7: number[]\
    \ = [];\n    let factorCountTemp8: number[] = [];\n    let factorCountTemp9: number[]\
    \ = [];\n    let factorCountTemp10: number[] = [];\n    let factorCountTemp11:\
    \ number[] = [];\n    let factorCountTemp12: number[] = [];\n    let factorCountTemp13:\
    \ number[] = [];\n    let factorCountTemp14: number[] = [];\n    let factorCountTemp15:\
    \ number[] = [];\n    let factorCountTemp16: number[] = [];\n    let factorCountTemp17:\
    \ number[] = [];\n    let factorCountTemp18: number[] = [];\n    let factorCountTemp19:\
    \ number[] = [];\n    let factorCountTemp20: number[] = [];\n    let factorCountTemp21:\
    \ number[] = [];\n    let factorCountTemp22: number[] = [];\n    let factorCountTemp23:\
    \ number[] = [];\n    let factorCountTemp24: number[] = [];\n    let factorCountTemp25:\
    \ number[] = [];\n    let factorCountTemp26: number[] = [];\n    let factorCountTemp27:\
    \ number[] = [];\n    let factorCountTemp28: number[] = [];\n    let factorCountTemp29:\
    \ number[] = [];\n    let factorCountTemp30: number[] = [];\n    let factorCountTemp31:\
    \ number[] = [];\n    let factorCountTemp32: number[] = [];\n    let factorCountTemp33:\
    \ number[] = [];\n    let factorCountTemp34: number[] = [];\n    let factorCountTemp35:\
    \ number[] = [];\n    let factorCountTemp36: number[] = [];\n    let factorCountTemp37:\
    \ number[] = [];\n    let factorCountTemp38: number[] = [];\n    let factorCountTemp39:\
    \ number[] = [];\n    let factorCountTemp40: number[] = [];\n    let factorCountTemp41:\
    \ number[] = [];\n    let factorCountTemp42: number[] = [];\n    let factorCountTemp43:\
    \ number[] = [];\n    let factorCountTemp44: number[] = [];\n    let factorCountTemp45:\
    \ number[] = [];\n    let factorCountTemp46: number[] = [];\n    let factorCountTemp47:\
    \ number[] = [];\n    let factorCountTemp48: number[] = [];\n    let factorCountTemp49:\
    \ number[] = [];\n    let factorCountTemp50\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpq97__m6d.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const factorsMap = new Map<number,\
    \ number>();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0)\
    \ {\n      let factor = 1;\n      while (n % i === 0) {\n        n /= i;\n   \
    \     factor *= i;\n      }\n      if (factorsMap.has(factor)) {\n        factorsMap.set(factor,\
    \ factorsMap.get(factor) + 1);\n      } else {\n        factorsMap.set(factor,\
    \ 1);\n      }\n      factors.push(factor);\n    }\n  }\n  return factors;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73u73rlc.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73u73rlc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpjujo8zo5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjujo8zo5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd1d0ccb70\n 1: 0x2ab102cdc727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ab10387128e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab1031abf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab10333d760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab1033450cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab10352f7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab102e8e7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333755
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n\
    \    let factorCountIndexMax: number[] = [];\n    let factorCountIndexMaxIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex: number[] = [];\n    let\
    \ factorCountIndexMaxIndexIndexIndex: number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndex: number[] =\
    \ [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpmv3r_z6j.ts(43,9): error TS1005: '','' expected.

    ../../../../tmp/tmpmv3r_z6j.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp99cxrpq5.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp99cxrpq5.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCount: number[] = [];\n\
    \    let factorsMapCountMap: Map<number, number> = new Map();\n    let factorsMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMap: Map<number, number> = new\
    \ Map();\n    let factorsMapCountMapCountMapCount: number[] = [];\n    let factorsMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMap: Map<number,\
    \ number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMap: Map<number,\
    \ number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ Map<number, number> = new Map();\n    let \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpp2tyfchk.ts(38,9): error TS1005: '','' expected.

    ../../../../tmp/tmpp2tyfchk.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333756
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffce98478e0\n 1: 0x2b046ca58727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b046d5ed28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b046cf27f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b046d0b9760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b046d0c10cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b046d2ab7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b046cc0a7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333769
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n            factorsCount.push(1);\n    \
    \        while (n % i === 0) {\n                n /= i;\n                factorsCount[factors.length\
    \ - 1]++;\n            }\n        }\n    }\n    if (n != 1) {\n        factors.push(n);\n\
    \        factorsCount.push(1);\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp_e5ibdsi.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_e5ibdsi.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const primes: number[] = [];\n\
    \  let factor = 1;\n  let prime = true;\n  let i = 2;\n  while (i <= n) {\n  \
    \  if (n % i === 0) {\n      factors.push(factor);\n      factor = 1;\n      prime\
    \ = true;\n      i++;\n    } else {\n      prime = false;\n      factor++;\n \
    \   }\n  }\n  if (prime) {\n    factors.push(factor);\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpxa240112.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxa240112.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp_x4xr960.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_x4xr960.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCount: number[] = [];\n\
    \    let factorsMapCountMap: Map<number, number> = new Map();\n    let factorsMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMap: Map<number, number> = new\
    \ Map();\n    let factorsMapCountMapCountMapCount: number[] = [];\n    let factorsMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMap: Map<number,\
    \ number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMap: Map<number,\
    \ number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMap:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ Map<number, number> = new Map();\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ Map<number, number> = new Map();\n    let \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpp2tyfchk.ts(38,9): error TS1005: '','' expected.

    ../../../../tmp/tmpp2tyfchk.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333756
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    let factor = 1;\n    let factorization\
    \ = [];\n    let isPrime = true;\n    let isPrimeFactorization = true;\n    let\
    \ isPrimeFactorizationComplete = true;\n    let isPrimeFactorizationCompletePrime\
    \ = true;\n    let isPrimeFactorizationCompletePrimeFactorization = true;\n  \
    \  let isPrimeFactorizationCompletePrimeFactorizationComplete = true;\n    let\
    \ isPrimeFactorizationCompletePrimeFactorizationCompletePrime = true;\n    let\
    \ isPrimeFactorizationCompletePrimeFactorizationCompletePrimeFactorization = true;\n\
    \    let isPrimeFactorizationCompletePrimeFactorizationCompletePrimeFactorizationComplete\
    \ = true;\n    while (n != 1) {\n        if (n % factor == 0) {\n            factors.push(factor);\n\
    \            factorization[factor] = factorization[factor] || [];\n          \
    \  factorization[factor].push(factor);\n            factor++;\n        }\n   \
    \     if (factor > Math.sqrt(n)) {\n            factorization[factor] = factorization[factor]\
    \ || [];\n            factorization[factor].push(factor);\n            factor++;\n\
    \        }\n        n = n / factor;\n    }\n    for (let i = 0; i < factors.length;\
    \ i++) {\n        let factorizationCount = factorization[factors[i]];\n      \
    \  if (factorizationCount.length != factors[i]) {\n            isPrimeFactorization\
    \ = false;\n            break;\n        }\n        for (let j = 0; j < factorizationCount.length;\
    \ j++) {\n            let factorizationCountCopy = factorizationCount.slice(0);\n\
    \            factorizationCountCopy.splice(j, 1);\n            if (factorizationCountCopy.length\
    \ != factors[i]) {\n                isPrimeFactorizationCompletePrime = false;\n\
    \                break;\n            }\n            for (let k = 0; k < factorizationCountCopy.length;\
    \ k++) {\n                let factorizationCountCopy2 = factorizationCountCopy.slice(0);\n\
    \                factorizationCountCopy2.splice(k, 1);\n                if (factorizationCountCopy2.length\
    \ != factors[i]) {\n                    isPrimeFactorizationCompletePrimeFactorization\
    \ = false;\n                    break;\n                }\n                for\
    \ (let l = 0; l < factorizationCountCopy2.length; l++) {\n                   \
    \ let factorizationCountCopy3 = factorizationCountCopy2.slice(0);\n          \
    \          factorizationCountCopy3.splice(l, 1);\n                    if (factorizationCountCopy3.length\
    \ != factors[i]) {\n                        isPrimeFactorizationCompletePrimeFactorizationComplete\
    \ = false;\n                        break;\n                    }\n          \
    \          for (let m = 0; m < factorizationCountCopy3.length; m++) {\n      \
    \                  let factorizationCountCopy4 = factorizationCountCopy3.slice(0);\n\
    \                        factorizationCountCopy4.splice(m, 1);\n             \
    \           if (factorizationCountCopy4.length != factors[i]) {\n            \
    \                isPri\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpu9arjl7b.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpjujo8zo5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjujo8zo5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpjujo8zo5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjujo8zo5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmppe7s6s7r.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppe7s6s7r.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \      if (n === 1) {\n                factors.push(i);\n            }\n     \
    \   }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpnwfu5iku.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnwfu5iku.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpeewkf_i6.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeewkf_i6.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333753
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let\
    \ factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number\
    \ = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor:\
    \ number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n \
    \   let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor:\
    \ number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n\
    \    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor:\
    \ number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number =\
    \ 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor:\
    \ number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n \
    \   let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor:\
    \ number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n\
    \    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor:\
    \ number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number =\
    \ 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor:\
    \ number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n \
    \   let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor:\
    \ number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n\
    \    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor:\
    \ number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number =\
    \ 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3wwsdm88.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333812
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors = [];\n  let i = 2;\n  while\
    \ (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n    \
    \  n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0wt4n53c.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0wt4n53c.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndex\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpeq0emozx.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333812
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpxtgu8i73.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxtgu8i73.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (n\
    \ % i === 0) {\n        factors.push(i);\n        n /= i;\n    }\n    if (n >\
    \ 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  57\n]\n\n\
    should loosely deep-equal\n\n[\n  3,\n  19\n]\n    at test (/tmp/tmpj_prbcc2.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj_prbcc2.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 57 ],\n\
    \  expected: [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333752
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let i\
    \ = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors.push(factor);\n\
    \            n /= i;\n        }\n        factor++;\n        i++;\n    }\n    return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4c5lmskl.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4c5lmskl.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n\
    \  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n   \
    \   factor *= i;\n      i *= 2;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwvby4fve.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwvby4fve.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333760
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let factorization:\
    \ number[] = [];\n    let factorizationCount: number = 0;\n    let factorizationIndex:\
    \ number = 0;\n    let factorizationNumber: number = 0;\n    let factorizationNumbers:\
    \ number[] = [];\n    let factorizationNumbersIndex: number = 0;\n    let factorizationNumbersCount:\
    \ number = 0;\n    let factorizationNumbersNumber: number = 0;\n    let factorizationNumbersNumbers:\
    \ number[] = [];\n    let factorizationNumbersNumbersIndex: number = 0;\n    let\
    \ factorizationNumbersNumbersCount: number = 0;\n    let factorizationNumbersNumbersNumber:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbers: number[] = [];\n  \
    \  let factorizationNumbersNumbersNumbersIndex: number = 0;\n    let factorizationNumbersNumbersNumbersCount:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbersNumber: number = 0;\n\
    \    let factorizationNumbersNumbersNumbersNumbers: number[] = [];\n    let factorizationNumbersNumbersNumbersNumbersIndex:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbersNumbersCount: number\
    \ = 0;\n    let factorizationNumbersNumbersNumbersNumbersNumber: number = 0;\n\
    \    let factorizationNumbersNumbersNumbersNumbersNumbers: number[] = [];\n  \
    \  let factorizationNumbersNumbersNumbersNumbersNumbersIndex: number = 0;\n  \
    \  let factorizationNumbersNumbersNumbersNumbersNumbersCount: number = 0;\n  \
    \  let factorizationNumbersNumbersNumbersNumbersNumbersNumber: number = 0;\n \
    \   let factorizationNumbersNumbersNumbersNumbersNumbersNumbers: number[] = [];\n\
    \    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersIndex: number\
    \ = 0;\n    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersCount:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersNumber:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersNumbers:\
    \ number[] = [];\n    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersNumbersIndex:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersNumbersCount:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersNumbersNumber:\
    \ number = 0;\n    let factorizationNumbersNumbersNumbersNumbersNumbersNumbersNumbersNumbersNumbers:\
    \ number[] = [];\n    let factorization\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprkfdv87b.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffcc5bb2870\n 1: 0x2b934a1d5727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b934ad6a28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b934a6a4f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b934a836760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b934a83e0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b934aa287db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b934a3877f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333816
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpq2mb55rl.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq2mb55rl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffce98478e0\n 1: 0x2b046ca58727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b046d5ed28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b046cf27f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b046d0b9760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b046d0c10cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b046d2ab7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b046cc0a7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333769
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   factors.push(n / i);\n        }\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpmqczb5b1.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmqczb5b1.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors = [];\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333813
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    let primeFactors = [];\n    let isPrime\
    \ = true;\n    let isFactorization = true;\n    let isPrimeFactorization = true;\n\
    \    let isPrimeFactorizationPrime = true;\n    let isPrimeFactorizationPrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrime = true;\n    let isPrimeFactorizationPrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrime = true;\n   \
    \ let isPrimeFactorizationPrimePrimePrimePrimePrimePrime = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = true;\n\
    \    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = true;\n\
    \    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n\
    \    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmponjaohed.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp58m15ys3.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n   \
    \ factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpuv18ai9c.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuv18ai9c.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333806
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd1d0ccb70\n 1: 0x2ab102cdc727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ab10387128e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab1031abf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab10333d760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab1033450cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab10352f7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab102e8e7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333755
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors: number[] =\
    \ [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n \
    \     factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n\
    \    }\n  }\n  if (n !== 1) {\n    factors.push(n);\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp_pc6gj94.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_pc6gj94.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpnzr1cfwa.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnzr1cfwa.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 0) {\n    return [];\n  }\n  const factors = [];\n \
    \ let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n    \
    \  }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp134of5u_.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp134of5u_.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp99cxrpq5.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp99cxrpq5.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let primeFactorsCount: number[] = [];\n    let primeFactorsCountArray:\
    \ number[] = [];\n    let primeFactorsCountArrayIndex: number[] = [];\n    let\
    \ factorsArray: number[] = [];\n    let factorsArrayIndex: number[] = [];\n  \
    \  let factorsArrayIndex2: number[] = [];\n    let factorsArrayIndex3: number[]\
    \ = [];\n    let factorsArrayIndex4: number[] = [];\n    let factorsArrayIndex5:\
    \ number[] = [];\n    let factorsArrayIndex6: number[] = [];\n    let factorsArrayIndex7:\
    \ number[] = [];\n    let factorsArrayIndex8: number[] = [];\n    let factorsArrayIndex9:\
    \ number[] = [];\n    let factorsArrayIndex10: number[] = [];\n    let factorsArrayIndex11:\
    \ number[] = [];\n    let factorsArrayIndex12: number[] = [];\n    let factorsArrayIndex13:\
    \ number[] = [];\n    let factorsArrayIndex14: number[] = [];\n    let factorsArrayIndex15:\
    \ number[] = [];\n    let factorsArrayIndex16: number[] = [];\n    let factorsArrayIndex17:\
    \ number[] = [];\n    let factorsArrayIndex18: number[] = [];\n    let factorsArrayIndex19:\
    \ number[] = [];\n    let factorsArrayIndex20: number[] = [];\n    let factorsArrayIndex21:\
    \ number[] = [];\n    let factorsArrayIndex22: number[] = [];\n    let factorsArrayIndex23:\
    \ number[] = [];\n    let factorsArrayIndex24: number[] = [];\n    let factorsArrayIndex25:\
    \ number[] = [];\n    let factorsArrayIndex26: number[] = [];\n    let factorsArrayIndex27:\
    \ number[] = [];\n    let factorsArrayIndex28: number[] = [];\n    let factorsArrayIndex29:\
    \ number[] = [];\n    let factorsArrayIndex30: number[] = [];\n    let factorsArrayIndex31:\
    \ number[] = [];\n    let factorsArrayIndex32: number[] = [];\n    let factorsArrayIndex33:\
    \ number[] = [];\n    let factorsArrayIndex34: number[] = [];\n    let factorsArrayIndex35:\
    \ number[] = [];\n    let factorsArrayIndex36: number[] = [];\n    let factorsArrayIndex37:\
    \ number[] = [];\n    let factorsArrayIndex38: number[] = [];\n    let factorsArrayIndex39:\
    \ number[] = [];\n    let factorsArrayIndex40: number[] = [];\n    let factorsArrayIndex41:\
    \ number[] = [];\n    let factorsArrayIndex42: number\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpzw6t_811.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \      if (n !== 1) {\n                factors.push(n);\n            }\n     \
    \   }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp446ni0oo.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp446ni0oo.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffce98478e0\n 1: 0x2b046ca58727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b046d5ed28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b046cf27f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b046d0b9760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b046d0c10cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b046d2ab7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b046cc0a7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333769
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let primeFactors: number[]\
    \ = [];\n    let isPrime: boolean;\n    let isPrimeFactor: boolean;\n    let isPrimeFactor2:\
    \ boolean;\n    let isPrimeFactor3: boolean;\n    let isPrimeFactor4: boolean;\n\
    \    let isPrimeFactor5: boolean;\n    let isPrimeFactor6: boolean;\n    let isPrimeFactor7:\
    \ boolean;\n    let isPrimeFactor8: boolean;\n    let isPrimeFactor9: boolean;\n\
    \    let isPrimeFactor10: boolean;\n    let isPrimeFactor11: boolean;\n    let\
    \ isPrimeFactor12: boolean;\n    let isPrimeFactor13: boolean;\n    let isPrimeFactor14:\
    \ boolean;\n    let isPrimeFactor15: boolean;\n    let isPrimeFactor16: boolean;\n\
    \    let isPrimeFactor17: boolean;\n    let isPrimeFactor18: boolean;\n    let\
    \ isPrimeFactor19: boolean;\n    let isPrimeFactor20: boolean;\n    let isPrimeFactor21:\
    \ boolean;\n    let isPrimeFactor22: boolean;\n    let isPrimeFactor23: boolean;\n\
    \    let isPrimeFactor24: boolean;\n    let isPrimeFactor25: boolean;\n    let\
    \ isPrimeFactor26: boolean;\n    let isPrimeFactor27: boolean;\n    let isPrimeFactor28:\
    \ boolean;\n    let isPrimeFactor29: boolean;\n    let isPrimeFactor30: boolean;\n\
    \    let isPrimeFactor31: boolean;\n    let isPrimeFactor32: boolean;\n    let\
    \ isPrimeFactor33: boolean;\n    let isPrimeFactor34: boolean;\n    let isPrimeFactor35:\
    \ boolean;\n    let isPrimeFactor36: boolean;\n    let isPrimeFactor37: boolean;\n\
    \    let isPrimeFactor38: boolean;\n    let isPrimeFactor39: boolean;\n    let\
    \ isPrimeFactor40: boolean;\n    let isPrimeFactor41: boolean;\n    let isPrimeFactor42:\
    \ boolean;\n    let isPrimeFactor43: boolean;\n    let isPrimeFactor44: boolean;\n\
    \    let isPrimeFactor45: boolean;\n    let isPrimeFactor46: boolean;\n    let\
    \ isPrimeFactor47: boolean;\n    let isPrimeFactor48: boolean;\n    let isPrimeFactor49:\
    \ boolean;\n    let isPrimeFactor50: boolean;\n    let isPrimeFactor51: boolean;\n\
    \    let isPrimeFactor52: boolean;\n    let isPrimeFactor53: boolean;\n    let\
    \ isPrimeFactor54: boolean;\n    let isPrimeFactor55: boolean;\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbetm5q9j.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n))\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp8fyxxwrz.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8fyxxwrz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333767
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValues: number[] = [];\n    let factorsCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMap: Map<number, number> =\
    \ new Map();\n    let factorsCountMapValuesCountMapKeys: number[] = [];\n    let\
    \ factorsCountMapValuesCountMapValues: number[] = [];\n    let factorsCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMap: Map<number,\
    \ number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValues: number[]\
    \ = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCount: number[]\
    \ = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMap: Map<number,\
    \ number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factors\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpzh31q0r7.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333813
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 0) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n    \
    \  }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpq0gfvueh.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq0gfvueh.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (i\
    \ <= n) {\n        while (n % i === 0) {\n            factors.push(i);\n     \
    \       n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333813
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValues: number[] = [];\n    let factorsCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMap: Map<number, number> =\
    \ new Map();\n    let factorsCountMapValuesCountMapKeys: number[] = [];\n    let\
    \ factorsCountMapValuesCountMapValues: number[] = [];\n    let factorsCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMap: Map<number,\
    \ number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValues: number[]\
    \ = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCount: number[]\
    \ = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMap: Map<number,\
    \ number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factors\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpzh31q0r7.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333813
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountMap: Map<number, number> = new Map();\n  let factorsCountMapKeys:\
    \ number[] = [];\n  let factorsCountMapValues: number[] = [];\n  let factorsCountMapValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValues: number[] = [];\n  let factorsCountMapValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValues: number[] = [];\n  let\
    \ factorsCountMapValuesValuesValuesKeys: number[] = [];\n  let factorsCountMapValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesKeys: number[]\
    \ = [];\n  let factorsCountMapValuesValuesValuesValuesValues: number[] = [];\n\
    \  let factorsCountMapValuesValuesValuesValuesValuesKeys: number[] = [];\n  let\
    \ factorsCountMapValuesValuesValuesValuesValuesValues: number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n  let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n  let factor\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpig_ct2mu.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333765
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwbuq4_t8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwbuq4_t8.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length\
    \ - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmphvsu9097.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphvsu9097.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333813
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdc9e85000\n 1: 0x2ac40e9dd727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ac40f57228e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ac40eeacf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ac40f03e760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ac40f0460cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ac40f2307db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ac40eb8f7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333755
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n   \
    \ factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpqlqru8hs.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqlqru8hs.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333763
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let factor = 1;\n  while (n != 1) {\n   \
    \ while (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffa1c799c0\n 1: 0x2b501b05b727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b501bbf028e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b501b52af8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b501b6bc760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b501b6c40cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b501b8ae7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b501b20d7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333816
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      let\
    \ factor: number = i;\n      while (n % factor === 0) {\n        n /= factor;\n\
    \        factor++;\n      }\n      factors.push(factor);\n      factorsCount.push(1);\n\
    \    } else {\n      factorsCount[factors.length - 1]++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpbd24czkv.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbd24czkv.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333814
- exit_code: -1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = new Array(n + 1);\n  for (let i = 1; i <= n; i++) {\n    while (n % i == 0)\
    \ {\n      factorization[i] = factorization[i] || 1;\n      factorization[i]++;\n\
    \      n /= i;\n    }\n    factors.push(factor);\n    factor++;\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333831
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let i: number;\n    let j: number;\n    let factorCount: number;\n    let\
    \ factorCount2: number;\n    let factorCount3: number;\n    let factorCount4:\
    \ number;\n    let factorCount5: number;\n    let factorCount6: number;\n    let\
    \ factorCount7: number;\n    let factorCount8: number;\n    let factorCount9:\
    \ number;\n    let factorCount10: number;\n    let factorCount11: number;\n  \
    \  let factorCount12: number;\n    let factorCount13: number;\n    let factorCount14:\
    \ number;\n    let factorCount15: number;\n    let factorCount16: number;\n  \
    \  let factorCount17: number;\n    let factorCount18: number;\n    let factorCount19:\
    \ number;\n    let factorCount20: number;\n    let factorCount21: number;\n  \
    \  let factorCount22: number;\n    let factorCount23: number;\n    let factorCount24:\
    \ number;\n    let factorCount25: number;\n    let factorCount26: number;\n  \
    \  let factorCount27: number;\n    let factorCount28: number;\n    let factorCount29:\
    \ number;\n    let factorCount30: number;\n    let factorCount31: number;\n  \
    \  let factorCount32: number;\n    let factorCount33: number;\n    let factorCount34:\
    \ number;\n    let factorCount35: number;\n    let factorCount36: number;\n  \
    \  let factorCount37: number;\n    let factorCount38: number;\n    let factorCount39:\
    \ number;\n    let factorCount40: number;\n    let factorCount41: number;\n  \
    \  let factorCount42: number;\n    let factorCount43: number;\n    let factorCount44:\
    \ number;\n    let factorCount45: number;\n    let factorCount46: number;\n  \
    \  let factorCount47: number;\n    let factorCount48: number;\n    let factorCount49:\
    \ number;\n    let factorCount50: number;\n    let factorCount51: number;\n  \
    \  let factorCount52: number;\n    let factorCount53: number;\n    let factorCount54:\
    \ number;\n    let factorCount55: number;\n    let factorCount56: number;\n  \
    \  let factorCount57: number;\n    let factorCount58: number;\n    let factorCount59:\
    \ number;\n    let factorCount60: number;\n    let factorCount61: number;\n  \
    \  let factorCount62: number;\n    let factorCount63: number;\n    let factorCount64:\
    \ number;\n    let factorCount65: number;\n    let factorCount66: number;\n  \
    \  let factorCount67: number;\n    let factorCount68: number;\n    let factorCount69:\
    \ number;\n    let factorCount70: number;\n    let factorCount71: number;\n  \
    \  let factorCount72: number;\n    let factorCount73: number;\n    let factorCount74:\
    \ number;\n    let factorCount75: number;\n    let factorCount76: number;\n  \
    \  let factorCount77: number;\n    let factorCount78: number;\n    let factorCount79:\
    \ number;\n    let factorCount80: number;\n    let factorCount81: number;\n  \
    \  let factor\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmplaizuith.ts(113,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333815
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (n\
    \ % i === 0) {\n        factors.push(i);\n        n /= i;\n    }\n    if (n >\
    \ 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  57\n]\n\n\
    should loosely deep-equal\n\n[\n  3,\n  19\n]\n    at test (/tmp/tmpj_prbcc2.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj_prbcc2.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 57 ],\n\
    \  expected: [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333752
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4tfh4ly2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tfh4ly2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmppe7s6s7r.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppe7s6s7r.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const factorization: number[]\
    \ = [];\n  let factor: number[] = [];\n  let factorCount: number = 0;\n  let factorIndex:\
    \ number = 0;\n  let factorLength: number = 0;\n\n  while (factorCount < n) {\n\
    \    factorLength = 0;\n    factor = [];\n    factorIndex = 0;\n    while (factorIndex\
    \ < factors.length) {\n      factor[factorIndex] = factors[factorIndex];\n   \
    \   factorLength += factor[factorIndex];\n      factorIndex++;\n    }\n    factors.push(factorLength);\n\
    \    factorCount++;\n  }\n\n  for (let i = 0; i < factors.length; i++) {\n   \
    \ factorization[i] = factors[i];\n  }\n\n  for (let i = factors.length - 1; i\
    \ >= 0; i--) {\n    for (let j = 0; j < factors.length; j++) {\n      if (factors[i]\
    \ * factors[j] === n) {\n        factorization[i] = factors[j];\n        factorization[j]\
    \ = 0;\n        break;\n      }\n    }\n  }\n\n  return factorization;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpq_g6bmif.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq_g6bmif.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333816
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let i = 2;\n    while (n %\
    \ i === 0) {\n        factors.push(i);\n        while (n % i === 0) {\n      \
    \      n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmperwtghuj.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmperwtghuj.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333816
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = [];\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n\
    \      factor++;\n      n /= factor;\n    } else {\n      factors.push(factor);\n\
    \      factor++;\n    }\n  }\n  factors.push(1);\n  for (let i = 0; i < factors.length;\
    \ i++) {\n    for (let j = 0; j < factors.length; j++) {\n      if (factors[i]\
    \ === factors[j]) {\n        factorization.push(factors[i]);\n      }\n    }\n\
    \  }\n  return factorization;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpnicwsev9.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnicwsev9.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333816
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = [];\n  let i = 1;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(factor);\n\
    \      factor *= i;\n      factorization[i] = factor;\n      i++;\n      n /=\
    \ i;\n    } else {\n      factors.push(factor);\n      factor *= i;\n      factorization[i]\
    \ = factor;\n      i++;\n      n /= i;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpqjh6f0qp.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqjh6f0qp.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \      if (n === 1) {\n                factors.push(i);\n            }\n     \
    \   }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpnwfu5iku.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnwfu5iku.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let factorization:\
    \ number[] = [];\n    let factorizationIndex = 0;\n    let factorizationIndexMax\
    \ = factorization.length - 1;\n    while (n > 1) {\n        if (n % factor ===\
    \ 0) {\n            factors.push(factor);\n            factorization[factorizationIndex]\
    \ = factor;\n            factorizationIndex++;\n            n /= factor;\n   \
    \     } else {\n            factor++;\n        }\n    }\n    if (n !== 1) {\n\
    \        factors.push(1);\n        factorization[factorizationIndex] = n;\n  \
    \      factorizationIndex++;\n    }\n    while (factorizationIndex < factorizationIndexMax)\
    \ {\n        factorization[factorizationIndex] = 0;\n        factorizationIndex++;\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc93d1df10\n 1: 0x2ab0922be727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ab092e5328e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab09278df8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab09291f760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab0929270cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab092b117db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab0924707f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333821
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n))\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp8fyxxwrz.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8fyxxwrz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333767
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const isPrime: boolean = n %\
    \ 2 === 0;\n  const isDivisor: boolean = n >= 3;\n  const isFactor: boolean =\
    \ n % 2 === 0;\n  const isPrimeFactor: boolean = n % 2 === 0;\n  const isPrimeDivisor:\
    \ boolean = n % 2 === 0;\n  const isPrimeDivisorFactor: boolean = n % 2 === 0;\n\
    \  const isPrimeDivisorDivisor: boolean = n % 2 === 0;\n  const isPrimeDivisorDivisorFactor:\
    \ boolean = n % 2 === 0;\n  const isPrimeDivisorDivisorDivisor: boolean = n %\
    \ 2 === 0;\n  const isPrimeDivisorDivisorDivisorFactor: boolean = n % 2 === 0;\n\
    \  const isPrimeDivisorDivisorDivisorDivisor: boolean = n % 2 === 0;\n  const\
    \ isPrimeDivisorDivisorDivisorDivisorFactor: boolean = n % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorDivisor:\
    \ boolean = n % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean\
    \ = n % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorDivisor: boolean\
    \ = n % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean =\
    \ n % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorDivisor: boolean =\
    \ n % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean = n\
    \ % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorDivisor: boolean = n\
    \ % 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean = n %\
    \ 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorDivisor: boolean = n %\
    \ 2 === 0;\n  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean = n % 2\
    \ === 0;\n  const isPrimeDivisorDivisorDivisorDivisorDivisor: boolean = n % 2\
    \ === 0;\n  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean = n % 2 ===\
    \ 0;\n  const isPrimeDivisorDivisorDivisorDivisorDivisor: boolean = n % 2 ===\
    \ 0;\n  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean = n % 2 === 0;\n\
    \  const isPrimeDivisorDivisorDivisorDivisorDivisor: boolean = n % 2 === 0;\n\
    \  const isPrimeDivisorDivisorDivisorDivisorFactor: boolean = n % 2 === 0;\n \
    \ const is\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpp5wjnez1.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n\
    \        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n    if (n\
    \ === 1) break;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4zl6tmhz.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4zl6tmhz.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const factorsMap = new Map<number,\
    \ number>();\n  const factorsCount = new Map<number, number>();\n  const isPrime\
    \ = new Map<number, boolean>();\n  const isPrimeCount = new Map<number, number>();\n\
    \  const isPrimeMap = new Map<number, boolean>();\n  const isPrimeCountMap = new\
    \ Map<number, number>();\n  const isPrimeMap2 = new Map<number, boolean>();\n\
    \  const isPrimeCountMap2 = new Map<number, number>();\n  const isPrimeMap3 =\
    \ new Map<number, boolean>();\n  const isPrimeCountMap3 = new Map<number, number>();\n\
    \  const isPrimeMap4 = new Map<number, boolean>();\n  const isPrimeCountMap4 =\
    \ new Map<number, number>();\n  const isPrimeMap5 = new Map<number, boolean>();\n\
    \  const isPrimeCountMap5 = new Map<number, number>();\n  const isPrimeMap6 =\
    \ new Map<number, boolean>();\n  const isPrimeCountMap6 = new Map<number, number>();\n\
    \  const isPrimeMap7 = new Map<number, boolean>();\n  const isPrimeCountMap7 =\
    \ new Map<number, number>();\n  const isPrimeMap8 = new Map<number, boolean>();\n\
    \  const isPrimeCountMap8 = new Map<number, number>();\n  const isPrimeMap9 =\
    \ new Map<number, boolean>();\n  const isPrimeCountMap9 = new Map<number, number>();\n\
    \  const isPrimeMap10 = new Map<number, boolean>();\n  const isPrimeCountMap10\
    \ = new Map<number, number>();\n  const isPrimeMap11 = new Map<number, boolean>();\n\
    \  const isPrimeCountMap11 = new Map<number, number>();\n  const isPrimeMap12\
    \ = new Map<number, boolean>();\n  const isPrimeCountMap12 = new Map<number, number>();\n\
    \  const isPrimeMap13 = new Map<number, boolean>();\n  const isPrimeCountMap13\
    \ = new Map<number, number>();\n  const isPrimeMap14 = new Map<number, boolean>();\n\
    \  const isPrimeCountMap14 = new Map<number, number>();\n  const isPrimeMap15\
    \ = new Map<number, boolean>();\n  const isPrimeCountMap15 = new Map<number, number>();\n\
    \  const isPrimeMap16 = new Map<number, boolean>();\n  const isPrimeCountMap16\
    \ = new Map<number, number>();\n  const isPrimeMap17 = new Map<number, boolean>();\n\
    \  const isPrimeCountMap17 = new Map<number, number>();\n  const isPrimeMap18\
    \ = new Map<number, boolean>();\n  const isPrimeCountMap18 = new Map<number, number>();\n\
    \  const isPrimeMap19 = new Map<number, boolean>();\n  const isPrime\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpktoy1gbr.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333816
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const factorsMap = new Map<number,\
    \ number>();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0)\
    \ {\n      if (factorsMap.has(i)) {\n        factorsMap.set(i, factorsMap.get(i)\
    \ + 1);\n      } else {\n        factorsMap.set(i, 1);\n      }\n      factors.push(i\
    \ as number);\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6_30jkf5.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6_30jkf5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ factorCount: number[] = [];\n  let factorCountTotal: number = 0;\n  let factorCountTotalPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrev: number = 0;\n  let factorCountTotalPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrev: number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrev: number = 0;\n \
    \ let factorCountTotalPrevPrevPrevPrevPrevPrevPrev: number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrev: number\
    \ = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrev: number = 0;\n\
    \  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev: number =\
    \ 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev:\
    \ number = 0;\n  let factorCountTotalPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpthstvcyx.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333817
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >=\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffcdf99fe60\n 1: 0x2b49efef6727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b49f0a8b28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b49f03c5f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b49f0557760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b49f055f0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b49f07497db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b49f00a87f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333762
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i < n) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n\
    \        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmps_tkyq3t.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps_tkyq3t.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n != 1) {\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  57\n]\n\n\
    should loosely deep-equal\n\n[\n  3,\n  19\n]\n    at test (/tmp/tmpf9s0f_5j.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf9s0f_5j.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 57 ],\n\
    \  expected: [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (true) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n\
    \      break;\n    }\n    i++;\n  }\n  if (n !== 1) {\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmp3lxqma8a.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3lxqma8a.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333766
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \      if (n === 1) {\n                factors.push(1);\n            }\n     \
    \   }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmplrc1d761.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplrc1d761.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) {\n    return [];\n  }\n  const factors: number[]\
    \ = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n\
    \    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpiy1lxqf3.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiy1lxqf3.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i\
    \ as number);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n\n  if (n\
    \ > 0) {\n    factors.push(n as number);\n  }\n\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors: number[] =\
    \ [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n !== 0) {\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmply25eyo7.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmply25eyo7.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 1\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp8qw32kn4.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8qw32kn4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333753
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = [];\n  while (n >= 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n\
    \      factor++;\n    } else {\n      factors.push(factor);\n      factor++;\n\
    \      factorization[factors - 1] = factors;\n      factors = [];\n    }\n   \
    \ n--;\n  }\n  factors.push(factor);\n  factorization[factors - 1] = factors;\n\
    \  return factorization;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpx1_gr7uf.ts(21,21): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../tmp/tmpx1_gr7uf.ts(27,17): error TS2362: The left-hand side of an
    arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an enum
    type.

    '
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpxtgu8i73.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxtgu8i73.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333749
- exit_code: 0
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333756
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \      if (n !== 1) {\n                factors.push(n);\n            }\n     \
    \   }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp446ni0oo.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp446ni0oo.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n))\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp3bt8pshm.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3bt8pshm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333759
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValues: number[] = [];\n    let factorsCountMapValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValues: number[] = [];\n    let\
    \ factorsCountMapValuesValuesKeys: number[] = [];\n    let factorsCountMapValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesKeys: number[] = [];\n\
    \    let factorsCountMapValuesValuesValuesValues: number[] = [];\n    let factorsCountMapValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValues: number[]\
    \ = [];\n    let factorsCountMapValuesValuesValuesValuesValuesKeys: number[] =\
    \ [];\n    let factorsCountMapValuesValuesValuesValuesValuesValues: number[] =\
    \ [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesKeys: number[]\
    \ = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKeys:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues:\
    \ number[] = [];\n    let factorsCountMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesKey\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpe6uxucj5.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333806
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp73h8krib.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp73h8krib.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpeewkf_i6.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeewkf_i6.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333753
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let factorization:\
    \ number[] = [];\n    while (n > 1) {\n        while (n % factor === 0) {\n  \
    \          factors.push(factor);\n            factor *= factor;\n            n\
    \ /= factor;\n        }\n        factors.push(factor);\n        factor *= factor;\n\
    \    }\n    for (let i = 0; i < factors.length; i++) {\n        factorization[i]\
    \ = factors[i];\n    }\n    return factorization;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd808f25a0\n 1: 0x2b3f252a9727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b3f25e3e28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b3f25778f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b3f2590a760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b3f259120cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b3f25afc7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b3f2545b7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333820
- exit_code: -5
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      n /= factor;\n      factors.push(factor);\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe3b778c70\n 1: 0x2b92aa387727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b92aaf1c28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b92aa856f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b92aa9e8760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b92aa9f00cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b92aabda7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b92aa5397f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 2
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    const factorization: number[]\
    \ = [];\n    let factor: number[] = [];\n    let factorCount: number = 0;\n  \
    \  let i: number;\n\n    for (i = 2; i <= n; i++) {\n        while (n % i ===\
    \ 0) {\n            factors.push(factor);\n            factorCount++;\n      \
    \      factor = [];\n        }\n        factor.push(i);\n    }\n    if (factorCount\
    \ === 0) {\n        factors.push(factor);\n    }\n    for (i = factors.length\
    \ - 1; i >= 0; i--) {\n        factorization[factorCount] = factors[i];\n    \
    \    factorCount += factors[i].length;\n    }\n    return factorization;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp055n5qon.ts(19,26): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../tmp/tmp055n5qon.ts(26,22): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../tmp/tmp055n5qon.ts(30,35): error TS2339: Property ''length'' does
    not exist on type ''number''.

    '
  timestamp: 1660333817
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmppe7s6s7r.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppe7s6s7r.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333749
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let i\
    \ = 1;\n    while (n > 1) {\n        if (n % i == 0) {\n            factors.push(factor);\n\
    \            factor *= i;\n        }\n        i++;\n        n--;\n    }\n    return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpd4jh0x_m.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd4jh0x_m.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333818
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n    \
    \  }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp07xc84x5.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp07xc84x5.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333810
- exit_code: 1
  program: "//Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n \
    \   factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpafolhg_z.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpafolhg_z.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333818
