name: HumanEval_49_modp
language: ts
prompt: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
  // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n//\
  \ 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n", "  let r\
    \ = p % n;\n  return r === 0 ? n : r;\n}\n", "  if (n < p) {\n    return n - p;\n\
    \  }\n  return p;\n}\n", "  if (n < p) {\n    return n;\n  }\n  let r = n - (p\
    \ * Math.floor(n));\n  return r === 0 ? 1 : r;\n}\n", "  if (n < p) {\n    return\
    \ n;\n  }\n  let r = n % (p - 1);\n  return r === 0 ? p : r;\n}\n", "  if (n <\
    \ p) {\n    return n - p;\n  }\n  return p;\n}\n", "  if (n < p) {\n    return\
    \ n - p;\n  }\n  return p;\n}\n", "  let res = 1;\n  for (let i = 1; i <= n; i++)\
    \ {\n    res = (res % p + p) % p;\n  }\n  return res;\n}\n", "  return ((n % p)\
    \ + p) % p;\n}\n", "  let r = p % n;\n  return r === 0 ? n : r;\n}\n", "  if (n\
    \ < p) {\n    return n;\n  }\n  let r = n % p;\n  return r === 0 ? p : r;\n}\n",
  "  let result = 1;\n  for (let i = 1; i < p; i++) {\n    result *= n;\n  }\n  return\
    \ result % p;\n}\n", "  if (n < p) {\n    return n;\n  }\n  if (n === p || n !==\
    \ n) {\n    return n;\n  }\n  if (n === Math.floor(n)) {\n    return n;\n  }\n\
    \  return modp(n - 1, p);\n}\n", "  if (n < p) {\n    return n;\n  }\n  return\
    \ n % p;\n}\n", "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n", " \
    \ if (n < p) {\n    return n;\n  }\n  let r = 1;\n  for (let i = p; i < n; ++i)\
    \ {\n    r *= i;\n  }\n  return r;\n}\n", "  let result = 1;\n  for (let i = 1;\
    \ i <= n; i++) {\n    result *= p;\n    result %= p;\n  }\n  return result;\n\
    }\n", "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) +\
    \ n;\n  }\n  return res;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res = (res % n) + n;\n  }\n  return res;\n}\n", "  let res = 1;\n  while\
    \ (n > p) {\n    res *= n;\n    n -= p;\n  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
