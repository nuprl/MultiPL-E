{
  "language": "ts",
  "name": "HumanEval_156_int_to_mini_roman",
  "results": [
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, '');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjd3ccxr.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n\n  const roman = int_to_roman(number);\n  const mini = roman.slice(0, roman.length - 1);\n  return mini.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvdtyi03w.ts(16,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n  const roman = roman_numerals(number);\n  const roman_str = roman.join('');\n  return roman_str.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpir91ped2.ts(15,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7q6omalz.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo7m8ffpg.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n\n  const roman = Array(number).fill(0).map((_, i) => i).map(i => roman_numerals[i]);\n  return roman.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphkr3l4lc.ts(16,65): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.charAt(0).toLowerCase() + roman.slice(1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3zdssneh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhg_9u9_.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input\");\n  }\n  let roman = \"\";\n  let numStr = number.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    let char = numStr.charAt(i);\n    if (char === \"0\") {\n      roman += \"i\";\n    } else if (char === \"1\") {\n      roman += \"v\";\n    } else if (char === \"2\") {\n      roman += \"c\";\n    } else if (char === \"3\") {\n      roman += \"l\";\n    } else if (char === \"4\") {\n      roman += \"d\";\n    } else if (char === \"5\") {\n      roman += \"m\";\n    } else if (char === \"6\") {\n      roman += \"s\";\n    } else if (char === \"7\") {\n      roman += \"h\";\n    } else if (char === \"8\") {\n      roman += \"g\";\n    } else if (char === \"9\") {\n      roman += \"f\";\n    } else if (char === \"x\") {\n      roman += \"p\";\n    } else if (char === \"v\") {\n      roman += \"c\";\n    } else if (char === \"c\") {\n      roman += \"x\";\n    } else if (char === \"l\") {\n      roman += \"v\";\n    } else if (char === \"d\") {\n      roman += \"c\";\n    } else if (char === \"m\") {\n      roman += \"m\";\n    } else if (char === \"s\") {\n      roman += \"s\";\n    } else if (char === \"h\") {\n      roman += \"h\";\n    } else if (char === \"g\") {\n      roman += \"g\";\n    } else if (char === \"f\") {\n      roman += \"f\";\n    } else if (char === \"p\") {\n      roman += \"p\";\n    }\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vf'\n\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmp44i1f_hz.js:88:12)\n    at Object.<anonymous> (/tmp/tmp44i1f_hz.js:103:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vf',\n  expected: 'xix',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7q6omalz.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = roman_numeral_map[number];\n  if (roman === undefined) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjup5433q.ts(12,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76a6sdzh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let num: number = number;\n  let numStr: string = num.toString();\n  let numStrLen: number = numStr.length;\n  let numStrDigits: number = numStr.length;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigits;\n  let numStrDigits: number = numStrDigits;\n  let numStrDigit: number = numStrDigit\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5dbmtm4i.ts(82,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArr = numStr.split(\"\");\n  let numStrArrLen = numStrArr.length;\n  let numStrArrMax = numStrArrLen > 0 ? numStrArr[numStrArrLen - 1] : \"\";\n  let numStrArrMaxLen = numStrArrMax.length;\n  let numStrArrMaxIndex = numStrArrLen - 1;\n  let numStrArrMaxIndexLen = numStrArrMaxIndex.length;\n  let numStrArrMaxIndexLast = numStrArrMaxIndexLen - 1;\n  let numStrArrMaxIndexLastLen = numStrArrMaxIndexLast.length;\n  let numStrArrMaxIndexLastLast = numStrArrMaxIndexLen - 2;\n  let numStrArrMaxIndexLastLastLen = numStrArrMaxIndexLastLast.length;\n  let numStrArrMaxIndexLastLastLast = numStrArrMaxIndexLen - 3;\n  let numStrArrMaxIndexLastLastLastLen = numStrArrMaxIndexLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLast = numStrArrMaxIndexLen - 4;\n  let numStrArrMaxIndexLastLastLastLastLen = numStrArrMaxIndexLastLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLastLast = numStrArrMaxIndexLen - 5;\n  let numStrArrMaxIndexLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLastLastLast = numStrArrMaxIndexLen - 6;\n  let numStrArrMaxIndexLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLastLastLastLast = numStrArrMaxIndexLen - 7;\n  let numStrArrMaxIndexLastLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLastLastLastLastLast = numStrArrMaxIndexLen - 8;\n  let numStrArrMaxIndexLastLastLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLastLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLastLast\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwbxbd9ij.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input\");\n  }\n\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(\n    (_, i) => roman_numerals[i % roman_numerals.length]\n  );\n\n  return roman.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpchxi93cv.ts(17,15): error TS2304: Cannot find name 'roman_numerals'.\n../../../../tmp/tmpchxi93cv.ts(17,34): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string[] = [];\n  let num: number = number;\n  while (num > 0) {\n    let remainder: number = num % 10;\n    roman.push(remainder);\n    num /= 10;\n  }\n  return roman.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpedmc_1nt.ts(16,16): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  const roman = roman_numeral_map[number];\n  if (!roman) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphb6mj4ao.ts(15,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArr = numStr.split(\"\");\n  let numStrArrLen = numStrArr.length;\n  let numStrArrMax = numStrArrLen - 1;\n  let numStrArrMin = numStrArrLen - 2;\n  let numStrArrMaxIndex = numStrArrLen - 1;\n  let numStrArrMinIndex = numStrArrLen - 2;\n  let numStrArrMaxVal = numStrArr[numStrArrMaxIndex];\n  let numStrArrMinVal = numStrArr[numStrArrMinIndex];\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStrArrMinValIndex = numStrArrLen - 2;\n  let numStrArrMaxValIndex = numStrArrLen - 1;\n  let numStr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdo03f5ha.ts(73,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu6qua800.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input: \" + number);\n  }\n  const roman = Array(1000).fill(\"\").map((_, i) => i).reverse();\n  const roman_numeral = Array(1000).fill(\"\").map((_, i) => i).reverse();\n  let roman_numeral_string = \"\";\n  let roman_numeral_string_index = 0;\n  let roman_numeral_string_index2 = 0;\n  let roman_numeral_string_index3 = 0;\n  let roman_numeral_string_index4 = 0;\n  let roman_numeral_string_index5 = 0;\n  let roman_numeral_string_index6 = 0;\n  let roman_numeral_string_index7 = 0;\n  let roman_numeral_string_index8 = 0;\n  let roman_numeral_string_index9 = 0;\n  let roman_numeral_string_index10 = 0;\n  let roman_numeral_string_index11 = 0;\n  let roman_numeral_string_index12 = 0;\n  let roman_numeral_string_index13 = 0;\n  let roman_numeral_string_index14 = 0;\n  let roman_numeral_string_index15 = 0;\n  let roman_numeral_string_index16 = 0;\n  let roman_numeral_string_index17 = 0;\n  let roman_numeral_string_index18 = 0;\n  let roman_numeral_string_index19 = 0;\n  let roman_numeral_string_index20 = 0;\n  let roman_numeral_string_index21 = 0;\n  let roman_numeral_string_index22 = 0;\n  let roman_numeral_string_index23 = 0;\n  let roman_numeral_string_index24 = 0;\n  let roman_numeral_string_index25 = 0;\n  let roman_numeral_string_index26 = 0;\n  let roman_numeral_string_index27 = 0;\n  let roman_numeral_string_index28 = 0;\n  let roman_numeral_string_index29 = 0;\n  let roman_numeral_string_index30 = 0;\n  let roman_numeral_string_index31 = 0;\n  let roman_numeral_string_index32 = 0;\n  let roman_numeral_string_index33 = 0;\n  let roman_numeral_string_index34 = 0;\n  let roman_numeral_string_index35 = 0;\n  let roman_numeral_string_index36 = 0;\n  let roman_numeral_string_index37 = 0;\n  let roman_numeral_string_index38 = 0;\n  let roman_numeral_string_index39 = 0;\n  let roman_numeral_string_index40 = 0;\n  let roman_numeral_string_index41 = 0;\n  let roman_numeral_string_index42 = 0;\n  let roman_numeral_string_index43 = 0;\n  let roman_numeral_string_index44 = 0;\n  let roman_numeral_string_index45 = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb008ynq1.ts(85,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = '';\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArray = numStr.split('');\n  let numStrArrayLen = numStrArray.length;\n  let numStrArrayMax = numStrArrayLen;\n  let numStrArrayMaxIndex = numStrArrayLen - 1;\n  let numStrArrayMaxValue = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinValue = numStrArray[0];\n  let numStrArrayMinIndex = numStrArrayLen - 1;\n  let numStrArrayMinValue = numStrArray[0];\n  let numStrArrayMinIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex = numStrArray[0];\n  let numStrArrayMinIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp06o53gn7.ts(64,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpszcma4g2.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333802
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.charAt(0).toLowerCase() + roman.slice(1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3zdssneh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = roman_numeral(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv0c_cpy6.ts(12,17): error TS2304: Cannot find name 'roman_numeral'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string[] = [];\n  let num: number = number;\n  let numStr: string = num.toString();\n  let numStrLen: number = numStr.length;\n  let numDigits: number = numStrLen;\n  let numDiv: number = numStrLen - 1;\n  let numDivMod: number = numDiv;\n  let numDivModInt: number = numDivMod;\n  let numDivModIntStr: string = numDivModInt.toString();\n  let numDivModIntStrLen: number = numDivModIntStr.length;\n  let numDivModIntStrLenMinus1: number = numDivModIntStrLen - 1;\n  let numDivModIntStrMinus1: string = numDivModIntStr.substring(0, numDivModIntStrLenMinus1);\n  let numDivModIntStrMinus1Len: number = numDivModIntStrMinus1.length;\n  let numDivModIntStrMinus1LenMinus1: number = numDivModIntStrMinus1Len - 1;\n  let numDivModIntStrMinus1LenMinus1Minus1: number = numDivModIntStrMinus1LenMinus1 - 1;\n  let numDivModIntStrMinus1Minus1Minus1: string = numDivModIntStrMinus1Minus1Minus1.substring(0, numDivModIntStrMinus1LenMinus1Minus1);\n  let numDivModIntStrMinus1Minus1Minus1Len: number = numDivModIntStrMinus1Minus1Minus1Len;\n  let numDivModIntStrMinus1Minus1Minus1LenMinus1: number = numDivModIntStrMinus1Minus1Minus1LenMinus1 - 1;\n  let numDivModIntStrMinus1Minus1Minus1LenMinus1Minus1: number = numDivModIntStrMinus1Minus1Minus1LenMinus1Minus1 - 1;\n  let numDivModIntStrMinus1Minus1Minus1LenMinus1Minus1: string = numDivModIntStrMinus1Minus1Minus1LenMinus1Minus1Minus1.substring(0, numDivModIntStrMinus1Minus1Minus1LenMinus1Minus1LenMinus1);\n  let numDivModIntStrMinus1Minus1Minus1LenMinus1Minus1Minus1LenMinus1: string = numDivModInt\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8359_0o2.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  const roman = roman_numerals(number);\n  const roman_string = roman.join('');\n  return roman_string.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppthryn64.ts(15,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu6qua800.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhg_9u9_.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n\n  const roman = roman_numerals(number);\n  const roman_str = roman.join('');\n  return roman_str.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1t78rx2v.ts(16,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhg_9u9_.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n\n  let roman = '';\n  let numeral = '';\n  let denominator = 1;\n  let numDigits = 0;\n\n  while (number >= denominator) {\n    numeral += numDigits;\n    roman = numeralToRoman(numeral);\n    numeral = '';\n    numDigits = 0;\n\n    for (let i = 0; i < roman.length; i++) {\n      if (roman[i] === 'I') {\n        numDigits++;\n      } else if (roman[i] === 'V') {\n        numDigits += 5;\n      } else if (roman[i] === 'X') {\n        numDigits += 10;\n      } else if (roman[i] === 'L') {\n        numDigits += 50;\n      } else if (roman[i] === 'C') {\n        numDigits += 100;\n      } else if (roman[i] === 'D') {\n        numDigits += 500;\n      } else if (roman[i] === 'M') {\n        numDigits += 1000;\n      }\n    }\n\n    denominator *= numDigits;\n  }\n\n  numeral += numDigits;\n  roman = numeralToRoman(numeral);\n\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqbh19xgt.ts(23,13): error TS2304: Cannot find name 'numeralToRoman'.\n../../../../tmp/tmpqbh19xgt.ts(49,11): error TS2304: Cannot find name 'numeralToRoman'.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let roman_numerals: string[] = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n  let roman_numerals_length = roman_numerals.length;\n  let roman_numerals_map: Map<string, number> = new Map();\n  for (let i = 0; i < roman_numerals_length; i++) {\n    roman_numerals_map.set(roman_numerals[i], i);\n  }\n  while (number > 0) {\n    let remainder = number % 10;\n    roman = roman_numerals[roman_numerals_map.get(roman)];\n    number = Math.floor(number / 10);\n  }\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmpp8oqy7ye.js:29:12)\n    at Object.<anonymous> (/tmp/tmpp8oqy7ye.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'xix',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.charAt(0).toLowerCase() + roman.slice(1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3zdssneh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let numStr = String(number);\n  let numStrLen = numStr.length;\n  let numStrArray = numStr.split(\"\");\n  let numStrArrayLen = numStrArray.length;\n  let numStrArrayMax = numStrArrayLen;\n  let numStrArrayMin = numStrArrayLen;\n  if (numStrArrayLen > 3) {\n    numStrArrayMax = numStrArrayLen - 3;\n    numStrArrayMin = numStrArrayLen - 2;\n  }\n  for (let i = 0; i < numStrArrayLen; i++) {\n    let numStrArrayItem = numStrArray[i];\n    let numStrArrayItemLen = numStrArrayItem.length;\n    if (numStrArrayItemLen > 3) {\n      numStrArrayItemLen = numStrArrayItemLen - 3;\n    }\n    let numStrArrayItemMax = numStrArrayItemLen;\n    let numStrArrayItemMin = numStrArrayItemLen;\n    if (numStrArrayLen > 3) {\n      numStrArrayItemMax = numStrArrayLen - 3;\n      numStrArrayItemMin = numStrArrayLen - 2;\n    }\n    let numStrArrayItemSum = 0;\n    let numStrArrayItemSumMax = 0;\n    let numStrArrayItemSumMin = 0;\n    for (let j = 0; j < numStrArrayItemLen; j++) {\n      let numStrArrayItemItem = numStrArrayItem[j];\n      let numStrArrayItemItemLen = numStrArrayItemItem.length;\n      if (numStrArrayItemItemLen > 3) {\n        numStrArrayItemItemLen = numStrArrayItemItemLen - 3;\n      }\n      let numStrArrayItemItemMax = numStrArrayItemItemLen;\n      let numStrArrayItemItemMin = numStrArrayItemItemLen;\n      if (numStrArrayLen > 3) {\n        numStrArrayItemItemMax = numStrArrayLen - 3;\n        numStrArrayItemItemMin = numStrArrayLen - 2;\n      }\n      numStrArrayItemSum += parseInt(numStrArrayItemItem);\n      if (j === 0) {\n        numStrArrayItemSumMax += parseInt(numStrArrayItemItem);\n      } else if (j === numStrArrayItemLen - 1) {\n        numStrArrayItemSumMin += parseInt(numStrArrayItemItem);\n      }\n    }\n    if (numStrArrayLen > 3) {\n      roman = roman + numStrArrayItemSum.toString() + numStrArrayItemSumMax.toString() + numStrArrayItemSumMin.toString();\n    } else {\n      roman = roman + numStr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2o6kmmzl.ts(83,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input\");\n  }\n  const roman = roman_numerals(number);\n  return roman.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwhgsk_sv.ts(15,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let roman_numerals: string[] = [];\n  let numerals: string[] = [];\n  let numerals_map: Map<string, number> = new Map();\n  let numerals_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse2: Map<number, string> = new Map();\n  let numerals_map_reverse3: Map<number, string> = new Map();\n  let numerals_map_reverse4: Map<number, string> = new Map();\n  let numerals_map_reverse5: Map<number, string> = new Map();\n  let numerals_map_reverse6: Map<number, string> = new Map();\n  let numerals_map_reverse7: Map<number, string> = new Map();\n  let numerals_map_reverse8: Map<number, string> = new Map();\n  let numerals_map_reverse9: Map<number, string> = new Map();\n  let numerals_map_reverse10: Map<number, string> = new Map();\n  let numerals_map_reverse11: Map<number, string> = new Map();\n  let numerals_map_reverse12: Map<number, string> = new Map();\n  let numerals_map_reverse13: Map<number, string> = new Map();\n  let numerals_map_reverse14: Map<number, string> = new Map();\n  let numerals_map_reverse15: Map<number, string> = new Map();\n  let numerals_map_reverse16: Map<number, string> = new Map();\n  let numerals_map_reverse17: Map<number, string> = new Map();\n  let numerals_map_reverse18: Map<number, string> = new Map();\n  let numerals_map_reverse19: Map<number, string> = new Map();\n  let numerals_map_reverse20: Map<number, string> = new Map();\n  let numerals_map_reverse21: Map<number, string> = new Map();\n  let numerals_map_reverse22: Map<number, string> = new Map();\n  let numerals_map_reverse23: Map<number, string> = new Map();\n  let numerals_map_reverse24: Map<number, string> = new Map();\n  let numerals_map_reverse25: Map<number, string> = new Map();\n  let numerals_map_reverse26: Map<number, string> = new Map();\n  let numerals_map_reverse27: Map<number, string> = new Map();\n  let numerals_map_reverse28: Map<number, string> = new Map();\n  let numerals_map_reverse29: Map<number, string> = new Map();\n  let numerals_map_reverse30: Map<number, string> = new Map();\n  let numerals_map_reverse31: Map<number, string> = new Map();\n  let numerals_map_reverse32: Map<number, string> = new Map();\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjijdxlsg.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = roman_numerals(number);\n  return roman.map(romanString => romanString.toLowerCase()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_09nrgcg.ts(15,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\",\n    numberString = number.toString();\n  if (numberString.length < 1 || numberString.length > 3999) {\n    throw new Error(\"Invalid number provided\");\n  }\n  if (numberString.length === 1) {\n    roman += numberString;\n  } else if (numberString.length === 2) {\n    roman += numberString.charAt(0) + numberString.charAt(1);\n  } else if (numberString.length === 3) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2);\n  } else if (numberString.length === 4) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3);\n  } else if (numberString.length === 5) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4);\n  } else if (numberString.length === 6) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4) + numberString.charAt(5);\n  } else if (numberString.length === 7) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4) + numberString.charAt(5) + numberString.charAt(6);\n  } else if (numberString.length === 8) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4) + numberString.charAt(5) + numberString.charAt(6) + numberString.charAt(7);\n  } else if (numberString.length === 9) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4) + numberString.charAt(5) + numberString.charAt(6) + numberString.charAt(7) + numberString.charAt(8);\n  } else if (numberString.length === 10) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4) + numberString.charAt(5) + numberString.charAt(6) + numberString.charAt(7) + numberString.charAt(8) + numberString.charAt(9);\n  } else if (numberString.length === 11) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4) + numberString.charAt(5) + numberString.charAt(6) + numberString.charAt(7) + numberString.charAt(8) + numberString.charAt(9) + numberString.charAt(10);\n  } else if (numberString.length === 12) {\n    roman += numberString.charAt(0) + numberString.charAt(1) + numberString.charAt(2) + numberString.charAt(3) + numberString.charAt(4) + numberString.charAt(5) + numberString.charAt(6) + numberString.charAt(7) + numberString.charAt(8) + numberString.charAt(9) + numberString.charAt(10) + numberString.charAt(11);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0yzwrqpf.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let roman_numerals: string[] = [];\n  let numerals: string[] = [];\n  let numerals_map: Map<string, number> = new Map();\n  let numerals_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse: Map<number, string> = new Map();\n  let numerals_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map_reverse_map: Map<string, number> = new Map();\n  let numerals_map_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdxiv7c75.ts(59,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = '';\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArray = numStr.split('');\n  let numStrArrayLen = numStrArray.length;\n  let numStrArrayMax = numStrArrayLen;\n  let numStrArrayMin = numStrArrayLen - 1;\n  let numStrArraySum = numStrArray.reduce((acc, cur) => acc + cur);\n  let numStrArraySumLen = numStrArraySum.toString().length;\n  let numStrArraySumMax = numStrArraySumLen - 1;\n  let numStrArraySumMin = numStrArraySumLen - 2;\n  let numStrArraySumSum = numStrArraySum.reduce((acc, cur) => acc + cur);\n  let numStrArraySumSumLen = numStrArraySumSum.toString().length;\n  let numStrArraySumSumMax = numStrArraySumSumLen - 1;\n  let numStrArraySumSumMin = numStrArraySumSumLen - 2;\n  let numStrArraySumSumSum = numStrArraySumSum.reduce((acc, cur) => acc + cur);\n  let numStrArraySumSumSumLen = numStrArraySumSumSum.toString().length;\n  let numStrArraySumSumSumMax = numStrArraySumSumSumLen - 1;\n  let numStrArraySumSumSumMin = numStrArraySumSumSumLen - 2;\n  let numStrArraySumSumSumSum = numStrArraySumSumSum.reduce((acc, cur) => acc + cur);\n  let numStrArraySumSumSumSumLen = numStrArraySumSumSumSum.toString().length;\n  let numStrArraySumSumSumSumMax = numStrArraySumSumSumSumLen - 1;\n  let numStrArraySumSumSumSumMin = numStrArraySumSumSumSumLen - 2;\n  let numStrArraySumSumSumSum = numStrArraySumSumSumSum.reduce((acc, cur) => acc + cur);\n  let numStrArraySumSumSumSumLen = numStrArraySumSumSumSum.toString().length;\n  let numStrArraySumSumSumSumMax = numStrArraySumSumSumSumLen - 1;\n  let numStrArraySumSumSumSumMin = numStrArraySumSumSumSumLen - 2;\n  let numStrArraySumSumSumSum = numStrArraySumSumSumSum.reduce((acc, cur) => acc + cur);\n  let numStrArraySumSumSumSumLen = numStrArraySumSumSumSum.toString().length;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwaf8vnzm.ts(64,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4kozir73.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let roman_numerals = roman_numerals_cache;\n  let roman_numerals_length = roman_numerals.length;\n  let roman_numerals_index = 0;\n  let roman_numerals_index_length = roman_numerals_index.length;\n  let roman_numerals_index_counter = 0;\n  let roman_numerals_index_counter_length = roman_numerals_index_counter.length;\n  let roman_numerals_index_counter_increment = 0;\n  let roman_numerals_index_counter_increment_length = roman_numerals_index_counter_increment.length;\n  let roman_numerals_index_counter_increment_counter = 0;\n  let roman_numerals_index_counter_increment_counter_length = roman_numerals_index_counter_increment_counter.length;\n  let roman_numerals_index_counter_increment_counter_increment = 0;\n  let roman_numerals_index_counter_increment_counter_counter_length = roman_numerals_index_counter_increment_counter_increment_counter.length;\n  let roman_numerals_index_counter_increment_counter_increment_counter = 0;\n  let roman_numerals_index_counter_increment_counter_counter_counter_length = roman_numerals_index_counter_increment_counter_increment_counter_increment_counter.length;\n  let roman_numerals_index_counter_increment_counter_increment_counter_counter = 0;\n  let roman_numerals_index_counter_increment_counter_counter_counter_counter_length = roman_numerals_index_counter_increment_counter_increment_counter_increment_counter_counter.length;\n  let roman_numerals_index_counter_increment_counter_increment_counter_counter_counter = 0;\n  let roman_numerals_index_counter_increment_counter_counter_counter_counter_counter_length = roman_numerals_index_counter_increment_counter_increment_counter_counter_counter_counter.length;\n  let roman_numerals_index_counter_increment_counter_increment_counter_counter_counter_counter = 0;\n  let roman_numerals_index_counter_increment_counter_counter_counter_counter_counter_counter_length = roman_numerals_index_counter_increment_counter_increment_counter_counter_counter_counter_counter_counter.length;\n  let roman_numerals_index_counter_increment_counter_increment_counter_counter_counter_counter_counter_counter = 0;\n  let roman_numerals_index_counter_increment_counter_counter_counter_counter_counter_counter_counter_length = roman_numerals_index_counter_increment_counter_increment_counter_counter_counter_counter_counter_counter_counter.length;\n  let roman_numerals_index_counter_increment_counter_increment_counter_counter_counter_counter_counter_counter_counter = 0;\n  let roman_numerals_index_counter_increment_counter_counter_counter_counter_counter_counter_counter_counter_counter_length = roman_numeral\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzbe3obp_.ts(59,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = roman_numeral_map[number];\n  if (!roman) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpld3lm5by.ts(15,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let roman_numeral = \"\";\n  let roman_numeral_array = [];\n  let roman_numeral_array_length = 0;\n  let roman_numeral_array_index = 0;\n  let roman_numeral_array_element = \"\";\n  let roman_numeral_array_element_length = 0;\n  let roman_numeral_array_element_index = 0;\n  let roman_numeral_array_element_value = \"\";\n  let roman_numeral_array_element_value_length = 0;\n  let roman_numeral_array_element_value_char = \"\";\n  let roman_numeral_array_element_value_char_length = 0;\n  let roman_numeral_array_element_value_char_index = 0;\n  let roman_numeral_array_element_value_char_array = [];\n  let roman_numeral_array_element_value_char_array_length = 0;\n  let roman_numeral_array_element_value_char_array_index = 0;\n  let roman_numeral_array_element_value_char_array_element = \"\";\n  let roman_numeral_array_element_value_char_array_element_length = 0;\n  let roman_numeral_array_element_value_char_array_element_index = 0;\n  let roman_numeral_array_element_value_char_array_element_value = \"\";\n  let roman_numeral_array_element_value_char_array_element_value_length = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char = \"\";\n  let roman_numeral_array_element_value_char_array_element_value_char_length = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_index = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array = [];\n  let roman_numeral_array_element_value_char_array_element_value_char_array_length = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array_index = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element = \"\";\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_length = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_index = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_value = \"\";\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_value_length = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_value_char = \"\";\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_value_char_length = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_value_char_index = 0;\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_value_char_array = [];\n  let roman_numeral_array_element_value_char_array_element_value_char_array_element_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy3sn0s1n.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let num: number = number;\n  while (num > 0) {\n    let remainder: number = num % 10;\n    roman += mini_roman[remainder];\n    num /= 10;\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeydjb0_0.ts(16,14): error TS2304: Cannot find name 'mini_roman'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0m_uno29.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76a6sdzh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid number\");\n  }\n  const roman = Array(1000).fill(\"x\");\n  roman[number - 1] = roman[number - 1] + roman[number - 1];\n  return roman.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...\n\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmpfghfuvnk.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfghfuvnk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:8",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let numStr = number.toString();\n  let numArray = numStr.split(\"\");\n  let numArrayLength = numArray.length;\n  let numArrayCopy = numArray.slice();\n  let numArrayCopyLength = numArrayCopy.length;\n  let numArrayCopy2 = numArrayCopy.slice();\n  let numArrayCopy2Length = numArrayCopy2.length;\n  let numArrayCopy3 = numArrayCopy2.slice();\n  let numArrayCopy3Length = numArrayCopy3.length;\n  let numArrayCopy4 = numArrayCopy3.slice();\n  let numArrayCopy4Length = numArrayCopy4.length;\n  let numArrayCopy5 = numArrayCopy4.slice();\n  let numArrayCopy5Length = numArrayCopy5.length;\n  let numArrayCopy6 = numArrayCopy5.slice();\n  let numArrayCopy6Length = numArrayCopy6.length;\n  let numArrayCopy7 = numArrayCopy6.slice();\n  let numArrayCopy7Length = numArrayCopy7.length;\n  let numArrayCopy8 = numArrayCopy7.slice();\n  let numArrayCopy8Length = numArrayCopy8.length;\n  let numArrayCopy9 = numArrayCopy8.slice();\n  let numArrayCopy9Length = numArrayCopy9.length;\n  let numArrayCopy10 = numArrayCopy9.slice();\n  let numArrayCopy10Length = numArrayCopy10.length;\n  let numArrayCopy11 = numArrayCopy10.slice();\n  let numArrayCopy11Length = numArrayCopy11.length;\n  let numArrayCopy12 = numArrayCopy11.slice();\n  let numArrayCopy12Length = numArrayCopy12.length;\n  let numArrayCopy13 = numArrayCopy12.slice();\n  let numArrayCopy13Length = numArrayCopy13.length;\n  let numArrayCopy14 = numArrayCopy13.slice();\n  let numArrayCopy14Length = numArrayCopy14.length;\n  let numArrayCopy15 = numArrayCopy14.slice();\n  let numArrayCopy15Length = numArrayCopy15.length;\n  let numArrayCopy16 = numArrayCopy15.slice();\n  let numArrayCopy16Length = numArrayCopy16.length;\n  let numArrayCopy17 = numArrayCopy16.slice();\n  let numArrayCopy17Length = numArrayCopy17.length;\n  let numArrayCopy18 = numArrayCopy17.slice();\n  let numArrayCopy18Length = numArrayCopy18.length;\n  let numArrayCopy19 = numArrayCopy18.slice();\n  let numArrayCopy19Length = numArrayCopy19.length;\n  let numArrayCopy20 = numArrayCopy19.slice();\n  let numArrayCopy20Length = numArrayCopy20.length;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt4_p4l6m.ts(78,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let num: number = number;\n  while (num > 0) {\n    let remainder: number = num % 10;\n    roman += mini_roman[remainder];\n    num /= 10;\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeydjb0_0.ts(16,14): error TS2304: Cannot find name 'mini_roman'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => roman_numerals[i]);\n  const romanString = roman.map(romanNum => romanNum[number]).join(\"\");\n  return romanString.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd30cy3dc.ts(16,63): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n\n  const roman = Array(1000).fill(0).map((_, i) => i).map(\n    (_, i) => String.fromCharCode((number % 100) + i * 10)\n  );\n\n  return roman.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n\"\\x13\\x1D'1;EOYcmw\\x81\\x8B\\x95\\x9F\u00a9\u00b3\u00bd\u00c7\u00d1\u00db\u00e5\u00ef\u00f9\u0103\u010d\u0117\u0121\u012b\u0135\u013f\u0149\u0153\u015d\u0167\u0171\u017b\u0185\u018f\u0199\u01a3\u01ad\u01b7\u01c1\u01cb\u01d5\u01df\u01e9\u01f3\u01fd\u0207\u0211\u021b\u0225\u022f\u0239\u0243\u024d\u0257\u0261\u026b\u0275\u027f\u0289\u0293\u029d\u02a7\u02b1\u02bb\u02c5\u02cf\u02d9\u02e3\u02ed\u02f7\u0301\u030b\u0315\u031f\u0329\u0333\u033d\u0347\u0351\u035b\u0365\u036f\u0379\u0383\u038d\u0397\u03a1\u03ab\u03b5\u03bf\u03c9\u03d3\u03dd\u03e7\u03f1\u03fb\u0405\u040f\u0419\u0423\u042d\u0437\u0441\u044b\u0455\u045f\u0469\u0473\u047d\u0487\u0491\u049b\u04a5\u04af\u04b9\u04c3\u04cd\u04d7\u04e1\u04eb\u04f5\u04ff\u0509\u0513\u051d\u0527\u0531\u053b\u0545\u054f\u0559\u0563\u056d\u0577\u0581\u058b\u0595\u059f\u05a9\u05b3\u05bd\u05c7\u05d1\u05db\u05e5\u05ef\u05f9\u0603\u060d\u0617\u0621\u062b\u0635\u063f\u0649\u0653\u065d\u0667\u0671\u067b\u0685\u068f\u0699\u06a3\u06ad\u06b7\u06c1\u06cb\u06d5\u06df\u06e9\u06f3\u06fd\u0707\u0711\u071b\u0725\u072f\u0739\u0743\u074d\u0757\u0761\u076b\u0775\u077f\u0789\u0793\u079d\u07a7\u07b1\u07bb\u07c5\u07cf\u07d9\u07e3\u07ed\u07f7\u0801\u080b\u0815\u081f\u0829\u0833\u083d\u0847\u0851\u085b\u0865\u086f\u0879\u0883\u088d\u0897\u08a1\u08ab\u08b5\u08bf\u08c9\u08d3\u08dd\u08e7\u08f1\u08fb\u0905\u090f\u0919\u0923\u092d\u0937\u0941\u094b\u0955\u095f\u0969\u0973\u097d\u0987\u0991\u099b\u09a5\u09af\u09b9\u09c3\u09cd\u09d7\u09e1\u09eb\u09f5\u09ff\u0a09\u0a13\u0a1d\u0a27\u0a31\u0a3b\u0a45\u0a4f\u0a59\u0a63\u0a6d\u0a77\u0a81\u0a8b\u0a95\u0a9f\u0aa9\u0ab3\u0abd\u0ac7\u0ad1\u0adb\u0ae5\u0aef\u0af9\u0b03\u0b0d\u0b17\u0b21\u0b2b\u0b35\u0b3f\u0b49\u0b53\u0b5d\u0b67\u0b71\u0b7b\u0b85\u0b8f\u0b99\u0ba3\u0bad\u0bb7\u0bc1\u0bcb\u0bd5\u0bdf\u0be9\u0bf3\u0bfd\u0c07\u0c11\u0c1b\u0c25\u0c2f\u0c39\u0c43\u0c4d\u0c57\u0c61\u0c6b\u0c75\u0c7f\u0c89\u0c93\u0c9d\u0ca7\u0cb1\u0cbb\u0cc5\u0ccf\u0cd9\u0ce3\u0ced\u0cf7\u0d01\u0d0b\u0d15\u0d1f\u0d29\u0d33\u0d3d\u0d47\u0d51\u0d5b\u0d65\u0d6f\u0d79\u0d83\u0d8d\u0d97\u0da1\u0dab\u0db5\u0dbf\u0dc9\u0dd3\u0ddd\u0de7\u0df1\u0dfb\u0e05\u0e0f\u0e19\u0e23\u0e2d\u0e37\u0e41",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid argument: \" + number);\n  }\n  let roman = \"\";\n  let num2roman = { I: \"i\", V: \"v\", X: \"x\", L: \"l\", C: \"c\", D: \"d\", M: \"m\" };\n  for (let i = number; i > 0; i -= 1) {\n    let romanDigit = num2roman[i % 10];\n    roman += romanDigit;\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefined'\n\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmpeppznvij.js:26:12)\n    at Object.<anonymous> (/tmp/tmpeppznvij.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedunde",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let num = (number < 1) ? 1 : number;\n  let numStr = \"\";\n  let numStrArr = [];\n  let numStrArr2 = [];\n  let numStrArr3 = [];\n  let numStrArr4 = [];\n  let numStrArr5 = [];\n  let numStrArr6 = [];\n  let numStrArr7 = [];\n  let numStrArr8 = [];\n  let numStrArr9 = [];\n  let numStrArr10 = [];\n  let numStrArr11 = [];\n  let numStrArr12 = [];\n  let numStrArr13 = [];\n  let numStrArr14 = [];\n  let numStrArr15 = [];\n  let numStrArr16 = [];\n  let numStrArr17 = [];\n  let numStrArr18 = [];\n  let numStrArr19 = [];\n  let numStrArr20 = [];\n  let numStrArr21 = [];\n  let numStrArr22 = [];\n  let numStrArr23 = [];\n  let numStrArr24 = [];\n  let numStrArr25 = [];\n  let numStrArr26 = [];\n  let numStrArr27 = [];\n  let numStrArr28 = [];\n  let numStrArr29 = [];\n  let numStrArr30 = [];\n  let numStrArr31 = [];\n  let numStrArr32 = [];\n  let numStrArr33 = [];\n  let numStrArr34 = [];\n  let numStrArr35 = [];\n  let numStrArr36 = [];\n  let numStrArr37 = [];\n  let numStrArr38 = [];\n  let numStrArr39 = [];\n  let numStrArr40 = [];\n  let numStrArr41 = [];\n  let numStrArr42 = [];\n  let numStrArr43 = [];\n  let numStrArr44 = [];\n  let numStrArr45 = [];\n  let numStrArr46 = [];\n  let numStrArr47 = [];\n  let numStrArr48 = [];\n  let numStrArr49 = [];\n  let numStrArr50 = [];\n  let numStrArr51 = [];\n  let numStrArr52 = [];\n  let numStrArr53 = [];\n  let numStrArr54 = [];\n  let numStrArr55 = [];\n  let numStrArr56 = [];\n  let numStrArr57 = [];\n  let numStrArr58 = [];\n  let numStrArr59 = [];\n  let numStrArr60 = [];\n  let numStrArr61 = [];\n  let numStrArr62 = [];\n  let numStrArr63 = [];\n  let numStrArr64 = [];\n  let numStrArr65 = [];\n  let numStrArr66 = [];\n  let numStrArr67 = [];\n  let numStrArr68 = [];\n  let numStrArr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_q05z80h.ts(106,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => ROMAN_NUMBERS[i]);\n  const roman_number = roman.indexOf(number);\n  return roman_number < 0 ? \"\" : roman[roman_number];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9497ey30.ts(15,63): error TS2552: Cannot find name 'ROMAN_NUMBERS'. Did you mean 'roman_number'?\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7q6omalz.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => {\n    const romanNumerals = [\n      \"\",\n      \"M\",\n      \"CM\",\n      \"D\",\n      \"CD\",\n      \"C\",\n      \"XC\",\n      \"L\",\n      \"XL\",\n      \"X\",\n      \"IX\",\n      \"V\",\n      \"IV\",\n      \"I\",\n    ];\n    const romanNumeral = romanNumerals[i % 10];\n    return romanNumeral;\n  });\n\n  const romanString = roman[number - 1];\n  return romanString.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'xl'\n\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmpeqvfpec9.js:41:12)\n    at Object.<anonymous> (/tmp/tmpeqvfpec9.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'xl',\n  expected: 'xix',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let roman_numerals: string[] = [];\n  let roman_numeral_map: Map<string, number> = new Map();\n  let roman_numeral_map_reverse: Map<number, string> = new Map();\n  let roman_numeral_map_reverse2: Map<number, string> = new Map();\n  let roman_numeral_map_reverse3: Map<number, string> = new Map();\n  let roman_numeral_map_reverse4: Map<number, string> = new Map();\n  let roman_numeral_map_reverse5: Map<number, string> = new Map();\n  let roman_numeral_map_reverse6: Map<number, string> = new Map();\n  let roman_numeral_map_reverse7: Map<number, string> = new Map();\n  let roman_numeral_map_reverse8: Map<number, string> = new Map();\n  let roman_numeral_map_reverse9: Map<number, string> = new Map();\n  let roman_numeral_map_reverse10: Map<number, string> = new Map();\n  let roman_numeral_map_reverse11: Map<number, string> = new Map();\n  let roman_numeral_map_reverse12: Map<number, string> = new Map();\n  let roman_numeral_map_reverse13: Map<number, string> = new Map();\n  let roman_numeral_map_reverse14: Map<number, string> = new Map();\n  let roman_numeral_map_reverse15: Map<number, string> = new Map();\n  let roman_numeral_map_reverse16: Map<number, string> = new Map();\n  let roman_numeral_map_reverse17: Map<number, string> = new Map();\n  let roman_numeral_map_reverse18: Map<number, string> = new Map();\n  let roman_numeral_map_reverse19: Map<number, string> = new Map();\n  let roman_numeral_map_reverse20: Map<number, string> = new Map();\n  let roman_numeral_map_reverse21: Map<number, string> = new Map();\n  let roman_numeral_map_reverse22: Map<number, string> = new Map();\n  let roman_numeral_map_reverse23: Map<number, string> = new Map();\n  let roman_numeral_map_reverse24: Map<number, string> = new Map();\n  let roman_numeral_map_reverse25: Map<number, string> = new Map();\n  let roman_numeral_map_reverse26: Map<number, string> = new Map();\n  let roman_numeral_map_reverse27: Map<number, string> = new Map();\n  let roman_numeral_map_reverse28: Map<number, string> = new Map();\n  let roman_numeral_map_reverse29: Map<number, string> = new Map();\n  let roman_numeral_map_reverse30: Map<number, string> = new Map();\n  let roman_numeral_map_reverse\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr0ccl2rp.ts(68,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7q6omalz.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n\n  let roman = \"\";\n  let numeral = \"\";\n\n  for (let i = 1; i <= number; i++) {\n    numeral = int_to_roman(i);\n    roman += numeral;\n  }\n\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplb1ea_w5.ts(20,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = roman_numeral_map[number];\n  if (!roman) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk6duzntu.ts(15,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input\");\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(\n    (_, i) => roman_numerals[i]\n  );\n  return roman.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgkahsad7.ts(16,15): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = roman_numeral_map[number];\n  if (roman === undefined) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp33rp842p.ts(12,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  const roman = roman_numerals(number);\n  return roman.map(romanString => romanString.toLowerCase()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn2ghxq7n.ts(15,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let num = 0;\n  let numStr = \"\";\n  while (number > 0) {\n    numStr += int_to_roman(number % 10);\n    number /= 10;\n  }\n  while (numStr.length > 0) {\n    roman += numStr.slice(0, 1);\n    numStr = numStr.slice(1);\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9tjtg5ls.ts(16,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu6qua800.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhg_9u9_.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let num: number = number;\n  while (num > 0) {\n    const remainder: number = num % 10;\n    roman += mini_roman[remainder];\n    num /= 10;\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqh72c0s4.ts(16,14): error TS2304: Cannot find name 'mini_roman'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let roman_numerals: string[] = [];\n  let numerals: string[] = [];\n  let numerals_map: Map<string, number> = new Map();\n  let numerals_map_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<string, number> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse_inverse_inverse_inverse: Map<number, string> = new Map();\n  let numerals_map_inverse_roman_map_reverse_inverse\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq8swboj8.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n  const roman = roman_numerals(number);\n  return roman.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj09zbr2f.ts(15,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArr = numStr.split(\"\");\n  let numStrArrLen = numStrArr.length;\n  let numStrArrMax = numStrArrLen > 0 ? numStrArr[numStrArrLen - 1] : \"\";\n  let numStrArrMaxLen = numStrArrMax.length;\n  let numStrArrMaxIndex = numStrArrLen - 1;\n  let numStrArrMaxIndexLen = numStrArrMaxIndex.length;\n  let numStrArrMaxIndexLast = numStrArrMaxIndexLen - 1;\n  let numStrArrMaxIndexLastLen = numStrArrMaxIndexLast.length;\n  let numStrArrMaxIndexLastLast = numStrArrMaxIndexLastLen - 1;\n  let numStrArrMaxIndexLastLastLen = numStrArrMaxIndexLastLast.length;\n  let numStrArrMaxIndexLastLastLast = numStrArrMaxIndexLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLen = numStrArrMaxIndexLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLast = numStrArrMaxIndexLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLen = numStrArrMaxIndexLastLastLastLast.length;\n  let numStrArrMaxIndexLastLastLastLastLast = numStrArrMaxIndexLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLastLastLastLastLastLastLastLastLen = numStrArrMaxIndexLastLastLastLastLastLastLastLastLastLen - 1;\n  let numStrArrMaxIndexLast\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp_mdecut.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo7m8ffpg.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\",\n    temp: number = 0;\n  for (let i = 1; i <= number; i++) {\n    temp = i;\n    while (temp > 0) {\n      roman += mini_roman[temp % 10];\n      temp /= 10;\n    }\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdsotpxxq.ts(17,16): error TS2304: Cannot find name 'mini_roman'.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let numerals: string[] = [];\n  let num: number = number;\n  while (num > 0) {\n    let remainder: number = num % 10;\n    numerals.push(remainder);\n    num /= 10;\n  }\n  for (let i = 0; i < numerals.length; i++) {\n    let numeral: number = numerals[i];\n    let romanNumeral: string = roman_numerals[numeral];\n    roman += romanNumeral;\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6ghxc33l.ts(17,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp6ghxc33l.ts(21,9): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp6ghxc33l.ts(22,32): error TS2552: Cannot find name 'roman_numerals'. Did you mean 'romanNumeral'?\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArray = numStr.split(\"\");\n  let numStrArrayLen = numStrArray.length;\n  let numStrArrayMax = numStrArrayLen - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMinIndex = 0;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMin = numStrArray[0];\n  let numStrArrayMax = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMinIndex = numStrArrayMax - 1;\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArray\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5d1g27j2.ts(75,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpszcma4g2.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333802
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input\");\n  }\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => i.toString()).join(\"\");\n  const roman_numeral = Array(number).fill(0).map((_, i) => i).map(i => roman[i]).join(\"\");\n  return roman_numeral.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0123456789101112131'\n\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmp55g5ufoc.js:22:12)\n    at Object.<anonymous> (/tmp/tmp55g5ufoc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0123456789101112131',\n  expected: 'xix',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n\n  const roman = Array(1000).fill(null).map((_, i) => {\n    const romanNumerals = Array(1000).fill(null).map((_, j) => {\n      if (j === 0) return null;\n      if (i === 0) return j;\n      if (j > 0) return j - 1;\n      if (j === 1) return j;\n      return j + 10;\n    });\n\n    const romanNumeral = romanNumerals[number - 1];\n    return romanNumeral ? romanNumeral : null;\n  });\n\n  return roman.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nn\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmprsgi7i1c.js:35:12)\n    at Object.<anonymous> (/tmp/tmprsgi7i1c.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4kozir73.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = roman_numeral_map[number];\n  if (!roman) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5l1ykxd8.ts(12,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo7m8ffpg.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => roman_numerals[i]);\n  return roman.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpivgqsc_u.ts(16,69): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string[] = [];\n  let num: number = number;\n  while (num > 0) {\n    let remainder: number = num % 10;\n    roman.push(remainder);\n    num = Math.floor(num / 10);\n  }\n  let roman_array: string[] = [];\n  for (let i = 0; i < roman.length; i++) {\n    roman_array.push(roman[i].toString());\n  }\n  let roman_array2: string[] = [];\n  for (let i = 0; i < roman_array.length; i++) {\n    roman_array2.push(roman_array[i].substring(0, 1));\n  }\n  let roman_array3: string[] = [];\n  for (let i = 0; i < roman_array2.length; i++) {\n    roman_array3.push(roman_array2[i].toUpperCase());\n  }\n  let roman_array4: string[] = [];\n  for (let i = 0; i < roman_array3.length; i++) {\n    roman_array4.push(roman_array3[i]);\n  }\n  let roman_array5: string[] = [];\n  for (let i = 0; i < roman_array4.length; i++) {\n    roman_array5.push(roman_array4[i].substring(0, 1));\n  }\n  let roman_array6: string[] = [];\n  for (let i = 0; i < roman_array5.length; i++) {\n    roman_array6.push(roman_array5[i].toUpperCase());\n  }\n  let roman_array7: string[] = [];\n  for (let i = 0; i < roman_array6.length; i++) {\n    roman_array7.push(roman_array6[i]);\n  }\n  let roman_array8: string[] = [];\n  for (let i = 0; i < roman_array7.length; i++) {\n    roman_array8.push(roman_array7[i].substring(0, 1));\n  }\n  let roman_array9: string[] = [];\n  for (let i = 0; i < roman_array8.length; i++) {\n    roman_array9.push(roman_array8[i].toUpperCase());\n  }\n  let roman_array10: string[] = [];\n  for (let i = 0; i < roman_array9.length; i++) {\n    roman_array10.push(roman_array9[i]);\n  }\n  let roman_array11: string[] = [];\n  for (let i = 0; i < roman_array10.length; i++) {\n    roman_array11.push(roman_array10[i].substring(0, 1));\n  }\n  let roman_array12: string[] = [];\n  for (let i = 0; i < roman_array11.length; i++) {\n    roman_array12.push(roman_array11[i].toUpperCase());\n  }\n  let roman_array13: string[] = [];\n  for (let i = 0; i < roman_array12.length; i++) {\n    roman_array13.push(roman_array12[i]);\n  }\n  let roman_array14: string[] = [];\n  for (let i = 0; i < roman_array13.length; i++) {\n    roman_array14.push(roman_array13[i].substring(0, 1));\n  }\n  let ro\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzoyvh9_c.ts(98,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7q6omalz.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let roman_numerals = roman_numerals_map;\n  let roman_numeral_length = roman_numerals.length;\n  let roman_numeral_length_minus_one = roman_numeral_length - 1;\n  let roman_numeral_length_minus_two = roman_numeral_length_minus_one - 1;\n  let roman_numeral_length_minus_three = roman_numeral_length_minus_two - 1;\n  let roman_numeral_length_minus_four = roman_numeral_length_minus_three - 1;\n  let roman_numeral_length_minus_five = roman_numeral_length_minus_four - 1;\n  let roman_numeral_length_minus_six = roman_numeral_length_minus_five - 1;\n  let roman_numeral_length_minus_seven = roman_numeral_length_minus_six - 1;\n  let roman_numeral_length_minus_eight = roman_numeral_length_minus_seven - 1;\n  let roman_numeral_length_minus_nine = roman_numeral_length_minus_eight - 1;\n  let roman_numeral_length_minus_ten = roman_numeral_length_minus_nine - 1;\n  let roman_numeral_length_minus_eleven = roman_numeral_length_minus_ten - 1;\n  let roman_numeral_length_minus_twelve = roman_numeral_length_minus_eleven;\n  let roman_numeral_length_minus_thirteen = roman_numeral_length_minus_twelve - 1;\n  let roman_numeral_length_minus_fourteen = roman_numeral_length_minus_thirteen - 1;\n  let roman_numeral_length_minus_fifteen = roman_numeral_length_minus_fourteen - 1;\n  let roman_numeral_length_minus_sixteen = roman_numeral_length_minus_fifteen - 1;\n  let roman_numeral_length_minus_seventeen = roman_numeral_length_minus_sixteen - 1;\n  let roman_numeral_length_minus_eighteen = roman_numeral_length_minus_seventeen - 1;\n  let roman_numeral_length_minus_nineteen = roman_numeral_length_minus_eighteen - 1;\n  let roman_numeral_length_minus_twenty = roman_numeral_length_minus_nineteen - 1;\n  let roman_numeral_length_minus_twenty_one = roman_numeral_length_minus_twenty - \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmkimqfda.ts(36,9): error TS1005: ',' expected.\n../../../../tmp/tmpmkimqfda.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input\");\n  }\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => roman_numerals[i]);\n  const roman_string = roman.map(i => roman_numerals[i]).join(\"\");\n  const roman_numeral = roman_numerals[number - 1];\n  return roman_string + roman_numeral;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpacabws8x.ts(15,63): error TS2552: Cannot find name 'roman_numerals'. Did you mean 'roman_numeral'?\n../../../../tmp/tmpacabws8x.ts(16,39): error TS2552: Cannot find name 'roman_numerals'. Did you mean 'roman_numeral'?\n../../../../tmp/tmpacabws8x.ts(17,25): error TS2552: Cannot find name 'roman_numerals'. Did you mean 'roman_numeral'?\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\";\n  let num: number = number;\n  let base: number = 10;\n  while (num > 0) {\n    let remainder: number = num % base;\n    roman += mini_roman[remainder];\n    num /= base;\n    base *= 10;\n  }\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpruygrtci.ts(17,14): error TS2304: Cannot find name 'mini_roman'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhg_9u9_.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = '';\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArray = numStr.split('');\n  let numStrArrayLen = numStrArray.length;\n  let numStrArrayMax = numStrArrayLen;\n  while (numStrArrayLen > 3) {\n    numStrArrayMax--;\n    numStrArrayLen--;\n  }\n  let numStrArrayMaxIndex = numStrArrayMax - 1;\n  let numStrArrayMaxValue = numStrArray[numStrArrayMaxIndex];\n  let numStrArrayMaxValueLen = numStrArrayMaxValue.length;\n  let numStrArrayMaxValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueLen = numStrArrayMaxValueIndex + 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValueIndex = numStrArrayMaxValue.length - 1;\n  let numStrArrayMaxValueValue\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppp44dqwj.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  let roman_array = roman.split('');\n  let roman_array_sorted = roman_array.sort();\n  let roman_array_reversed = roman_array_sorted.reverse();\n  let roman_array_joined = roman_array_reversed.join('');\n  return roman_array_joined.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp56ikl4jd.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76a6sdzh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => {\n    const romanNumerals = [\n      \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ];\n    const romanNumeral = romanNumerals[i];\n    const romanNumeralIndex = romanNumerals.indexOf(romanNumeral);\n    const romanNumeralLength = romanNumerals.length;\n    const romanNumeralIndex = romanNumeralIndex + 1;\n\n    return romanNumeralIndex === i ? romanNumeral : romanNumerals[romanNumeralIndex];\n  });\n\n  return roman.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_vp7m2lu.ts(21,11): error TS2451: Cannot redeclare block-scoped variable 'romanNumeralIndex'.\n../../../../tmp/tmp_vp7m2lu.ts(23,11): error TS2451: Cannot redeclare block-scoped variable 'romanNumeralIndex'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhg_9u9_.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]+/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuuf9vswh.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => roman_numerals[i]);\n  return roman[number - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphgba_vlt.ts(15,63): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, '');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph3t9j7ui.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => ROMAN_NUMBERS[i]);\n\n  return roman[number - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpizu72f1z.ts(16,63): error TS2304: Cannot find name 'ROMAN_NUMBERS'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string = \"\",\n    numerals: string[] = \"\",\n    numerals_length: number = 0,\n    numerals_string: string = \"\";\n  \n  if(number < 1 || number > 1000) {\n    return \"\";\n  }\n  \n  while(number >= 1000) {\n    numerals_length = Math.floor(number / 1000);\n    numerals_string = numerals_length.toString();\n    numerals = numerals.concat(numerals_string);\n    numerals = numerals.concat(\"M\");\n    number = number % 1000;\n  }\n  \n  numerals_length = Math.floor(number);\n  numerals_string = numerals_length.toString();\n  numerals = numerals.concat(numerals_string);\n  numerals = numerals.concat(\"CM\");\n  \n  while(number >= 100) {\n    numerals_length = Math.floor(number / 100);\n    numerals_string = numerals_length.toString();\n    numerals = numerals.concat(numerals_string);\n    numerals = numerals.concat(\"D\");\n    number = number % 100;\n  }\n  \n  numerals_length = Math.floor(number);\n  numerals_string = numerals_length.toString();\n  numerals = numerals.concat(numerals_string);\n  numerals = numerals.concat(\"CD\");\n  \n  while(number >= 10) {\n    numerals_length = Math.floor(number / 10);\n    numerals_string = numerals_length.toString();\n    numerals = numerals.concat(numerals_string);\n    numerals = numerals.concat(\"C\");\n    number = number % 10;\n  }\n  \n  numerals_length = Math.floor(number);\n  numerals_string = numerals_length.toString();\n  numerals = numerals.concat(numerals_string);\n  numerals = numerals.concat(\"XC\");\n  \n  while(number >= 1) {\n    numerals_length = Math.floor(number / 1);\n    numerals_string = numerals_length.toString();\n    numerals = numerals.concat(numerals_string);\n    numerals = numerals.concat(\"L\");\n    number = number % 1;\n  }\n  \n  numerals_length = Math.floor(number);\n  numerals_string = numerals_length.toString();\n  numerals = numerals.concat(numerals_string);\n  numerals = numerals.concat(\"XL\");\n  \n  while(number \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3kvss1cv.ts(74,1): error TS1005: ')' expected.\n../../../../tmp/tmp3kvss1cv.ts(96,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  let roman_array = roman.split('');\n  let roman_array_sorted = roman_array.sort();\n  let roman_array_reversed = roman_array_sorted.reverse();\n  let roman_array_joined = roman_array_reversed.join('');\n  let roman_array_joined_lowercase = roman_array_joined.toLowerCase();\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/ii/, 'i');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase.replace(/x/, '');\n  let roman_array_joined_lowercase = roman_array_joined_lowercase\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp085ns1r_.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(\"Invalid input\");\n  }\n  let roman = \"\";\n  let numeral = \"\";\n  let numerals = [\"c\", \"l\", \"x\", \"i\"];\n  let romans = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n  let romans_index = 0;\n  let numeral_index = 0;\n  while (number > 0) {\n    numeral = numerals[numeral_index % 4];\n    roman += romans[romans_index++ % 7];\n    number -= Math.pow(10, numeral_index % 4) * Math.pow(10, numeral_index % 4);\n    numeral_index++;\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'iii'\n\nshould loosely deep-equal\n\n'xix'\n    at test (/tmp/tmpthlw20hc.js:32:12)\n    at Object.<anonymous> (/tmp/tmpthlw20hc.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'iii',\n  expected: 'xix',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  let mini = roman.substr(0, roman.length - 1);\n  return mini;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpej6vyn8e.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333805
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpszcma4g2.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333802
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  let roman = '';\n  let nums = Array.from(Array(number).keys());\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    let romanNum = roman_numeral(num);\n    roman += romanNum;\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0180e30j.ts(19,20): error TS2304: Cannot find name 'roman_numeral'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76a6sdzh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu6qua800.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string[] = [];\n  let num: number = number;\n  while (num > 0) {\n    let remainder: number = num % 10;\n    roman.push(String.fromCharCode(alphabet.indexOf(remainder)));\n    num = Math.floor(num / 10);\n  }\n  return roman.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjkzkvsb_.ts(16,36): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.charAt(0).toLowerCase() + roman.slice(1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3zdssneh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = \"\";\n  let numStr = number.toString();\n  let numStrLen = numStr.length;\n  let numStrArray = numStr.split(\"\");\n  let numStrArrayLen = numStrArray.length;\n  let numStrArrayMax = numStrArrayLen;\n  let numStrArrayMin = numStrArrayLen;\n  let numStrArraySum = numStrArrayLen;\n  let numStrArraySumMax = numStrArrayLen;\n  let numStrArraySumMin = numStrArrayLen;\n  let numStrArraySumSum = numStrArrayLen;\n  let numStrArraySumSumMax = numStrArrayLen;\n  let numStrArraySumSumMin = numStrArrayLen;\n  let numStrArraySumSumSum = numStrArrayLen;\n  let numStrArraySumSumSumMax = numStrArrayLen;\n  let numStrArraySumSumSumMin = numStrArrayLen;\n  let numStrArraySumSumSumSum = numStrArrayLen;\n  let numStrArraySumSumSumSumMax = numStrArrayLen;\n  let numStrArraySumSumSumSumMin = numStrArrayLen;\n  let numStrArraySumSumSumSumSum = numStrArrayLen;\n  let numStrArraySumSumSumSumMax = numStrArrayLen;\n  let numStrArraySumSumSumSumMin = numStrArrayLen;\n  let numStrArraySumSumSumSumSum = numStrArrayLen;\n  let numStrArraySumSumSumSumSumMax = numStrArrayLen;\n  let numStrArraySumSumSumSumSumMin = numStrArrayLen;\n  let numStrArraySumSumSumSumSumSum = numStrArrayLen;\n  let numStrArraySumSumSumSumSumMax = numStrArrayLen;\n  let numStrArraySumSumSumSumSumMin = numStrArrayLen;\n  let numStrArraySumSumSumSumSumSum = numStrArrayLen;\n  let numStrArraySumSumSumSumSumSumMax = numStrArrayLen;\n  let numStrArraySumSumSumSumSumMin = numStrArrayLen;\n  let numStrArraySumSumSumSumSumSumSum = numStrArrayLen;\n  let numStrArraySumSumSumSumSumSumMax = numStrArrayLen;\n  let numStrArraySumSumSumSumSumSumMin = numStrArrayLen;\n  let numStrArraySumSumSumSumSumSumSum = numStrArrayLen;\n  let numStr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4y5j2iwt.ts(70,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n\n  const roman = roman_numeral_map[number];\n  if (!roman) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n\n  return roman;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnpbb0dqv.ts(16,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333916
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = roman_numerals(number);\n  return roman.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspayti2f.ts(15,17): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string[] = [];\n  let num: number = number;\n  let numStr: string = num.toString();\n  let numStrLen: number = numStr.length;\n  let numDigits: number = numStrLen;\n  let numDiv: number = numStrLen - 1;\n  let numDiv2: number = numDiv;\n  let numDiv3: number = numDiv2;\n  let numDiv4: number = numDiv3;\n  let numDiv5: number = numDiv4;\n  let numDiv6: number = numDiv5;\n  let numDiv7: number = numDiv6;\n  let numDiv8: number = numDiv7;\n  let numDiv9: number = numDiv8;\n  let numDiv10: number = numDiv9;\n  let numDiv11: number = numDiv10;\n  let numDiv12: number = numDiv11;\n  let numDiv13: number = numDiv12;\n  let numDiv14: number = numDiv13;\n  let numDiv15: number = numDiv14;\n  let numDiv16: number = numDiv15;\n  let numDiv17: number = numDiv16;\n  let numDiv18: number = numDiv17;\n  let numDiv19: number = numDiv18;\n  let numDiv20: number = numDiv19;\n  let numDiv21: number = numDiv20;\n  let numDiv22: number = numDiv21;\n  let numDiv23: number = numDiv22;\n  let numDiv24: number = numDiv23;\n  let numDiv25: number = numDiv24;\n  let numDiv26: number = numDiv25;\n  let numDiv27: number = numDiv26;\n  let numDiv28: number = numDiv27;\n  let numDiv29: number = numDiv28;\n  let numDiv30: number = numDiv29;\n  let numDiv31: number = numDiv30;\n  let numDiv32: number = numDiv31;\n  let numDiv33: number = numDiv32;\n  let numDiv34: number = numDiv33;\n  let numDiv35: number = numDiv34;\n  let numDiv36: number = numDiv35;\n  let numDiv37: number = numDiv36;\n  let numDiv38: number = numDiv37;\n  let numDiv39: number = numDiv38;\n  let numDiv40: number = numDiv39;\n  let numDiv41: number = numDiv40;\n  let numDiv42: number = numDiv41;\n  let numDiv43: number = numDiv42;\n  let numDiv44: number = numDiv43;\n  let numDiv45: number = numDiv\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxregucaf.ts(84,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333916
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ld7y3pa.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu6qua800.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4kozir73.ts(12,15): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => roman_numerals[i]);\n  const roman_numeral_array: number[] = roman.map(i => parseInt(i));\n  const roman_numeral_string: string = roman_numeral_array.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return `${acc}${curr}`;\n    }\n    return `${acc}${roman_numerals[curr]}`;\n  }, '');\n\n  return roman_numeral_string.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyhqonwi8.ts(16,63): error TS2304: Cannot find name 'roman_numerals'.\n../../../../tmp/tmpyhqonwi8.ts(22,21): error TS2304: Cannot find name 'roman_numerals'.\n",
      "timestamp": 1660333916
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid input');\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8aoyjix8.ts(15,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333916
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman_to_mini_roman(roman);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpevq00hlm.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n../../../../tmp/tmpevq00hlm.ts(13,10): error TS2552: Cannot find name 'roman_to_mini_roman'. Did you mean 'int_to_mini_roman'?\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  let roman: string[] = [];\n  let num: number = number;\n  while (num > 0) {\n    let remainder: number = num % 10;\n    roman.push(remainder);\n    num /= 10;\n  }\n  let romanString: string = roman.join('');\n  let romanStringLower: string = romanString.toLowerCase();\n  return romanStringLower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpti08igmu.ts(16,16): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660333916
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0whrhtz.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.charAt(0).toLowerCase() + roman.slice(1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3zdssneh.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333801
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid input: ${number}`);\n  }\n  const roman = Array(1000).fill(0).map((_, i) => i).map(i => roman_numerals[i]);\n  const roman_numeral_to_int = (roman_numeral: string): number =>\n    roman_numeral.split('').map(c => roman_numerals.indexOf(c)).join('');\n  const int_to_roman = (int: number): string =>\n    roman.map(i => roman_numerals[int_to_roman_numeral(i)]).join('');\n  const int_to_roman_numeral = (int: number): string =>\n    roman.map(i => roman_numerals[i]).indexOf(int) + 1;\n  const int_to_mini_roman = (int: number): string =>\n    roman.map(i => roman_numerals[int_to_roman_numeral(i)]).join('');\n  const int_to_mini_roman_numeral = (int: number): string =>\n    roman.map(i => roman_numerals[i]).indexOf(int) + 1;\n  const int_to_mini_roman_numeral_to_int = (roman_numeral: string): number =>\n    roman_numeral.split('').map(c => roman_numerals.indexOf(c)).join('');\n  const int_to_mini_roman_numeral_to_roman = (roman_numeral: string): string =>\n    roman_numeral.split('').map(c => roman_numerals.indexOf(c)).join('');\n  const roman_numeral_to_mini_roman = (roman_numeral: string): string =>\n    roman_numeral.split('').map(c => roman_numerals.indexOf(c)).join('');\n  const roman_numeral_to_mini_roman_numeral = (roman_numeral: string): string =>\n    roman_numeral.split('').map(c => roman_numerals.indexOf(c)).join('');\n  const roman_numeral_to_mini_roman_numeral_to_int = (roman_numeral: string): number =>\n    roman_numeral.split('').map(c => roman_numerals.indexOf(c)).join('');\n  const roman_numeral_to_mini_roman_numeral_to_roman = (roman_numeral: string): string =>\n    roman_numeral.split('').map(c => roman_numerals.indexOf(c)).join('');\n  const mini_roman_to_int = (mini_roman: string): number =>\n    mini_roman.split('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt9od3g6u.ts(39,23): error TS1002: Unterminated string literal.\n../../../../tmp/tmpt9od3g6u.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpt9od3g6u.ts(40,9): error TS1005: ',' expected.\n../../../../tmp/tmpt9od3g6u.ts(62,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333916
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2clrsfac.ts(12,17): error TS2304: Cannot find name 'int_to_roman'.\n",
      "timestamp": 1660333798
    },
    {
      "exit_code": 2,
      "program": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = roman_numeral_map[number];\n  if (!roman) {\n    throw new Error(`Invalid number ${number}`);\n  }\n  return roman.toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk6duzntu.ts(15,17): error TS2304: Cannot find name 'roman_numeral_map'.\n",
      "timestamp": 1660333798
    }
  ]
}